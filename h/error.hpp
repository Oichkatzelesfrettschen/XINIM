#pragma once
#ifndef H_ERROR_HPP
#define H_ERROR_HPP

// Modernized for C++23
#include "../include/defs.hpp" // Added for consistency and potential common types

// Avoid clashes with system errno macros
#ifdef EPERM
#undef EPERM
#undef ENOENT
#undef ESRCH
#undef EINTR
#undef EIO
#undef ENXIO
#undef E2BIG
#undef ENOEXEC
#undef EBADF
#undef ECHILD
#undef EAGAIN
#undef ENOMEM
#undef EACCES
#undef EFAULT
#undef ENOTBLK
#undef EBUSY
#undef EEXIST
#undef EXDEV
#undef ENODEV
#undef ENOTDIR
#undef EISDIR
#undef EINVAL
#undef ENFILE
#undef EMFILE
#undef ENOTTY
#undef ETXTBSY
#undef EFBIG
#undef ENOSPC
#undef ESPIPE
#undef EROFS
#undef EMLINK
#undef EPIPE
#undef EDOM
#undef ERANGE
#endif

/* Error codes.  They are negative since a few system calls, such as READ, can
 * either return a positive number indicating success, or an error code.
 */

// Count of standard error codes
constexpr int NERROR = 34;

// Success value used throughout the system
constexpr int OK = 0; // Consistent with xinim::OK

// Scoped enumeration of error codes.  All values are negative so that system
// calls can return either a positive result or an error code.
enum class ErrorCode : int {
    ERROR = -1,    // Generic error
    EPERM = -1,    // Operation not permitted
    ENOENT = -2,   // No such file or directory
    ESRCH = -3,    // No such process
    EINTR = -4,    // Interrupted system call
    EIO = -5,      // I/O error
    ENXIO = -6,    // No such device or address
    E2BIG = -7,    // Arg list too long
    ENOEXEC = -8,  // Exec format error
    EBADF = -9,    // Bad file number
    ECHILD = -10,  // No children
    EAGAIN = -11,  // Try again
    ENOMEM = -12,  // Out of memory
    EACCES = -13,  // Permission denied
    EFAULT = -14,  // Bad address
    ENOTBLK = -15, // Block device required
    EBUSY = -16,   // Resource busy
    EEXIST = -17,  // File exists
    EXDEV = -18,   // Cross-device link
    ENODEV = -19,  // No such device
    ENOTDIR = -20, // Not a directory
    EISDIR = -21,  // Is a directory
    EINVAL = -22,  // Invalid argument
    ENFILE = -23,  // File table overflow
    EMFILE = -24,  // Too many open files
    ENOTTY = -25,  // Not a typewriter
    ETXTBSY = -26, // Text file busy
    EFBIG = -27,   // File too large
    ENOSPC = -28,  // No space left on device
    ESPIPE = -29,  // Illegal seek
    EROFS = -30,   // Read-only file system
    EMLINK = -31,  // Too many links
    EPIPE = -32,   // Broken pipe
    EDOM = -33,    // Math argument
    ERANGE = -34,  // Result too large

    E_LOCKED = -101,      // Table locked
    E_BAD_CALL = -102,    // Bad system call
    E_LONG_STRING = -103, // String is too long
    EOF_ERROR = -104,     // End of file for drivers

    // The following error codes are generated by the kernel itself
    E_BAD_DEST = -1,   // destination address illegal
    E_BAD_SRC = -2,    // source address illegal
    E_TRY_AGAIN = -3,  // tables full
    E_OVERRUN = -4,    // interrupt for task that is not waiting
    E_BAD_BUF = -5,    // message buffer outside caller address space
    E_TASK = -6,       // can't send to task
    E_NO_MESSAGE = -7, // RECEIVE failed: no message present
    E_NO_PERM = -8,    // ordinary users can't send to tasks
    E_BAD_FCN = -9,    // only valid functions are SEND, RECEIVE, BOTH
    E_BAD_ADDR = -10,  // bad address given to utility routine
    E_BAD_PROC = -11   // bad proc number given to utility
};

#endif // H_ERROR_HPP
