/*=== MINIX MODERNIZATION HEADER BEGIN ===
   This file is part of a work in progress to reproduce the original MINIX simplicity on modern
armv7/arm64, i386-i686/x86_64, and risc-v 32/64 using C++23. Targeting arm64/x86_64 first.
=== MINIX MODERNIZATION HEADER END ===*/

#include "../include/defs.hpp"
#include <stdio.hpp>
#include <stdlib.hpp>

/*
 * Boot sector binary extracted from the original NASM source.
 * This array contains exactly 512 bytes. Fields such as the
 * kernel LBA and entry address are patched by build.c.
 */
static const u8_t boot_sector[512] = {
    0xfa, 0x31, 0xc0, 0x8e, 0xd8, 0x8e, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0xa1, 0xeb, 0x7c, 0xa3,
    0x02, 0x7d, 0x66, 0xa1, 0xf5, 0x7c, 0x66, 0xa3, 0x08, 0x7d, 0x66, 0xa1, 0xf9, 0x7c, 0x66, 0xa3,
    0x0c, 0x7d, 0x8a, 0x16, 0xfd, 0x7c, 0xbe, 0x00, 0x7d, 0xb4, 0x42, 0xcd, 0x13, 0x0f, 0x82, 0xb9,
    0x00, 0xe4, 0x92, 0x0c, 0x02, 0xe6, 0x92, 0x0f, 0x01, 0x16, 0x58, 0x7d, 0x0f, 0x20, 0xc0, 0x66,
    0x83, 0xc8, 0x01, 0x0f, 0x22, 0xc0, 0xea, 0x4b, 0x7c, 0x08, 0x00, 0x66, 0xb8, 0x10, 0x00, 0x8e,
    0xd8, 0x8e, 0xc0, 0x8e, 0xe0, 0x8e, 0xe8, 0x8e, 0xd0, 0xbc, 0x00, 0x00, 0x09, 0x00, 0xb8, 0x18,
    0x7d, 0x00, 0x00, 0x83, 0xc8, 0x03, 0xa3, 0x10, 0x7d, 0x00, 0x00, 0xc7, 0x05, 0x14, 0x7d, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x20, 0x7d, 0x00, 0x00, 0x83, 0xc8, 0x03, 0xa3, 0x18, 0x7d,
    0x00, 0x00, 0xc7, 0x05, 0x10, 0x7d, 0x00, 0x00, 0x1b, 0x7d, 0x00, 0x00, 0xc7, 0x05, 0x14, 0x7d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x05, 0x18, 0x7d, 0x00, 0x00, 0x23, 0x7d, 0x00, 0x00,
    0xb8, 0x10, 0x7d, 0x00, 0x00, 0x0f, 0x22, 0xd8, 0x0f, 0x20, 0xe0, 0x83, 0xc8, 0x20, 0x0f, 0x22,
    0xe0, 0xb9, 0x80, 0x00, 0x00, 0xc0, 0x0f, 0x32, 0x0d, 0x00, 0x01, 0x00, 0x00, 0x0f, 0x30, 0x0f,
    0x20, 0xc0, 0x0d, 0x01, 0x00, 0x00, 0x80, 0x0f, 0x22, 0xc0, 0xea, 0xd1, 0x7c, 0x00, 0x00, 0x18,
    0x00, 0x66, 0xb8, 0x20, 0x00, 0x8e, 0xd8, 0x8e, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x00, 0x09, 0x00,
    0x48, 0x8b, 0x04, 0x25, 0xed, 0x7c, 0x00, 0x00, 0xff, 0xe0, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x90,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x9a, 0xcf, 0x00,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x92, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0xa0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xa0, 0x00, 0x27, 0x00, 0x30, 0x7d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa,

};

int main(int argc, char *argv[]) {
    const char *out = "bootblok";
    FILE *fp;

    if (argc > 1)
        out = argv[1];

    fp = fopen(out, "wb");
    if (!fp) {
        perror("fopen");
        return 1;
    }

    if (fwrite(boot_sector, 1, sizeof(boot_sector), fp) != sizeof(boot_sector)) {
        perror("fwrite");
        fclose(fp);
        return 1;
    }

    fclose(fp);
    return 0;
}
