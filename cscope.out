cscope 15 /app -q 0000006558 0001427720
	@boot.S

1
	g\xa3\xf9i\xda
 .
mu\xc9ibo\xd9_h\x97d\x94


2
	gh\x97d\x94_\xa1\xact
:

3
dd
 0xe85250d6 ;
Mu\xc9ibo\xd92

magic

	$numb\x94
 (
MBOOT2_HEADER_MAGIC
)

4
dd
 0 ;
	$Arch\x99e\xf9u\xbb
 (
\xb4\xd9e\xf9ed

mode

i386
)

5
dd

h\x97d\x94_\x92d
 -
h\x97d\x94_\xa1\xact
 ;
H\x97d\x94

\xcbngth


6
dd
 -(0xe85250d6 + 0 + (
h\x97d\x94_\x92d
 -
h\x97d\x94_\xa1\xact
)\xe8;
Checksum


8 ;
Requ\x9ced

\x8fgs


9 ;
Inf\xdcm\xa9i\xda

\xbbque\xa1

\x8fg


10
dw
 1 ;
	$Ty\xb3
 (
MBI_TAG_TYPE_INFO_REQUEST
)

11
dw
 0 ;
F\xcfgs


12
dd
 8 ;
Size


13 ;
dd
 0 ;
O\xb1iڮ
:
mbi_\x8fg_ty\xb3s
[]

15
h\x97d\x94_\x92d
:

17
\xa3\xf9i\xda
 .
\x8bxt


18
glob\xae

_\xa1\xact


19
kma\x9a


21
_\xa1\xact
:

22
\xfei
 ;
Di\xa7b\xcb

\x9a\x8b\xbcu\xb1s


24 ;
S\x91

up

a

\xa1ack


25
mov

e\xa5
,
\xa1ack_t\xdd


27 ;
Push

Mu\xc9ibo\xd92

\x9afo

to

	`\xa1ack
 (
\xae\xbbady

th\x94e

\xe4om

GRUB
)

28 ;
\xff\xce

kma\x9a


29
push

ebx
 ;
Mu\xc9ibo\xd92

\x9afo

\xa1ru\xf9u\xbb

add\xbbss


30
push

\x97x
 ;
Mu\xc9ibo\xd92

magic

numb\x94


31
\xff\xce

kma\x9a


33 ;
H\xaet

lo\xdd


34 .
h\xaet
:

35
h\xc9


36
jmp
 .
h\xaet


38
\xa3\xf9i\xda
 .
bss


39
\xbbsb
 8192 ;
Re\xa3rve
 8
KB
 
the

\xa1ack


40
\xa1ack_b\xd9tom
:

41
\xa1ack_t\xdd
:

	@commands/ar.cpp

14 
	~"sig\xc7l.h\xb5
"

15 
	~"\xa1\xa9.h\xb5
"

16 
	~<\xac\xbfy
>

17 
	~<c\xa1r\x9ag
>

18 
	~<\xa1r\x9ag
>

19 
	~<\xa1r\x9ag_v\x9bw
>

22
cڡex\xb4
 
	gMAGIC_NUMBER
 = 0177545;

25 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

	$odd
(
\xc4
\xe8{ \x82\xb8& 0x01;
	}
}

28 [[
nodis\xf\xe4d
]]
cڡex\xb4
 
	$ev\x92
(
\xc4
\xe8{ 
	`odd
\xd2r\xe8?\x82\xb8+ 1 :\x82r;
	}
}

31 
	uswabb\x94
 {

32 
	ssw
 {

33 
	mmem_1
;

34 
	mmem_2
;

35 }
	mmem
;

36 
	mjo\x9\xabd
;

37 }
	gsw\xad\xb3d
;

39 
sw\xad
();

42 
	sMEMBER
 {

43 
	mm_\xc7me
[14];

44 
	mm_time_1
;

45 
	mm_time_2
;

46 
	mm_uid
;

47 
	mm_gid
;

48 
	mm_mode
;

49 
	mm_size_1
;

50 
	mm_size_2
;

53
us\x9ag

	gBOOL
 =
bo\xde
;

54
cڡex\xb4

bo\xde

	gFALSE
 =
\xe7l\xa3
;

55
cڡex\xb4

bo\xde

	gTRUE
 =
\x8cue
;

57
cڡex\xb4
 
	gREAD
 = 0;

58
cڡex\xb4
 
	gAPPEND
 = 2;

59
cڡex\xb4
 
	gCREATE
 = 1;

61
cڡex\xb4
 *
	gNIL_PTR
 =
nuαr
;

62
cڡex\xb4

MEMBER
 *
	gNIL_MEM
 =
nuαr
;

63
cڡex\xb4
 *
	gNIL_LONG
 =
nuαr
;

65
cڡex\xb4

	g\xa1d
::
size_t

IO_SIZE
 = 10 * 1024;

66
cڡex\xb4

	g\xa1d
::
size_t

BLOCK_SIZE
 = 1024;

68
\x9al\x9ae
 
	$\xe6ush
(\xe8{
	`\xb4\x9\xa9
(
NIL_PTR
);
	}
}

70
\x9al\x9ae

bo\xde

	$equ\x\xab
(cڡ *
\xa1r1
, cڡ *
\xa1r2
) {

71  !
\xa1d
::
	`\xa1\xbacmp
(
\xa1r1
,
\xa1r2
, 14);

72
	}
}

74
BOOL

	gv\x94bo\xa3
;

75
BOOL

	g\xadp_\xe6
;

76
BOOL

	gex_\xe6
;

77
BOOL

	gshow_\xe6
;

78
BOOL

	g\xb4_\xe6
;

79
BOOL

	g\xbbp_\xe6
;

80
BOOL

	gd\x96_\xe6
;

82 
	g\xac_fd
;

83 
	gmem_time
,
	gmem_size
;

85
	g\xa1d
::
\xac\xbfy
<,
	gIO_SIZE
>
	gio_buf\xe3r
{};

86
	g\xa1d
::
\xac\xbfy
<,
	gBLOCK_SIZE
>
	g\x8brm\x9a\x\xab
{};

88 
	g\x8bmp_\xacch
[] = "/tmp/ar.XXXXX";

90 
	$u\xa7ge
(\xe8{
	`\x94r\xdc
(
TRUE
, "U\xa7ge:\x87\xb8[ad\xb4txv]\x87rchiv\x90[f\x9ee] ...",
NIL_PTR
);
	}
}

92 
	$\x94r\xdc
(
BOOL

qu\x99
, *
\xa1r1
, *
\xa1r2
) {

93
	`wr\x99e
(2,
\xa1r1
,
	`\xa1\xbe\x92
(str1));

94 i\xe0(
\xa1r2
 !\xf0
NIL_PTR
)

95
	`wr\x99e
(2,
\xa1r2
,
	`\xa1\xbe\x92
(str2));

96
	`wr\x99e
(2, "\n", 1);

97 i\xe0(
qu\x99
) {

98 ()
	`uƚk
(
\x8bmp_\xacch
);

99
	`ex\x99
(1);

101
	}
}

103 *
	$ba\xa3\xc7me
(*
\xb7th
) {

104 *
\xb1r
 =
\xb7th
;

105 *
ϡ
 =
NIL_PTR
;

107 *
\xb1r
 != '\0') {

108 i\xe0(*
\xb1r
 == '/')

109
ϡ
 =
\xb1r
;

110
\xb1r
++;

112 i\xe0(
ϡ
 =\xf0
NIL_PTR
)

113 
\xb7th
;

114 i\xe0(*(
ϡ
 + 1) == '\0') {

115 *
ϡ
 = '\0';

116 
	`ba\xa3\xc7me
(
\xb7th
);

118 
ϡ
 + 1;

119
	}
}

121 
	$ݒ_\xacchive
(*
\xc7me
, 
mode
) {

122 
magic
 = 0;

123 
fd
;

125 i\xe0(
mode
 =\xf0
CREATE
) {

126 i\xe0((
fd
 =
	`\xfc\x97t
(
\xc7me
, 0644)) < 0)

127
	`\x94r\xdc
(
TRUE
, "C\xaan\xd9 c\xbb\xa9 ",
\xc7me
);

128
magic
 =
MAGIC_NUMBER
;

129
	`mwr\x99e
(
fd
, &
magic
, (magic));

130 
fd
;

133 i\xe0((
fd
 =
	`ݒ
(
\xc7me
,
mode
)) < 0) {

134 i\xe0(
mode
 =\xf0
APPEND
) {

135 ()
	`\x\xe3o\xa3
(
	`ݒ_\xacchive
(
\xc7me
,
CREATE
));

136
	`\x94r\xdc
(
FALSE
, "\xac: c\xbb\xa9\x9ag ",
\xc7me
);

137 
	`ݒ_\xacchive
(
\xc7me
,
APPEND
);

139
	`\x94r\xdc
(
TRUE
, "C\xaan\xd9 o\xb3\xc0",
\xc7me
);

141 ()
	`l\xa3ek
(
fd
, 0L, 0);

142 ()
	`\xbbad
(
fd
, &
magic
, (magic));

143 i\xe0(
magic
 !\xf0
MAGIC_NUMBER
)

144
	`\x94r\xdc
(
TRUE
,
\xc7me
, " is\x82ot in\x87r format.");

146 
fd
;

147
	}
}

149 
	$\xf\xe1ch
 () {

150 ()
	`uƚk
(
\x8bmp_\xacch
);

151
	`ex\x99
(2);

152
	}
}

154 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

156
\xa1d
::
\xa1r\x9ag_v\x9bw

\xe6ags
 =
\xacgv
[1];

157 
pow
,
pid
;

158 *
\xb1r
 =
nuαr
;

160 i\xe0(
\xacgc
 < 3)

161
	`u\xa7ge
();

163 
\xe6ag
 :
\xe6ags
) {

164 
\xe6ag
) {

166
show_\xe6
 =
TRUE
;

169
v\x94bo\xa3
 =
TRUE
;

172
ex_\xe6
 =
TRUE
;

175
\xadp_\xe6
 =
TRUE
;

178
\xb4_\xe6
 =
TRUE
;

181
d\x96_\xe6
 =
TRUE
;

184
\xbbp_\xe6
 =
TRUE
;

187
	`u\xa7ge
();

191 i\xe0(
\xadp_\xe6
 +
ex_\xe6
 +
d\x96_\xe6
 +
\xbbp_\xe6
 +
show_\xe6
 +
\xb4_\xe6
 != 1)

192
	`u\xa7ge
();

194 i\xe0(
\xbbp_\xe6
 ||
d\x96_\xe6
) {

195
\xb1r
 = &
\x8bmp_\xacch
[8];

196
pid
 =
	`g\x91pid
();

197
pow
 = 10000;

199 
pow
 != 0) {

200 *
\xb1r
++ = (
pid
 /
pow
) + '0';

201
pid
 %\xf0
pow
;

202
pow
 /= 10;

206
	`sig\xc7l
(
SIGINT
,
\xfftch
);

207
	`g\x91
(
\xacgc
,
\xacgv
);

209
	`ex\x99
(0);

210
	}
}

212 
MEMBER
 *
	$g\x91_memb\x94
() {

213 
MEMBER

memb\x94
;

214 
\xbbt
;

216 i\xe0((
\xbbt
 =
	`\xbbad
(
\xac_fd
, &
memb\x94
, (
MEMBER
))) == 0)

217 
NIL_MEM
;

218 i\xe0(
\xbbt
 !\xf0(
MEMBER
))

219
	`\x94r\xdc
(
TRUE
, "C\xdcru\xb1ed\x87rchive.",
NIL_PTR
);

220
mem_time
 =
	`sw\xad
(&(
memb\x94
.
m_time_1
));

221
mem_size
 =
	`sw\xad
(&(
memb\x94
.
m_size_1
));

222  &
memb\x94
;

223
	}
}

225 
	$sw\xad
(
swabb\x94
 *
sw_\xb1r
) {

226
sw\xad\xb3d
.
mem
.
mem_1
 = (
sw_\xb1r
->mem).
mem_2
;

227
sw\xad\xb3d
.
mem
.
mem_2
 = (
sw_\xb1r
->mem).
mem_1
;

229 
sw\xad\xb3d
.
jo\x9\xabd
;

230
	}
}

232 
	$g\x91
(
\xacgc
, *
\xacgv
[]) {

233 
MEMBER
 *
memb\x94
;

234 
i
 = 0;

235 
\x8bmp_fd
,
\xbbad_ch\xacs
;

237
\xac_fd
 =
	`ݒ_\xacchive
(
\xacgv
[2], (
show_\xe6
 ||
\xb4_\xe6
\xe8?
READ
 :
APPEND
);

238 i\xe0(
\xbbp_\xe6
 ||
d\x96_\xe6
)

239
\x8bmp_fd
 =
	`ݒ_\xacchive
(
\x8bmp_\xacch
,
CREATE
);

240 (
memb\x94
 =
	`g\x91_memb\x94
()\xe8!\xf0
NIL_MEM
) {

241 i\xe0(
\xacgc
 > 3) {

242 
i
 = 3; i <
\xacgc
; i++) {

243 i\xe0(
	`equ\x\xab
(
	`ba\xa3\xc7me
(
\xacgv
[
i
]),
memb\x94
->
m_\xc7me
))

246 i\xe0(
i
 =\xf0
\xacgc
 ||
\xadp_\xe6
) {

247 i\xe0(
\xbbp_\xe6
 ||
d\x96_\xe6
) {

248
	`mwr\x99e
(
\x8bmp_fd
,
memb\x94
, (
MEMBER
));

249
	`c\xddy_memb\x94
(
memb\x94
,
\xac_fd
,
\x8bmp_fd
);

251 i\xe0(
\xadp_\xe6
 &&
i
 !\xf0
\xacgc
) {

252
	`\xb4\x9\xa9
(
\xacgv
[
i
]);

253
	`\xb4\x9\xa9
(":\x87lready in\x87rchive.\n");

254
\xacgv
[
i
] = "";

256 ()
	`l\xa3ek
(
\xac_fd
,
	`ev\x92
(
mem_size
), 1);

261 i\xe0(
ex_\xe6
 ||
\xb4_\xe6
)

262
	`ex\x8\xff\xf9
(
memb\x94
);

264 i\xe0(
\xbbp_\xe6
)

265
	`add
(
\xacgv
[
i
],
\x8bmp_fd
, 'r');

266 i\xe0(
show_\xe6
) {

267 i\xe0(
v\x94bo\xa3
) {

268
	`\xb4\x9\xa9_mode
(
memb\x94
->
m_mode
);

269 i\xe0(
memb\x94
->
m_uid
 < 10)

270
	`\xb4\x9\xa9
(" ");

271
	`l\x99\xdf
(0, ()
memb\x94
->
m_uid
);

272
	`\xb4\x9\xa9
("/");

273
	`l\x99\xdf
(0, ()
memb\x94
->
m_gid
);

274
	`l\x99\xdf
(8,
mem_size
);

275
	`d\xa9e
(
mem_time
);

277
	`p_\xc7me
(
memb\x94
->
m_\xc7me
);

278
	`\xb4\x9\xa9
("\n");

279 } i\xe0(
d\x96_\xe6
)

280
	`show
('d',
memb\x94
->
m_\xc7me
);

281 ()
	`l\xa3ek
(
\xac_fd
,
	`ev\x92
(
mem_size
), 1);

283
\xacgv
[
i
] = "";

286 i\xe0(
\xacgc
 > 3) {

287 
i
 = 3; i <
\xacgc
; i++)

288 i\xe0(
\xacgv
[
i
][0] != '\0') {

289 i\xe0(
\xadp_\xe6
)

290
	`add
(
\xacgv
[
i
],
\xac_fd
, 'a');

291 i\xe0(
\xbbp_\xe6
)

292
	`add
(
\xacgv
[
i
],
\x8bmp_fd
, 'a');

294
	`\xb4\x9\xa9
(
\xacgv
[
i
]);

295
	`\xb4\x9\xa9
(":\x82ot found\n");

300
	`\xe6ush
();

302 i\xe0(
\xbbp_\xe6
 ||
d\x96_\xe6
) {

303
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

304 ()
	`\x\xe3o\xa3
(
\xac_fd
);

305 ()
	`\x\xe3o\xa3
(
\x8bmp_fd
);

306
\xac_fd
 =
	`ݒ_\xacchive
(
\xacgv
[2],
CREATE
);

307
\x8bmp_fd
 =
	`ݒ_\xacchive
(
\x8bmp_\xacch
,
APPEND
);

308 (
\xbbad_ch\xacs
 =
	`\xbbad
(
\x8bmp_fd
,
io_buf\xe3r
.
	`d\xa9a
(),
IO_SIZE
)) > 0)

309
	`mwr\x99e
(
\xac_fd
,
io_buf\xe3r
.
	`d\xa9a
(),
\xbbad_ch\xacs
);

310 ()
	`\x\xe3o\xa3
(
\x8bmp_fd
);

311 ()
	`uƚk
(
\x8bmp_\xacch
);

313 ()
	`\x\xe3o\xa3
(
\xac_fd
);

314
	}
}

316 
	$add
(*
\xc7me
, 
fd
, 
mess
) {

317 
MEMBER

memb\x94
;

318 
\xbbad_ch\xacs
;

319 
\xa1\xa9

\xa1\xa9us
;

320 
\xa4c_fd
;

322 i\xe0(
	`\xa1\xa9
(
\xc7me
, &
\xa1\xa9us
) < 0) {

323
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 f\x9ad ",
\xc7me
);

325 } i\xe0((
\xa4c_fd
 =
	`ݒ
(
\xc7me
, 0)) < 0) {

326
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 o\xb3\xc0",
\xc7me
);

330
	`\xa1r\xfdy
(
memb\x94
.
m_\xc7me
,
	`ba\xa3\xc7me
(
\xc7me
));

331
memb\x94
.
m_uid
 =
\xa1\xa9us
.
\xa1_uid
;

332
memb\x94
.
m_gid
 =
\xa1\xa9us
.
\xa1_gid
;

333
memb\x94
.
m_mode
 =
\xa1\xa9us
.
\xa1_mode
 & 07777;

334 ()
	`sw\xad
(&(
\xa1\xa9us
.
\xa1_mtime
));

335
memb\x94
.
m_time_1
 =
sw\xad\xb3d
.
mem
.
mem_1
;

336
memb\x94
.
m_time_2
 =
sw\xad\xb3d
.
mem
.
mem_2
;

337 ()
	`sw\xad
(&(
\xa1\xa9us
.
\xa1_size
));

338
memb\x94
.
m_size_1
 =
sw\xad\xb3d
.
mem
.
mem_1
;

339
memb\x94
.
m_size_2
 =
sw\xad\xb3d
.
mem
.
mem_2
;

340
	`mwr\x99e
(
fd
, &
memb\x94
, (
MEMBER
));

341 (
\xbbad_ch\xacs
 =
	`\xbbad
(
\xa4c_fd
,
io_buf\xe3r
.
	`d\xa9a
(),
IO_SIZE
)) > 0)

342
	`mwr\x99e
(
fd
,
io_buf\xe3r
.
	`d\xa9a
(),
\xbbad_ch\xacs
);

344 i\xe0(
	`odd
(
\xa1\xa9us
.
\xa1_size
))

345
	`mwr\x99e
(
fd
,
io_buf\xe3r
.
	`d\xa9a
(), 1);

347 i\xe0(
v\x94bo\xa3
)

348
	`show
(
mess
,
\xc7me
);

349 ()
	`\x\xe3o\xa3
(
\xa4c_fd
);

350
	}
}

352 
	$ex\x8\xff\xf9
(
MEMBER
 *
memb\x94
) {

353 
fd
 = 1;

355 i\xe0(
\xb4_\xe6
 =\xf0
FALSE
 && (
fd
 =
	`\xfc\x97t
(
memb\x94
->
m_\xc7me
, 0644)) < 0) {

356
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 c\xbb\xa9\x90",
memb\x94
->
m_\xc7me
);

360 i\xe0(
v\x94bo\xa3
 &&
\xb4_\xe6
 =\xf0
FALSE
)

361
	`show
('x',
memb\x94
->
m_\xc7me
);

363
	`c\xddy_memb\x94
(
memb\x94
,
\xac_fd
,
fd
);

365 i\xe0(
fd
 != 1)

366 ()
	`\x\xe3o\xa3
(
fd
);

367 ()
	`chmod
(
memb\x94
->
m_\xc7me
, memb\x94->
m_mode
);

368
	}
}

370 
	$c\xddy_memb\x94
(
MEMBER
 *
memb\x94
, 
\xe4om
, 
to
) {

371 
\xbb\xa1
;

372
BOOL

is_odd
 =
	`odd
(
mem_size
\xe8?
TRUE
 :
FALSE
;

375
\xbb\xa1
 =
mem_size
 > ()
IO_SIZE
 ? IO_SIZE : ()mem_size;

376 i\xe0(
	`\xbbad
(
\xe4om
,
io_buf\xe3r
.
	`d\xa9a
(),
\xbb\xa1
) !=\x84est)

377
	`\x94r\xdc
(
TRUE
, "R\x97d\x83\xbc\xdc o\xc0",
memb\x94
->
m_\xc7me
);

378
	`mwr\x99e
(
to
,
io_buf\xe3r
.
	`d\xa9a
(),
\xbb\xa1
);

379
mem_size
 -\xf0()
\xbb\xa1
;

380 } 
mem_size
 != 0L);

382 i\xe0(
is_odd
) {

383 ()
	`l\xa3ek
(
\xe4om
, 1L, 1);

384 i\xe0(
\xbbp_\xe6
 ||
d\x96_\xe6
)

385 ()
	`l\xa3ek
(
to
, 1L, 1);

387
	}
}

389 
	$\xb4\x9\xa9
(*
\xa1r
) {

390 
\x9adex
 = 0;

392 i\xe0(
\xa1r
 =\xf0
NIL_PTR
) {

393
	`wr\x99e
(1,
\x8brm\x9a\xae
.
	`d\xa9a
(),
\x9adex
);

394
\x9adex
 = 0;

398 *
\xa1r
 != '\0') {

399
\x8brm\x9a\xae
.
	`d\xa9a
()[
\x9adex
++] = *
\xa1r
++;

400 i\xe0(
\x9adex
 =\xf0
BLOCK_SIZE
)

401
	`\xe6ush
();

403
	}
}

405 
	$\xb4\x9\xa9_mode
(
mode
) {

406 
mode_buf
[11];

407 
tmp
 =
mode
;

408 
i
;

410
mode_buf
[9] = ' ';

411 
i
 = 0; i < 3; i++) {

412
mode_buf
[
i
 * 3] = (
tmp
 &
S_IREAD
) ? 'r' : '-';

413
mode_buf
[
i
 * 3 + 1] = (
tmp
 &
S_IWRITE
) ? 'w' : '-';

414
mode_buf
[
i
 * 3 + 2] = (
tmp
 &
S_IEXEC
) ? 'x' : '-';

415
tmp
 <<= 3;

417 i\xe0(
mode
 &
S_ISUID
)

418
mode_buf
[2] = 's';

419 i\xe0(
mode
 &
S_ISGID
)

420
mode_buf
[5] = 's';

421
	`\xb4\x9\xa9
(
mode_buf
);

422
	}
}

424 
	$l\x99\xdf
(
\xb7d
, 
numb\x94
) {

425 
num_buf
[11];

426 
dig\x99
;

427 
pow
 = 1000000000L;

428 
dig\x99_\xa3\x92
 =
FALSE
;

429 
i
;

431 
i
 = 0; i < 10; i++) {

432
dig\x99
 =
numb\x94
 /
pow
;

433 i\xe0(
dig\x99
 =\xf00L &&
dig\x99_\xa3\x92
 =\xf0
FALSE
 &&
i
 != 9)

434
num_buf
[
i
] = ' ';

436
num_buf
[
i
] = '0' + ()
dig\x99
;

437
numb\x94
 -\xf0
dig\x99
 *
pow
;

438
dig\x99_\xa3\x92
 =
TRUE
;

440
pow
 /= 10L;

443 
i
 = 0;
num_buf
[i] =\xf0' ' && i +
\xb7d
 < 11; i++)

445
	`\xb4\x9\xa9
(&
num_buf
[
i
]);

446
	}
}

448 
	$mwr\x99e
(
fd
, *
add\xbbss
, 
by\x8bs
) {

449 i\xe0(
	`wr\x99e
(
fd
,
add\xbbss
,
by\x8bs
) != bytes)

450
	`\x94r\xdc
(
TRUE
, "Wr\x99\x90\x94r\xdc.",
NIL_PTR
);

451
	}
}

453 
	$show
(
c
, *
\xc7me
) {

454
	`wr\x99e
(1, &
c
, 1);

455
	`wr\x99e
(1, " - ", 3);

456
	`wr\x99e
(1,
\xc7me
,
	`\xa1\xbe\x92
(name));

457
	`wr\x99e
(1, "\n", 1);

458
	}
}

460 
	$p_\xc7me
(*
mem_\xc7me
) {

461 
i
 = 0;

462 
\xc7me
[15];

464 
i
 = 0; i < 14 && *
mem_\xc7me
; i++)

465
\xc7me
[
i
] = *
mem_\xc7me
++;

467
\xc7me
[
i
] = '\0';

468
	`\xb4\x9\xa9
(
\xc7me
);

469
	}
}

471 
	#MINUTE
 60L

	)

472 
	#HOUR
 (60L *
MINUTE
)

	)

473 
	#DAY
 (24L *
HOUR
)

	)

474 
	#YEAR
 (365L *
DAY
)

	)

475 
	#LYEAR
 (366L *
DAY
)

	)

477 
	gmo
[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

479 *
	gm\xd\xafme
[] = {" Jan ", " Feb ", " Mar ", " Apr ", " May ", " Jun ",

483 
	$d\xa9e
(
t
) {

484 
i
,
y\x97r
,
day
,
m\xd\xa9h
,
hour
,
m\x9au\x8b
;

485 
\xcbngth
,
	`time
(),
\xdcig\x9a\xae
;

487
y\x97r
 = 1970;

488
\xdcig\x9a\xae
 =
t
;

489 
t
 > 0) {

490
\xcbngth
 = (
y\x97r
 % 4 =\xf00 ?
LYEAR
 :
YEAR
);

491 i\xe0(
t
 <
\xcbngth
)

493
t
 -\xf0
\xcbngth
;

494
y\x97r
++;

498
day
 = ()(
t
 /
DAY
);

499
t
 -\xf0()
day
 *
DAY
;

500
hour
 = ()(
t
 /
HOUR
);

501
t
 -\xf0()
hour
 *
HOUR
;

502
m\x9au\x8b
 = ()(
t
 /
MINUTE
);

505
mo
[1] = (
y\x97r
 % 4 == 0 ? 29 : 28);

506
m\xd\xa9h
 = 0;

507
i
 = 0;

508 
day
 >\xf0
mo
[
i
]) {

509
m\xd\xa9h
++;

510
day
 -\xf0
mo
[
i
];

511
i
++;

515
	`\xb4\x9\xa9
(
m\xd\xafme
[
m\xd\xa9h
]);

516
day
++;

517 i\xe0(
day
 < 10)

518
	`\xb4\x9\xa9
(" ");

519
	`l\x99\xdf
(0, ()
day
);

520
	`\xb4\x9\xa9
(" ");

521 i\xe0(
	`time
(
NIL_LONG
\xe8-
\xdcig\x9a\xae
 >\xf0
YEAR
 / 2L)

522
	`l\x99\xdf
(1, ()
y\x97r
);

524 i\xe0(
hour
 < 10)

525
	`\xb4\x9\xa9
("0");

526
	`l\x99\xdf
(0, ()
hour
);

527
	`\xb4\x9\xa9
(":");

528 i\xe0(
m\x9au\x8b
 < 10)

529
	`\xb4\x9\xa9
("0");

530
	`l\x99\xdf
(0, ()
m\x9au\x8b
);

532
	`\xb4\x9\xa9
(" ");

533
	}
}

	@commands/basename.cpp

3 
	~<f\x9\x93sy\xa1em
>

4 
	~<\xa1r\x9ag
>

5 
	~<\xa1r\x9ag_v\x9bw
>

9 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

11 i\xe0(
\xacgc
 < 2) {

12
	`\xa1d_\x94r
("Usage: basename string [suffix] \n");

17
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th
\x85\xa9h{
\xacgv
[1]};

18
\xa1d
::
\xa1r\x9ag

ba\xa3
 =
\xb7th
.
	`f\x9e\x92ame
().
	`\xa1r\x9ag
();

21 i\xe0(
\xacgc
 == 3) {

22
\xa1d
::
\xa1r\x9ag_v\x9bw

suffix
{
\xacgv
[2]};

23 i\xe0(
ba\xa3
.
	`size
(\xe8>\xf0
suffix
.size() &&

24
ba\xa3
.
	`com\xb7\xbb
(ba\xa3.
	`size
(\xe8-
suffix
.size(), suffix.size(), suffix) == 0)

25
ba\xa3
.
	`\x94a\xa3
(ba\xa3.
	`size
(\xe8-
suffix
.size());

28
	`\xb4\x9\xa9s
("%\xa0\n",
ba\xa3
.
	`c_\xa1r
());

29
	}
}

	@commands/cal.cpp

9 
	~<\xac\xbfy
>

10 
	~<c\xa1dio
>

11 
	~<c\xa1r\x9ag
>

12 
	~<\xa1r\x9ag
>

13 
	~<\xa1r\x9ag_v\x9bw
>

15 
	#do3m\xd\xa9hs

dom\xd\xa9h


	)

16
cڡex\xb4
 
	gIO_SUCCESS
 = 0;

17
cڡex\xb4
 
	gIO_ERROR
 = 1;

18
cڡex\xb4
 
	gEOS
 = 0;

20
cڡex\xb4
 
	gENTRY_SIZE
 = 3;

21
cڡex\xb4
 
	gDAYS_PER_WEEK
 = 7;

22
cڡex\xb4
 
	gWEEKS_PER_MONTH
 = 6;

23
cڡex\xb4
 
	gMONTHS_PER_LINE
 = 3;

24
cڡex\xb4
 
	gMONTH_SPACE
 = 3;

26 *
	gbad\xacg
 = {"Bad\x87rgument\n"};

27 *
	ghow
 = {"Usage: cal [month] year\n"};

33
	g\xa1d
::
\xac\xbfy
<
\xa1d
::\xac\xbfy<\xa1d::\xac\xbfy<\xa1d::\xac\xbfy<,
	gENTRY_SIZE
>,
	gDAYS_PER_WEEK
>,
	gWEEKS_PER_MONTH
>,

34
	gMONTHS_PER_LINE
>

35
	g\xcfyout
{};

36
	g\xa1d
::
\xac\xbfy
<,

37 (
MONTHS_PER_LINE
 *
DAYS_PER_WEEK
 *
	gENTRY_SIZE
\xe8+ (MONTHS_PER_LINE *
	gMONTH_SPACE
) + 1>

38
	gou\x8e\x9\xab
{};

40
cڡex\xb4

	g\xa1d
::
\xa1r\x9ag_v\x9bw

w\x93kday
 = " S M Tu W Th F S";

41
cڡex\xb4

	g\xa1d
::
\xac\xbfy
<
\xa1d
::
\xa1r\x9ag_v\x9bw
, 13>
	gm\xd\xa9h\xc7me
 = {

44 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

45 
m\xd\xa9h
 = 0;

46 
y\x97r
 = 0;

48 
\xacg1v\xae
 = 0;

49 
\xacg1\xcbn
 = 0;

50 
\xacg2v\xae
 = 0;

52 i\xe0(
\xacgc
 <= 1) {

53
	`u\xa7ge
(
how
);

55
\xacg1v\xae
 =
\xa1d
::
	`\xa1oi
(
\xacgv
[1]);

56
\xacg1\xcbn
 =
\xa1d
::
	`\xa1\xbe\x92
(
\xacgv
[1]);

57 i\xe0(
\xacgc
 == 2) {

64 i\xe0(
\xacg1\xcbn
 <\xf02 &&
\xacg1v\xae
 <= 12)

65
	`do3m\xd\xa9hs
(
y\x97r
,
\xacg1v\xae
);

67
	`doy\x97r
(
\xacg1v\xae
);

72
\xacg2v\xae
 =
\xa1d
::
	`\xa1oi
(
\xacgv
[2]);

73 i\xe0(
\xacg1\xcbn
 > 2)

74
	`do3m\xd\xa9hs
(
\xacg1v\xae
,
\xacg2v\xae
);

76
	`do3m\xd\xa9hs
(
\xacg2v\xae
,
\xacg1v\xae
);

79 
IO_SUCCESS
;

80
	}
}

82 
	$doy\x97r
(
y\x97r
)

87 
m\xd\xa9h
;

89 i\xe0(
y\x97r
 < 1 || year > 9999)

90
	`u\xa7ge
(
bad\xacg
);

91 i\xe0(
y\x97r
 < 100)

92
	`\xb4\x9\xa9f
("\n\n\\xc0 00%2d\n\n",
y\x97r
);

94
	`\xb4\x9\xa9f
("\n\n\n%35d\n\n",
y\x97r
);

95 
m\xd\xa9h
 = 1; m\xdath <\xf012; m\xdath +\xf0
MONTHS_PER_LINE
) {

96
	`\xb4\x9\xa9f
("%12s%23s%23s\n",
m\xd\xa9h\xc7me
[
m\xd\xa9h
], monthname[month + 1], monthname[month + 2]);

97
	`\xb4\x9\xa9f
("%\xa0 %\xa0 %s\n",
w\x93kday
, weekday, weekday);

98
	`\xff\xcbnd\xac
(
y\x97r
,
m\xd\xa9h
 + 0, 0);

99
	`\xff\xcbnd\xac
(
y\x97r
,
m\xd\xa9h
 + 1, 1);

100
	`\xff\xcbnd\xac
(
y\x97r
,
m\xd\xa9h
 + 2, 2);

101
	`ou\x8dut
(3);

102 #i\xe0
MONTHS_PER_LINE
 != 3

103 <<
\x94r\xdc
,
the

above

w\xda
't work >>

106
	`\xb4\x9\xa9f
("\n\n\n");

107
	}
}

109 
	$dom\xd\xa9h
(
y\x97r
, 
m\xd\xa9h
)

114 i\xe0(
y\x97r
 < 1 || year > 9999)

115
	`u\xa7ge
(
bad\xacg
);

116 i\xe0(
m\xd\xa9h
 <= 0 || month > 12)

117
	`u\xa7ge
(
bad\xacg
);

118
	`\xb4\x9\xa9f
("%9s%5d\n\n%s\n",
m\xd\xa9h\xc7me
[
m\xd\xa9h
],
y\x97r
,
w\x93kday
);

119
	`\xff\xcbnd\xac
(
y\x97r
,
m\xd\xa9h
, 0);

120
	`ou\x8dut
(1);

121
	`\xb4\x9\xa9f
("\n\n");

122
	}
}

124 
	$ou\x8dut
(
nm\xd\xa9hs
)

129 
w\x93k
;

130 
m\xd\xa9h
;

131 *
ou\x8d
;

132 
i
;

133 
tmpbuf
[21], *
p
;

135 
w\x93k
 = 0; w\x93k <
WEEKS_PER_MONTH
; week++) {

136
ou\x8d
 =
ou\x8e\x9\xab
.
	`d\xa9a
();

137 
m\xd\xa9h
 = 0; m\xdath <
nm\xd\xa9hs
; month++) {

143
p
 = &
\xcfyout
[
m\xd\xa9h
][
w\x93k
][0][1];

144 
i
 = 0; i < 20; i++)

145
tmpbuf
[
i
] = *
p
++;

146
tmpbuf
[20] = 0;

147
	`\xa5r\x9\xa9f
(
ou\x8d
, "%\xa0 ",
tmpbuf
);

148
ou\x8d
 +\xf0(
DAYS_PER_WEEK
 *
ENTRY_SIZE
\xe8+
MONTH_SPACE
 - 1;

150 
ou\x8d
 >
ou\x8e\x9\xab
.
	`d\xa9a
() && outp[-1] == ' ')

151
ou\x8d
--;

152 *
ou\x8d
 =
EOS
;

153
	`puts
(
ou\x8e\x9\xab
.
	`d\xa9a
());

155
	}
}

157 
	$\xff\xcbnd\xac
(
y\x97r
, 
m\xd\xa9h
, 
\x9adex
)

162 *
\x8d
;

163 
w\x93k
;

164 
wday
;

165 
today
;

167
	`\xa3tm\xd\xa9h
(
y\x97r
,
m\xd\xa9h
);

168 
w\x93k
 = 0; w\x93k <
WEEKS_PER_MONTH
; week++) {

169 
wday
 = 0; wday <
DAYS_PER_WEEK
; wday++) {

170
\x8d
 = &
\xcfyout
[
\x9adex
][
w\x93k
][
wday
][0];

171 *
\x8d
++ = ' ';

172
today
 =
	`g\x91d\xa9e
(
w\x93k
,
wday
);

173 i\xe0(
today
 <= 0) {

174 *
\x8d
++ = ' ';

175 *
\x8d
++ = ' ';

176 } i\xe0(
today
 < 10) {

177 *
\x8d
++ = ' ';

178 *
\x8d
 = (
today
 + '0');

180 *
\x8d
++ = (
today
 / 10) + '0';

181 *
\x8d
 = (
today
 % 10) + '0';

185
	}
}

187 
	$u\xa7ge
(*
s
) {

190
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s",
s
);

191
	`ex\x99
(
IO_ERROR
);

192
	}
}

217 
	mthis_m\xd\xa9h
;

218 
	m\xe3b
;

219 
	m\xa3\xb1
;

220 
	mdays_\x9a_m\xd\xa9h
;

221 
	mdow_f\x9c\xa1
;

222 }
	g\x9afo
;

224 
	gday_m\xd\xa9h
[] = {

227 
	$d\xa9e
(
y\x97r
, 
m\xd\xa9h
, 
w\x93k
, 
wday
)

233
	`\xa3tm\xd\xa9h
(
y\x97r
,
m\xd\xa9h
);

234  (
	`g\x91d\xa9e
(
w\x93k
,
wday
));

235
	}
}

237 
	$\xa3tm\xd\xa9h
(
y\x97r
, 
m\xd\xa9h
)

243 
i
;

245 i\xe0(
m\xd\xa9h
 < 1 || month > 12) {

246
\x9afo
.
days_\x9a_m\xd\xa9h
 = 0;

249
\x9afo
.
this_m\xd\xa9h
 =
m\xd\xa9h
;

250
\x9afo
.
dow_f\x9c\xa1
 =
	`J\x\xaf1
(
y\x97r
);

251
\x9afo
.
\xe3b
 = 29;

252
\x9afo
.
\xa3\xb1
 = 30;

257 (
	`J\x\xaf1
(
y\x97r
 + 1\xe8+ 7 -
\x9afo
.
dow_f\x9c\xa1
) % 7) {

259
\x9afo
.
\xe3b
 = 28;

264
\x9afo
.
\xa3\xb1
 = 19;

267
\x9afo
.
days_\x9a_m\xd\xa9h
 = (
m\xd\xa9h
 =\xf02\xe8? info.
\xe3b
 : (m\xdath =\xf09\xe8? info.
\xa3\xb1
 :
day_m\xd\xa9h
[month];

268 
i
 = 1; i <
m\xd\xa9h
; i++) {

269 
i
) {

271
\x9afo
.
dow_f\x9c\xa1
 +\xf0\x9afo.
\xe3b
;

275
\x9afo
.
dow_f\x9c\xa1
 +\xf0\x9afo.
\xa3\xb1
;

279
\x9afo
.
dow_f\x9c\xa1
 +\xf0
day_m\xd\xa9h
[
i
];

283
\x9afo
.
dow_f\x9c\xa1
 %= 7;

284
	}
}

286 
	$g\x91d\xa9e
(
w\x93k
, 
wday
\xe8
today
;

291
today
 = (
w\x93k
 * 7\xe8+
wday
 -
\x9afo
.
dow_f\x9c\xa1
 + 1;

292 i\xe0(
today
 <\xf00 ||\x81oday >
\x9afo
.
days_\x9a_m\xd\xa9h
)

294 i\xe0(
\x9afo
.
\xa3\xb1
 =\xf019 && info.
this_m\xd\xa9h
 =\xf09 &&
today
 >= 3)

295  (
today
 + 11);

297  (
today
);

298
	}
}

300 
	$J\x\xaf1
(
y\x97r
)

305 
day
;

307
day
 =
y\x97r
 + 4 + ((year + 3) / 4);

308 i\xe0(
y\x97r
 > 1800) {

309
day
 -\xf0((
y\x97r
 - 1701) / 100);

310
day
 +\xf0((
y\x97r
 - 1601) / 400);

312 i\xe0(
y\x97r
 > 1752)

313
day
 += 3;

314  (
day
 % 7);

315
	}
}

	@commands/cat.cpp

9 
	~"blocksiz.h\xb5
"

10 
	~"\xa1\xa9.h\xb5
"

11 
	~<\xac\xbfy
>

12 
	~<\xfb\xb\xfao
>

13 
	~<\xa1r\x9ag_v\x9bw
>

15
cڡex\xb4

	g\xa1d
::
size_t

BUF_SIZE
 = 512;

16 
	gunbuf\xe3\xbbd
;

17
	g\xa1d
::
\xac\xbfy
<,
	gBUF_SIZE
>
	gbuf\xe3r
{};

18 *
	g\xc3xt
 =
buf\xe3r
.
d\xa9a
();

21 
c\xddyf\x9\x93
(
fd1
, 
fd2
);

22 
\xe6ush
();

23 
qu\x99
();

25 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

28 
k
 = 1;

29
\xa1d
::
\xa1r\x9ag_v\x9bw

p
{};

31 i\xe0(
\xacgc
 >= 2) {

32
p
 =
\xacgv
[1];

33 i\xe0(
p
 == "-u") {

34
unbuf\xe3\xbbd
 = 1;

35
k
 = 2;

39 i\xe0(
k
 >\xf0
\xacgc
) {

41
	`c\xddyf\x9\x93
(0, 1);

42
	`\xe6ush
();

46 
i
 =
k
; i <
\xacgc
; i++) {

47
\xa1d
::
\xa1r\x9ag_v\x9bw

f\x9\x93
 =
\xacgv
[
i
];

48 
fd1
;

49 i\xe0(
f\x9\x93
 == "-") {

50
fd1
 = 0;

52
fd1
 =
	`ݒ
(
\xacgv
[
i
], 0);

53 i\xe0(
fd1
 < 0) {

54
	`\xa1d_\x94r
("cat: cannot open ");

55
	`\xa1d_\x94r
(
\xacgv
[
i
]);

56
	`\xa1d_\x94r
("\n");

60
	`c\xddyf\x9\x93
(
fd1
, 1);

61 i\xe0(
fd1
 != 0)

62
	`\x\xe3o\xa3
(
fd1
);

64
	`\xe6ush
();

66
	}
}

68 
	$c\xddyf\x9\x93
(
fd1
, 
fd2
) {

75 
n
,
j
,
m
;

76
\xa1d
::
\xac\xbfy
<,
BLOCK_SIZE
>
buf
{};

79
n
 =
	`\xbbad
(
fd1
,
buf
.
	`d\xa9a
(),
BLOCK_SIZE
);

80 i\xe0(
n
 < 0)

81
	`qu\x99
();

82 i\xe0(
n
 == 0)

84 i\xe0(
unbuf\xe3\xbbd
) {

85
m
 =
	`wr\x99e
(
fd2
,
buf
.
	`d\xa9a
(),
n
);

86 i\xe0(
m
 !\xf0
n
)

87
	`qu\x99
();

89 
j
 = 0; j <
n
; j++) {

90 *
\xc3xt
++ =
buf
[
j
];

91 i\xe0(
\xc3xt
 =\xf0
buf\xe3r
.
	`d\xa9a
(\xe8+
BUF_SIZE
) {

92
m
 =
	`wr\x99e
(
fd2
,
buf\xe3r
.
	`d\xa9a
(),
BUF_SIZE
);

93 i\xe0(
m
 !\xf0
BUF_SIZE
)

94
	`qu\x99
();

95
\xc3xt
 =
buf\xe3r
.
	`d\xa9a
();

100
	}
}

102 
	$\xe6ush
() {

104 i\xe0(
\xc3xt
 !\xf0
buf\xe3r
.
	`d\xa9a
())

105 i\xe0(
	`wr\x99e
(1,
buf\xe3r
.
	`d\xa9a
(),
\xc3xt
 - buffer.data()) <= 0)

106
	`qu\x99
();

107
	}
}

109 
	$qu\x99
() {

111
	`\xb3\xbc\xdc
("cat");

112
	`ex\x99
(1);

113
	}
}

	@commands/cc.cpp

23 
	~"sig\xc7l.h\xb5
"

24 
	~<\xac\xbfy
>

25 
	~<\x94\xbao.h
>

26 
	~<\xa1r\x9ag_v\x9bw
>

28
cڡex\xb4
 
	gMAXARGC
 = 64;

29
cڡex\xb4
 
	gUSTR_SIZE
 = 64;

31
us\x9ag

	gUSTRING
 =
\xa1d
::
\xac\xbfy
<,
	gUSTR_SIZE
>;

33 
	s\xacgli\xa1
 {

34 
	m\x\xab_\xacgc
;

35 *
	m\x\xab_\xacgv
[
MAXARGC
];

52 #ifde\xe0
MEM640K


54 *
	gPP
 = "/lib/cpp";

55 *
	gCEM
 = "/lib/cem";

56 *
	gOPT
 = "/usr/lib/opt";

57 *
	gCG
 = "/usr/lib/cg";

58 *
	gASLD
 = "/usr/bin/asld";

59 *
	gSHELL
 = "/bin/sh";

60 *
	gLIBDIR
 = "/usr/lib";

63 #ifde\xe0
MEM512K


65 *
	gPP
 = "/usr/lib/cpp";

66 *
	gCEM
 = "/usr/lib/cem";

67 *
	gOPT
 = "/usr/lib/opt";

68 *
	gCG
 = "/usr/lib/cg";

69 *
	gASLD
 = "/usr/bin/asld";

70 *
	gSHELL
 = "/bin/sh";

71 *
	gLIBDIR
 = "/usr/lib";

75 *
	gV_FLAG
 = "-Vs2.2w2.2i2.2l4.2f4.2d8.2p2.2";

77 
\xacgli\xa1

	gLD_HEAD
 = {1,

82 
\xacgli\xa1

	gLD_TAIL
 = {2, {"/usr/lib/libc.a", "/usr/lib/end.s"}};

84 *
	go_FILE
 = "a.out";

86 
	#\xbbmove
(
\xa1r
\xe8(
	`uƚk
(\xa1r), (\xa1r)[0] = '\0')

	)

87 
	#\x\xe3\x97nup
(
\xa1r
\xe8(\xa1\xb8&&
	`\xbbmove
(\xa1r))

	)

88 
	#\x9a\x99
(
\xae
\xe8\xd7l)->
\xae_\xacgc
 = 1

	)

89 
	#lib\xb\xe4y
(
nm
) \

90
	`mk\xa1r
(
	`\x\xabloc
(()
	`\xa1\xbe\x92
(
nm
\xe8+ s\x8c\xcbn(
LIBDIR
\xe8+ 7), LIBDIR, "/lib",\x82m, ".a", 0)

	)

92 *
	gProgC\x\xabl
 = 0;

94 
\xacgli\xa1

	gSRCFILES
;

95 
\xacgli\xa1

	gLDFILES
;

96 
\xacgli\xa1

	gGEN_LDFILES
;

98 
\xacgli\xa1

	gPP_FLAGS
;

99 
\xacgli\xa1

	gCEM_FLAGS
;

101 
	gRET_CODE
 = 0;

103 
\xacgli\xa1

	gOPT_FLAGS
;

104 
\xacgli\xa1

	gCG_FLAGS
;

105 
\xacgli\xa1

	gASLD_FLAGS
;

106 
\xacgli\xa1

	gDEBUG_FLAGS
;

108 
\xacgli\xa1

	gCALL_VEC
[2];

110 
	go_\xe6ag
 = 0;

111 
	gS_\xe6ag
 = 0;

112 
	gv_\xe6ag
 = 0;

113 
	gF_\xe6ag
 = 0;

115 *
mk\xa1r
();

116 *
\xaeloc
();

118
USTRING

	gif\x9\x93
,
	gkf\x9\x93
,
	gsf\x9\x93
,
	gmf\x9\x93
,
	gof\x9\x93
;

119
USTRING

	gBASE
;

121 *
	gtmpd\x9c
 = "/tmp";

122 
	gtm\xb2ame
[15];

124 #ifde\xe0
DEBUG


125 
	gn\xdbxec
 = 0;

128 
	$\x8c\xadcc
(
sig
) {

129
	`sig\xc7l
(
sig
,
SIG_IGN
);

130
	`\x\xe3\x97nup
(
if\x9\x93
);

131
	`\x\xe3\x97nup
(
kf\x9\x93
);

132
	`\x\xe3\x97nup
(
sf\x9\x93
);

133
	`\x\xe3\x97nup
(
mf\x9\x93
);

134
	`\x\xe3\x97nup
(
of\x9\x93
);

135
	}
}

137 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

138
\xa1d
::
\xa1r\x9ag_v\x9bw

\xa1r
;

139 **
\xacgvec
;

140 
cou\xc1
;

141 
ext
;

142 
\xacgli\xa1
 *
\xff\xce
 = &
CALL_VEC
[0], *
\xff\xce1
 = &CALL_VEC[1];

143 *
f\x9\x93
;

144 *
ldf\x9\x93
 = 0;

146
ProgC\x\xabl
 = *
\xacgv
++;

148
	`sig\xc7l
(
SIGHUP
,
\x8c\xadcc
);

149
	`sig\xc7l
(
SIGINT
,
\x8c\xadcc
);

150
	`sig\xc7l
(
SIGQUIT
,
\x8c\xadcc
);

151 --
\xacgc
 > 0) {

152
\xa1r
 = *
\xacgv
++;

153 i\xe0(
\xa1r
.
	`em\xb1y
() || str[0] != '-') {

154
	`\xad\xb3nd
(&
SRCFILES
,
\xa1r
.
	`d\xa9a
());

158 
\xa1r
[1]) {

161
S_\xe6ag
 = 1;

166
	`\xad\xb3nd
(&
PP_FLAGS
,
\xa1r
);

169
F_\xe6ag
 = 1;

172
	`\xad\xb3nd
(&
SRCFILES
,
	`lib\xb\xe4y
(&
\xa1r
[2]));

175
o_\xe6ag
 = 1;

176 i\xe0(
\xacgc
-- >= 0)

177
o_FILE
 = *
\xacgv
++;

180
	`\xad\xb3nd
(&
CG_FLAGS
, "-p4");

183
S_\xe6ag
 = 1;

186 i\xe0(
	`\xa1rcmp
(&
\xa1r
[1], "LIB") == 0) {

187
	`\xad\xb3nd
(&
OPT_FLAGS
, "-L");

192
v_\xe6ag
++;

193 #ifde\xe0
DEBUG


194 i\xe0(
\xa1r
[2] == 'n')

195
n\xdbxec
 = 1;

199
tmpd\x9c
 = &
\xa1r
[2];

204
	`\xad\xb3nd
(&
CEM_FLAGS
,
\xa1r
);

208
	`\xad\xb3nd
(&
ASLD_FLAGS
,
\xa1r
);

212
	`mk\x8bm\xb2ame
(
tm\xb2ame
);

214
cou\xc1
 =
SRCFILES
.
\xae_\xacgc
;

215
\xacgvec
 = &(
SRCFILES
.
\xae_\xacgv
[0]);

217 
cou\xc1
-- > 0) {

218 *
f
;

219
	`ba\xa3\xc7me
(
f\x9\x93
 = *
\xacgvec
++,
BASE
);

221 i\xe0(
SRCFILES
.
\xae_\xacgc
 > 1) {

222
	`wr\x99e
(1,
f\x9\x93
,
	`\xa1\xbe\x92
(file));

223
	`wr\x99e
(1, ":\n", 2);

226
ext
 =
	`ex\x8bnsi\xda
(
f\x9\x93
);

228 i\xe0(
ext
 == 'c') {

229
	`\x9a\x99
(
\xff\xce
);

230
	`\xad\xb3nd
(
\xff\xce
,
PP
);

231
	`c\xda\xf\xe1
(
\xff\xce
, &
PP_FLAGS
);

232
	`\xad\xb3nd
(
\xff\xce
,
f\x9\x93
);

234 i\xe0(
F_\xe6ag
) {

235
f
 =
	`mk\xa1r
(
if\x9\x93
,
tmpd\x9c
,
tm\xb2ame
, ".i", 0);

236 i\xe0(
	`runvec
(
\xff\xce
,
f
)) {

237
f\x9\x93
 =
if\x9\x93
;

238
ext
 = 'i';

240
	`\xbbmove
(
if\x9\x93
);

244
	`\x9a\x99
(
\xff\xce1
);

245
	`\xad\xb3nd
(
\xff\xce1
,
CEM
);

246
	`c\xda\xf\xe1
(
\xff\xce1
, &
DEBUG_FLAGS
);

247
	`\xad\xb3nd
(
\xff\xce1
,
V_FLAG
);

248
	`c\xda\xf\xe1
(
\xff\xce1
, &
CEM_FLAGS
);

249
	`\xad\xb3nd
(
\xff\xce1
, "-");

250
f
 =
	`mk\xa1r
(
kf\x9\x93
,
tmpd\x9c
,
tm\xb2ame
, ".k", 0);

251
	`\xad\xb3nd
(
\xff\xce1
,
f
);

252 i\xe0(
	`runvec2
(
\xff\xce
,
\xff\xce1
)) {

253
f\x9\x93
 =
kf\x9\x93
;

254
ext
 = 'k';

256
	`\xbbmove
(
kf\x9\x93
);

262 i\xe0(
ext
 == 'i') {

263
	`\x9a\x99
(
\xff\xce
);

264
	`\xad\xb3nd
(
\xff\xce
,
CEM
);

265
	`c\xda\xf\xe1
(
\xff\xce
, &
DEBUG_FLAGS
);

266
	`\xad\xb3nd
(
\xff\xce
,
V_FLAG
);

267
	`c\xda\xf\xe1
(
\xff\xce
, &
CEM_FLAGS
);

268
	`\xad\xb3nd
(
\xff\xce
,
f\x9\x93
);

269
f
 =
	`mk\xa1r
(
kf\x9\x93
,
tmpd\x9c
,
tm\xb2ame
, ".k", 0);

270
	`\xad\xb3nd
(
\xff\xce
,
f
);

272 i\xe0(
	`runvec
(
\xff\xce
, (*)0)) {

273
f\x9\x93
 =
kf\x9\x93
;

274
ext
 = 'k';

276
	`\xbbmove
(
kf\x9\x93
);

279
	`\x\xe3\x97nup
(
if\x9\x93
);

283 i\xe0(
ext
 == 'k') {

284
	`\x9a\x99
(
\xff\xce
);

285
	`\xad\xb3nd
(
\xff\xce
,
OPT
);

286
	`c\xda\xf\xe1
(
\xff\xce
, &
OPT_FLAGS
);

287
	`\xad\xb3nd
(
\xff\xce
,
f\x9\x93
);

288
f
 =
	`mk\xa1r
(
mf\x9\x93
,
tmpd\x9c
,
tm\xb2ame
, ".m", 0);

289 i\xe0(
	`runvec
(
\xff\xce
,
f
) == 0)

291
f\x9\x93
 =
mf\x9\x93
;

292
ext
 = 'm';

293
	`\x\xe3\x97nup
(
kf\x9\x93
);

297 i\xe0(
ext
 == 'm') {

298
ldf\x9\x93
 =
S_\xe6ag
 ?
of\x9\x93
 :
	`\x\xabloc
(
	`\xa1\xbe\x92
(
BASE
) + 3);

300
	`\x9a\x99
(
\xff\xce
);

301
	`\xad\xb3nd
(
\xff\xce
,
CG
);

302
	`c\xda\xf\xe1
(
\xff\xce
, &
CG_FLAGS
);

303
	`\xad\xb3nd
(
\xff\xce
,
f\x9\x93
);

304
f
 =
	`mk\xa1r
(
ldf\x9\x93
,
BASE
, ".s", 0);

305
	`\xad\xb3nd
(
\xff\xce
,
f
);

306 i\xe0(
	`runvec
(
\xff\xce
, (*)0) == 0)

308
	`\x\xe3\x97nup
(
mf\x9\x93
);

309
f\x9\x93
 =
ldf\x9\x93
;

310
ext
 = 's';

313 i\xe0(
S_\xe6ag
)

316
	`\xad\xb3nd
(&
LDFILES
,
f\x9\x93
);

317 i\xe0(
ldf\x9\x93
) {

318
	`\xad\xb3nd
(&
GEN_LDFILES
,
ldf\x9\x93
);

319
ldf\x9\x93
 = 0;

324 i\xe0(
RET_CODE
 =\xf00 &&
LDFILES
.
\xae_\xacgc
 > 0) {

325
	`\x9a\x99
(
\xff\xce
);

326
	`\xad\xb3nd
(
\xff\xce
,
ASLD
);

327
	`c\xda\xf\xe1
(
\xff\xce
, &
ASLD_FLAGS
);

328
	`\xad\xb3nd
(
\xff\xce
, "-o");

329
	`\xad\xb3nd
(
\xff\xce
,
o_FILE
);

330
	`c\xda\xf\xe1
(
\xff\xce
, &
LD_HEAD
);

331
	`c\xda\xf\xe1
(
\xff\xce
, &
LDFILES
);

332
	`c\xda\xf\xe1
(
\xff\xce
, &
LD_TAIL
);

333 i\xe0(
	`runvec
(
\xff\xce
, (*)0)) {

334 
i
 =
GEN_LDFILES
.
\xae_\xacgc
;

336 
i
-- > 0)

337
	`\xbbmove
(
GEN_LDFILES
.
\xae_\xacgv
[
i
]);

340  (
RET_CODE
);

341
	}
}

343 
	#BUFSIZE
 (
USTR_SIZE
 *
MAXARGC
)

	)

344 
	gbuf
[
BUFSIZE
];

345 *
	gbu\xe5\x8c
 = &
buf
[0];

347 *
	$\x\xabloc
(
u
) {

348 *
p
 =
bu\xe5\x8c
;

350 i\xe0((
bu\xe5\x8c
 +\xf0
u
\xe8>\xf0&
buf
[
BUFSIZE
])

351
	`\xb7nic
("no space\n");

352 
p
;

353
	}
}

355 
	$\xad\xb3nd
(
\xacgli\xa1
 *
\xae
, *
\xacg
) {

356 i\xe0(
\xae
->
\xae_\xacgc
 >\xf0
MAXARGC
)

357
	`\xb7nic
("argument\x86ist overflow\n");

358
\xae
->
\xae_\xacgv
[\xd7l->
\xae_\xacgc
)++] =
\xacg
;

359
	}
}

361 
	$c\xda\xf\xe1
(
\xacgli\xa1
 *
\xae1
, \xacgli\xa1 *
\xae2
) {

362 
i
 =
\xae2
->
\xae_\xacgc
;

363 **
p
 = &(
\xae1
->
\xae_\xacgv
[\xae1->
\xae_\xacgc
]);

364 **
q
 = &(
\xae2
->
\xae_\xacgv
[0]);

366 i\xe0((
\xae1
->
\xae_\xacgc
 +\xf0
i
\xe8>\xf0
MAXARGC
)

367
	`\xb7nic
("argument\x86ist overflow\n");

368 
i
-- > 0)

369 *
p
++ = *
q
++;

370
	}
}

373 **
	$mk\xa1r
(*
d\xa1
, *
\xacg
) {

374 **
vec
 = (**)&
\xacg
;

375 *
p
;

376 *
q
 =
d\xa1
;

378 
p
 = *
vec
++) {

379 *
q
++ = *
p
++)

381
q
--;

383 
d\xa1
;

384
	}
}

386 
	$ba\xa3\xc7me
(*
\xa1r
, *
d\xa1
) {

387 *
p1
 =
\xa1r
;

388 *
p2
 =
p1
;

390 *
p1
)

391 i\xe0(*
p1
++ == '/')

392
p2
 =
p1
;

393
p1
--;

394 i\xe0(*--
p1
 == '.')

395 *
p1
 = '\0';

396 *
d\xa1
++ = *
p2
++)

398 *
p1
 = '.';

399
	}
}

401 
	$ex\x8bnsi\xda
(*
\xe2
) {

402 
c
;

404 *
\xe2
++)

406
\xe2
--;

407
c
 = *--
\xe2
;

408  (*--
\xe2
 =\xf0'.'\xe8?
c
 : 0;

409
	}
}

411 
	$runvec
(
\xacgli\xa1
 *
vec
, *
ou\x8d
) {

412 
pid
,
fd
,
\xa1\xa9us
;

414 i\xe0(
v_\xe6ag
) {

415
	`\xb4_vec
(
vec
);

416
	`wr\x99e
(2, "\n", 1);

418 i\xe0((
pid
 =
	`f\xdck
()) == 0) {

419 i\xe0(
ou\x8d
) {

420
	`\x\xe3o\xa3
(1);

421 i\xe0((
fd
 =
	`\xfc\x97t
(
ou\x8d
, 0666)) != 1)

422
	`\xb7nic
("cannot create output file\n");

424
	`ex_vec
(
vec
);

426 i\xe0(
pid
 == -1)

427
	`\xb7nic
("no more\x85rocesses\n");

428
	`wa\x99
(&
\xa1\xa9us
);

429 
\xa1\xa9us
 ? ((
RET_CODE
 = 1), 0) : 1;

430
	}
}

432 
	$runvec2
(
\xacgli\xa1
 *
vec0
, \xacgli\xa1 *
vec1
) {

434 
pid
,
\xa1\xa9us1
,
\xa1\xa9us2
,
p
[2];

436 i\xe0(
v_\xe6ag
) {

437
	`\xb4_vec
(
vec0
);

438
	`wr\x99e
(2, " | ", 3);

439
	`\xb4_vec
(
vec1
);

440
	`wr\x99e
(2, "\n", 1);

442 i\xe0(
	`p\x9de
(
p
) == -1)

443
	`\xb7nic
("cannot create\x85ipe\n");

444 i\xe0((
pid
 =
	`f\xdck
()) == 0) {

445
	`\x\xe3o\xa3
(1);

446 i\xe0(
	`dup
(
p
[1]) != 1)

447
	`\xb7nic
("bad dup\n");

448
	`\x\xe3o\xa3
(
p
[0]);

449
	`\x\xe3o\xa3
(
p
[1]);

450
	`ex_vec
(
vec0
);

452 i\xe0(
pid
 == -1)

453
	`\xb7nic
("no more\x85rocesses\n");

454 i\xe0((
pid
 =
	`f\xdck
()) == 0) {

455
	`\x\xe3o\xa3
(0);

456 i\xe0(
	`dup
(
p
[0]) != 0)

457
	`\xb7nic
("bad dup\n");

458
	`\x\xe3o\xa3
(
p
[0]);

459
	`\x\xe3o\xa3
(
p
[1]);

460
	`ex_vec
(
vec1
);

462 i\xe0(
pid
 == -1)

463
	`\xb7nic
("no more\x85rocesses\n");

464
	`\x\xe3o\xa3
(
p
[0]);

465
	`\x\xe3o\xa3
(
p
[1]);

466
	`wa\x99
(&
\xa1\xa9us1
);

467
	`wa\x99
(&
\xa1\xa9us2
);

468  (
\xa1\xa9us1
 ||
\xa1\xa9us2
\xe8? ((
RET_CODE
 = 1), 0) : 1;

469
	}
}

472 
	$\xb7nic
(*
\xa1r
, 
\xacgv
) {

473
	`wr\x99e
(2,
\xa1r
,
	`\xa1\xbe\x92
(str));

474
	`ex\x99
(1);

475
	}
}

477 **
	$c\x9adex
(*
s
, 
c
) {

478 *
s
)

479 i\xe0(*
s
++ =\xf0
c
)

480 
s
 - 1;

482
	}
}

484 
	$\xb4_vec
(
\xacgli\xa1
 *
vec
) {

485 **
\xad
 = &
vec
->
\xae_\xacgv
[1];

487
vec
->
\xae_\xacgv
[vec->
\xae_\xacgc
] = 0;

488
	`wr\x99e
(2, *
\xad
,
	`\xa1\xbe\x92
(*ap));

489 *++
\xad
) {

490
	`wr\x99e
(2, " ", 1);

491
	`wr\x99e
(2, *
\xad
,
	`\xa1\xbe\x92
(*ap));

493
	}
}

495 
	$ex_vec
(
\xacgli\xa1
 *
vec
) {

496 
\x94\xbao
;

498 #ifde\xe0
DEBUG


499 i\xe0(
n\xdbxec
)

500
	`ex\x99
(0);

502
vec
->
\xae_\xacgv
[vec->
\xae_\xacgc
] = 0;

503
	`execv
(
vec
->
\xae_\xacgv
[1], &(vec->al_argv[1]));

504 i\xe0(
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
ENOEXEC
) {

505
vec
->
\xae_\xacgv
[0] =
SHELL
;

506
	`execv
(
SHELL
, &(
vec
->
\xae_\xacgv
[0]));

508 i\xe0(
	`ac\xfbss
(
vec
->
\xae_\xacgv
[1], 1) == 0) {

510
	`wr\x99e
(2, "Cannot\x83xecute ", 15);

511
	`wr\x99e
(2,
vec
->
\xae_\xacgv
[1],
	`\xa1\xbe\x92
(vec->al_argv[1]));

512
	`wr\x99e
(2, ". Not\x83nough memory.\n", 21);

513
	`wr\x99e
(2, "Try cc -F or use chmem\x81o\x84educe its stack\x87llocation\n", 54);

515
	`wr\x99e
(2,
vec
->
\xae_\xacgv
[1],
	`\xa1\xbe\x92
(vec->al_argv[1]));

516
	`wr\x99e
(2, " is\x82ot\x83xecutable\n", 19);

518
	`ex\x99
(1);

519
	}
}

521 
	$mk\x8bm\xb2ame
(
nm
[]) {

522 
i
;

523 
pid
 =
	`g\x91pid
();

525
nm
[0] = '/';

526
nm
[1] = 'c';

527
nm
[2] = 'e';

528
nm
[3] = 'm';

529 
i
 = 9; i > 3; i--) {

530
nm
[
i
] = (
pid
 % 10) + '0';

531
pid
 /= 10;

533
nm
[10] = '\0';

534
	}
}

	@commands/chmem.cpp

8 
	~<\xac\xbfy
>

10 
	#HLONG
 8

	)

11 
	#TEXT
 2

	)

12 
	#DATA
 3

	)

13 
	#BSS
 4

	)

14 
	#TOT
 6

	)

15 
	#TOTPOS
 24

	)

16 
	#SEPBIT
 0x00200000

	)

17 
	#MAGIC
 0x0301

	)

18 
	#MAX
 65536L

	)

21 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

33 *
p
;

34 
n
;

35 
fd
,
\xa3\xb7\xbf\x8b
;

36 
lsize
,
\xdeddy\xc7m
,
\xc3wdy\xc7m
,
\xc3wt\xd9
,
ov\x94\xe6ow
;

37
\xa1d
::
\xac\xbfy
<,
HLONG
>
h\x97d\x94
{};

39
p
 =
\xacgv
[1];

40 i\xe0(
\xacgc
 != 3)

41
	`u\xa7ge
();

42 i\xe0(*
p
 != '=' && *p != '+' && *p != '-')

43
	`u\xa7ge
();

44
n
 =
	`\xa9oi
(
p
 + 1);

45
lsize
 =
n
;

46 i\xe0(
n
 > 65520)

47
	`\xa1d\x94r3
("chmem: ",
p
 + 1, "\x81oo\x86arge\n");

49
fd
 =
	`ݒ
(
\xacgv
[2], 2);

50 i\xe0(
fd
 < 0)

51
	`\xa1d\x94r3
("chmem: c\xaa'\x88ݒ ",
\xacgv
[2], "\n");

53 i\xe0(
	`\xbbad
(
fd
,
h\x97d\x94
, (header)) != (header))

54
	`\xa1d\x94r3
("chmem: ",
\xacgv
[2], "bad header\n");

55 i\xe0((
h\x97d\x94
[0] & 0xFFFF\xe8!\xf0
MAGIC
)

56
	`\xa1d\x94r3
("chmem: ",
\xacgv
[2], "\x82ot\x83xecutable\n");

57
\xa3\xb7\xbf\x8b
 = (
h\x97d\x94
[0] &
SEPBIT
 ? 1 : 0);

58
\xdeddy\xc7m
 =
h\x97d\x94
[
TOT
] - h\x97d\x94[
DATA
] - h\x97d\x94[
BSS
];

59 i\xe0(
\xa3\xb7\xbf\x8b
 == 0)

60
\xdeddy\xc7m
 -\xf0
h\x97d\x94
[
TEXT
];

62 i\xe0(*
p
 == '=')

63
\xc3wdy\xc7m
 =
lsize
;

64 i\xe0(*
p
 == '+')

65
\xc3wdy\xc7m
 =
\xdeddy\xc7m
 +
lsize
;

66 i\xe0(*
p
 == '-')

67
\xc3wdy\xc7m
 =
\xdeddy\xc7m
 -
lsize
;

68
\xc3wt\xd9
 =
h\x97d\x94
[
DATA
] + h\x97d\x94[
BSS
] +
\xc3wdy\xc7m
;

69
ov\x94\xe6ow
 = (
\xc3wt\xd9
 >
MAX
 ?\x82ewtot - MAX : 0);

70
\xc3wdy\xc7m
 -\xf0
ov\x94\xe6ow
;

71
\xc3wt\xd9
 -\xf0
ov\x94\xe6ow
;

72 i\xe0(
\xa3\xb7\xbf\x8b
 == 0)

73
\xc3wt\xd9
 +\xf0
h\x97d\x94
[
TEXT
];

74
	`l\xa3ek
(
fd
, ()
TOTPOS
, 0);

75 i\xe0(
	`wr\x99e
(
fd
, &
\xc3wt\xd9
, 4) < 0)

76
	`\xa1d\x94r3
("chmem: c\xaa'\x88modify ",
\xacgv
[2], "\n");

77
	`\xb4\x9\xa9f
("%s: S\x8fck+m\xaelo\xf8\xac\x97 ch\xaaged from %D\x81\xd8%D by\x8bs.\n",
\xacgv
[2],
\xdeddy\xc7m
,
\xc3wdy\xc7m
);

78
	`ex\x99
(0);

79
	}
}

82 
	$u\xa7ge
() {

83
	`\xa1d_\x94r
("chmem {=+-}\x87mount file\n");

84
	`ex\x99
(1);

85
	}
}

88 
	$\xa1d\x94r3
(cڡ *
s1
, cڡ *
s2
, cڡ *
s3
) {

89
	`\xa1d_\x94r
(
s1
);

90
	`\xa1d_\x94r
(
s2
);

91
	`\xa1d_\x94r
(
s3
);

92
	`ex\x99
(1);

93
	}
}

	@commands/chmod.cpp

15 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

16 
i
;

17 
\xa1\xa9us
 = 0;

18 
\xc3wmode
;

20 i\xe0(
\xacgc
 < 3) {

21
	`U\xa7ge
();

24
\xc3wmode
 =
	`\xd\xe1oi
(
\xacgv
[1]);

26 
i
 = 2; i <
\xacgc
; i++) {

27 i\xe0(
	`ac\xfbss
(
\xacgv
[
i
], 0)) {

28
	`\xb4\x9\xa9s
("chmod: c\xaa'\x88ac\xfbs\xa0%s\n",
\xacgv
[
i
]);

29
\xa1\xa9us
++;

30 } i\xe0(
	`chmod
(
\xacgv
[
i
],
\xc3wmode
) < 0) {

31
	`\xb4\x9\xa9s
("chmod: c\xaa'\x88ch\xaag\x90%s\n",
\xacgv
[
i
]);

32
\xa1\xa9us
++;

35
	`ex\x99
(
\xa1\xa9us
);

36
	}
}

39 
	$\xd\xe1oi
(cڡ *
\xacg
) {

40 
c
,
i
;

42
i
 = 0;

43 (
c
 = *
\xacg
++) >= '0' && c <= '7')

44
i
 = (\x98<< 3\xe8+ (
c
 - '0');

45 i\xe0(
c
 != '\0')

46
	`U\xa7ge
();

47  (
i
);

48
	}
}

51 
	$U\xa7ge
() {

52
	`\xb4\x9\xa9s
("Usage: chmod [mode] file ...\n");

53
	`ex\x99
(255);

54
	}
}

	@commands/chown.cpp

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"pwd.h\xb5
"

16 
	~"\xa1\xa9.h\xb5
"

17 
	~"\xa1dio.h\xb5
"

20 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

21 
i
,
\xa1\xa9us
 = 0;

22 
\xb7sswd
 *
pwd
, *
	`g\x91pw\xc7m
();

23 
\xa1\xa9

\xa1buf
;

25 i\xe0(
\xacgc
 < 3) {

26
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Usage: chown uid file ...\n");

27
	`ex\x99
(1);

30 i\xe0((
pwd
 =
	`g\x91pw\xc7m
(
\xacgv
[1])) == 0) {

31
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Unknow\xc0u\xa3\xb8id: %s\n",
\xacgv
[1]);

32
	`ex\x99
(4);

35 
i
 = 2; i <
\xacgc
; i++) {

36 i\xe0(
	`\xa1\xa9
(
\xacgv
[
i
], &
\xa1buf
) < 0) {

37
	`\xb3\xbc\xdc
(
\xacgv
[
i
]);

38
\xa1\xa9us
++;

39 } i\xe0(
	`chown
(
\xacgv
[
i
],
pwd
->
pw_uid
,
\xa1buf
.
\xa1_gid
) < 0) {

40
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s:\x82\xd9 ch\xaaged\n",
\xacgv
[
i
]);

41
\xa1\xa9us
++;

44
	`ex\x99
(
\xa1\xa9us
);

45
	}
}

	@commands/clr.cpp

9 
	$ma\x9a
() {

12
	`\xb4\x9\xa9s
("\033 8\033~0");

13
	`ex\x99
(0);

14
	}
}

	@commands/cmp.cpp

8 
	~<\xac\xbfy
>

10 
	#BLOCK_SIZE
 8192

	)

12
us\x9ag

	gunsh\xd\xf9
 = ;

14 *
	gf\x9\x93_1
, *
	gf\x9\x93_2
;

15
	g\xa1d
::
\xac\xbfy
<
\xa1d
::\xac\xbfy<,
	gBLOCK_SIZE
>, 2>
	gbuf
{};

16
unsh\xd\xf9

	gl\xe6ag
,
	gs\xe6ag
;

18 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

19 
fd1
,
fd2
,
i
,
ex\x99_\xa1\xa9us
;

21 i\xe0(
\xacgc
 < 3 ||\x87rgc > 4)

22
	`u\xa7ge
();

23
l\xe6ag
 = 0;

24
s\xe6ag
 = 0;

25
fd1
 = -1;

26
fd2
 = -1;

27 
i
 = 1; i <
\xacgc
 &&
\xacgv
[i][0] == '-'; i++) {

28 
\xacgv
[
i
][1]) {

30
l\xe6ag
++;

33
s\xe6ag
++;

36
fd1
 = 0;

39
	`u\xa7ge
();

43 i\xe0(
fd1
 == -1) {

44 i\xe0(
i
 =\xf0
\xacgc
 || (
fd1
 =
	`ݒ
(
\xacgv
[i], 0)) < 0)

45
	`\xff\xc1ݒ
(
\xacgv
[
i
]);

47
f\x9\x93_1
 =
\xacgv
[
i
++];

49
f\x9\x93_1
 = "stdin";

51 i\xe0(
i
 =\xf0
\xacgc
 || (
fd2
 =
	`ݒ
(
\xacgv
[i], 0)) < 0)

52
	`\xff\xc1ݒ
(
\xacgv
[
i
]);

53
f\x9\x93_2
 =
\xacgv
[
i
];

55
ex\x99_\xa1\xa9us
 =
	`cmp
(
fd1
,
fd2
);

57
	`\x\xe3o\xa3
(
fd1
);

58
	`\x\xe3o\xa3
(
fd2
);

60
	`ex\x99
(
ex\x99_\xa1\xa9us
);

61
	}
}

63 
	#ONE
 0

	)

64 
	#TWO
 1

	)

66 
	$cmp
(
fd1
, 
fd2
) {

67 
ch\xac_\x\xe7t
,
l\x9\xab_\x\xe7t
;

68 
unsh\xd\xf9

i
;

69
unsh\xd\xf9

n1
,
n2
,
ex\x99_\xa1\xa9us
;

70 
c1
,
c2
;

72
ch\xac_\x\xe7t
 = 1L;

73
l\x9\xab_\x\xe7t
 = 1L;

74
ex\x99_\xa1\xa9us
 = 0;

76
n1
 =
	`\xbbad
(
fd1
,
buf
[
ONE
],
BLOCK_SIZE
);

77
n2
 =
	`\xbbad
(
fd2
,
buf
[
TWO
],
BLOCK_SIZE
);

78
i
 = 0;

79 
i
 <
n1
 && i <
n2
) {

80 i\xe0(
buf
[
ONE
][
i
] !\xf0buf[
TWO
][i]) {

81 i\xe0(
s\xe6ag
)

83 i\xe0(!
l\xe6ag
) {

84
	`\xb4\x9\xa9f
("%\xa0%\xa0dif\xe3r: ch\xac %D,\x86\x9a\x90%D\n",
f\x9\x93_1
,
f\x9\x93_2
,
ch\xac_\x\xe7t
,
l\x9\xab_\x\xe7t
);

87
c1
 =
buf
[
ONE
][
i
];

88
c2
 =
buf
[
TWO
][
i
];

89
	`\xb4\x9\xa9f
("\t%D %3\xd8%3o\n",
ch\xac_\x\xe7t
,
c1
 & 0377,
c2
 & 0377);

90
ex\x99_\xa1\xa9us
 = 1;

92 i\xe0(
buf
[
ONE
][
i
] == '\n')

93
l\x9\xab_\x\xe7t
++;

94
i
++;

95
ch\xac_\x\xe7t
++;

97 i\xe0(
n1
 !\xf0
n2
) {

98 i\xe0(
n1
 <
n2
)

99
	`\xb4\x9\xa9s
("cmp: EOF o\xc0%s\n",
f\x9\x93_1
);

101
	`\xb4\x9\xa9s
("cmp: EOF o\xc0%s\n",
f\x9\x93_2
);

104 } 
n1
 > 0 &&
n2
 > 0);

105  (
ex\x99_\xa1\xa9us
);

106
	}
}

108 
	$u\xa7ge
() {

109
	`\xa1d_\x94r
("Usage: cmp [-ls] file1 file2\n");

110
	`ex\x99
(2);

111
	}
}

113 
	$\xff\xc1ݒ
(*
s
) {

114
	`\xa1d_\x94r
("cmp: cannot open ");

115
	`\xa1d_\x94r
(
s
);

116
	`\xa1d_\x94r
("\n");

117
	`ex\x99
(1);

118
	}
}

	@commands/comm.cpp

20 
	#BUFSIZ
 (512)

	)

21 
	#LINMAX
 (600)

	)

23 
	sf\x9\x93
 {

24 *
	m\xc7me
;

25 
	mfd
;

26 
	mbuf
[
BUFSIZ
];

27 *
	m\xc3xt
;

28 *
	m\x92dp
;

29 
	m\xa3\x92eof
;

30 }
	gf\x9\x93s
[2];

32 
	gl\x9\xabs
[2][
LINMAX
];

34 
	gc\xde\xe6gs
[3] = {1, 2, 3};

36 *
	gumsg
 = "Usage: comm [-[123]] file1 file2\n";

38 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

39 
\xfat
;

40 i\xe0(
\xacgc
 > 1 &&
\xacgv
[1][0] == '-' &&\x87rgv[1][1] != '\0') {

41 *
\xad
;

42 
\xad
 = &
\xacgv
[1][1]; *ap;\x87p++)

43 *
\xad
) {

47
\xfat
 = *
\xad
 - '1';

48 i\xe0(
c\xde\xe6gs
[
\xfat
] == 0)

50
c\xde\xe6gs
[
\xfat
] = 0;

51 
\xfat
++; cnt < 3; cnt++)

52
c\xde\xe6gs
[
\xfat
]--;

55
	`u\xa7ge
();

57
\xacgc
--;

58
\xacgv
++;

60 i\xe0(
\xacgc
 != 3)

61
	`u\xa7ge
();

62
	`eݒ
(
\xacgv
[1], &
f\x9\x93s
[0]);

63
	`eݒ
(
\xacgv
[2], &
f\x9\x93s
[1]);

64
	`comm
();

65
	`ex\x99
(0);

66
	}
}

68 
	$u\xa7ge
() {

70
	`\xa1d_\x94r
(
umsg
);

71
	`ex\x99
(1);

72
	}
}

74 
	$\x94r\xdc
(*
s
, *
f
) {

75
	`\xa1d_\x94r
("comm: ");

76
	`\xa1d_\x94r
(
s
);

77 i\xe0(
f
)

78
	`\xa1d_\x94r
(
f
);

79
	`\xa1d_\x94r
("\n");

80
	`ex\x99
(1);

81
	}
}

83 
	$eݒ
(*
\xe2
, 
f\x9\x93
 *file) {

84
f\x9\x93
->
\xc7me
 =
\xe2
;

85
f\x9\x93
->
\xc3xt
 = f\x9ee->
\x92dp
 = &f\x9ee->
buf
[0];

86
f\x9\x93
->
\xa3\x92eof
 = 0;

87 i\xe0(
\xe2
[0] == '-' && fn[1] == '\0')

88
f\x9\x93
->
fd
 = 0;

89 i\xe0((
f\x9\x93
->
fd
 =
	`ݒ
(
\xe2
, 0)) < 0)

90
	`\x94r\xdc
("\xffn'\x88ݒ ",
\xe2
);

91
	}
}

93 
	$g\x91buf
(
f\x9\x93
 *file) {

97 
n
;

99 i\xe0(
f\x9\x93
->
\xa3\x92eof
)

101 i\xe0((
n
 =
	`\xbbad
(
f\x9\x93
->
fd
, &f\x9ee->
buf
[0],
BUFSIZ
)) < 0)

102
	`\x94r\xdc
("\xbbad\x83\xbc\xdc o\xc0",
f\x9\x93
->
\xc7me
);

103 i\xe0(
n
 == 0) {

104
f\x9\x93
->
\xa3\x92eof
++;

107
f\x9\x93
->
\xc3xt
 = &f\x9ee->
buf
[0];

108
f\x9\x93
->
\x92dp
 = &f\x9ee->
buf
[
n
];

110
	}
}

112 
	$\xbbadl\x9\xab
(
\xe2o
) {

117 
f\x9\x93
 *f\x9e\x90\xf0&
f\x9\x93s
[
\xe2o
];

118 *
buf
 =
l\x9\xabs
[
\xe2o
];

120 i\xe0(
f\x9\x93
->
\xc3xt
 =\xf0f\x9ee->
\x92dp
 &&
	`g\x91buf
(file))

122 (*
buf
++ = *
f\x9\x93
->
\xc3xt
++) != '\n')

123 i\xe0(
f\x9\x93
->
\xc3xt
 =\xf0f\x9ee->
\x92dp
 &&
	`g\x91buf
(file)) {

124 *
buf
++ = '\n';

125 *
buf
 = '\0';

128 *
buf
 = '\0';

130
	}
}

132 
	$comm
() {

133 
\xbbs
;

135 i\xe0(!
	`\xbbadl\x9\xab
(0)) {

136
	`\xfdyc\xde
(1);

139 i\xe0(!
	`\xbbadl\x9\xab
(1)) {

140
	`putc\xde
(0,
l\x9\xabs
[0]);

141
	`\xfdyc\xde
(0);

145 i\xe0((
\xbbs
 =
	`\xa1rcmp
(
l\x9\xabs
[0],\x86ines[1])) != 0) {

146
\xbbs
 =\x84es > 0;

147
	`putc\xde
(
\xbbs
,
l\x9\xabs
[res]);

148 i\xe0(!
	`\xbbadl\x9\xab
(
\xbbs
)) {

149
	`putc\xde
(!
\xbbs
,
l\x9\xabs
[!res]);

150
	`\xfdyc\xde
(!
\xbbs
);

154
	`putc\xde
(2,
l\x9\xabs
[0]);

155 i\xe0(!
	`\xbbadl\x9\xab
(0)) {

156
	`\xfdyc\xde
(1);

159 i\xe0(!
	`\xbbadl\x9\xab
(1)) {

160
	`putc\xde
(0,
l\x9\xabs
[0]);

161
	`\xfdyc\xde
(0);

167
	}
}

169 
	$putc\xde
(
c\xde
, *
buf
) {

170 
\xfat
;

172 i\xe0(
c\xde\xe6gs
[
c\xde
] == 0)

174 
\xfat
 = 0; c\xc1 <
c\xde\xe6gs
[
c\xde
] - 1; cnt++)

175
	`\xb4\x9\xa9s
("\t");

176
	`\xb4\x9\xa9s
("%s",
buf
);

177
	}
}

179 
	$\xfdyc\xde
(
c\xde
) {

180 i\xe0(
c\xde\xe6gs
[
c\xde
])

181 
	`\xbbadl\x9\xab
(
c\xde
))

182
	`putc\xde
(
c\xde
,
l\x9\xabs
[col]);

183
	}
}

	@commands/cp.cpp

9 
	~"\xa1\xa9.h\xb5
"

10 
	~<\xac\xbfy
>

12 
	#TRANSFER_UNIT
 16384

	)

13
	g\xa1d
::
\xac\xbfy
<,
	gTRANSFER_UNIT
>
	g\xfdbuf
{};

14 
	gis\xe6\xddpy
;

16 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

17 
fd1
,
fd2
,
m
,
s
;

18 
\xa1\xa9

sbuf
,
sbuf2
;

20 i\xe0(
\xacgc
 < 3)

21
	`u\xa7ge
();

24
s
 =
	`\xa1\xa9
(
\xacgv
[
\xacgc
 - 1], &
sbuf
);

25
m
 =
sbuf
.
\xa1_mode
 &
S_IFMT
;

26 i\xe0(
s
 >\xf00 &&
m
 =\xf0
S_IFDIR
) {

28
	`\xfd_to_d\x9c
(
\xacgc
,
\xacgv
);

29 } i\xe0(
\xacgc
 > 3) {

31
	`u\xa7ge
();

32 } i\xe0(
s
 < 0 ||
m
 =\xf0
S_IFREG
 || m =\xf0
S_IFCHR
 || m =\xf0
S_IFBLK
) {

34 i\xe0(
	`equ\x\xab
(
\xacgv
[1],\x87rgv[2])) {

35
	`\xa1d_\x94r
("Cannot copy\x87 file\x81o itself\n");

36
	`ex\x99
(-1);

40
fd1
 =
	`ݒ
(
\xacgv
[1], 0);

41 i\xe0(
fd1
 < 0) {

42
	`\xa1d\x94r3
("C\xaan\xd9 o\xb3\xc0",
\xacgv
[1], "\n");

43
	`ex\x99
(1);

45
	`f\xa1\xa9
(
fd1
, &
sbuf
);

46
fd2
 =
	`\xfc\x97t
(
\xacgv
[2],
sbuf
.
\xa1_mode
 & 0777);

47 i\xe0(
fd2
 < 0) {

48
	`\xa1d\x94r3
("C\xaan\xd9 c\xbb\xa9\x90",
\xacgv
[2], "\n");

49
	`ex\x99
(2);

51
	`f\xa1\xa9
(
fd2
, &
sbuf2
);

52 i\xe0((
sbuf2
.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFBLK
)

53
is\xe6\xddpy
 = 1;

54
	`c\xddyf\x9\x93
(
fd1
,
fd2
);

56
	`\xa1d\x94r3
("C\xaan\xd9 c\xddy\x81\xd8",
\xacgv
[2], "\n");

57
	`ex\x99
(3);

59
	}
}

61 
	$\xfd_to_d\x9c
(
\xacgc
, *
\xacgv
[]) {

62 
i
,
fd1
,
fd2
;

63
\xa1d
::
\xac\xbfy
<, 256>
d\x9c\xc7me
{};

64 *
\xb1r
, *
dp
;

65 
\xa1\xa9

sbuf
;

67 
i
 = 1; i <
\xacgc
 - 1; i++) {

68
fd1
 =
	`ݒ
(
\xacgv
[
i
], 0);

69 i\xe0(
fd1
 < 0) {

70
	`\xa1d\x94r3
("C\xaan\xd9 o\xb3\xc0",
\xacgv
[
i
], "\n");

74
\xb1r
 =
\xacgv
[
\xacgc
 - 1];

75
dp
 =
d\x9c\xc7me
.
	`d\xa9a
();

76 *
\xb1r
 != 0)

77 *
dp
++ = *
\xb1r
++;

79 *
dp
++ = '/';

80
\xb1r
 =
\xacgv
[
i
];

83 *
\xb1r
 != 0)

84
\xb1r
++;

85 
\xb1r
 >
\xacgv
[
i
] && *ptr != '/')

86
\xb1r
--;

87 i\xe0(*
\xb1r
 == '/')

88
\xb1r
++;

89 *
\xb1r
 != 0)

90 *
dp
++ = *
\xb1r
++;

91 *
dp
++ = 0;

92
	`f\xa1\xa9
(
fd1
, &
sbuf
);

93
fd2
 =
	`\xfc\x97t
(
d\x9c\xc7me
.
	`d\xa9a
(),
sbuf
.
\xa1_mode
 & 0777);

94 i\xe0(
fd2
 < 0) {

95
	`\xa1d\x94r3
("C\xaan\xd9 c\xbb\xa9\x90",
d\x9c\xc7me
.
	`d\xa9a
(), "\n");

98
	`c\xddyf\x9\x93
(
fd1
,
fd2
);

100
	}
}

102 
	$c\xddyf\x9\x93
(
fd1
, 
fd2
) {

103 
n
,
m
;

106
n
 =
	`\xbbad
(
fd1
,
\xfdbuf
,
TRANSFER_UNIT
);

107 i\xe0(
n
 < 0) {

108
	`\xa1d_\x94r
("Write\x83rror\n");

111 i\xe0(
n
 > 0) {

112
m
 =
	`wr\x99e
(
fd2
,
\xfdbuf
,
n
);

113 i\xe0(
m
 !\xf0
n
) {

114
	`\xb3\xbc\xdc
("cp");

115
	`ex\x99
(1);

117 i\xe0(
is\xe6\xddpy
)

118
	`sync
();

120 } 
n
 =\xf0
TRANSFER_UNIT
);

121
	`\x\xe3o\xa3
(
fd1
);

122
	`\x\xe3o\xa3
(
fd2
);

123
	}
}

125 
	$u\xa7ge
() {

126
	`\xa1d_\x94r
("Usage: cp f1 f2; or cp f1 ... fn d2\n");

127
	`ex\x99
(-1);

128
	}
}

130 
	$equ\x\xab
(*
s1
, *
s2
) {

132 i\xe0(*
s1
 =\xf00 && *
s2
 == 0)

134 i\xe0(*
s1
 !\xf0*
s2
)

136 i\xe0(*
s1
 =\xf00 || *
s2
 == 0)

138
s1
++;

139
s2
++;

141
	}
}

143 
	$m\xa9ch
(*
s1
, *
s2
, 
n
) {

144 
n
--) {

145 i\xe0(*
s1
++ !\xf0*
s2
++)

149
	}
}

151 
	$\xa1d\x94r3
(*
s1
, *
s2
, *
s3
) {

152
	`\xa1d_\x94r
(
s1
);

153
	`\xa1d_\x94r
(
s2
);

154
	`\xa1d_\x94r
(
s3
);

155
	}
}

	@commands/date.cpp

9 
	~"\xa1dio.h\xb5
"

10 
	~<\xac\xbfy
>

11 
	~<\xa1r\x9ag_v\x9bw
>

13 
	gq\xe6ag
;

15
	g\xa1d
::
\xac\xbfy
<, 12>
	gdays_\xb3r_m\xd\xa9h
 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

16
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
\xa1r\x9ag_v\x9bw
, 12>
	gm\xd\xa9hs
 = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

18
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
\xa1r\x9ag_v\x9bw
, 7>
	gdays
 = {"Thu", "Fri", "Sat", "Sun", "Mon", "Tue", "Wed"};

21 
	my\x97r
,
	mm\xd\xa9h
,
	mday
,
	mhour
,
	mm\x9a
,
	m\xa3c
;

22 }
	gtm
;

24 
	gs_p_m\x9a
;

25 
	gs_p_hour
;

26 
	gs_p_day
;

27 
	gs_p_y\x97r
;

29 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

30 
t
,
	`time
();

32 i\xe0(
\xacgc
 > 2)

33
	`u\xa7ge
();

34
s_p_m\x9a
 = 60;

35
s_p_hour
 = 60 *
s_p_m\x9a
;

36
s_p_day
 = 24 *
s_p_hour
;

37
s_p_y\x97r
 = 365 *
s_p_day
;

38 i\xe0(
\xacgc
 == 2) {

39 i\xe0(*
\xacgv
[1] == '-' && (argv[1][1] | 0x60) == 'q') {

41 
time_buf
[15];

43
q\xe6ag
 = 1;

44
	`\xe4eݒ
(
\xa1d\x9a
, "/dev/tty0", "r");

45
	`\xb4\x9\xa9f
("\nPlease\x83nter date (MMDDYYhhmmss). Then hit RETURN.\n");

46
	`g\x91s
(
time_buf
);

47
	`\xa3t_time
(
time_buf
);

48
	`ex\x99
(0);

50
	`\xa3t_time
(
\xacgv
[1]);

52
	`time
(&
t
);

53
	`cv_time
(
t
);

54
	`\xb4\x9\xa9f
("%\xa0%\xa0%d %02d:%02d:%02d %d\n",
days
[(
t
 /
s_p_day
\xe8% 7],
m\xd\xa9hs
[
tm
.
m\xd\xa9h
],\x81m.
day
,

55
tm
.
hour
,\x81m.
m\x9a
,\x81m.
\xa3c
,\x81m.
y\x97r
);

57
	`ex\x99
(0);

58
	}
}

60 
	$cv_time
(
t
) {

61
tm
.
y\x97r
 = 0;

62
tm
.
m\xd\xa9h
 = 0;

63
tm
.
day
 = 1;

64
tm
.
hour
 = 0;

65
tm
.
m\x9a
 = 0;

66
tm
.
\xa3c
 = 0;

67 
t
 >\xf0
s_p_y\x97r
) {

68 i\xe0(((
tm
.
y\x97r
 + 2) % 4) == 0)

69
t
 -\xf0
s_p_day
;

70
tm
.
y\x97r
 += 1;

71
t
 -\xf0
s_p_y\x97r
;

73 i\xe0(((
tm
.
y\x97r
 + 2) % 4) == 0)

74
days_\xb3r_m\xd\xa9h
[1]++;

75
tm
.
y\x97r
 += 1970;

76 
t
 >\xf0(
days_\xb3r_m\xd\xa9h
[
tm
.
m\xd\xa9h
] *
s_p_day
))

77
t
 -\xf0
days_\xb3r_m\xd\xa9h
[
tm
.
m\xd\xa9h
++] *
s_p_day
;

78 
t
 >\xf0
s_p_day
) {

79
t
 -\xf0
s_p_day
;

80
tm
.
day
++;

82 
t
 >\xf0
s_p_hour
) {

83
t
 -\xf0
s_p_hour
;

84
tm
.
hour
++;

86 
t
 >\xf0
s_p_m\x9a
) {

87
t
 -\xf0
s_p_m\x9a
;

88
tm
.
m\x9a
++;

90
tm
.
\xa3c
 = ()
t
;

91
	}
}

93 
	$\xa3t_time
(*
t
) {

94 *
\x8d
;

95 
\xf9
,
	`time
();

96 
\xcbn
;

98
	`time
(&
\xf9
);

99
	`cv_time
(
\xf9
);

100
tm
.
y\x97r
 -= 1970;

101
tm
.
m\xd\xa9h
++;

102
\xcbn
 =
	`\xa1\xbe\x92
(
t
);

103 i\xe0(
\xcbn
 != 12 &&\x86en != 10 &&\x86en != 6 &&\x86en != 4)

104
	`u\xa7ge
();

105
\x8d
 =
t
;

106 *
\x8d
)

107 i\xe0(!
	`isdig\x99
(*
\x8d
++))

108
	`bad
();

109 i\xe0(
\xcbn
 == 6 ||\x86en == 12)

110
tm
.
\xa3c
 =
	`c\xdav
(&
\x8d
, 59);

111
tm
.
m\x9a
 =
	`c\xdav
(&
\x8d
, 59);

112
tm
.
hour
 =
	`c\xdav
(&
\x8d
, 23);

113 i\xe0(
\xcbn
 == 12 ||\x86en == 10) {

114
tm
.
y\x97r
 =
	`c\xdav
(&
\x8d
, 99);

115
tm
.
day
 =
	`c\xdav
(&
\x8d
, 31);

116
tm
.
m\xd\xa9h
 =
	`c\xdav
(&
\x8d
, 12);

117
tm
.
y\x97r
 -= 70;

119
\xf9
 =
tm
.
y\x97r
 *
s_p_y\x97r
;

120
\xf9
 +\xf0((
tm
.
y\x97r
 + 1\xe8/ 4\xe8*
s_p_day
;

121 i\xe0(((
tm
.
y\x97r
 + 2) % 4) == 0)

122
days_\xb3r_m\xd\xa9h
[1]++;

123
\xcbn
 = 0;

124
tm
.
m\xd\xa9h
--;

125 
\xcbn
 <
tm
.
m\xd\xa9h
)

126
\xf9
 +\xf0
days_\xb3r_m\xd\xa9h
[
\xcbn
++] *
s_p_day
;

127
\xf9
 +\xf0--
tm
.
day
 *
s_p_day
;

128
\xf9
 +\xf0
tm
.
hour
 *
s_p_hour
;

129
\xf9
 +\xf0
tm
.
m\x9a
 *
s_p_m\x9a
;

130
\xf9
 +\xf0
tm
.
\xa3c
;

131 i\xe0(
days_\xb3r_m\xd\xa9h
[1] > 28)

132
days_\xb3r_m\xd\xa9h
[1] = 28;

133 i\xe0(
	`\xa1ime
(&
\xf9
)) {

134
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Set date\x82ot\x87llowed\n");

136
	`cv_time
(
\xf9
);

138
	}
}

140 
	$c\xdav
(**
\xb1r
, 
max
) {

141 
buf
;

143 *
\xb1r
 -= 2;

144
buf
 =
	`\xa9oi
(*
\xb1r
);

145 **
\xb1r
 = 0;

146 i\xe0(
buf
 < 0 || bu\xe0>
max
)

147
	`bad
();

148  (
buf
);

149
	}
}

151 
	$bad
() {

152
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Date: bad conversion\n");

153
	`ex\x99
(1);

154
	}
}

156 
	$u\xa7ge
() {

157 i\xe0(
q\xe6ag
 == 0)

158
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Usage: date [-q] [[MMDDYY]hhmm[ss]]\n");

159
	`ex\x99
(1);

160
	}
}

162 
	$isdig\x99
(
c
) {

163 i\xe0(
c
 >= '0' && c <= '9')

167
	}
}

	@commands/dd.cpp

7 
	~"sig\xc7l.h\xb5
"

8 
	~"\xa1dio.h\xb5
"

10 
	#EOS
 '\0'

	)

13
us\x9ag

	gBoޗn
 =
bo\xde
;

15 *
	gpch
, *
	g\x94r\xd\xfd
;

23 
Boޗn

	$is
(*
pc
) {

24 *
ps
 =
pch
;

26 *
ps
++ =\xf0*
pc
++)

27 i\xe0(*
pc
 =\xf0
EOS
) {

28
pch
 =
ps
;

29 
\x8cue
;

31 
\xe7l\xa3
;

32
	}
}

36
cڡex\xb4
 
	gkBigNum
 = 2147483647;

43 
	$num
() {

44 
\xaas
;

45 *
pc
;

47
pc
 =
pch
;

48
\xaas
 = 0L;

49 (*
pc
 >= '0') && (*pc <= '9'))

50
\xaas
 = ()((*
pc
++ - '0') + (ans * 10));

51 
\x8cue
)

52 *
pc
++) {

54
\xaas
 *= 2L;

57
\xaas
 *= 512L;

60
\xaas
 *= 1024L;

63
pch
 =
pc
;

64
\xaas
 *\xf0()
	`num
();

65 
EOS
:

66 i\xe0((
\xaas
 >\xf0
kBigNum
) || (ans < 0)) {

67
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd:\x87rgum\x92\x88%\xa0ou\x88o\xe0\xbfnge\n",
\x94r\xdcp
);

68
	`d\xd\xab
(1);

70  (()
\xaas
);

72
	}
}

74 
	#SWAB
 0x0001

	)

75 
	#LCASE
 0x0002

	)

76 
	#UCASE
 0x0004

	)

77 
	#NOERROR
 0x0008

	)

78 
	#SYNC
 0x0010

	)

79 
	#BLANK
 ' '

	)

80 
	#DEFAULT
 512

	)

82 
	gcbs
,
	gbs
,
	gsk\x9d
,
	gn\xa3ek
,
	gcou\xc1
;

83 
	gibs
 =
DEFAULT
;

84 
	gobs
 =
DEFAULT
;

85 
	gf\x9\x93s
 = 1;

86 *
	gif\x9e\x92ame
 =
NULL
;

87 *
	gof\x9e\x92ame
 =
NULL
;

89 
	gc\xdav\xe6ag
 = 0;

90 
	g\xe6ag
 = 0;

91 
\xfau\xce
(),
ibm
(),
nu\x\xfb
(),
ov\x94
();

92 
	gifd
,
	gofd
,
	gibc
;

93 *
	gibuf
, *
	gobuf
, *
	g\xdd
;

94 *
sbrk
();

95 
	gnifu\x\xfb
,
	gn\x9d\xa\xf9\x9\xe6
,
	gnofu\x\xfb
,
	gnݬt\x9\xe6
;

96 
	gcbc
;

97 
	g\xc1r
,
	gobc
;

98 
	gns
;

99 
	gm\xcbn
[] = {64, 45, 82, 45, 83, 96, 109, 100, 109, 97, 96, 116, 108, 9};

101 
	$puto
() {

102 
n
;

104 i\xe0(
obc
 == 0)

106 i\xe0(
obc
 =\xf0
obs
)

107
nofu\x\xfb
++;

109
nݬt\x9\xe6
++;

110 i\xe0((
n
 =
	`wr\x99e
(
ofd
,
obuf
,
obc
)) != obc) {

111
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: write\x83rror\n");

112
	`d\xd\xab
(1);

114
obc
 = 0;

115
	}
}

117 
	$\xa1\xa9i\xa1ics
() {

118
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%u+%u\x84ec\xdcd\xa0\x9a\n",
nifu\x\xfb
,
n\x9d\xa\xf9\x9\xe6
);

119
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%u+%u\x84ec\xdcd\xa0out\n",
nofu\x\xfb
,
nݬt\x9\xe6
);

120 i\xe0(
\xc1r
)

121
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%d\x81run\xff\x8bd\x84ec\xdcds\n",
\xc1r
);

122
	}
}

124 
	$ov\x94
() {

125
	`\xa1\xa9i\xa1ics
();

126
	`d\xd\xab
(0);

127
	}
}

129 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

130 (*
c\xdav\x94t
)();

131 *
\x9d\x8c
;

132 
i
,
j
;

134
c\xdav\x94t
 =
nu\x\xfb
;

135
\xacgc
--;

136
\xacgv
++;

137 
\xacgc
-- > 0) {

138
pch
 = *(
\xacgv
++);

139 i\xe0(
	`is
("ibs=")) {

140
\x94r\xdcp
 =
pch
;

141
ibs
 =
	`num
();

144 i\xe0(
	`is
("obs=")) {

145
\x94r\xdcp
 =
pch
;

146
obs
 =
	`num
();

149 i\xe0(
	`is
("bs=")) {

150
\x94r\xdcp
 =
pch
;

151
bs
 =
	`num
();

154 i\xe0(
	`is
("if=")) {

155
if\x9e\x92ame
 =
pch
;

158 i\xe0(
	`is
("of=")) {

159
of\x9e\x92ame
 =
pch
;

162 i\xe0(
	`is
("skip=")) {

163
\x94r\xdcp
 =
pch
;

164
sk\x9d
 =
	`num
();

167 i\xe0(
	`is
("seek=")) {

168
\x94r\xdcp
 =
pch
;

169
n\xa3ek
 =
	`num
();

172 i\xe0(
	`is
("count=")) {

173
\x94r\xdcp
 =
pch
;

174
cou\xc1
 =
	`num
();

177 i\xe0(
	`is
("files=")) {

178
\x94r\xdcp
 =
pch
;

179
f\x9\x93s
 =
	`num
();

182 i\xe0(
	`is
("length=")) {

183
\x94r\xdcp
 =
pch
;

184 
j
 = 0; j < 13; j++)

185
m\xcbn
[
j
]++;

186
	`wr\x99e
(2,
m\xcbn
, 14);

189 i\xe0(
	`is
("conv=")) {

190 *
pch
 !\xf0
EOS
) {

191 i\xe0(
	`is
("lcase")) {

192
c\xdav\xe6ag
 |\xf0
LCASE
;

195 i\xe0(
	`is
("ucase")) {

196
c\xdav\xe6ag
 |\xf0
UCASE
;

199 i\xe0(
	`is
("noerror")) {

200
c\xdav\xe6ag
 |\xf0
NOERROR
;

203 i\xe0(
	`is
("sync")) {

204
c\xdav\xe6ag
 |\xf0
SYNC
;

207 i\xe0(
	`is
("swab")) {

208
c\xdav\xe6ag
 |\xf0
SWAB
;

211 i\xe0(
	`is
(","))

213
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: bad\x87rgum\x92t: %s\n",
pch
);

214
	`d\xd\xab
(1);

216 i\xe0(*
pch
 =\xf0
EOS
)

219
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: bad\x87rgum\x92t: %\xa0\n",
pch
);

220
	`d\xd\xab
(1);

222 i\xe0((
c\xdav\x94t
 =\xf0
nu\x\xfb
\xe8&& (
c\xdav\xe6ag
 & (
UCASE
 |
LCASE
)))

223
c\xdav\x94t
 =
\xfau\xce
;

224 i\xe0((
ifd
 = ((
if\x9e\x92ame
\xe8?
	`ݒ
(if\x9e\x92ame, 0\xe8:
	`dup
(0))) < 0) {

225
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: c\xaan\xd9 o\xb3\xc0%s\n", (
if\x9e\x92ame
) ? ifilename : "stdin");

226
	`d\xd\xab
(1);

228 i\xe0((
ofd
 = ((
of\x9e\x92ame
\xe8?
	`\xfc\x97t
(of\x9e\x92ame, 0666\xe8:
	`dup
(1))) < 0) {

229
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: c\xaan\xd9 c\xbb\xa9 %s\n", (
of\x9e\x92ame
) ? ofilename : "stdout");

230
	`d\xd\xab
(1);

232 i\xe0(
bs
) {

233
ibs
 =
obs
 =
bs
;

234 i\xe0(
c\xdav\x94t
 =\xf0
nu\x\xfb
)

235
\xe6ag
++;

237 i\xe0(
ibs
 == 0) {

238
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: ibs cannot be zero\n");

239
	`d\xd\xab
(1);

241 i\xe0(
obs
 == 0) {

242
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd: obs cannot be zero\n");

243
	`d\xd\xab
(1);

245 i\xe0((
ibuf
 =
	`sbrk
(
ibs
)) == (*)-1) {

246
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd:\x82ot\x83nough memory\n");

247
	`d\xd\xab
(1);

249 i\xe0((
obuf
 = (
\xe6ag
\xe8?
ibuf
 :
	`sbrk
(
obs
)) == (*)-1) {

250
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd:\x82ot\x83nough memory\n");

251
	`d\xd\xab
(1);

253
ibc
 =
obc
 =
cbc
 = 0;

254
\xdd
 =
obuf
;

255 i\xe0(
	`sig\xc7l
(
SIGINT
,
SIG_IGN
) != SIG_IGN)

256
	`sig\xc7l
(
SIGINT
,
ov\x94
);

257 ;
sk\x9d
; skip--)

258
	`\xbbad
(
ifd
,
ibuf
,
ibs
);

259 ;
n\xa3ek
;\x82seek--)

260
	`l\xa3ek
(
ofd
, ()
obs
, 1);

261
ou\x8du\x8f\x\xfb
:

262 i\xe0(
ibc
-- == 0) {

263
ibc
 = 0;

264 i\xe0((
cou\xc1
 =\xf00\xe8|| ((
nifu\x\xfb
 +
n\x9d\xa\xf9\x9\xe6
) != count)) {

265 i\xe0(
c\xdav\xe6ag
 & (
NOERROR
 |
SYNC
))

266 
\x9d\x8c
 =
ibuf
 +
ibs
; iptr > ibuf;)

267 *--
\x9d\x8c
 = 0;

268
ibc
 =
	`\xbbad
(
ifd
,
ibuf
,
ibs
);

270 i\xe0(
ibc
 == -1) {

271
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "dd:\x84ead\x83rror\n");

272 i\xe0((
c\xdav\xe6ag
 &
NOERROR
) == 0) {

273
	`puto
();

274
	`ov\x94
();

276
ibc
 = 0;

277 
i
 = 0; i <
ibs
; i++)

278 i\xe0(
ibuf
[
i
] != 0)

279
ibs
 =
i
;

280
	`\xa1\xa9i\xa1ics
();

282 i\xe0((
ibc
 =\xf00\xe8&& (--
f\x9\x93s
 <= 0)) {

283
	`puto
();

284
	`ov\x94
();

286 i\xe0(
ibc
 !\xf0
ibs
) {

287
n\x9d\xa\xf9\x9\xe6
++;

288 i\xe0(
c\xdav\xe6ag
 &
SYNC
)

289
ibc
 =
ibs
;

291
nifu\x\xfb
++;

292
\x9d\x8c
 =
ibuf
;

293
i
 =
ibc
 >> 1;

294 i\xe0((
c\xdav\xe6ag
 &
SWAB
\xe8&&
i
)

296 
\x8bmp
;

297
\x8bmp
 = *
\x9d\x8c
++;

298
\x9d\x8c
[-1] = *iptr;

299 *
\x9d\x8c
++ =
\x8bmp
;

300 } --
i
);

301
\x9d\x8c
 =
ibuf
;

302 i\xe0(
\xe6ag
) {

303
obc
 =
ibc
;

304
	`puto
();

305
ibc
 = 0;

307 
ou\x8du\x8f\x\xfb
;

309
i
 = *
\x9d\x8c
++ & 0377;

310 (*
c\xdav\x94t
)(
i
);

311 
ou\x8du\x8f\x\xfb
;

312
	}
}

314 
	$ul\xff\xa3
(
c
)

315 
c
;

317 
\xaas
 =
c
;

319 i\xe0((
c\xdav\xe6ag
 &
UCASE
\xe8&& (
c
 >= 'a') && (c <= 'z'))

320
\xaas
 += 'A' - 'a';

321 i\xe0((
c\xdav\xe6ag
 &
LCASE
\xe8&& (
c
 >= 'A') && (c <= 'Z'))

322
\xaas
 += 'a' - 'A';

323  (
\xaas
);

324
	}
}

326 
	$\x\xe7u\x\xfb
(
c
) {

327
c
 =
	`ul\xff\xa3
(c);

328
	`nu\x\xfb
(
c
);

329
	}
}

331 
	$nu\x\xfb
(
c
) {

332 *
\xdd
++ =
c
;

333 i\xe0(++
obc
 >\xf0
obs
) {

334
	`puto
();

335
\xdd
 =
obuf
;

337
	}
}

339 
	$ex\x8\xff
() {

340 i\xe0(++
cbc
 >\xf0
cbs
) {

341
	`nu\x\xfb
('\n');

342
cbc
 = 0;

343
ns
 = 0;

345
	}
}

347 
	$d\xd\xab
(
n
) {

348
	`_\x\xe3\x97nup
();

349
	`ex\x99
(
n
);

350
	}
}

	@commands/df.cpp

9 
	~"../fs/cڡ.h\xb5
"

10 
	~"../fs/su\xb3r.h\xb5
"

11 
	~"../fs/ty\xb3.h\xb5
"

12 
	~"../h/cڡ.h\xb5
"

13 
	~"../h/ty\xb3.h\xb5
"

14 
	~"\xa1\xa9.h\xb5
"

17 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

19 
i
;

21 i\xe0(
\xacgc
 <= 1) {

22
	`\xa1d_\x94r
("Usage: df special ...\n");

23
	`ex\x99
(1);

26
	`sync
();

27 
i
 = 1; i <
\xacgc
; i++)

28
	`df
(
\xacgv
[
i
]);

29
	`ex\x99
(0);

30
	}
}

33 
	$df
(*
\xc7me
) {

34 
fd
;

35 
i_cou\xc1
,
z_cou\xc1
,
t\xd9blocks
,
busyblocks
,
i
;

36 
buf
[
BLOCK_SIZE
], *
s0
;

37 
su\xb3r_block

su\xb3r
, *
\xa5
;

38 
\xa1\xa9

\xa1\xa9buf
;

39 *
	`\x99\xdf
();

41 i\xe0((
fd
 =
	`ݒ
(
\xc7me
, 0)) < 0) {

42
	`\xb3\xbc\xdc
(
\xc7me
);

47 i\xe0(
	`f\xa1\xa9
(
fd
, &
\xa1\xa9buf
) < 0) {

48
	`\xa1d\x94r2
(
\xc7me
, ": Cannot stat\n");

51 i\xe0((
\xa1\xa9buf
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFBLK
) {

52
	`\xa1d\x94r2
(
\xc7me
, ":\x82ot\x87 block special file\n");

56
	`l\xa3ek
(
fd
, ()
BLOCK_SIZE
, 0);

57 i\xe0(
	`\xbbad
(
fd
, &
su\xb3r
,
SUPER_SIZE
) != SUPER_SIZE) {

58
	`\xa1d\x94r2
(
\xc7me
, ": Can't\x84ead super block\n");

59
	`\x\xe3o\xa3
(
fd
);

63
	`l\xa3ek
(
fd
, ()
BLOCK_SIZE
 * 2L, 0);

64
\xa5
 = &
su\xb3r
;

65 i\xe0(
\xa5
->
s_magic
 !\xf0
SUPER_MAGIC
) {

66
	`\xa1d\x94r2
(
\xc7me
, ": Not\x87 valid file system\n");

67
	`\x\xe3o\xa3
(
fd
);

71
i_cou\xc1
 =
	`b\x99_cou\xc1
(
\xa5
->
s_im\xad_blocks
, sp->
s_n\x9aodes
 + 1,
fd
);

72 i\xe0(
i_cou\xc1
 < 0) {

73
	`\xa1d\x94r2
(
\xc7me
, ": can't find bit maps\n");

74
	`\x\xe3o\xa3
(
fd
);

78
z_cou\xc1
 =
	`b\x99_cou\xc1
(
\xa5
->
s_zm\xad_blocks
, sp->
s_nz\xd\xabs
,
fd
);

79 i\xe0(
z_cou\xc1
 < 0) {

80
	`\xa1d\x94r2
(
\xc7me
, ": can't find bit maps\n");

81
	`\x\xe3o\xa3
(
fd
);

84
t\xd9blocks
 =
\xa5
->
s_nz\xd\xabs
 << sp->
s_log_z\xd\xab_size
;

85
busyblocks
 =
z_cou\xc1
 <<
\xa5
->
s_log_z\xd\xab_size
;

88
	`\xb4\x9\xa9s
("%\xa0",
\xc7me
);

89
s0
 =
\xc7me
;

90 *
s0
)

91
s0
++;

92
i
 = 12 - (
s0
 -
\xc7me
);

93 
i
--)

94
	`\xb4\x9\xa9s
(" ");

95
	`\xb4\x9\xa9s
("i-nodes: ");

96
	`num3
(
i_cou\xc1
 - 1);

97
	`\xb4\x9\xa9s
(" used ");

98
	`num3
(
\xa5
->
s_n\x9aodes
 + 1 -
i_cou\xc1
);

99
	`\xb4\x9\xa9s
(" free blocks: ");

100
	`num3
(
busyblocks
);

101
	`\xb4\x9\xa9s
(" used ");

102
	`num3
(
t\xd9blocks
 -
busyblocks
);

103
	`\xb4\x9\xa9s
(" free\n");

104
	`\x\xe3o\xa3
(
fd
);

105
	}
}

108 
	$b\x99_cou\xc1
(
blocks
, 
b\x99s
, 
fd
) {

109 
i
,
b
;

110 
busy
,
cou\xc1
,
w
;

111 *
w\xb1r
, *
wlim
;

112 
buf
[
BLOCK_SIZE
 / ()];

115
busy
 = 0;

116
cou\xc1
 = 0;

117 
i
 = 0; i <
blocks
; i++) {

118 i\xe0(
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE)

121
w\xb1r
 = &
buf
[0];

122
wlim
 = &
buf
[
BLOCK_SIZE
 / ()];

125 
w\xb1r
 !\xf0
wlim
) {

126
w
 = *
w\xb1r
++;

129 
b
 = 0; b < 8 * (); b++) {

130 i\xe0((
w
 >>
b
) & 1)

131
busy
++;

132 i\xe0(++
cou\xc1
 =\xf0
b\x99s
)

133  (
busy
);

137
	}
}

140 
	$\xa1d\x94r2
(cڡ *
s1
, cڡ *
s2
) {

141
	`\xa1d_\x94r
(
s1
);

142
	`\xa1d_\x94r
(
s2
);

143
	}
}

146 
	$num3
(
n
) {

147 i\xe0(
n
 < 10)

148
	`\xb4\x9\xa9s
(" %s",
	`\x99\xdf
(
n
));

149 i\xe0(
n
 < 100)

150
	`\xb4\x9\xa9s
(" %s",
	`\x99\xdf
(
n
));

152
	`\xb4\x9\xa9s
("%s",
	`\x99\xdf
(
n
));

153
	}
}

	@commands/dosread.cpp

20 
	~"\xa1\xa9.h\xb5
"

22 
	#DRIVE
 "/dev/fdX"

	)

23 
	#DRIVE_NR
 7

	)

25 
	#DDDD
 0xFD

	)

26 
	#DDHD
 0xF9

	)

28 
	#MAX_CLUSTER_SIZE
 1024

	)

29 
	#MAX_FAT_SIZE
 3584

	)

30 
	#MAX_ROOT_ENTRIES
 224

	)

31 
	#FAT_START
 512L

	)

32 
	#\x\xe3us_add
(
\xfe_no
\xe8(()((()\xfe_n\xd8- 2L\xe8* ()
\xfeu\xa1\x94_size
 + ()
d\xa9a_\xa1\xa\xf9
))

	)

33 
	sd\x9c_\x92\x8cy
 {

34 
	md_\xc7me
[8];

35 
	md_ext
[3];

36 
	md_\xa9\x8cibu\x8b
;

37 
	md_\xbb\xa3rved
[10];

38 
	md_time
;

39 
	md_d\xa9e
;

40 
	md_\x\xe3u\xa1\x94
;

41 
	md_size
;

46
us\x9ag

	gDIRECTORY
 =
d\x9c_\x92\x8cy
;

48 
	#NOT_USED
 0x00

	)

49 
	#ERASED
 0xE5

	)

50 
	#DIR
 0x2E

	)

51 
	#DIR_SIZE
 ((
d\x9c_\x92\x8cy
))

	)

52 
	#SUB_DIR
 0x10

	)

53 
	#NIL_DIR
 ((
DIRECTORY
 *)0)

	)

55 
	#LAST_CLUSTER
 0x0FFF

	)

56 
	#MASK
 0xFF8

	)

57 
	#FREE
 0x000

	)

58 
	#BAD
 0xFF0

	)

61
us\x9ag

	gBOOL
 = ;

63 
	#TRUE
 1

	)

64 
	#FALSE
 0

	)

65 
	#NIL_PTR
 ((*)0)

	)

67 
	#DOS_TIME
 315532800L

	)

69 
	#READ
 0

	)

70 
	#WRITE
 1

	)

71 
	#disk_\xbbad
(
s
,
a
,
b
\xe8
	`disk_io
(
READ
, s,\x87, b)

	)

72 
	#disk_wr\x99e
(
s
,
a
,
b
\xe8
	`disk_io
(
WRITE
, s,\x87, b)

	)

74 
	#FIND
 3

	)

75 
	#LABEL
 4

	)

76 
	#ENTRY
 5

	)

77 
	#f\x9ad_\x92\x8cy
(
d
,
e
,
p
\xe8
	`d\x9\xfb\xf9\xdcy
(d,\x83,
FIND
,\x85)

	)

78 
	#li\xa1_d\x9c
(
d
,
e
,
f
\xe8()
	`d\x9\xfb\xf9\xdcy
(d,\x83, f,
NIL_PTR
)

	)

79 
	#\xcfb\x96
(\xe8
	`d\x9\xfb\xf9\xdcy
(
ro\xd9
,
ro\xd9_\x92\x8c\x9bs
,
LABEL
,
NIL_PTR
)

	)

80 
	#\xc3w_\x92\x8cy
(
d
,
e
\xe8
	`d\x9\xfb\xf9\xdcy
(d,\x83,
ENTRY
,
NIL_PTR
)

	)

82 
	#is_d\x9c
(
d
\xe8((d)->
d_\xa9\x8cibu\x8b
 &
SUB_DIR
)

	)

84 
	#EOF
 0400

	)

85 
	#EOF_MARK
 '\032'

	)

86 
	#STD_OUT
 1

	)

87 
	#\xe6ush
(\xe8
	`\xb4\x9\xa9
(
STD_OUT
,
NIL_PTR
, 0)

	)

89 
	gdisk
;

90 
	g\xe7t
[
MAX_FAT_SIZE
];

91
DIRECTORY

	gro\xd9
[
MAX_ROOT_ENTRIES
];

92
DIRECTORY

	g\xa7ve_\x92\x8cy
;

93 
	gnu\x\xfb
[
MAX_CLUSTER_SIZE
],
	gdevi\xfb
[] =
DRIVE
,
	g\xb7th
[128];

94 
	gm\xack
;

95 
	gtٮ_\x\xe3u\xa1\x94s
,
	g\x\xe3u\xa1\x94_size
,
	g\xe7t_size
,
	gro\xd9_\x92\x8c\x9bs
,
	gd\xa9a_\xa1\xa\xf9
,
	gsub_\x92\x8c\x9bs
;

97
BOOL

	gR\xe6ag
,
	gL\xe6ag
,
	gA\xe6ag
,
	gdos_\xbbad
,
	gdos_wr\x99e
,
	gdos_d\x9c
;

99
DIRECTORY
 *
d\x9\xfb\xf9\xdcy
(), *
\xbbad_\xfeu\xa1\x94
();

100 
\xe4\x93_\xfeu\xa1\x94
(),
\xc3xt_\xfeu\xa1\x94
();

101 *
make_\xc7me
(), *
num_out
(), *
\xa6ash
(), *
brk
();

102 
l\xa3ek
(),
time
();

104 
	$\xcbave
(
\xc4
) {

105 ()
	`umou\xc1
(
devi\xfb
);

106
	`ex\x99
(
\xc4
);

107
	}
}

109 
	$u\xa7ge
(*
\xb4og_\xc7me
) {

110
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "U\xa7ge: %\xa0[%s\n",
\xb4og_\xc7me
,

111
dos_d\x9c
 ? "-lr] drive [dir]" : "-a] drive file");

112
	`ex\x99
(1);

113
	}
}

115 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

116 *
\xacg_\xb1r
 =
	`\xa6ash
(
\xacgv
[0]);

117
DIRECTORY
 *
\x92\x8cy
;

118 
\x9adex
 = 1;

119 
dev_\xc4
 = '0';

120 
\xe7t_check
;

122 i\xe0(!
	`\xa1rcmp
(
\xacg_\xb1r
, "dosdir"))

123
dos_d\x9c
 =
TRUE
;

124 i\xe0(!
	`\xa1rcmp
(
\xacg_\xb1r
, "dosread"))

125
dos_\xbbad
 =
TRUE
;

126 i\xe0(!
	`\xa1rcmp
(
\xacg_\xb1r
, "doswrite"))

127
dos_wr\x99e
 =
TRUE
;

129
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Program should be\x82amed dosread, doswrite or dosdir.\n");

130
	`ex\x99
(1);

133 i\xe0(
\xacgc
 == 1)

134
	`u\xa7ge
(
\xacgv
[0]);

136 i\xe0(
\xacgv
[1][0] == '-') {

137 
\xacg_\xb1r
 = &
\xacgv
[1][1]; *arg_ptr;\x87rg_ptr++) {

138 i\xe0(*
\xacg_\xb1r
 =\xf0'l' &&
dos_d\x9c
)

139
L\xe6ag
 =
TRUE
;

140 i\xe0(*
\xacg_\xb1r
 =\xf0'r' &&
dos_d\x9c
)

141
R\xe6ag
 =
TRUE
;

142 i\xe0(*
\xacg_\xb1r
 =\xf0'a' && !
dos_d\x9c
)

143
A\xe6ag
 =
TRUE
;

145
	`u\xa7ge
(
\xacgv
[0]);

147
\x9adex
++;

150 i\xe0(
\x9adex
 =\xf0
\xacgc
)

151
	`u\xa7ge
(
\xacgv
[0]);

153 i\xe0((
dev_\xc4
 = *
\xacgv
[
\x9adex
++]) < '0' || dev_nr > '9')

154
	`u\xa7ge
(
\xacgv
[0]);

156
devi\xfb
[
DRIVE_NR
] =
dev_\xc4
;

158 i\xe0((
disk
 =
	`ݒ
(
devi\xfb
, 2)) < 0) {

159
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "C\xaan\xd9 o\xb3\xc0%s\n",
devi\xfb
);

160
	`ex\x99
(1);

163
	`disk_\xbbad
(
FAT_START
,
\xe7t
,
MAX_FAT_SIZE
);

165 i\xe0(
\xe7t
[0] =\xf0
DDDD
) {

166
tٮ_\x\xe3u\xa1\x94s
 = 355;

167
\xfeu\xa1\x94_size
 = 1024;

168
\xe7t_size
 = 1024;

169
d\xa9a_\xa1\xa\xf9
 = 6144;

170
ro\xd9_\x92\x8c\x9bs
 = 112;

171
sub_\x92\x8c\x9bs
 = 32;

172 } i\xe0(
\xe7t
[0] =\xf0
DDHD
) {

173
tٮ_\x\xe3u\xa1\x94s
 = 2372;

174
\xfeu\xa1\x94_size
 = 512;

175
\xe7t_size
 = 3584;

176
d\xa9a_\xa1\xa\xf9
 = 14848;

177
ro\xd9_\x92\x8c\x9bs
 = 224;

178
sub_\x92\x8c\x9bs
 = 16;

180
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Diskette is\x82either 360K\x82or 1.2M\n");

181
	`\xcbave
(1);

184
	`disk_\xbbad
(
FAT_START
 + ()
\xe7t_size
, &
\xe7t_check
, (fat_check));

186 i\xe0(
\xe7t_check
 !\xf0
\xe7t
[0]) {

187
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Disk\x81ype in FAT copy differs from disk\x81ype in FAT original.\n");

188
	`\xcbave
(1);

191
	`disk_\xbbad
(
FAT_START
 + 2L * ()
\xe7t_size
,
ro\xd9
,
DIR_SIZE
 *
ro\xd9_\x92\x8c\x9bs
);

193 i\xe0(
dos_d\x9c
) {

194
\x92\x8cy
 =
	`\xcfb\x96
();

195
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "V\xdeum\x90\x9a driv\x90%\xf8",
dev_\xc4
);

196 i\xe0(
\x92\x8cy
 =\xf0
NIL_DIR
)

197
	`\xb4\x9\xa9
(
STD_OUT
, "has\x82o\x86abel.\n\n", 0);

199
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "i\xa0%S\n\n",
\x92\x8cy
->
d_\xc7me
);

202 i\xe0(
\xacgv
[
\x9adex
] =\xf0
NIL_PTR
) {

203 i\xe0(!
dos_d\x9c
)

204
	`u\xa7ge
(
\xacgv
[0]);

205
	`\xb4\x9\xa9
(
STD_OUT
, "Root directory:\n", 0);

206
	`li\xa1_d\x9c
(
ro\xd9
,
ro\xd9_\x92\x8c\x9bs
,
FALSE
);

207
	`\xe4\x93_blocks
();

208
	`\xe6ush
();

209
	`\xcbave
(0);

212 
\xacg_\xb1r
 =
\xacgv
[
\x9adex
]; *arg_ptr;\x87rg_ptr++)

213 i\xe0(*
\xacg_\xb1r
 == '\\')

214 *
\xacg_\xb1r
 = '/';

215 i\xe0(*
\xacg_\xb1r
 >= 'a' && *arg_ptr <= 'z')

216 *
\xacg_\xb1r
 += ('A' - 'a');

217 i\xe0(*--
\xacg_\xb1r
 == '/')

218 *
\xacg_\xb1r
 = '\0';

220
	`add_\xb7th
(
\xacgv
[
\x9adex
],
FALSE
);

221
	`add_\xb7th
("/",
FALSE
);

223 i\xe0(
dos_d\x9c
)

224
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "D\x9ce\xf9\xdcy %s:\n",
\xb7th
);

226
\x92\x8cy
 =
	`f\x9ad_\x92\x8cy
(
ro\xd9
,
ro\xd9_\x92\x8c\x9bs
,
\xacgv
[
\x9adex
]);

228 i\xe0(
dos_d\x9c
) {

229
	`li\xa1_d\x9c
(
\x92\x8cy
,
sub_\x92\x8c\x9bs
,
FALSE
);

230
	`\xe4\x93_blocks
();

231 } i\xe0(
dos_\xbbad
)

232
	`ex\x8\xff\xf9
(
\x92\x8cy
);

234 i\xe0(
\x92\x8cy
 !\xf0
NIL_DIR
) {

235
	`\xe6ush
();

236 i\xe0(
	`is_d\x9c
(
\x92\x8cy
))

237
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "%\xa0i\xa0\xa8d\x9ce\xf9\xdcy.\n",
\xb7th
);

239
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "%\xa0\xae\xbbady\x83xi\xa1s.\n",
\xacgv
[
\x9adex
]);

240
	`\xcbave
(1);

243
	`add_\xb7th
(
NIL_PTR
,
TRUE
);

245 i\xe0(*
\xb7th
)

246
	`make_f\x9\x93
(
	`f\x9ad_\x92\x8cy
(
ro\xd9
,
ro\xd9_\x92\x8c\x9bs
,
\xb7th
),
sub_\x92\x8c\x9bs
,
	`\xa6ash
(
\xacgv
[
\x9adex
]));

248
	`make_f\x9\x93
(
ro\xd9
,
ro\xd9_\x92\x8c\x9bs
,
\xacgv
[
\x9adex
]);

251 ()
	`\x\xe3o\xa3
(
disk
);

252
	`\xe6ush
();

253
	`\xcbave
(0);

254
	}
}

256 
DIRECTORY
 *
	$d\x9\xfb\xf9\xdcy
(
DIRECTORY
 *
d\x9c
, 
\x92\x8c\x9bs
,
BOOL

fun\xf9i\xda
, *
\xb7th\xc7me
) {

257 
DIRECTORY
 *
d\x9c_\xb1r
 =
d\x9c
;

258
DIRECTORY
 *
mem
 =
NIL_DIR
;

259 
\xfe_no
 =
d\x9c
->
d_\x\xe3u\xa1\x94
;

260 
ty\xb3
,
ϡ
;

261 
f\x9\x93_\xc7me
[14];

262 *
\xc7me
;

263 
i
 = 0;

265 i\xe0(
fun\xf9i\xda
 =\xf0
FIND
) {

266 *
\xb7th\xc7me
 !\xf0'/' && *\xb7th\xc7m\x90&&
i
 < 11)

267
f\x9\x93_\xc7me
[
i
++] = *
\xb7th\xc7me
++;

268 *
\xb7th\xc7me
 != '/' && *pathname)

269
\xb7th\xc7me
++;

270
f\x9\x93_\xc7me
[
i
] = '\0';

274 i\xe0(
\x92\x8c\x9bs
 !\xf0
ro\xd9_\x92\x8c\x9bs
) {

275
mem
 =
d\x9c_\xb1r
 =
	`\xbbad_\x\xe3u\xa1\x94
(
\xfe_no
);

276
ϡ
 =
\xfe_no
;

277
\xfe_no
 =
	`\xc3xt_\x\xe3u\xa1\x94
(cl_no);

280 
i
 = 0; i <
\x92\x8c\x9bs
; i++,
d\x9c_\xb1r
++) {

281
ty\xb3
 =
d\x9c_\xb1r
->
d_\xc7me
[0] & 0x0FF;

282 i\xe0(
fun\xf9i\xda
 =\xf0
ENTRY
) {

283 i\xe0(
ty\xb3
 =\xf0
NOT_USED
 ||\x81y\xb3 =\xf0
ERASED
) {

284
m\xack
 =
	`l\xa3ek
(
disk
, 0L, 1\xe8- ()
\xfeu\xa1\x94_size
 + ()
i
 * ()
DIR_SIZE
;

285 i\xe0(!
mem
)

286
m\xack
 +\xf0()
\xfeu\xa1\x94_size
 - ()(
ro\xd9_\x92\x8c\x9bs
 * (
DIRECTORY
));

287 
d\x9c_\xb1r
;

291 i\xe0(
ty\xb3
 =\xf0
NOT_USED
)

293 i\xe0(
d\x9c_\xb1r
->
d_\xa9\x8cibu\x8b
 & 0x08) {

294 i\xe0(
fun\xf9i\xda
 =\xf0
LABEL
)

295 
d\x9c_\xb1r
;

298 i\xe0(
ty\xb3
 =\xf0
DIR
 ||\x81y\xb3 =\xf0
ERASED
 ||
fun\xf9i\xda
 =\xf0
LABEL
)

300
ty\xb3
 =
	`is_d\x9c
(
d\x9c_\xb1r
);

301
\xc7me
 =
	`make_\xc7me
(
d\x9c_\xb1r
, (
fun\xf9i\xda
 =\xf0
FIND
\xe8?
FALSE
 :
ty\xb3
);

302 i\xe0(
fun\xf9i\xda
 =\xf0
FIND
) {

303 i\xe0(
	`\xa1rcmp
(
f\x9\x93_\xc7me
,
\xc7me
) != 0)

305 i\xe0(!
ty\xb3
) {

306 i\xe0(
dos_d\x9c
 || *
\xb7th\xc7me
) {

307
	`\xe6ush
();

308
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Nه d\x9ce\xf9\xdcy: %s\n",
f\x9\x93_\xc7me
);

309
	`\xcbave
(1);

311 } i\xe0(*
\xb7th\xc7me
 =\xf0'\0' &&
dos_\xbbad
) {

312
	`\xe6ush
();

313
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "%\xa0i\xa0\xa8d\x9ce\xf9\xdcy.\n",
\xb7th
);

314
	`\xcbave
(1);

316 i\xe0(*
\xb7th\xc7me
) {

317
d\x9c_\xb1r
 =
	`f\x9ad_\x92\x8cy
(d\x9c_\xb1r,
sub_\x92\x8c\x9bs
,
\xb7th\xc7me
 + 1);

319 i\xe0(
mem
) {

320 i\xe0(
d\x9c_\xb1r
) {

321
	`bc\xddy
(
d\x9c_\xb1r
, &
\xa7ve_\x92\x8cy
,
DIR_SIZE
);

322
d\x9c_\xb1r
 = &
\xa7ve_\x92\x8cy
;

324 ()
	`brk
(
mem
);

326 
d\x9c_\xb1r
;

328 i\xe0(
fun\xf9i\xda
 =\xf0
FALSE
)

329
	`show
(
d\x9c_\xb1r
,
\xc7me
);

330 i\xe0(
ty\xb3
) {

331
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "D\x9ce\xf9\xdcy %s%s:\n",
\xb7th
,
\xc7me
);

332
	`add_\xb7th
(
\xc7me
,
FALSE
);

333
	`li\xa1_d\x9c
(
d\x9c_\xb1r
,
sub_\x92\x8c\x9bs
,
FALSE
);

334
	`add_\xb7th
(
NIL_PTR
,
FALSE
);

338 i\xe0(
mem
)

339 ()
	`brk
(
mem
);

340 } 
\xfe_no
 !\xf0
LAST_CLUSTER
 &&
mem
);

342 
fun\xf9i\xda
) {

343 
FIND
:

344 i\xe0(
dos_wr\x99e
 && *
\xb7th\xc7me
 == '\0')

345 
NIL_DIR
;

346
	`\xe6ush
();

347
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "C\xaan\xd9 f\x9ad `%s'.\n",
f\x9\x93_\xc7me
);

348
	`\xcbave
(1);

349 
LABEL
:

350 
NIL_DIR
;

351 
ENTRY
:

352 i\xe0(!
mem
) {

353
	`\xe6ush
();

354
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "No\x83ntries\x86eft in\x84oot directory.\n");

355
	`\xcbave
(1);

358
\xfe_no
 =
	`\xe4\x93_\x\xe3u\xa1\x94
(
TRUE
);

359
	`l\x9ak_\xe7t
(
ϡ
,
\xfe_no
);

360
	`l\x9ak_\xe7t
(
\xfe_no
,
LAST_CLUSTER
);

361
	`disk_wr\x99e
(
	`\x\xe3us_add
(
\xfe_no
),
nu\x\xfb
,
\xfeu\xa1\x94_size
);

363 
	`\xc3w_\x92\x8cy
(
d\x9c
,
\x92\x8c\x9bs
);

364 
FALSE
:

365 i\xe0(
R\xe6ag
) {

366
	`\xb4\x9\xa9
(
STD_OUT
, "\n", 0);

367
	`li\xa1_d\x9c
(
d\x9c
,
\x92\x8c\x9bs
,
TRUE
);

370
	}
}

372 
	$ex\x8\xff\xf9
(
DIRECTORY
 *
\x92\x8cy
) {

373 
\xfe_no
 =
\x92\x8cy
->
d_\x\xe3u\xa1\x94
;

374 
buf\xe3r
[
MAX_CLUSTER_SIZE
];

375 
\xbb\xa1
;

377 i\xe0(
\x92\x8cy
->
d_size
 == 0)

379 i\xe0(
A\xe6ag
)

380
\x92\x8cy
->
d_size
--;

383
	`disk_\xbbad
(
	`\x\xe3us_add
(
\xfe_no
),
buf\xe3r
,
\xfeu\xa1\x94_size
);

384
\xbb\xa1
 = (
\x92\x8cy
->
d_size
 > ()
\xfeu\xa1\x94_size
) ? cluster_size : ()entry->d_size;

385
	`\xb4\x9\xa9
(
STD_OUT
,
buf\xe3r
,
\xbb\xa1
);

386
\x92\x8cy
->
d_size
 -\xf0()
\xbb\xa1
;

387
\xfe_no
 =
	`\xc3xt_\x\xe3u\xa1\x94
(cl_no);

388 i\xe0(
\xfe_no
 =\xf0
BAD
) {

389
	`\xe6ush
();

390
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Reserved cluster value\x83ncountered.\n");

391
	`\xcbave
(1);

393 } 
\x92\x8cy
->
d_size
 &&
\xfe_no
 !\xf0
LAST_CLUSTER
);

395 i\xe0(
\xfe_no
 !\xf0
LAST_CLUSTER
)

396
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Too many clusters\x87llocated for file.\n");

397 i\xe0(
\x92\x8cy
->
d_size
 != 0)

398
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "P\xbbm\xa9u\xbb EOF: %L by\x8b\xa0\xcb\xe1.\n",
\x92\x8cy
->
d_size
);

399
	}
}

401 
	$\xb4\x9\xa9
(
fd
, *
buf\xe3r
, 
by\x8bs
) {

402 
\x9adex
;

403 
BOOL

lf_\xb3nd\x9ag
 =
FALSE
;

404 
ou\x8dut
[
MAX_CLUSTER_SIZE
 + 1];

406 i\xe0(
buf\xe3r
 =\xf0
NIL_PTR
) {

407 i\xe0(
dos_\xbbad
 &&
A\xe6ag
 &&
lf_\xb3nd\x9ag
) {

408
ou\x8dut
[
\x9adex
++] = '\r';

409
lf_\xb3nd\x9ag
 =
FALSE
;

411 i\xe0(
	`wr\x99e
(
fd
,
ou\x8dut
,
\x9adex
) != index)

412
	`bad
();

413
\x9adex
 = 0;

417 i\xe0(
by\x8bs
 == 0)

418
by\x8bs
 =
	`\xa1\xbe\x92
(
buf\xe3r
);

420 
by\x8bs
--) {

421 i\xe0(
\x9adex
 >\xf0
MAX_CLUSTER_SIZE
) {

422 i\xe0(
	`wr\x99e
(
fd
,
ou\x8dut
,
\x9adex
) != index)

423
	`bad
();

424
\x9adex
 = 0;

426 i\xe0(
dos_\xbbad
 &&
A\xe6ag
) {

427 i\xe0(*
buf\xe3r
 == '\r') {

428 i\xe0(
lf_\xb3nd\x9ag
)

429
ou\x8dut
[
\x9adex
++] = *
buf\xe3r
++;

431
lf_\xb3nd\x9ag
 =
TRUE
;

432
buf\xe3r
++;

434 } i\xe0(*
buf\xe3r
 == '\n') {

435
ou\x8dut
[
\x9adex
++] = *
buf\xe3r
++;

436
lf_\xb3nd\x9ag
 =
FALSE
;

437 } i\xe0(
lf_\xb3nd\x9ag
) {

438
ou\x8dut
[
\x9adex
++] = '\r';

439
ou\x8dut
[
\x9adex
++] = *
buf\xe3r
++;

440 } i\xe0((
ou\x8dut
[
\x9adex
++] = *
buf\xe3r
++\xe8=\xf0
EOF_MARK
) {

441 i\xe0(
lf_\xb3nd\x9ag
) {

442
ou\x8dut
[
\x9adex
 - 1] = '\r';

443
ou\x8dut
[
\x9adex
++] =
EOF_MARK
;

444
lf_\xb3nd\x9ag
 =
FALSE
;

449
ou\x8dut
[
\x9adex
++] = *
buf\xe3r
++;

451
	}
}

453 
	$make_f\x9\x93
(
DIRECTORY
 *
d\x9c_\xb1r
, 
\x92\x8c\x9bs
, *
\xc7me
) {

454 
DIRECTORY
 *
\x92\x8cy
 =
	`\xc3w_\x92\x8cy
(
d\x9c_\xb1r
,
\x92\x8c\x9bs
);

455 *
\xb1r
;

456 
buf\xe3r
[
MAX_CLUSTER_SIZE
];

457 
\xfe_no
,
\xc3xt
;

458 
i
,
r
;

459 
size
 = 0L;

461 
i
 = 0,
\xb1r
 =
\xc7me
; i < 8 && *ptr != '.' && *ptr; i++)

462
\x92\x8cy
->
d_\xc7me
[
i
] = *
\xb1r
++;

463 
i
 < 8)

464
\x92\x8cy
->
d_\xc7me
[
i
++] = ' ';

465
r
 =
	`\xa1\xbe\x92
(
\xc7me
);

466 
r
 &&
\xc7me
[r - 1] != '.')

467
r
--;

469
i
 = 0;

470 
r
 &&
i
 < 3 &&
\xc7me
[r])

471
\x92\x8cy
->
d_ext
[
i
++] =
\xc7me
[
r
++];

472 
i
 < 3)

473
\x92\x8cy
->
d_ext
[
i
++] = ' ';

475 
i
 = 0; i < 10; i++)

476
\x92\x8cy
->
d_\xbb\xa3rved
[
i
] = '\0';

477
\x92\x8cy
->
d_\xa9\x8cibu\x8b
 = '\0';

479
\x92\x8cy
->
d_\x\xe3u\xa1\x94
 = 0;

481 (
r
 =
	`f\x9\x96
(
buf\xe3r
)) > 0) {

482 i\xe0((
\xc3xt
 =
	`\xe4\x93_\x\xe3u\xa1\x94
(
FALSE
)\xe8>
tٮ_\x\xe3u\xa1\x94s
) {

483
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Diskette full. File\x81runcated.\n");

487
	`disk_wr\x99e
(
	`\x\xe3us_add
(
\xc3xt
),
buf\xe3r
,
r
);

489 i\xe0(
\x92\x8cy
->
d_\x\xe3u\xa1\x94
 == 0)

490
\xfe_no
 =
\x92\x8cy
->
d_\x\xe3u\xa1\x94
 =
\xc3xt
;

492
	`l\x9ak_\xe7t
(
\xfe_no
,
\xc3xt
);

493
\xfe_no
 =
\xc3xt
;

496
size
 +\xf0
r
;

499 i\xe0(
\x92\x8cy
->
d_\x\xe3u\xa1\x94
 != 0)

500
	`l\x9ak_\xe7t
(
\xfe_no
,
LAST_CLUSTER
);

502
\x92\x8cy
->
d_size
 =
A\xe6ag
 ? (
size
 - 1) : size;

503
	`f\x9\x96_d\xa9e
(
\x92\x8cy
);

504
	`disk_wr\x99e
(
m\xack
,
\x92\x8cy
,
DIR_SIZE
);

505
	`disk_wr\x99e
(
FAT_START
,
\xe7t
,
\xe7t_size
);

506
	`disk_wr\x99e
(
FAT_START
 + ()
\xe7t_size
,
\xe7t
, fat_size);

507
	}
}

509 
	#SEC_MIN
 60L

	)

510 
	#SEC_HOUR
 (60L *
SEC_MIN
)

	)

511 
	#SEC_DAY
 (24L *
SEC_HOUR
)

	)

512 
	#SEC_YEAR
 (365L *
SEC_DAY
)

	)

513 
	#SEC_LYEAR
 (366L *
SEC_DAY
)

	)

515 
	gm\xda_\xcbn
[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

517 
	$f\x9\x96_d\xa9e
(
DIRECTORY
 *
\x92\x8cy
) {

518 
cur_time
 =
	`time
((*)0\xe8-
DOS_TIME
;

519 
y\x97r
 = 0,
m\xd\xa9h
 = 1,
day
,
hour
,
m\x9au\x8bs
,
\xa3c\xdads
;

520 
i
;

521 
tmp
;

523 i\xe0(
cur_time
 < 0)

524
cur_time
 = 0;

526
tmp
 = (
y\x97r
 % 4 =\xf00\xe8?
SEC_LYEAR
 :
SEC_YEAR
;

527 i\xe0(
cur_time
 <
tmp
)

529
cur_time
 -\xf0
tmp
;

530
y\x97r
++;

533
day
 = ()(
cur_time
 /
SEC_DAY
);

534
cur_time
 -\xf0()
day
 *
SEC_DAY
;

536
hour
 = ()(
cur_time
 /
SEC_HOUR
);

537
cur_time
 -\xf0()
hour
 *
SEC_HOUR
;

539
m\x9au\x8bs
 = ()(
cur_time
 /
SEC_MIN
);

540
cur_time
 -\xf0()
m\x9au\x8bs
 *
SEC_MIN
;

542
\xa3c\xdads
 = ()
cur_time
;

544
m\xda_\xcbn
[1] = (
y\x97r
 % 4 == 0) ? 29 : 28;

545
i
 = 0;

546 
day
 >\xf0
m\xda_\xcbn
[
i
]) {

547
m\xd\xa9h
++;

548
day
 -\xf0
m\xda_\xcbn
[
i
];

550
day
++;

552
\x92\x8cy
->
d_d\xa9e
 = (
y\x97r
 << 9\xe8| (
m\xd\xa9h
 << 5\xe8|
day
;

553
\x92\x8cy
->
d_time
 = (
hour
 << 11\xe8| (
m\x9au\x8bs
 << 5\xe8|
\xa3c\xdads
;

554
	}
}

556 *
	$make_\xc7me
(
DIRECTORY
 *
d\x9c_\xb1r
, 
d\x9c_\xe6
) {

557 
\xc7me_buf
[14];

558 *
\xb1r
 =
\xc7me_buf
;

559 
i
;

561 
i
 = 0; i < 8; i++)

562 *
\xb1r
++ =
d\x9c_\xb1r
->
d_\xc7me
[
i
];

564 *--
\xb1r
 == ' ')

567
\xb1r
++;

568 i\xe0(
d\x9c_\xb1r
->
d_ext
[0] != ' ') {

569 *
\xb1r
++ = '.';

570 
i
 = 0; i < 3; i++)

571 *
\xb1r
++ =
d\x9c_\xb1r
->
d_ext
[
i
];

572 *--
\xb1r
 == ' ')

574
\xb1r
++;

576 i\xe0(
d\x9c_\xe6
)

577 *
\xb1r
++ = '/';

578 *
\xb1r
 = '\0';

580 
\xc7me_buf
;

581
	}
}

583 
	$f\x9\x96
(*
buf\xe3r
) {

584 
BOOL

eof_m\xack
 =
FALSE
;

585 *
ϡ
 = &
buf\xe3r
[
\xfeu\xa1\x94_size
];

586 *
beg\x9a
 =
buf\xe3r
;

587 
c
;

589 i\xe0(
eof_m\xack
)

592 
buf\xe3r
 <
ϡ
) {

593 i\xe0((
c
 =
	`g\x91_ch\xac
()\xe8=\xf0
EOF
) {

594
eof_m\xack
 =
TRUE
;

595 i\xe0(
A\xe6ag
)

596 *
buf\xe3r
++ =
EOF_MARK
;

599 *
buf\xe3r
++ =
c
;

602  (
buf\xe3r
 -
beg\x9a
);

603
	}
}

605 
	$g\x91_ch\xac
() {

606 
\xbbad_ch\xacs
,
\x9adex
;

607 
\x9aput
[
MAX_CLUSTER_SIZE
];

608 
BOOL

\xc3w_l\x9ae
 =
FALSE
;

610 i\xe0(
\xc3w_l\x9ae
 =\xf0
TRUE
) {

611
\xc3w_l\x9ae
 =
FALSE
;

615 i\xe0(
\x9adex
 =\xf0
\xbbad_ch\xacs
) {

616 i\xe0((
\xbbad_ch\xacs
 =
	`\xbbad
(0,
\x9aput
,
\xfeu\xa1\x94_size
)) == 0)

617 
EOF
;

618
\x9adex
 = 0;

621 i\xe0(
A\xe6ag
 &&
\x9aput
[
\x9adex
] == '\n') {

622
\xc3w_l\x9ae
 =
TRUE
;

623
\x9adex
++;

627 
\x9aput
[
\x9adex
++];

628
	}
}

630 
	#HOUR
 0xF800

	)

631 
	#MIN
 0x07E0

	)

632 
	#YEAR
 0xFE00

	)

633 
	#MONTH
 0x01E0

	)

634 
	#DAY
 0x01F

	)

636 *
	gm\xd\xa9h
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

639
	$modes
(
mode
) mode;

641
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "\t%c%c%c%c%c", (
mode
 &
SUB_DIR
) ? 'd' : '-', (mode & 02) ? 'h' : '-',

642 (
mode
 & 04) ? 's' : '-', (mode & 01) ? '-' : 'w', (mode & 0x20) ? 'a' : '-');

643
	}
}

645
	$show
(
d\x9c_\xb1r
,
\xc7me
\xe8
DIRECTORY
 *dir_ptr;

646 *
\xc7me
;

648 
e_d\xa9e
 =
d\x9c_\xb1r
->
d_d\xa9e
;

649 
e_time
 =
d\x9c_\xb1r
->
d_time
;

650 
\xc3xt
;

651 
b\xc7me
[20];

652 
i
 = 0;

654 *
\xc7me
 && *name != '/')

655
b\xc7me
[
i
++] = *
\xc7me
++;

656
b\xc7me
[
i
] = '\0';

657 i\xe0(!
L\xe6ag
) {

658
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "%s\n",
b\xc7me
);

661
	`modes
(
d\x9c_\xb1r
->
d_\xa9\x8cibu\x8b
);

662
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "\t%s%s",
b\xc7me
,
	`\xa1\xbe\x92
(bname) < 8 ? "\t\t" : "\t");

663
i
 = 1;

664 i\xe0(
	`is_d\x9c
(
d\x9c_\xb1r
)) {

665
\xc3xt
 =
d\x9c_\xb1r
->
d_\x\xe3u\xa1\x94
;

666 (
\xc3xt
 =
	`\xc3xt_\x\xe3u\xa1\x94
\xd2ext)\xe8!\xf0
LAST_CLUSTER
)

667
i
++;

668
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "%L", ()
i
 * ()
\xfeu\xa1\x94_size
);

670
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "%L",
d\x9c_\xb1r
->
d_size
);

671
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "\t%N:%N %P %\xa0%d\n", ((
e_time
 &
HOUR
\xe8>> 11), (\xd3_tim\x90&
MIN
) >> 5),

672 (
e_d\xa9e
 &
DAY
),
m\xd\xa9h
[(\xd3_d\xa9\x90&
MONTH
\xe8>> 5\xe8- 1], (\xd3_d\xa9\x90&
YEAR
) >> 9) + 1980);

673
	}
}

675 
	$\xe4\x93_blocks
() {

676 
\xfe_no
;

677 
\xe4\x93
 = 0;

678 
bad
 = 0;

680 
\xfe_no
 = 2; cl_n\xd8<\xf0
tٮ_\x\xe3u\xa1\x94s
; cl_no++) {

681 
	`\xc3xt_\x\xe3u\xa1\x94
(
\xfe_no
)) {

682 
FREE
:

683
\xe4\x93
++;

685 
BAD
:

686
bad
++;

690
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "F\xbb\x90\xa5a\xfb: %L by\x8bs.\n", ()
\xe4\x93
 * ()
\xfeu\xa1\x94_size
);

691 i\xe0(
bad
)

692
	`\xb4\x9\xa9_\xa1r\x9ag
(
FALSE
, "Bad se\xf9\xdcs: %L by\x8bs.\n", ()
bad
 * ()
\xfeu\xa1\x94_size
);

693
	}
}

695 *
	$num_out
(
numb\x94
) {

696 
num_buf
[13];

697 
\x8bmp
[13];

698 
i
 = 0;

699 
j
;

701 i\xe0(
numb\x94
 == 0)

702
\x8bmp
[
i
++] = '0';

704 
numb\x94
) {

705
\x8bmp
[
i
++] = ()(
numb\x94
 % 10L + '0');

706
numb\x94
 /= 10L;

709 
j
 = 0; j < 11; j++)

710
num_buf
[
j
] =
\x8bmp
[
i
 - j - 1];

712
num_buf
[
i
] = '\0';

713 
num_buf
;

714
	}
}

717
	$\xb4\x9\xa9_\xa1r\x9ag
(
\x94r_\xe6
,
fmt
,
\xacgs
\xe8
BOOL
\x83rr_fl;

718 *
fmt
;

719 
\xacgs
;

721 
buf
[200];

722 *
buf_\xb1r
 =
buf
;

723 *
s\xf\xe2_\xb1r
;

724 *
\xacg_\xb1r
 = &
\xacgs
;

725 
i
;

727 *
fmt
) {

728 i\xe0(*
fmt
 == '%') {

729
fmt
++;

730 i\xe0(*
fmt
 == 'c') {

731 *
buf_\xb1r
++ = ()*
\xacg_\xb1r
++;

732
fmt
++;

735 i\xe0(*
fmt
 == 'S') {

736
s\xf\xe2_\xb1r
 = (*)*
\xacg_\xb1r
;

737 
i
 = 0; i < 11; i++)

738 *
buf_\xb1r
++ = *
s\xf\xe2_\xb1r
++;

739
fmt
++;

742 i\xe0(*
fmt
 == 's')

743
s\xf\xe2_\xb1r
 = (*)*
\xacg_\xb1r
;

744 i\xe0(*
fmt
 == 'L') {

745
s\xf\xe2_\xb1r
 =
	`num_out
(*((*)
\xacg_\xb1r
));

746
\xacg_\xb1r
++;

748
s\xf\xe2_\xb1r
 =
	`num_out
(()*
\xacg_\xb1r
);

749 i\xe0(*
fmt
 =\xf0'P' && *
\xacg_\xb1r
 < 10)

750 *
buf_\xb1r
++ = ' ';

751 i\xe0(*
fmt
 =\xf0'N' && *
\xacg_\xb1r
 < 10)

752 *
buf_\xb1r
++ = '0';

754 *
buf_\xb1r
++ = *
s\xf\xe2_\xb1r
++)

756
buf_\xb1r
--;

757
\xacg_\xb1r
++;

758
fmt
++;

760 *
buf_\xb1r
++ = *
fmt
++;

763 *
buf_\xb1r
 = '\0';

765 i\xe0(
\x94r_\xe6
) {

766
	`\xe6ush
();

767
	`wr\x99e
(2,
buf
,
buf_\xb1r
 - buf);

769
	`\xb4\x9\xa9
(
STD_OUT
,
buf
, 0);

770
	}
}

772
DIRECTORY
 *
	$\xbbad_\x\xe3u\xa1\x94
(
\xfeu\xa1\x94
)

773 
\xfeu\xa1\x94
;

775 
DIRECTORY
 *
sub_d\x9c
;

776 *
	`sbrk
();

778 i\xe0((
sub_d\x9c
 = (
DIRECTORY
 *)
	`sbrk
(
\xfeu\xa1\x94_size
)) < 0) {

779
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Cannot set break!\n");

780
	`\xcbave
(1);

782
	`disk_\xbbad
(
	`\x\xe3us_add
(
\xfeu\xa1\x94
),
sub_d\x9c
,
\xfeu\xa1\x94_size
);

784 
sub_d\x9c
;

785
	}
}

787 
	$\xe4\x93_\x\xe3u\xa1\x94
(
\xcbave_\xe6
)

788
BOOL

\xcbave_\xe6
;

790 
\xfe_\x9adex
 = 2;

792 
\xfe_\x9adex
 <\xf0
tٮ_\x\xe3u\xa1\x94s
 &&
	`\xc3xt_\x\xe3u\xa1\x94
(\xfe_\x9adex\xe8!\xf0
FREE
)

793
\xfe_\x9adex
++;

795 i\xe0(
\xcbave_\xe6
 &&
\xfe_\x9adex
 >
tٮ_\x\xe3u\xa1\x94s
) {

796
	`\xe6ush
();

797
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Diskette full. File\x82ot\x87dded.\n");

798
	`\xcbave
(1);

801 
\xfe_\x9adex
++;

802
	}
}

804
	$l\x9ak_\xe7t
(
\xfe_1
,
\xfe_2
) cl_1;

805 
\xfe_2
;

807 *
\xe7t_\x9adex
 = &
\xe7t
[(
\xfe_1
 >> 1) * 3 + 1];

809 i\xe0(
\xfe_1
 & 0x01) {

810 *(
\xe7t_\x9adex
 + 1\xe8\xf0
\xfe_2
 >> 4;

811 *
\xe7t_\x9adex
 = (*\xe7t_\x9adex & 0x0F\xe8| ((
\xfe_2
 & 0x0F) << 4);

813 *(
\xe7t_\x9adex
 - 1\xe8\xf0
\xfe_2
 & 0x0FF;

814 *
\xe7t_\x9adex
 = (*\xe7t_\x9adex & 0xF0\xe8| (
\xfe_2
 >> 8);

816
	}
}

818 
	$\xc3xt_\x\xe3u\xa1\x94
(
\xfe_no
)

819 
\xfe_no
;

821 *
\xe7t_\x9adex
 = &
\xe7t
[(
\xfe_no
 >> 1) * 3 + 1];

823 i\xe0(
\xfe_no
 & 0x01)

824
\xfe_no
 = (*(
\xe7t_\x9adex
 + 1) << 4) | (*fat_index >> 4);

826
\xfe_no
 = ((*
\xe7t_\x9adex
 & 0x0F) << 8) | *(fat_index - 1);

828 i\xe0((
\xfe_no
 &
MASK
) == MASK)

829
\xfe_no
 =
LAST_CLUSTER
;

830 i\xe0((
\xfe_no
 &
BAD
) == BAD)

831
\xfe_no
 =
BAD
;

833 
\xfe_no
;

834
	}
}

836 *
	$\xa6ash
(
\xa1r
)

837 *
\xa1r
;

839 *
\xbbsu\xc9
 =
\xa1r
;

841 *
\xa1r
)

842 i\xe0(*
\xa1r
++ == '/')

843
\xbbsu\xc9
 =
\xa1r
;

845 
\xbbsu\xc9
;

846
	}
}

848
	$add_\xb7th
(
f\x9\x93
,
\xa6ash_\xe6
) *file;

849
BOOL

\xa6ash_\xe6
;

851 *
\xb1r
 =
\xb7th
;

853 *
\xb1r
)

854
\xb1r
++;

856 i\xe0(
f\x9\x93
 =\xf0
NIL_PTR
) {

857
\xb1r
--;

859
\xb1r
--;

860 } *
\xb1r
 !\xf0'/' &&\x85\x8c !\xf0
\xb7th
);

861 i\xe0(
\xb1r
 !\xf0
\xb7th
 && !
\xa6ash_\xe6
)

862
\xb1r
++;

863 *
\xb1r
 = '\0';

865 *
\xb1r
++ = *
f\x9\x93
++)

867
	}
}

869
	$bc\xddy
(
\xa4c
,
de\xa1
,
by\x8bs
) *src, *dest;

870 
by\x8bs
;

872 
by\x8bs
--)

873 *
de\xa1
++ = *
\xa4c
++;

874
	}
}

876
	$disk_io
(
\xdd
,
\xa3ek
,
add\xbbss
,
by\x8bs
\xe8
BOOL
 op;

877 
\xa3ek
;

878
DIRECTORY
 *
add\xbbss
;

879 
by\x8bs
;

881 
r
;

883 i\xe0(
	`l\xa3ek
(
disk
,
\xa3ek
, 0) < 0L) {

884
	`\xe6ush
();

885
	`\xb4\x9\xa9_\xa1r\x9ag
(
TRUE
, "Bad\x86seek\n");

886
	`\xcbave
(1);

889 i\xe0(
\xdd
 =\xf0
READ
)

890
r
 =
	`\xbbad
(
disk
,
add\xbbss
,
by\x8bs
);

892
r
 =
	`wr\x99e
(
disk
,
add\xbbss
,
by\x8bs
);

894 i\xe0(
r
 !\xf0
by\x8bs
)

895
	`bad
();

896
	}
}

898
	$bad
() {

899
	`\xe6ush
();

900
	`\xb3\xbc\xdc
("I/O\x83rror");

901
	`\xcbave
(1);

902
	}
}

	@commands/echo.cpp

9 
	#SIZE
 2048

	)

10 
	gbuf
[
SIZE
];

11 
	gcou\xc1
;

13 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

14 
i
,
n\xe6ag
;

16
n\xe6ag
 = 0;

17 i\xe0(
\xacgc
 > 1 &&
\xacgv
[1][0] == '-' &&\x87rgv[1][1] == 'n') {

18
n\xe6ag
++;

19
\xacgc
--;

20
\xacgv
++;

23 
i
 = 1; i <
\xacgc
; i++) {

24
	`c\xde\xcb\xf9
(
\xacgv
[
i
]);

25 i\xe0(
i
 <
\xacgc
 - 1)

26
	`c\xde\xcb\xf9
(" ");

29 i\xe0(
n\xe6ag
 == 0)

30
	`c\xde\xcb\xf9
("\n");

33 i\xe0(
cou\xc1
 > 0)

34
	`wr\x99e
(1,
buf
,
cou\xc1
);

35
	`ex\x99
(0);

36
	}
}

39 
	$c\xde\xcb\xf9
(*
s
) {

41 
c
;

43 i\xe0(
cou\xc1
 =\xf0
SIZE
) {

44
	`wr\x99e
(1,
buf
,
cou\xc1
);

45
cou\xc1
 = 0;

47 (
c
 = *
s
++) != 0) {

48 i\xe0(
cou\xc1
 <
SIZE
 &&
c
 != '"')

49
buf
[
cou\xc1
++] =
c
;

51
	}
}

	@commands/getlf.cpp

7 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

8 
c
;

11 i\xe0(
\xacgc
 == 2) {

12
	`\xa1d_\x94r
(
\xacgv
[1]);

13
	`\xa1d_\x94r
("\n");

15
	`\x\xe3o\xa3
(0);

16
	`ݒ
("/dev/tty0", 0);

19
	`\xbbad
(0, &
c
, 1);

20 } 
c
 != '\n');

21
	`ex\x99
(0);

22
	}
}

	@commands/grep.cpp

28 
	~"\xbbgexp.h\xb5
"

29 
	~"\xa1dio.h\xb5
"

31 
	#MAXLINE
 (1024)

	)

32 
	g\xa1\xa9us
 = 1;

33 *
	g\xb4og\xc7me
;

34 
	gpm\xe6ag
 = 1;

35 
	g\xb2m\xe6ag
 = 0;

36 
	gn\xe6ag
 = 0;

37 
	g\xacgs
;

38 *
\x9adex
();

40 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

41
\xbbgexp
 *
exp
;

42 **
\xacgp
 = &
\xacgv
[1];

44 i\xe0(!
	`i\xa7\x89y
(1))

45
	`\xa3tbuf
(
\xa1dout
);

46
\xacgs
 =
\xacgc
;

47
\xb4og\xc7me
 =
\xacgv
[0];

48 *
\xacgp
 != 0 &&\x87rgp[0][0] == '-') {

49
\xacgs
--;

50 
\xacgp
[0][1]) {

52
pm\xe6ag
 = 0;

53
\xb2m\xe6ag
 = 1;

56
n\xe6ag
++;

59
pm\xe6ag
 =
\xb2m\xe6ag
 = 0;

62
\xacgp
++;

63 
out
;

65
	`u\xa7ge
();

67
\xacgp
++;

69
out
:

70 i\xe0(*
\xacgp
 == 0)

71
	`u\xa7ge
();

73 i\xe0((
exp
 =
	`\xbbgcomp
(*
\xacgp
++)\xe8=\xf0
NULL
) {

74
	`\xa1d_\x94r
("grep:\x84egcomp failed\n");

75
	`d\xd\xab
(2);

77 i\xe0(*
\xacgp
 == 0)

78
	`m\xa9ch
((*)0,
exp
);

80 *
\xacgp
) {

81 
\x9afd
;

83 i\xe0(
	`\xa1rcmp
(*
\xacgp
, "-") == 0)

84
	`m\xa9ch
("-",
exp
);

86
	`f\x\xe3o\xa3
(
\xa1d\x9a
);

87 i\xe0(
	`fݒ
(*
\xacgp
, "r"\xe8=\xf0
NULL
) {

88
	`\xa1d_\x94r
("Can't open ");

89
	`\xa1d_\x94r
(*
\xacgp
);

90
	`\xa1d_\x94r
("\n");

91
\xa1\xa9us
 = 2;

93
	`m\xa9ch
(*
\xacgp
,
exp
);

94
	`\x\xe3o\xa3
(
\x9afd
);

97
\xacgp
++;

99
	`d\xd\xab
(
\xa1\xa9us
);

100
	}
}

105 
	$m\xa9ch
(*
\xc7me
,
\xbbgexp
 *
exp
) {

106 
buf
[
MAXLINE
];

107 
l\x9a\x92o
 = 0;

109 
	`g\x91l\x9\xab
(
buf
,
MAXLINE
\xe8!\xf0
NULL
) {

110 *
\xfc
 =
	`\x9adex
(
buf
, '\n');

111
l\x9a\x92o
++;

112 i\xe0(
\xfc
 == 0) {

113
	`\xa1d_\x94r
("Line\x81oo\x86ong in ");

114
	`\xa1d_\x94r
(
\xc7me
 == 0 ? "stdin" :\x82ame);

116 *
\xfc
 = '\0';

117 i\xe0(
	`\xbbgexec
(
exp
,
buf
)) {

118 i\xe0(
pm\xe6ag
)

119
	`\xb6\x9\xab
(
\xc7me
,
l\x9a\x92o
,
buf
);

120 i\xe0(
\xa1\xa9us
 != 2)

121
\xa1\xa9us
 = 0;

122 } i\xe0(
\xb2m\xe6ag
)

123
	`\xb6\x9\xab
(
\xc7me
,
l\x9a\x92o
,
buf
);

125
	}
}

126 
	$\xbbg\x94r\xdc
(cڡ *
s
) {

127
	`\xa1d_\x94r
("grep: ");

128
	`\xa1d_\x94r
(
s
);

129
	`\xa1d_\x94r
("\n");

130
	`d\xd\xab
(2);

131
	}
}

133 
	$\xb6\x9\xab
(*
\xc7me
, 
l\x9a\x92o
, 
buf
[]) {

134 i\xe0(
\xc7me
 &&
\xacgs
 > 3)

135
	`\xb4\x9\xa9s
("%s:",
\xc7me
);

136 i\xe0(
n\xe6ag
)

137
	`\xb4\x9\xa9s
("%s:",
	`\x99\xdf
(
l\x9a\x92o
));

138
	`\xb4\x9\xa9s
("%s\n",
buf
);

139
	}
}

141 
	$u\xa7ge
() {

142
	`\xa1d_\x94r
("Usage: grep [-v] [-n] [-s] [-e\x83xpr]\x83xpression [file ...]\n");

143
	`d\xd\xab
(2);

144
	}
}

146 *
	$g\x91l\x9\xab
(*
buf
, 
size
) {

147 *
\x9a\x99buf
 =
buf
,
c
;

150
c
 =
	`g\x91c
(
\xa1d\x9a
);

151 *
buf
++ =
c
;

152 i\xe0(
c
 <= 0)

153  (
NULL
);

154 i\xe0(
buf
 -
\x9a\x99buf
 =\xf0
size
 - 1)

155  (
buf
 -
\x9a\x99buf
);

156 i\xe0(
c
 == '\n')

157  (
buf
 -
\x9a\x99buf
);

159
	}
}

161 
	$d\xd\xab
(
n
) {

162
	`f\xe6ush
(
\xa1dout
);

163
	`ex\x99
(
n
);

164
	}
}

	@commands/gres.cpp

26 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

27 
	~"\xbbgexp.h\xb5
"

28 
	~"\xa1dio.h\xb5
"

30 
	#MAXLINE
 (1024)

	)

32 
	g\xa1\xa9us
 = 1;

33 *
	gu\xa7gemsg
 = "Usage: gres [-g] search\x84eplace [file ...]\n";

34 *
	g\xb4og\xc7me
;

35 
	gg\xe6ag
 = 0;

36 *
\x9adex
();

37
FILE
 *
fݒ
();

39 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

40
\xbbgexp
 *
exp
;

41 *
\xbbp\xa1r
;

42 **
\xacgp
 = &
\xacgv
[1];

44
\xb4og\xc7me
 =
\xacgv
[0];

45 i\xe0(*
\xacgp
 != 0 &&\x87rgp[0][0] == '-' &&\x87rgp[0][1] == 'g') {

46
g\xe6ag
 = 1;

47
\xacgp
++,
\xacgc
--;

49 i\xe0(
\xacgc
 < 3) {

50
	`\xa1d_\x94r
(
u\xa7gemsg
);

51
	`d\xd\xab
(2);

53 i\xe0(
\xacgp
[0][0] == '\0') {

54
	`\xa1d_\x94r
("gres:\x82ull match string is silly\n");

55
	`d\xd\xab
(2);

57 i\xe0((
exp
 =
	`\xbbgcomp
(*
\xacgp
++)\xe8=\xf0
NULL
) {

58
	`\xa1d_\x94r
("gres:\x84egcomp failed\n");

59
	`d\xd\xab
(2);

61
\xbbp\xa1r
 = *
\xacgp
++;

62 i\xe0(*
\xacgp
 == 0)

63
	`\xb4o\xfbss
(
\xa1d\x9a
,
exp
,
\xbbp\xa1r
);

65 *
\xacgp
) {

66
FILE
 *
\x9af
;

68 i\xe0(
	`\xa1rcmp
(*
\xacgp
, "-") == 0)

69
	`\xb4o\xfbss
(
\xa1d\x9a
,
exp
,
\xbbp\xa1r
);

71 i\xe0((
\x9af
 =
	`fݒ
(*
\xacgp
, "r")\xe8=\xf0
NULL
) {

72
	`\xa1d_\x94r
("gres: Can't open ");

73
	`\xa1d_\x94r
(*
\xacgp
);

74
	`\xa1d_\x94r
("\n");

75
\xa1\xa9us
 = 2;

77
	`\xb4o\xfbss
(
\x9af
,
exp
,
\xbbp\xa1r
);

78
	`f\x\xe3o\xa3
(
\x9af
);

81
\xacgp
++;

83
	`d\xd\xab
(
\xa1\xa9us
);

84
	}
}

89 
	$\xb4o\xfbss
(
FILE
 *
\x9af
,
\xbbgexp
 *
exp
, *
\xbbp\xa1r
) {

90 
ibuf
[
MAXLINE
];

92 
	`fg\x91s
(
ibuf
,
MAXLINE
,
\x9af
\xe8!\xf0
NULL
) {

93 *
\xfc
 =
	`\x9adex
(
ibuf
, '\n');

94 i\xe0(
\xfc
 == 0)

95
	`\xa1d_\x94r
("gres: Line broken\n");

97 *
\xfc
 = '\0';

98 i\xe0(
	`\xbbgexec
(
exp
,
ibuf
, 1)) {

99
	`\xb6\x9\xab
(
exp
,
ibuf
,
\xbbp\xa1r
);

100 i\xe0(
\xa1\xa9us
 != 2)

101
\xa1\xa9us
 = 0;

103
	`\xb4\x9\xa9f
("%s\n",
ibuf
);

105
	}
}

107 
	$\xbbg\x94r\xdc
(cڡ *
s
) {

108
	`\xa1d_\x94r
("gres: ");

109
	`\xa1d_\x94r
(
s
);

110
	`\xa1d_\x94r
("\n");

111
	`d\xd\xab
(2);

112
	}
}

114 **
	$g\x91buf
(
\xbbgexp
 *
exp
, *
\xbbp\xa1r
) {

115 
bufsize
 = 0;

116 *
buf
 = 0;

117 
guess
 = 10;

118 
ch
;

120 *
\xbbp\xa1r
) {

121 *
\xbbp\xa1r
) {

123
guess
 +\xf0
exp
->
\x92dp
[0] -\x83xp->
\xa1\xac\x8d
[0];

126 i\xe0((
ch
 = *++
\xbbp\xa1r
) < '0' || ch > '9')

127
guess
 += 2;

129
ch
 -= '0';

130
guess
 +\xf0
exp
->
\x92dp
[
ch
] -\x83xp->
\xa1\xac\x8d
[ch];

134
guess
++;

136
\xbbp\xa1r
++;

138 i\xe0(
bufsize
 <
guess
) {

139 i\xe0(
buf
 != 0)

140
	`\xa7\xe3_\xe4\x93
((*)
buf
);

141
buf
 =
	`\xa7\xe3_m\x\xabloc
(
guess
);

143 
buf
;

144
	}
}

146 
	$\xb6\x9\xab
(
\xbbgexp
 *
exp
, 
ibuf
[], *
\xbbp\xa1r
) {

148
	`dosub
(
exp
,
ibuf
,
\xbbp\xa1r
);

149
ibuf
 =
exp
->
\x92dp
[0];

150 i\xe0(*
ibuf
 == '\0')

152 i\xe0(
ibuf
 =\xf0
exp
->
\xa1\xac\x8d
[0])

153
	`putch\xac
(*
ibuf
++);

154 } !
g\xe6ag
 &&
	`\xbbgexec
(
exp
,
ibuf
, 0));

155
	`\xb4\x9\xa9f
("%s\n",
ibuf
);

156
	}
}

161 
	$dosub
(
\xbbgexp
 *
exp
, 
ibuf
[], *
\xbbp\xa1r
) {

162 *
buf
 =
	`g\x91buf
(
exp
,
\xbbp\xa1r
);

163 *
\x92d
 =
exp
->
\xa1\xac\x8d
[0];

164 
ch
 = *
\x92d
;

166 *
\x92d
 = '\0';

167
	`\xe5uts
(
ibuf
,
\xa1dout
);

168 *
\x92d
 =
ch
;

169
	`\xbbgsub
(
exp
,
\xbbp\xa1r
,
buf
);

170
	`\xe5uts
(
buf
,
\xa1dout
);

171
	}
}

173 
	$d\xd\xab
(
n
) {

174
	`_\x\xe3\x97nup
();

175
	`ex\x99
(
n
);

176
	}
}

	@commands/head.cpp

9 
	~"\xa1dio.h\xb5
"

10 
	~<\xac\xbfy
>

12 
	#DEFAULT
 10

	)

14
	g\xa1d
::
\xac\xbfy
<,
	gBUFSIZ
>
	gbuff
{};

15
	g\xa1d
::
\xac\xbfy
<, 256>
	glbuf
{};

17 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

19 
n
,
k
,
nf\x9\x93s
;

20 *
\xb1r
;

23
	`\xa3tbuf
(
\xa1dout
,
buff
.
	`d\xa9a
());

24
k
 = 1;

25
\xb1r
 =
\xacgv
[1];

26
n
 =
DEFAULT
;

27 i\xe0(*
\xb1r
++ == '-') {

28
k
++;

29
n
 =
	`\xa9oi
(
\xb1r
);

30 i\xe0(
n
 <= 0)

31
	`u\xa7ge
();

33
nf\x9\x93s
 =
\xacgc
 -
k
;

35 i\xe0(
nf\x9\x93s
 == 0) {

37
	`do_f\x9\x93
(
n
);

38
	`f\xe6ush
(
\xa1dout
);

39
	`ex\x99
(0);

43 
k
 <
\xacgc
) {

44
	`f\x\xe3o\xa3
(
\xa1d\x9a
);

45 i\xe0(
nf\x9\x93s
 > 1)

46
	`\xb4\x9\xa9s
("==> %\xa0<==\n",
\xacgv
[
k
]);

47 i\xe0(
	`fݒ
(
\xacgv
[
k
], "r"\xe8=\xf0
NULL
)

48
	`\xb4\x9\xa9s
("h\x97d: c\xaan\xd9 o\xb3\xc0%s\n",
\xacgv
[
k
]);

50
	`do_f\x9\x93
(
n
);

51
k
++;

52 i\xe0(
k
 <
\xacgc
)

53
	`\xb4\x9\xa9s
("\n");

55
	`f\xe6ush
(
\xa1dout
);

56
	`ex\x99
(0);

57
	}
}

59 
	$do_f\x9\x93
(
n
) {

61 
n
--)

62
	`do_l\x9\xab
();

63
	}
}

65 
	$do_l\x9\xab
() {

68 
c
, *
\xfd
;

69
\xfd
 =
lbuf
.
	`d\xa9a
();

70 (
c
 =
	`g\x91c
(
\xa1d\x9a
)) != '\n')

71 *
\xfd
++ =
c
;

72 *
\xfd
++ = '\n';

73 *
\xfd
++ = 0;

74
	`\xb4\x9\xa9s
("%s",
lbuf
.
	`d\xa9a
());

75
	}
}

77 
	$u\xa7ge
() {

78
	`\xa1d_\x94r
("Usage: head [-n] [file ...]\n");

79
	`ex\x99
(1);

80
	}
}

	@commands/kill.cpp

9 
	~"../h/sig\xc7l.h\xb5
"

11 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

12 
\xb4oc
,
sig\xc7l
 =
SIGTERM
;

14 i\xe0(
\xacgc
 < 2)

15
	`u\xa7ge
();

16 i\xe0(*
\xacgv
[1] == '-') {

17
sig\xc7l
 =
	`\xa9oi
(&
\xacgv
[1][1]);

18 *
\xacgv
++;

19
\xacgc
--;

21 i\xe0(!
sig\xc7l
)

22
sig\xc7l
 =
SIGTERM
;

23 --
\xacgc
) {

24 *
\xacgv
++;

25
\xb4oc
 =
	`\xa9oi
(*
\xacgv
);

26 i\xe0(!
\xb4oc
 &&
	`\xa1rcmp
(*
\xacgv
, "0"))

27
	`u\xa7ge
();

28 i\xe0(
	`k\x9\x96
(
\xb4oc
,
sig\xc7l
)) {

29
	`\xb4\x9\xa9s
("K\x9el: %\xa0n\xd8such\x85ro\xfbss\n",
	`\x99\xdf
(
\xb4oc
));

30
	`ex\x99
(1);

33
	`ex\x99
(0);

34
	}
}

36 
	$u\xa7ge
() {

37
	`\xb4\x9\xa9s
("usage: kill\x85id\n");

38
	`ex\x99
(1);

39
	}
}

	@commands/libpack.cpp

8 
	~<\xa1r\x9ag_v\x9bw
>

10 
	~<c\xa1dlib
>

11 
	~<uni\xa1d.h
>

13 
	#BUFSIZ
 20000

	)

15 
	#FS
 1

	)

16 
	#WRITE
 4

	)

17 
	#NILP
 (*)0

	)

19 *
	g\x8fb\xcb
[] = {"push\x87x",

140 
	gb\xde
 = 1;

141 
	gwh\x99e
 = 0;

143 
	#MAX
 128

	)

145 
	snode
 {

146 *
	m\xa1r\x9ag
;

147 
node
 *
	m\xc3xt
;

148 }
	gnode
[
MAX
];

150 
node
 *
	ghash
[
MAX
];

152 
	g\x9\xadut
[
BUFSIZ
 + 2];

153 
	gxbuf
[
BUFSIZ
 + 2];

155 
\xb7ck88
(*
\x9ap
, *
ou\x8d
, 
cou\xc1
);

156 
	$ma\x9a
() {

157 
n
,
cou\xc1
,
outby\x8bs
;

158 *
p
;

160
	`ha\x9a\x99
();

162 
p
 = &
\x9aput
[0];\x85 < &\x9aput[
BUFSIZ
 + 1];\x85++)

163 *
p
 = 0;

164
n
 =
	`\xbbad
(0,
\x9aput
,
BUFSIZ
);

165 i\xe0(
n
 =\xf0
BUFSIZ
) {

166
	`\xa1d_\x94r
("Input file\x81oo\x86ong\n");

167
	`ex\x99
(1);

169 i\xe0(
n
 <= 0)

170
	`ex\x99
(0);

171
outby\x8bs
 =
	`\xb7ck88
(
\x9aput
,
xbuf
,
n
);

172
	`wr\x99e
(1,
xbuf
,
outby\x8bs
);

176
	}
}

180 
	$\xb7ck88
(*
\x9ap
, *
ou\x8d
, 
cou\xc1
) {

183 
k
,
h\x99
,
whch\xac
,
n
;

184 *
\xdcig
 =
ou\x8d
;

185 *
\x9abeg
 =
\x9ap
;

186 
\xf9
;

187 *
p
, **
\xb5t
;

188 
node
 *
nood
;

191
p
 =
\x9ap
;

192 
p
 -
\x9abeg
 <
cou\xc1
) {

193 i\xe0(*
p
 == '\t')

194 *
p
 = ' ';

195
p
++;

201 i\xe0(
\x9ap
 -
\x9abeg
 >
cou\xc1
)

202
	`wr\x99e
(2, "Bug in\x85acking\x87lgorithm\n", 25);

203 i\xe0(
\x9ap
 -
\x9abeg
 =\xf0
cou\xc1
)

204  (
ou\x8d
 -
\xdcig
);

207
whch\xac
 = (*
\x9ap
 == ' ' ? 1 : 0);

208 i\xe0(
b\xde
 &&
whch\xac
) {

209
\x9ap
++;

212
b\xde
 = 0;

214 i\xe0(*
\x9ap
 == '\n')

215
b\xde
 = 1;

218 i\xe0(*
\x9ap
 == '|') {

219 *
\x9ap
++ != '\n')

221
\x9ap
--;

222
b\xde
 = 1;

226 i\xe0(
wh\x99e
 &&
whch\xac
) {

227
\x9ap
++;

230
wh\x99e
 =
whch\xac
;

232
\xb5t
 =
\x8fb\xcb
;

233
h\x99
 = 0;

236
n
 = (*
\x9ap
 + *(inp + 1)) & 0177;

237
nood
 =
hash
[
n
];

239 
nood
 != 0) {

240 i\xe0(
	`m\xa9ch
(
\x9ap
,
nood
->
\xa1r\x9ag
)) {

241 *
ou\x8d
++ = ()(128 + (
nood
 -
node
));

242
\x9ap
 +\xf0
	`\xa1\xbe\x92
(
nood
->
\xa1r\x9ag
);

243
h\x99
++;

246
nood
 =\x82ood->
\xc3xt
;

248 i\xe0(
h\x99
 == 0)

249 *
ou\x8d
++ = *
\x9ap
++;

251
	}
}

253 
	$m\xa9ch
(
s1
,
s2
)

254 *
s1
, *
s2
;

257 *
s2
 != 0) {

258 i\xe0(*
s1
++ !\xf0*
s2
++)

262
	}
}

264
	$ha\x9a\x99
() {

267 
n
,
i
,
\xe4\x93
;

268 *
p
;

269 
node
 *
nood
;

271
\xe4\x93
 = 0;

272 
i
 = 0; i <
MAX
; i++) {

273
p
 =
\x8fb\xcb
[
i
];

274 i\xe0(
p
 == (*)0)

276
n
 = *
p
 + *(p + 1);

277
n
 =\x82 & 0177;

280 i\xe0(
hash
[
n
] =\xf0(
node
 *)0) {

281
hash
[
n
] = &
node
[
\xe4\x93
];

284
nood
 =
hash
[
n
];

285 
nood
->
\xc3xt
 !\xf0(
node
 *)0)

286
nood
 =\x82ood->
\xc3xt
;

287
nood
->
\xc3xt
 = &
node
[
\xe4\x93
];

289
node
[
\xe4\x93
].
\xa1r\x9ag
 =
p
;

290
node
[
\xe4\x93
].
\xc3xt
 = (node *)0;

291
\xe4\x93
++;

293
	}
}

	@commands/libupack.cpp

7 
	~<c\xa1dlib
>

8 
	~<\xa1r\x9ag_v\x9bw
>

9 
	~<uni\xa1d.h
>

10 *
	g\x8fb\xcb
[] = {"push\x87x",

131 
	#IBUFSIZE
 10000

	)

132 
	#OBUFSIZE
 30000

	)

135 
	g\x9\xadut
[
IBUFSIZE
 + 1];

136 
	gou\x8dut
[
OBUFSIZE
 + 1];

139 
u\xc5ack88
(*
\x9ap
, *
ou\x8d
);

141 
	$ma\x9a
() {

142 
n
;

143 
cou\xc1
;

146
n
 =
	`\xbbad
(0,
\x9aput
,
IBUFSIZE
);

147 i\xe0(
n
 <= 0)

148
	`ex\x99
(1);

149
\x9aput
[
n
] = 0;

150
cou\xc1
 =
	`u\xc5ack88
(
\x9aput
,
ou\x8dut
);

151
n
 =
	`wr\x99e
(1,
ou\x8dut
,
cou\xc1
);

155
	}
}

159 
	$u\xc5ack88
(*
\x9ap
, *
ou\x8d
) {

160 
k
;

161 *
p
;

162 *
\xdcig
 =
ou\x8d
;

164 *
\x9ap
 != 0) {

165
k
 = *
\x9ap
 & 0377;

166 i\xe0(
k
 < 128) {

168 *
ou\x8d
++ = *
\x9ap
++;

171
p
 =
\x8fb\xcb
[
k
 - 128];

172 *
p
 != 0) {

173 *
ou\x8d
++ = *
p
++;

175
\x9ap
++;

179 
ou\x8d
 -
\xdcig
;

180
	}
}

	@commands/ln.cpp

9 
	~"\xa1\xa9.h\xb5
"

10 
	~<f\x9\x93sy\xa1em
>

11 
	~<\xa1r\x9ag
>

17 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

19 i\xe0(
\xacgc
 < 2 ||\x87rgc > 3)

20 
	`u\xa7ge
();

22
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

\xa4c
{
\xacgv
[1]};

25 i\xe0(
	`ac\xfbss
(
\xa4c
.
	`c_\xa1r
(), 0) < 0) {

26
	`\xa1d_\x94r
("ln: cannot\x87ccess ");

27
	`\xa1d_\x94r
(
\xacgv
[1]);

28
	`\xa1d_\x94r
("\n");

33 
\xa1\xa9

sb
{};

34 i\xe0(
	`\xa1\xa9
(
\xa4c
.
	`c_\xa1r
(), &
sb
\xe8>\xf00 && (sb.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFDIR
)

35 
	`u\xa7ge
();

37
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

de\xa1
 =

38 (
\xacgc
 =\xf02\xe8?
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th
{"."} : std::f\x9eesy\xa1em::\xb7th{
\xacgv
[2]};

41 i\xe0(
	`\xa1\xa9
(
de\xa1
.
	`c_\xa1r
(), &
sb
\xe8>\xf00 && (sb.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFDIR
)

42
de\xa1
 /\xf0
\xa4c
.
	`f\x9e\x92ame
();

45 i\xe0(
	`l\x9ak
(
\xa4c
.
	`c_\xa1r
(),
de\xa1
.c_str()) != 0) {

46
	`\xa1d_\x94r
("ln: Can't\x86ink\n");

51
	}
}

53 
	$u\xa7ge
() {

54
	`\xa1d_\x94r
("Usage:\x86n file1 [file2]\n");

56
	}
}

	@commands/login.cpp

9 
	~"pwd.h\xb5
"

10 
	~"sg\x89y.h\xb5
"

11 
	~"sig\xc7l.h\xb5
"

12 
	~<\xac\xbfy
>

13 
	~<c\xa1r\x9ag
>

14 
	~<\xa1r\x9ag_v\x9bw
>

16 
	$ma\x9a
() {

18
\xa1d
::
\xac\xbfy
<, 30>
\xc7me
{};

19
\xa1d
::
\xac\xbfy
<, 30>
pwd_buf
{};

22 
n
 = 0;

23 
n1
 = 0;

24 
bad
 = 0;

27 
sg\x89yb

\xacgs
{};

30 
\xb7sswd
 *
pwd
 =
nuαr
;

32
\xacgs
.
sg_k\x9\x96
 = '@';

33
\xacgs
.
sg_\x94a\xa3
 = '\b';

34
\xacgs
.
sg_\xe6ags
 = 06030;

35
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

39
bad
 = 0;

41
	`wr\x99e
(1, "login: ", 7);

42
n
 =
	`\xbbad
(0,
\xc7me
.
	`d\xa9a
(),\x82ame.
	`size
());

43 } 
n
 < 2);

44
\xc7me
[
n
 - 1] = 0;

47
pwd
 =
	`g\x91pw\xc7m
(
\xc7me
.
	`d\xa9a
());

48 i\xe0(
pwd
 =\xf0
nuαr
)

49
bad
++;

51 i\xe0(
bad
 ||
\xa1d
::
	`\xa1\xbe\x92
(
pwd
->
pw_\xb7sswd
) != 0) {

52
\xacgs
.
sg_\xe6ags
 = 06020;

53
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

54
	`wr\x99e
(1, "Password: ", 10);

55
n1
 =
	`\xbbad
(0,
pwd_buf
.
	`d\xa9a
(),\x85wd_buf.
	`size
());

56
pwd_buf
[
n1
 - 1] = 0;

57
	`wr\x99e
(1, "\n", 1);

58
\xacgs
.
sg_\xe6ags
 = 06030;

59
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

60 i\xe0(
bad
 ||
\xa1d
::
	`\xa1rcmp
(
pwd
->
pw_\xb7sswd
,
	`\xfcy\xb1
(
pwd_buf
.
	`d\xa9a
(),\x85wd->pw_passwd))) {

61
	`wr\x99e
(1, "Login incorrect\n", 16);

67
	`\xa3tgid
(
pwd
->
pw_gid
);

68
	`\xa3tuid
(
pwd
->
pw_uid
);

69
	`chd\x9c
(
pwd
->
pw_d\x9c
);

70 i\xe0(
pwd
->
pw_sh\x96l
) {

71
	`exe\x\xe3
(
pwd
->
pw_sh\x96l
, "-", 0);

73
	`exe\x\xe3
("/bin/sh", "-", 0);

74
	`wr\x99e
(1, "exec failure\n", 13);

78
	}
}

	@commands/lpr.cpp

9 
	~"\x94\xbao.h\xb5
"

11 
	#BLOCK
 1024

	)

13 
	g\x9a_buf
[
BLOCK
],
	gout_buf
[BLOCK];

14 
	gcur_\x9a
,
	g\x9a_cou\xc1
,
	gout_cou\xc1
,
	gc\xdeumn
;

16 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

21 
i
,
fd
;

23
	`\x\xe3o\xa3
(1);

24 i\xe0(
	`ݒ
("/dev/lp", 1) < 0) {

25
	`\xa1d_\x94r
("lpr: can't open /dev/lp\n");

26
	`ex\x99
(1);

29 i\xe0(
\xacgc
 == 1) {

30
	`c\xddy
(0);

32 
i
 = 1; i <
\xacgc
; i++) {

33 i\xe0((
fd
 =
	`ݒ
(
\xacgv
[
i
], 0)) < 0) {

34
	`\xa1d_\x94r
("lpr: can't open ");

35
	`\xa1d_\x94r
(
\xacgv
[1]);

36
	`\xa1d_\x94r
("\n");

37
	`ex\x99
(1);

39
	`c\xddy
(
fd
);

40
	`\x\xe3o\xa3
(
fd
);

41
cur_\x9a
 = 0;

42
\x9a_cou\xc1
 = 0;

46
	`ex\x99
(0);

47
	}
}

49 
	$c\xddy
(
fd
) {

52 
c
;

55 i\xe0(
cur_\x9a
 =\xf0
\x9a_cou\xc1
) {

56
\x9a_cou\xc1
 =
	`\xbbad
(
fd
,
\x9a_buf
,
BLOCK
);

57 i\xe0(
\x9a_cou\xc1
 == 0) {

58
	`\xe6ush
();

61
cur_\x9a
 = 0;

63
c
 =
\x9a_buf
[
cur_\x9a
++];

64 i\xe0(
c
 == '\n') {

65
	`putc
('\r');

66
	`putc
('\n');

67 } i\xe0(
c
 == '\t') {

69
	`putc
(' ');

70 } 
c\xdeumn
 & 07);

72
	`putc
(
c
);

74
	}
}

76 
	$putc
(
c
) {

77
out_buf
[
out_cou\xc1
++] =
c
;

78 i\xe0(
c
 == '\n')

79
c\xdeumn
 = 0;

81
c\xdeumn
++;

82 i\xe0(
out_cou\xc1
 =\xf0
BLOCK
) {

83
	`\xe6ush
();

85
	}
}

87 
	$\xe6ush
() {

88 
n
,
cou\xc1
 = 0;

90 i\xe0(
out_cou\xc1
 == 0)

93
n
 =
	`wr\x99e
(1,
out_buf
,
out_cou\xc1
);

94 i\xe0(
n
 =\xf0
out_cou\xc1
)

96 i\xe0(
n
 !\xf0
E\xbc\xdcCode
::
EAGAIN
) {

97
	`\xa1d_\x94r
("Printer\x83rror\n");

98
	`ex\x99
(1);

100 i\xe0(
cou\xc1
 > 5) {

101
	`\xa1d_\x94r
("Printer keeps\x84eturning busy status\n");

102
	`ex\x99
(1);

104
cou\xc1
++;

105
	`\xa6\x93p
(1);

107
out_cou\xc1
 = 0;

108
	}
}

	@commands/ls.cpp

9 
	~"../fs/cڡ.h\xb5
"

10 
	~"../fs/ty\xb3.h\xb5
"

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/ty\xb3.h\xb5
"

13 
	~"\xa1\xa9.h\xb5
"

14 
	~"\xa1dio.h\xb5
"

16 
	#DIRNAMELEN
 14

	)

17 
	#NFILE
 256

	)

18 
	#MAXPATHLEN
 256

	)

19 
	#NDIRBLOCKS
 16

	)

20 
	#LEGAL
 0x1E096DL

	)

22 
	sf\x9\x93
 {

23 *
	m\xc7me
;

24 
	mmode
;

25 
	mf_uid
;

26 
	mf_gid
;

27 
	m\x9aumb\x94
;

28 
	mmodtime
;

29 
	msize
;

30 
	ml\x9ak
;

31 }
	gf\x9\x93
[
NFILE
 + 1];

33 
	sd\x9c
 {

34 
	m\x9aum
;

35 
	md\x9c\xc7me
[
DIRNAMELEN
];

36 }
	gd\x9c
[
INODES_PER_BLOCK
 *
NDIRBLOCKS
];

38 
	g\xc4f\x9\x93s
;

39 
	gl\x9\xabbuf
[
BLOCK_SIZE
];

40 
	gl\x9a\x92ext
;

41 
	gl\x9a\x96im\x99
;

42 
	gt\xddf\x9\x93s
;

43 
	g\xb7sswd
;

44 
	gs\xd\xf9_\x9adex
[
NFILE
];

45 
	g\xe6ags
;

46 
	gϡuid
 = -1;

47 
	gϡ\xc7me
[10];

48 
	gbuf\xe3r
[
BUFSIZ
];

50 *
	grwx
[] = {"---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx",

52 *
	gnu\x\xfb
 = {"."};

53 
g\x91_\xe6ags
();

54 *
g\x91uidgid
();

55 
\x94\xbao
;

57 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

58 
ex\xb7nd_\xe6ag
;

59 *
pwf\x9\x93
;

61
	`\xa3tbuf
(
\xa1dout
,
buf\xe3r
);

62
ex\xb7nd_\xe6ag
 = 1;

63
\xe6ags
 =
	`g\x91_\xe6ags
(
\xacgc
,
\xacgv
);

64
	`ex\xb7nd_\xacgs
(
\xacgc
,
\xacgv
);

66 i\xe0(
t\xddf\x9\x93s
 == 0) {

67
f\x9\x93
[
NFILE
].
\xc7me
 =
nu\x\xfb
;

68
	`exp_d\x9c
(&
f\x9\x93
[
NFILE
]);

69
ex\xb7nd_\xe6ag
 = 0;

71 i\xe0(
	`\xb4e\xa3\xc1
('f'))

72
\xe6ags
 = 0x21;

73
	`s\xd\xf9
(0,
\xc4f\x9ees
,
ex\xb7nd_\xe6ag
);

75 i\xe0(
	`\xb4e\xa3\xc1
('l')) {

76 i\xe0(
	`\xb4e\xa3\xc1
('g'))

77
pwf\x9\x93
 = "/etc/group";

79
pwf\x9\x93
 = "/etc/passwd";

80
\xb7sswd
 =
	`ݒ
(
pwf\x9\x93
, 0);

81 i\xe0(
\xb7sswd
 < 0)

82
	`\xe5r\x9\xa9f
(
\xa1dout
, "C\xaa'\x88ݒ %s\n",
pwf\x9\x93
);

84 i\xe0(
t\xddf\x9\x93s
 == 0)

85
	`\xb4\x9\xa9_tٮ
(0,
\xc4f\x9ees
);

86
	`\xb4\x9\xa9
(0,
\xc4f\x9ees
,
ex\xb7nd_\xe6ag
, "");

87
	`f\xe6ush
(
\xa1dout
);

88
	`ex\x99
(0);

89
	}
}

91 
	$ex\xb7nd_\xacgs
(
\xacgc
, *
\xacgv
[]) {

94 
k
,
\xa1\xa9\xe6ag
;

96
k
 =
\xacgc
 -
t\xddf\x9\x93s
;

97
\xa1\xa9\xe6ag
 = (
t\xddf\x9\x93s
 == 0 ? 0 : 1);

98 i\xe0(
	`\xb4e\xa3\xc1
('c') ||\x85resent('t') ||\x85resent('u'))

99
\xa1\xa9\xe6ag
 = 1;

100 i\xe0(
	`\xb4e\xa3\xc1
('s') ||\x85resent('l'))

101
\xa1\xa9\xe6ag
 = 1;

102 
k
 <
\xacgc
)

103
	`f\x9\x96_f\x9\x93
("",
\xacgv
[
k
++],
\xa1\xa9\xe6ag
);

104
	}
}

106 
	$s\xd\xf9
(
\x9adex
, 
cou\xc1
, 
ex\xb7nd_\xe6ag
) {

109 
i
,
j
,
tmp
;

111 i\xe0(
cou\xc1
 == 0)

113 
i
 =
\x9adex
; i < index +
cou\xc1
; i++)

114
s\xd\xf9_\x9adex
[
i
] = i;

115 i\xe0(
	`\xb4e\xa3\xc1
('f'))

118 
i
 =
\x9adex
; i < index +
cou\xc1
 - 1; i++)

119 
j
 =
i
 + 1; j <
\x9adex
 +
cou\xc1
; j++) {

120 i\xe0(
	`\xbbv\x94\xa3d
(
s\xd\xf9_\x9adex
[
i
], s\xdct_\x9adex[
j
],
ex\xb7nd_\xe6ag
)) {

122
tmp
 =
s\xd\xf9_\x9adex
[
j
];

123
s\xd\xf9_\x9adex
[
j
] = s\xdct_\x9adex[
i
];

124
s\xd\xf9_\x9adex
[
i
] =
tmp
;

127
	}
}

129 
	$\xbbv\x94\xa3d
(
i
, 
j
, 
ex\xb7nd_\xe6ag
) {

132 
r
,
m1
,
m2
;

133 
f\x9\x93
 *
\xe51
, *
\xe52
;

135
\xe51
 = &
f\x9\x93
[
i
];

136
\xe52
 = &
f\x9\x93
[
j
];

137 i\xe0(
ex\xb7nd_\xe6ag
) {

138 i\xe0(
\xe51
->
size
 =\xf0-1L ||
\xe52
->size == -1L) {

139
	`\xe5r\x9\xa9f
(
\xa1dout
, "ls: internal bug:\x82on-stat'ed file in\x84eversed()\n");

140
	`f\xe6ush
(
\xa1dout
);

141
	`ex\x99
(1);

143
m1
 =
\xe51
->
mode
 &
I_TYPE
;

144
m2
 =
\xe52
->
mode
 &
I_TYPE
;

145 i\xe0(
m1
 =\xf0
I_DIRECTORY
 &&
m2
 != I_DIRECTORY)

147 i\xe0(
m1
 !\xf0
I_DIRECTORY
 &&
m2
 == I_DIRECTORY)

151
r
 =
	`\xb4e\xa3\xc1
('r');

152 i\xe0(
	`\xb4e\xa3\xc1
('t') ||\x85resent('u')) {

154 i\xe0(
\xe51
->
modtime
 >
\xe52
->modtime)

155  (
r
);

157  (1 -
r
);

160 i\xe0(
	`\xa1\xbeow\x94
(
\xe51
->
\xc7me
,
\xe52
->\xc7me,
MAXPATHLEN
))

161  (
r
);

163  (1 -
r
);

165
	}
}

167 
	$\xa1\xbeow\x94
(
s1
,
s2
,
cou\xc1
)

168 *
s1
, *
s2
;

169 
cou\xc1
;

173 
cou\xc1
--) {

174 i\xe0(*
s1
 =\xf00 && *
s2
 == 0)

176 i\xe0(*
s1
 == 0)

178 i\xe0(*
s2
 == 0)

180 i\xe0(*
s1
 < *
s2
)

182 i\xe0(*
s1
 > *
s2
)

184
s1
++;

185
s2
++;

190
	}
}

192 
	$\xb4\x9\xa9
(
\x9adex
, 
cou\xc1
, 
ex\xb7nd
, *
d\x9c\xc7me
) {

195 
k
,
m
,
\xc4f
;

196 
f\x9\x93
 *
\xe5
;

198
\xc4f
 =
\xc4f\x9ees
;

199 
k
 =
\x9adex
; k < index +
cou\xc1
; k++) {

200
\xe5
 = &
f\x9\x93
[
s\xd\xf9_\x9adex
[
k
]];

201 i\xe0(
	`\xb4e\xa3\xc1
('l') ||\x85resent('s') ||\x85resent('i'))

202 i\xe0(
\xe5
->
size
 == -1L)

203 i\xe0(
	`\xa1\xa9_f\x9\x93
(
d\x9c\xc7me
,
\xe5
) < 0)

206
m
 =
\xe5
->
mode
 &
I_TYPE
;

207 i\xe0(
	`\xb4e\xa3\xc1
('f'))

208
m
 =
I_DIRECTORY
;

209 i\xe0(
m
 !\xf0
I_DIRECTORY
 ||
	`\xb4e\xa3\xc1
('d'\xe8||
ex\xb7nd
 == 0) {

211
	`\xb4\x9\xa9_l\x9\xab
(
\xe5
);

214
	`exp_d\x9c
(
\xe5
);

215
	`s\xd\xf9
(
\xc4f
,
\xc4f\x9ees
 -\x82rf, 0);

216 i\xe0(
t\xddf\x9\x93s
 > 1)

217
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n%s:\n",
\xe5
->
\xc7me
);

218
	`\xb4\x9\xa9_tٮ
(
\xc4f
,
\xc4f\x9ees
 -\x82rf);

219
	`\xb4\x9\xa9
(
\xc4f
,
\xc4f\x9ees
 -\x82rf, 0,
\xe5
->
\xc7me
);

220
\xc4f\x9ees
 =
\xc4f
;

223
	}
}

225 
	$exp_d\x9c
(
f\x9\x93
 *
\xe5
) {

230 
n
,
fd
,
k
,
klim
,
su\xb5\xbbss
,
\xa1\xa9\xe6ag
;

231 *
p
;

233
fd
 =
	`ݒ
(
\xe5
->
\xc7me
, 0);

234 i\xe0(
fd
 < 0) {

235
	`\xe5r\x9\xa9f
(
\xa1dout
, "C\xaanنi\xa1 cڋ\xc1\xa0o\xe0%s\n",
\xe5
->
\xc7me
);

239
su\xb5\xbbss
 = !
	`\xb4e\xa3\xc1
('a');

240
n
 =
	`\xbbad
(
fd
,
d\x9c
,
INODE_SIZE
 *
INODES_PER_BLOCK
 *
NDIRBLOCKS
);

241
klim
 = (
n
 +
DIRNAMELEN
 + 1) / (DIRNAMELEN + 2);

242 i\xe0(
n
 =\xf0
INODE_SIZE
 *
INODES_PER_BLOCK
 *
NDIRBLOCKS
) {

243
	`\xe5r\x9\xa9f
(
\xa1dout
, "D\x9ce\xf9\xdcy %\xa0to\xd8l\xdag\n",
\xe5
->
\xc7me
);

246
\xa1\xa9\xe6ag
 = 0;

247 i\xe0(
	`\xb4e\xa3\xc1
('c') ||\x85resent('t') ||\x85resent('u'))

248
\xa1\xa9\xe6ag
 = 1;

249 i\xe0(
	`\xb4e\xa3\xc1
('s') ||\x85resent('l'))

250
\xa1\xa9\xe6ag
 = 1;

252 
k
 = 0; k <
klim
; k++) {

253 i\xe0(
d\x9c
[
k
].
\x9aum
 != 0) {

254
p
 =
d\x9c
[
k
].
d\x9c\xc7me
;

255 i\xe0(
su\xb5\xbbss
) {

256 i\xe0(*
p
 == '.' && *(p + 1) == 0)

258 i\xe0(*
p
 == '.' && *(p + 1) == '.' && *(p + 2) == 0)

261
	`f\x9\x96_f\x9\x93
(
\xe5
->
\xc7me
,
p
,
\xa1\xa9\xe6ag
);

264
	`\x\xe3o\xa3
(
fd
);

265
	}
}

267 
	$f\x9\x96_f\x9\x93
(*
\xb4efix
, *
po\xa1fix
, 
\xa1\xa9\xe6ag
) {

272 
f\x9\x93
 *
\xe5
;

274 i\xe0(
\xc4f\x9ees
 =\xf0
NFILE
) {

275
	`\xe5r\x9\xa9f
(
\xa1dout
, "ls: Out of space\n");

276
	`f\xe6ush
(
\xa1dout
);

277
	`ex\x99
(1);

279
\xe5
 = &
f\x9\x93
[
\xc4f\x9ees
++];

280
\xe5
->
\xc7me
 =
po\xa1fix
;

281 i\xe0(
\xa1\xa9\xe6ag
) {

282 i\xe0(
	`\xa1\xa9_f\x9\x93
(
\xb4efix
,
\xe5
) < 0)

283
\xc4f\x9ees
--;

285
\xe5
->
size
 = -1L;

287
	}
}

289 
	$\xb4\x9\xa9_l\x9\xab
(
f\x9\x93
 *
\xe5
) {

290 
blks
,
m
,
\xb4\xd9
,
s
;

291 *
p1
, *
p2
, *
p3
,
c
;

293 i\xe0(
	`\xb4e\xa3\xc1
('i'))

294
	`\xe5r\x9\xa9f
(
\xa1dout
, "%5d ",
\xe5
->
\x9aumb\x94
);

296 i\xe0(
	`\xb4e\xa3\xc1
('s')) {

298
blks
 =
	`nblocks
(
\xe5
->
size
);

299
	`\xe5r\x9\xa9f
(
\xa1dout
, "%4d ",
blks
);

302 i\xe0(
	`\xb4e\xa3\xc1
('l')) {

303
m
 =
\xe5
->
mode
 &
I_TYPE
;

304 i\xe0(
m
 =\xf0
I_DIRECTORY
)

305
c
 = 'd';

306 i\xe0(
m
 =\xf0
I_BLOCK_SPECIAL
)

307
c
 = 'b';

308 i\xe0(
m
 =\xf0
I_CHAR_SPECIAL
)

309
c
 = 'c';

311
c
 = '-';

313
m
 =
\xe5
->
mode
 & 07777;

314
\xb4\xd9
 = (
m
 >> 6) & 07;

315 i\xe0(
m
 &
I_SET_UID_BIT
)

316
\xb4\xd9
 += 8;

317
p1
 =
rwx
[
\xb4\xd9
];

319
\xb4\xd9
 = (
m
 >> 3) & 07;

320 i\xe0(
m
 &
I_SET_GID_BIT
)

321
\xb4\xd9
 += 8;

322
p2
 =
rwx
[
\xb4\xd9
];

324
\xb4\xd9
 =
m
 & 07;

325
p3
 =
rwx
[
\xb4\xd9
];

327
	`\xe5r\x9\xa9f
(
\xa1dout
, "%c%s%s%\xa0%2d ",
c
,
p1
,
p2
,
p3
,
\xe5
->
l\x9ak
);

330
	`owng\xbd
(
\xe5
);

332
m
 =
\xe5
->
mode
 &
I_TYPE
;

333 i\xe0(
m
 =\xf0
I_CHAR_SPECIAL
 || m =\xf0
I_BLOCK_SPECIAL
) {

334
s
 = ()
\xe5
->
size
;

335
	`\xe5r\x9\xa9f
(
\xa1dout
, "%2d, %2d ", (
s
 >> 8) & 0377, s & 0377);

337
	`\xe5r\x9\xa9f
(
\xa1dout
, "%6D ",
\xe5
->
size
);

339
	`d\xa9e
(
\xe5
->
modtime
);

343
	`\xe5r\x9\xa9f
(
\xa1dout
, "%s\n",
\xe5
->
\xc7me
);

344
	}
}

346 
	$owng\xbd
(
f\x9\x93
 *
\xe5
) {

347 *
buf
;

348 
xid
;

350 i\xe0(
	`\xb4e\xa3\xc1
('g')) {

351
xid
 =
\xe5
->
f_gid
;

353
xid
 =
\xe5
->
f_uid
;

355
buf
 =
	`g\x91uidgid
(
xid
);

356 i\xe0(
buf
 != 0)

357
	`\xe5r\x9\xa9f
(
\xa1dout
, "%6\xa0",
buf
);

359
	`\xe5r\x9\xa9f
(
\xa1dout
, "%6d ",
xid
);

360
	}
}

362 
	$\xa1\xa9_f\x9\x93
(*
\xb4efix
, 
f\x9\x93
 *
\xe5
) {

365 
\xc7mebuf
[
MAXPATHLEN
], *
p
, *
\xdcg
, *
q
;

366 
\xa1\xa9

sbuf
;

367 
m
,
\xf9r
;

370
p
 =
\xc7mebuf
;

371
q
 =
\xb4efix
;

372 *
q
 !\xf00 &&
p
 -
\xc7mebuf
 <
MAXPATHLEN
)

373 *
p
++ = *
q
++;

374 i\xe0(*
\xb4efix
 != 0)

375 *
p
++ = '/';

376
\xdcg
 =
\xe5
->
\xc7me
;

377
q
 =
\xe5
->
\xc7me
;

378
\xf9r
 = 0;

379 *
q
 !\xf00 &&
p
 -
\xc7mebuf
 <
MAXPATHLEN
) {

380
\xf9r
++;

381 i\xe0(*
q
 == '/')

382
\xf9r
 = 0;

383 i\xe0(
\xf9r
 >
DIRNAMELEN
)

385 *
p
++ = *
q
++;

387 *
p
 = 0;

390 i\xe0((
m
 =
	`\xa1\xa9
(
\xc7mebuf
, &
sbuf
)) < 0) {

391
	`\xe5r\x9\xa9f
(
\xa1dout
, "%\xa0n\xd9 found\n",
\xc7mebuf
);

395
m
 =
sbuf
.
\xa1_mode
 &
I_TYPE
;

396
\xe5
->
mode
 =
sbuf
.
\xa1_mode
;

397
\xe5
->
f_uid
 =
sbuf
.
\xa1_uid
;

398
\xe5
->
f_gid
 =
sbuf
.
\xa1_gid
;

399
\xe5
->
\x9aumb\x94
 =
sbuf
.
\xa1_\x9ao
;

400
\xe5
->
modtime
 =
sbuf
.
\xa1_mtime
;

401
\xe5
->
size
 =
sbuf
.
\xa1_size
;

402
\xe5
->
size
 = (
m
 =\xf0
I_CHAR_SPECIAL
 || m =\xf0
I_BLOCK_SPECIAL
 ?
sbuf
.
\xa1_rdev
 : sbuf.
\xa1_size
);

403
\xe5
->
l\x9ak
 =
sbuf
.
\xa1_ƚk
;

406
	}
}

408 
	$g\x91_\xe6ags
(
\xacgc
,
\xacgv
)

409 
\xacgc
;

410 *
\xacgv
[];

413 
\xe6
,
t
;

414 
k
,
n
;

415 *
\xb1r
;

417
\xe6
 = 0L;

418
n
 = 1;

419
t\xddf\x9\x93s
 =
\xacgc
 - 1;

420 
n
 <
\xacgc
) {

421
\xb1r
 =
\xacgv
[
n
];

422 i\xe0(*
\xb1r
 != '-')

423  (
\xe6
);

424
t\xddf\x9\x93s
--;

425
\xb1r
++;

427 *
\xb1r
 != 0) {

428
k
 = *
\xb1r
 - 'a';

429
t
 = 1L <<
k
;

430 i\xe0(*
\xb1r
 < 'a' || *\xb1\xb8> 'z' || (
t
 |
LEGAL
) != LEGAL) {

431
	`\xe5r\x9\xa9f
(
\xa1dout
, "Bad f\xcfg: %c\n", *
\xb1r
);

432
\xb1r
++;

435
\xe6
 |\xf0
t
;

436
\xb1r
++;

438
n
++;

440  (
\xe6
);

441
	}
}

443 
	$\xb4e\xa3\xc1
(
\xcbt
\xe8{  (
\xe6ags
 >> (ˈ- 'a')\xe8& 01;
	}
}

445 
	#YEAR
 (365L * 24L * 3600L)

	)

446 
	#LYEAR
 (366L * 24L * 3600L)

	)

448 
	gmo
[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

449 
	gcu\xb9ime
;

450 *
	gm\xd\xafme
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

453 
	$d\xa9e
(
t
) {

456 
i
,
y\x97r
,
day
,
m\xd\xa9h
,
hour
,
m\x9au\x8b
;

457 
\xcbngth
,
	`time
(),
\xdcig\x9a\xae
;

459
y\x97r
 = 1970;

460
\xdcig\x9a\xae
 =
t
;

461 
t
 > 0) {

462
\xcbngth
 = (
y\x97r
 % 4 =\xf00 ?
LYEAR
 :
YEAR
);

463 i\xe0(
t
 <
\xcbngth
)

465
t
 -\xf0
\xcbngth
;

466
y\x97r
++;

470
day
 =
t
 / (24L * 3600L);

471
t
 -\xf0()
day
 * 24L * 3600L;

472
hour
 =
t
 / 3600L;

473
t
 -\xf03600L * ()
hour
;

474
m\x9au\x8b
 = ()
t
 / 60L;

477
mo
[1] = (
y\x97r
 % 4 == 0 ? 29 : 28);

478
m\xd\xa9h
 = 0;

479
i
 = 0;

480 
day
 >\xf0
mo
[
i
]) {

481
m\xd\xa9h
++;

482
day
 -\xf0
mo
[
i
];

483
i
++;

487 i\xe0(
cu\xb9ime
 == 0)

488
cu\xb9ime
 =
	`time
((*)0);

489
	`\xe5r\x9\xa9f
(
\xa1dout
, "%3\xa0%2d ",
m\xd\xafme
[
m\xd\xa9h
],
day
 + 1);

490 i\xe0(
cu\xb9ime
 -
\xdcig\x9a\xae
 >\xf0
YEAR
 / 2L) {

491
	`\xe5r\x9\xa9f
(
\xa1dout
, "%5d ",
y\x97r
);

493 i\xe0(
hour
 < 10)

494
	`\xe5r\x9\xa9f
(
\xa1dout
, "0%d:",
hour
);

496
	`\xe5r\x9\xa9f
(
\xa1dout
, "%2d:",
hour
);

498 i\xe0(
m\x9au\x8b
 < 10)

499
	`\xe5r\x9\xa9f
(
\xa1dout
, "0%d ",
m\x9au\x8b
);

501
	`\xe5r\x9\xa9f
(
\xa1dout
, "%2d ",
m\x9au\x8b
);

503
	}
}

505 
	$\xb4\x9\xa9_tٮ
(
\x9adex
, 
cou\xc1
) {

506 
blocks
,
i
;

508 i\xe0(!
	`\xb4e\xa3\xc1
('l') && !present('s'))

510
blocks
 = 0;

511 
i
 =
\x9adex
; i < index +
cou\xc1
; i++)

512
blocks
 +\xf0
	`nblocks
(
f\x9\x93
[
i
].
size
);

513
	`\xe5r\x9\xa9f
(
\xa1dout
, "tٮ %d\n",
blocks
);

514
	}
}

516 
	$g\x91pwdch
() {

517 i\xe0(
l\x9a\x92ext
 =\xf0
l\x9a\x96im\x99
) {

519
l\x9a\x96im\x99
 =
	`\xbbad
(
\xb7sswd
,
l\x9\xabbuf
,
BLOCK_SIZE
);

520
l\x9a\x92ext
 = 0;

521 i\xe0(
l\x9a\x96im\x99
 <= 0)

524  (
l\x9\xabbuf
[
l\x9a\x92ext
++]);

525
	}
}

527 
	$g\x91l\x9\xab
(*
buf
) {

529 *
buf
 =
	`g\x91pwdch
();

530 i\xe0(*
buf
 == 0 || *buf == '\n')

532
buf
++;

534 *
buf
 = 0;

535
	}
}

537 *
	$g\x91uidgid
(
u\xa4id
) {

538 
lbuf
[100], *
\xb1r
, *
\xb1r1
;

539 
b\x9a
;

541 i\xe0(
u\xa4id
 =\xf0
ϡuid
)

542  (
ϡ\xc7me
);

543
	`l\xa3ek
(
\xb7sswd
, 0L, 0);

544
l\x9a\x92ext
 = 0;

545
l\x9a\x96im\x99
 = 0;

549
\xb1r
 =
lbuf
;

550 
\xb1r
 < &
lbuf
[100])

551 *
\xb1r
++ = 0;

552
	`g\x91l\x9\xab
(
lbuf
);

553 i\xe0(
lbuf
[0] == 0)

557
\xb1r
 =
lbuf
;

558 *
\xb1r
 != ':' && *ptr != 0)

559
\xb1r
++;

560 i\xe0(*
\xb1r
 == 0)

562 *
\xb1r
++ = 0;

563 *
\xb1r
 != ':' && *ptr != 0)

564
\xb1r
++;

565 i\xe0(*
\xb1r
 == 0)

567
\xb1r
++;

570
b\x9a
 = 0;

571 *
\xb1r
 != ':' && *ptr != 0 && *ptr != '\n') {

572
b\x9a
 = 10 * b\x9a + (*
\xb1r
 - '0');

573
\xb1r
++;

575 i\xe0(
b\x9a
 =\xf0
u\xa4id
) {

577
ϡuid
 =
u\xa4id
;

578
\xb1r
 =
ϡ\xc7me
;

579
\xb1r1
 =
lbuf
;

580 *
\xb1r
++ = *
\xb1r1
++)

582 *
\xb1r
++ = 0;

583  (
ϡ\xc7me
);

586
	}
}

588 
	$nblocks
(
size
) {

591 
blocks
,
f\x9\x93b
;

593
f\x9\x93b
 = (
size
 + ()
BLOCK_SIZE
 - 1) / BLOCK_SIZE;

594
blocks
 =
f\x9\x93b
;

595 i\xe0(
f\x9\x93b
 <\xf0
NR_DZONE_NUM
)

596  (
blocks
);

597
blocks
++;

598
f\x9\x93b
 -\xf0
NR_DZONE_NUM
;

599 i\xe0(
f\x9\x93b
 <\xf0
NR_INDIRECTS
)

600  (
blocks
);

601
blocks
++;

602
f\x9\x93b
 -\xf0
NR_INDIRECTS
;

603
blocks
 +\xf0(
f\x9\x93b
 +
NR_INDIRECTS
 - 1) / NR_INDIRECTS;

604  (
blocks
);

605
	}
}

	@commands/make.cpp

7 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

8 
	~"\x94\xbao.h\xb5
"

9 
	~"\xa1dio.h\xb5
"

10 
	~<c\xf9y\xb3
>

11 
	~<\xa1r\x9ag_v\x9bw
>

12 
\x94\xbao
;

14 #ifde\xe0
LC


16 
	g_\xa1ack
 = 4000;

17 
	#SWITCHCHAR
 '\\'

	)

18 
	#PATHCHAR
 ';'

	)

19 
	gl\x9\xabc\xd\xa9
 = '+';

20 
	gsw\x99chc
 = '\\';

24 
	#SHELL
 "/b\x9a/sh"

	)

25 
	#SWITCHCHAR
 '/'

	)

26 
	#PATHCHAR
 ':'

	)

27 
	gl\x9\xabc\xd\xa9
 = '\\';

28 
	gsw\x99chc
 = '/';

33 
	#UI
 

	)

35 
	#TIME
 

	)

38 
	s\x\xfbi\xa1
 {

39 *
	m\xc7me
;

40 
\xcei\xa1
 *
	m\xc3xt
;

43 
	sde\xe2\xbbc
 {

44 *
	m\xc7me
;

45 
	mu\xb1od\xa9e
;

46
TIME

	mmodif\x9bd
;

47 
\xcei\xa1
 *
	md\x95\x92ds\xda
;

48 
\xcei\xa1
 *
	mhowto
;

49 
de\xe2\xbbc
 *
	m\xc3xtde\xe2
;

52 
	sma\xf\xfbc
 {

53 *
	m\xc7me
, *
	mmex\xb7nd
;

54 
ma\xf\xfbc
 *
	m\xc3xtmac
;

57 
	sru˻c
 {

58 *
	md\x95
, *
	m\x8\xe4g
;

59 
\xcei\xa1
 *
	mru\xcb
;

60 
	mdef_\xe6ag
;

61 
ru˻c
 *
	m\xc3x\x8cu\xcb
;

87 
	#NDRULES
 3

	)

88 *
	gdef_li\xa1
[] = {

89 ".\xfdp", ".s", "$(CC\xe8-S $(CFLAGS\xe8$*.\xfdp",
NULL
,

90 ".\xfdp", ".o", "$(CC\xe8-\xf8$(CFLAGS\xe8$*.\xfdp",
NULL
,

91 ".s", ".o", "$(AS\xe8$(AFLAGS\xe8-\xd8$*.\xd8$*.s",
NULL
,

93 
	#SUFFIXES
 ".\xd8.\xa0.\xfdp"

	)

95 #i\xe2de\xe0
LC


96
TIME

time
();

97 
	#now
(\xe8(
TIME
\xe8
	`time
((*)0\xe8

	)

99 
	~"time.h
"

100
TIME

	$now
() {

101 
tm

tim\x94
, *
p
;

102 
t
,
	`\xe1\xb7ck
();

103 
tim
[6];

105
p
 = &
tim\x94
;

106
	`time
(&
t
);

107
p
 =
	`lo\xff\xc9ime
(&
t
);

108
tim
[0] =
p
->
tm_y\x97r
 - 80;

109
tim
[1] =
p
->
tm_m\xda
 + 1;

110
tim
[2] =
p
->
tm_mday
;

111
tim
[3] =
p
->
tm_hour
;

112
tim
[4] =
p
->
tm_m\x9a
;

113
tim
[5] =
p
->
tm_\xa3c
;

114  (
	`\xe1\xb7ck
(
tim
));

115
	}
}

118 **
	gext_\x92v
;

119 *
	gwh\xdfmi
 = "Make";

121 #i\xe2de\xe0
LC


122 
	#max
(
a
,
b
\xe8(\xd7\xe8> (b\xe8? (a\xe8: (b))

	)

123 
	#m\x9a
(
a
,
b
\xe8(\xd7\xe8<\xf0(b\xe8? (a\xe8: (b))

	)

125 
	#BKSLSH
 '\134'

	)

126 #unde\xe0
ERROR


127 
	#ERROR
 -1

	)

128 
	#TRUE
 1

	)

129 
	#FALSE
 0

	)

130 
	#EQ
(
X
,
Y
\xe8(
	`\xa1rcmp
(X, Y\xe8=\xf00)

	)

131 
	#NUL
 '\0'

	)

132 
	#i\xa2u\x\xfb
(
X
\xe8(X =\xf0'\0' ?
TRUE
 :
FALSE
)

	)

133 
	#n\xd9nu\x\xfb
(
X
\xe8(X =\xf0'\0' ?
FALSE
 :
TRUE
)

	)

139 
	#NO_TARG
 2

	)

140 
	#REPT_ERR
 1

	)

141 
	#IGN_ERR
 0

	)

143 
	#INMAX
 500

	)

144 
	#INMAXSH
 80

	)

146 #ifde\xe0
BSD4
.2

147 
	~<sys/\xa1\xa9.h
>

148 
	~<sys/ty\xb3s.h
>

149 
	~<sys/wa\x99.h
>

150 
	#WAIT
 
wa\x99


	)

154 
	s\xa1\xa9
 {

155 
	m\xa1_dev
;

156 
	m\xa1_\x9ao
;

157 
	m\xa1_mode
;

158 
	m\xa1_ƚk
;

159 
	m\xa1_uid
;

160 
	m\xa1_gid
;

161 
	m\xa1_rdev
;

162 
	m\xa1_size
;

163
TIME

	m\xa1_\xa9ime
;

164
TIME

	m\xa1_mtime
;

165
TIME

	m\xa1_\xf9ime
;

171 
	#WAIT
 

	)

174 
ma\xf\xfbc
 *
	gma\x\xe3i\xa1
 =
NULL
;

175 
de\xe2\xbbc
 *
	gde\xe2li\xa1
 =
NULL
;

176 
\xcei\xa1
 *
	gd\xdei\xa1
 =
NULL
;

177 
\xcei\xa1
 *
	g\xb7th_h\x97d
 =
NULL
;

178 
\xcei\xa1
 *
	gsuff_h\x97d
 =
NULL
;

179 
ru˻c
 *
	gru\xcbli\xa1
 =
NULL
;

180 
\xcei\xa1
 *
	gmakef
 =
NULL
;

182 #ifde\xe0
LC


183 
	gl\x9ak\x94f
 =
TRUE
;

184 
	gtf\x9e\x92ame
[50] = "makefile.mac";

187 
	gexecu\x8b
 =
TRUE
;

188 
	g\xa1\xddOnE\xbc
 =
TRUE
;

189 
	gf\xdcg\x97h\x97d
 =
FALSE
;

190 
	gmadesom\x91h\x9ag
 =
FALSE
;

191 
	gknowhow
 =
FALSE
;

192 
	gno_f\x9\x93
 =
TRUE
;

193 
	gs\x9e\x92tf
 =
FALSE
;

194 #ifde\xe0
DEBUG


195 
	g\x8c\x93_\x\xafd_qu\x99
 =
FALSE
;

196 
	gpo\xa1_\x8c\x93
 =
FALSE
;

198 
	g\xb7th_\xa3t
 =
FALSE
;

201
TIME

make
(),
g\x91modif\x9bd
(),
f\x9adexec
();

202 *
mov_\x9a
(), *
g\x91_mem
();

203 
\xcei\xa1
 *
MkLi\xa1Mem
(), *
mk\x\xfbi\xa1
(), *
mkexphow
(), *
mkexpd\x95
(), *
add_\x\xfbi\xa1
();

206 
	sm_\xb4eq
 {

207 
	mm_d\x95
[6];

208 
	mm_\x8\xe4g
[6];

209 
	mm_\xc7me
[
INMAXSH
];

211 
	gd\xd9his
[
INMAX
];

212
FILE
 *
fݒ
();

214 
	$ma\x9a
(
\xacgc
, *
\xacgv
[], *
\x92vp
[]) {

216
ext_\x92v
 =
\x92vp
;

217
	`\x9a\x99
(
\xacgc
,
\xacgv
);

218 #ifde\xe0
DEBUG


219 i\xe0(
\x8c\x93_\xaad_qu\x99
) {

220
	`\xb4\x8c\x93
();

221
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "tree\x87nd quit\n");

222
	`d\xd\xab
(0);

228 
d\xdei\xa1
 !\xf0
NULL
) {

229
madesom\x91h\x9ag
 =
FALSE
;

230
	`make
(
d\xdei\xa1
->
\xc7me
);

231 i\xe0(!
madesom\x91h\x9ag
) {

232 i\xe0(
knowhow
) {

233 i\xe0(!
s\x9e\x92tf
)

234
	`\xe5r\x9\xa9f
(
\xa1dout
, "%s: '%s' i\xa0u\xb0t\xd8d\xa9e.\n",
wh\xdfmi
,
d\xdei\xa1
->
\xc7me
);

236
	`\x94r\xdc2
("D\xda'\x88know how\x81\xd8mak\x90%s",
d\xdei\xa1
->
\xc7me
);

239
d\xdei\xa1
 = d\xdei\xa1->
\xc3xt
;

241 #ifde\xe0
DEBUG


242 i\xe0(
po\xa1_\x8c\x93
)

243
	`\xb4\x8c\x93
();

246
	`d\xd\xab
(0);

247
	}
}

249 
	$\x9a\x99
(
\xacgc
, *
\xacgv
[]) {

250 
i
,
k
;

251 
pd\x95
,
\xb1\xacg
;

252 
\xcei\xa1
 *
\xb1r
;

253 
u\xa3de\xe7u\xc9
 =
TRUE
;

255 
k
 =
i
 = 0; i <
NDRULES
; i++, k++) {

257
pd\x95
 =
k
++;

258
\xb1\xacg
 =
k
++;

259
\xb1r
 =
NULL
;

260 
def_li\xa1
[
k
] !\xf0
NULL
) {

261
\xb1r
 =
	`add_\x\xfbi\xa1
Ռ,
def_li\xa1
[
k
]);

262
k
++;

264
	`add_ru\xcb2
(
def_li\xa1
[
pd\x95
], def_li\xa1[
\xb1\xacg
],
\xb1r
,
TRUE
);

268
	`add_suff
(
SUFFIXES
);

271 
i
 = 1,
d\xd9his
[0] =
NUL
; i <
\xacgc
; i++) {

272
	`\xa1r\xf\xe1
(
d\xd9his
,
\xacgv
[
i
]);

273
	`\xa1r\xf\xe1
(
d\xd9his
, " ");

275
	`add_ma\xfco
("MFLAGS",
d\xd9his
);

278
	`add_ma\xfco
("CC", "cc");

279
	`add_ma\xfco
("AS", "as");

282 
i
 = 1; i <
\xacgc
; i++) {

283 i\xe0(
\xacgv
[
i
][0] == '-') {

284 
\xacgv
[
i
][1]) {

287 i\xe0(++
i
 <
\xacgc
) {

288
makef
 =
	`add_\x\xfbi\xa1
(makef,
\xacgv
[
i
]);

289
u\xa3de\xe7u\xc9
 =
FALSE
;

291
	`\xb7nic
("'-f'\x84equires filename");

296 i\xe0(
\xacgv
[
i
][2] !\xf0
NUL
)

297
l\x9\xabc\xd\xa9
 =
\xacgv
[
i
][2];

299 i\xe0(++
i
 <
\xacgc
 ||
	`n\xd9nu\x\xfb
(
\xacgv
[i][1]))

300
l\x9\xabc\xd\xa9
 =
\xacgv
[
i
][0];

302
	`\x94r\xdc
("'-c'\x84equires single character");

308
f\xdcg\x97h\x97d
 =
TRUE
;

313 i\xe0(
\xacgv
[
i
][2] !\xf0
NUL
)

314
sw\x99chc
 =
\xacgv
[
i
][2];

316 i\xe0(++
i
 <
\xacgc
 ||
	`n\xd9nu\x\xfb
(
\xacgv
[i][1]))

317
sw\x99chc
 =
\xacgv
[
i
][0];

319
	`\x94r\xdc
("'-b'\x84equires single character");

325
\xa1\xddOnE\xbc
 =
FALSE
;

330
execu\x8b
 =
FALSE
;

335
s\x9e\x92tf
 =
TRUE
;

338 #ifde\xe0
DEBUG


341
\x8c\x93_\xaad_qu\x99
 =
TRUE
;

346
po\xa1_\x8c\x93
 =
TRUE
;

351
	`\x94r\xdc2
("unknow\xc0\xddti\xda '%s'",
\xacgv
[
i
]);

355 i\xe0(!
	`maccheck
(
\xacgv
[
i
])) {

360
d\xdei\xa1
 =
	`add_\x\xfbi\xa1
(d\xdei\xa1,
\xacgv
[
i
]);

361
no_f\x9\x93
 =
FALSE
;

370 i\xe0(
u\xa3de\xe7u\xc9
) {

371 i\xe0(
	`g\x91modif\x9bd
("Makef\x9ee"\xe8!\xf0(
TIME
)0)

372
	`\xbbadmakef\x9\x93
("Makefile");

374
	`\xbbadmakef\x9\x93
("makefile");

376 
\xb1r
 =
makef
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
)

377
	`\xbbadmakef\x9\x93
(
\xb1r
->
\xc7me
);

381 i\xe0(!
\xb7th_\xa3t
) {

382
	`mk\xb7thli\xa1
();

383
\xb7th_\xa3t
 =
TRUE
;

386
	}
}

388
TIME

	$make
(
s
)

389 *
s
;

391 
de\xe2\xbbc
 *
de\xe2p
, *
	`\x8cyru\xcbs
(), *
dummy
;

392 
\xcei\xa1
 *
d\x95p
, *
d\x95p2
;

393 
\xcei\xa1
 *
howp
;

394 *
m_comp
, *
m_ood
, *
m_obj
;

395 *
	`\xa1\xbfdd
(), *
	`add_\xb4\x94eq
();

396
TIME

ϋ\xa1
,
timeof
;

397 
m_\xb4eq

ma
;

400 
de\xe2p
 =
de\xe2li\xa1
; de\xe2\xb0!\xf0
NULL
; de\xe2\xb0\xf0de\xe2p->
\xc3xtde\xe2
)

401 i\xe0(
	`EQ
(
de\xe2p
->
\xc7me
,
s
))

410 i\xe0(
de\xe2p
 =\xf0
NULL
) {

411
de\xe2p
 =
	`\x8cyru\xcbs
(
s
);

412 i\xe0(
de\xe2p
 =\xf0
NULL
) {

414
knowhow
 =
FALSE
;

415
ϋ\xa1
 =
	`g\x91modif\x9bd
(
s
);

416 i\xe0(
ϋ\xa1
 == 0) {

418
	`\xb7nic2
("C\xaa'\x88mak\x90%s",
s
);

431  (
ϋ\xa1
);

437 i\xe0(
de\xe2p
->
u\xb1od\xa9e
) {

438  (
de\xe2p
->
modif\x9bd
);

440
dummy
 =
	`\x8cyru\xcbs
(
s
);

441 i\xe0(
dummy
 !\xf0
NULL
 &&
de\xe2p
->
howto
 == NULL) {

444 i\xe0(
de\xe2p
->
d\x95\x92ds\xda
 =\xf0
NULL
)

445
de\xe2p
->
d\x95\x92ds\xda
 =
dummy
->dependson;

447 
d\x95p2
 =
de\xe2p
->
d\x95\x92ds\xda
; d\x95p2->
\xc3xt
 !\xf0
NULL
; depp2 = depp2->next)

449
d\x95p2
->
\xc3xt
 =
dummy
->
d\x95\x92ds\xda
;

452
de\xe2p
->
howto
 =
dummy
->howto;

458
m_comp
 =
m_ood
 =
m_obj
 =
NULL
;

459
ϋ\xa1
 = 0;

460
d\x95p
 =
de\xe2p
->
d\x95\x92ds\xda
;

461 
d\x95p
 !\xf0
NULL
) {

463
m_comp
 =
	`add_\xb4\x94eq
(m_comp,
d\x95p
->
\xc7me
, &
ma
);

464
timeof
 =
	`make
(
d\x95p
->
\xc7me
);

465
ϋ\xa1
 =
	`max
(
timeof
,\x86atest);

467 i\xe0(
de\xe2p
->
modif\x9bd
 <
timeof
) {

469
m_ood
 =
	`\xa1\xbfdd
(m_ood,
ma
.
m_\xc7me
, ma.
m_d\x95
);

470
m_obj
 =
	`\xa1\xbfdd
(m_obj,
ma
.
m_\xc7me
, ma.
m_\x8\xe4g
);

472
d\x95p
 = d\x95p->
\xc3xt
;

475
knowhow
 =
TRUE
;

480 i\xe0(
ϋ\xa1
 >
de\xe2p
->
modif\x9bd
 || de\xe2p->
d\x95\x92ds\xda
 =\xf0
NULL
) {

482
howp
 =
de\xe2p
->
howto
;

483 i\xe0((
howp
 =\xf0
NULL
\xe8&& !
	`\x9a_d\xdei\xa1
(
s
)) {

484
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: %\xa0i\xa0ou\x88o\xe0d\xa9e, bu\x88th\x94\x90i\xa0n\xd8comm\xaad\x86\x9ae\n",
wh\xdfmi
,
s
);

485 i\xe0(
\xa1\xddOnE\xbc
)

486
	`my\xa1\xdd_\x94r
();

488 
howp
 !\xf0
NULL
) {

491
	`p_ex\xb7nd
(
howp
->
\xc7me
,
d\xd9his
,
m_comp
,
m_ood
,
m_obj
);

492 i\xe0((
	`exec_how
(
d\xd9his
) != 0))

493 i\xe0(
f\xdcg\x97h\x97d
)

495 i\xe0(
\xa1\xddOnE\xbc
)

496
	`\xb7nic\xa1\xdd
();

497
howp
 = howp->
\xc3xt
;

500
de\xe2p
->
modif\x9bd
 =
	`now
();

501
de\xe2p
->
u\xb1od\xa9e
 =
TRUE
;

502 i\xe0(
de\xe2p
->
howto
 !\xf0
NULL
)

503
madesom\x91h\x9ag
 =
TRUE
;

505 i\xe0(
m_comp
 !\xf0
NULL
)

506
	`\xa7\xe3_\xe4\x93
(
m_comp
);

507 i\xe0(
m_ood
 !\xf0
NULL
)

508
	`\xa7\xe3_\xe4\x93
(
m_ood
);

509 i\xe0(
m_obj
 !\xf0
NULL
)

510
	`\xa7\xe3_\xe4\x93
(
m_obj
);

511  (
de\xe2p
->
modif\x9bd
);

512
	}
}

514 
\xcei\xa1
 *
	$add_\x\xfbi\xa1
(
h\x97d
,
s
)

515 *
s
;

516 
\xcei\xa1
 *
h\x97d
;

518 
\xcei\xa1
 *
\xb1r1
;

521 i\xe0(
h\x97d
 =\xf0
NULL
) {

522
\xb1r1
 =
	`MkLi\xa1Mem
();

523
\xb1r1
->
\xc7me
 =
	`mov_\x9a
(
s
);

524
\xb1r1
->
\xc3xt
 =
NULL
;

525  (
\xb1r1
);

527 
\xb1r1
 =
h\x97d
;\x85\x8c1->
\xc3xt
 !\xf0
NULL
;\x85tr1 =\x85tr1->next)

529
\xb1r1
->
\xc3xt
 =
	`MkLi\xa1Mem
();

530
\xb1r1
->
\xc3xt
->
\xc7me
 =
	`mov_\x9a
(
s
);

531
\xb1r1
->
\xc3xt
->\xc3x\x88\xf0
NULL
;

532  (
h\x97d
);

534
	}
}

536 
	$ex\xb7nd
(*
\xa4c
, *
de\xa1
, *
\x8frg\x91
, 
\xe6ag
)

538 
thismac
[
INMAX
], *
	`ismac
(), *
	`ismac_c
();

539 
thismac2
[
INMAX
], *
ma\xfd\x8c
;

540 
i
,
pos
,
back
,
j
;

542
back
 =
pos
 = 0;

543 i\xe0(
\xa4c
 =\xf0
NULL
) {

544
de\xa1
[0] =
NUL
;

547 
	`n\xd9nu\x\xfb
(
\xa4c
[
pos
])) {

549 i\xe0(
\xa4c
[
pos
] != '$')

550
de\xa1
[
back
++] =
\xa4c
[
pos
++];

553
pos
++;

555 
\xa4c
[
pos
]) {

559
pos
 =
	`x_s\xf\xe2
(
\xa4c
,\x85os,
thismac
);

560 i\xe0(
ma\x\xe3i\xa1
 =\xf0
NULL
 && (
\xe6ag
 &
REPT_ERR
))

561
	`\x94r\xdc2
("N\xd8ma\xfco\xa0def\x9aed -- %s",
thismac
);

562 i\xe0((
ma\xfd\x8c
 =
	`ismac
(
thismac
)\xe8=\xf0
NULL
) {

563
	`ex\xb7nd
(
thismac
,
thismac2
,
\x8frg\x91
,
\xe6ag
);

564 i\xe0((
ma\xfd\x8c
 =
	`ismac
(
thismac2
)\xe8!\xf0
NULL
)

566
back
 =
	`mv_\x9a\xa1\x\xabl
(
ma\xfd\x8c
,
de\xa1
, back);

568 i\xe0(
\xe6ag
 &
REPT_ERR
)

569
	`\x94r\xdc2
("C\xaa'\x88ex\xb7nd ma\xfc\xd8-- %s",
thismac2
);

573
back
 =
	`mv_\x9a\xa1\x\xabl
(
ma\xfd\x8c
,
de\xa1
, back);

579 i\xe0((
\xe6ag
 &
NO_TARG
\xe8&& (\xe6ag &
REPT_ERR
)) {

580
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: '$%c'\x82\xd9 i\xc0\xa8comm\xaad o\xb8d\x95\x92d\x92cy\x86\x9ae\n",
wh\xdfmi
,

581
\xa4c
[
pos
]);

582 i\xe0(
\xa1\xddOnE\xbc
)

583
	`my\xa1\xdd_\x94r
();

588 
i
 = 0;
	`n\xd9nu\x\xfb
(
\x8frg\x91
[i]); i++) {

589 i\xe0(
\x8frg\x91
[
i
] =\xf0'.' &&
\xa4c
[
pos
] == '*') {

590
j
 =
i
;

591 
	`n\xd9nu\x\xfb
(
\x8frg\x91
[
j
]\xe8&&\x81\xacg\x91[j] !\xf0
sw\x99chc
)

592
j
++;

593 i\xe0(
	`n\xd9nu\x\xfb
(
\x8frg\x91
[
j
]\xe8=\xf0
FALSE
)

596
de\xa1
[
back
++] =
\x8frg\x91
[
i
];

603 i\xe0((
ma\xfd\x8c
 =
	`ismac_c
(
\xa4c
[
pos
])\xe8!\xf0
NULL
)

604
back
 =
	`mv_\x9a\xa1\x\xabl
(
ma\xfd\x8c
,
de\xa1
, back);

607
de\xa1
[
back
++] = '$';

608
de\xa1
[
back
++] =
\xa4c
[
pos
];

612
pos
++;

615
de\xa1
[
back
] =
NUL
;

616
	}
}

618 
	$p_ex\xb7nd
(*
\xa4c
, *
de\xa1
, *
com\xb6_\xb4eq
, *
ood_\xb4eq
, *
ood_obj
) {

622 
back
,
pos
,
i
;

624 i\xe0(
\xa4c
 =\xf0
NULL
) {

625
de\xa1
[0] =
NUL
;

629
back
 =
pos
 = 0;

630 
	`n\xd9nu\x\xfb
(
\xa4c
[
pos
])) {

632 i\xe0(
\xa4c
[
pos
] != '$')

633
de\xa1
[
back
++] =
\xa4c
[
pos
++];

636
pos
++;

637 
\xa4c
[
pos
]) {

640 
i
 = 0;
	`n\xd9nu\x\xfb
(
com\xb6_\xb4eq
[i]); i++)

641
de\xa1
[
back
++] =
com\xb6_\xb4eq
[
i
];

645 
i
 = 0;
	`n\xd9nu\x\xfb
(
ood_obj
[i]); i++)

646
de\xa1
[
back
++] =
ood_obj
[
i
];

650 
i
 = 0;
	`n\xd9nu\x\xfb
(
ood_\xb4eq
[i]); i++)

651
de\xa1
[
back
++] =
ood_\xb4eq
[
i
];

655
de\xa1
[
back
++] = '$';

659
de\xa1
[
back
++] = '$';

660
de\xa1
[
back
++] =
\xa4c
[
pos
];

663
pos
++;

667
de\xa1
[
back
] =
NUL
;

668
	}
}

671 *
	$ismac_c
(
cc
)

672 
cc
;

674 *
	`ismac
();

675 *
\xa1r
 = " ";

676
\xa1r
[0] =
cc
;

677  (
	`ismac
(
\xa1r
));

678
	}
}

681 *
	$ismac
(
\x8b\xa1
)

682 *
\x8b\xa1
;

684 
ma\xf\xfbc
 *
\xb1r
;

686
\xb1r
 =
ma\x\xe3i\xa1
;

687 i\xe0(
\xb1r
 =\xf0
NULL
)

688  (
NULL
);

689 
TRUE
) {

690 i\xe0(
	`EQ
(
\xb1r
->
\xc7me
,
\x8b\xa1
))

691  (
\xb1r
->
mex\xb7nd
);

692 i\xe0(
\xb1r
->
\xc3xtmac
 =\xf0
NULL
)

693  (
NULL
);

695
\xb1r
 =\x85\x8c->
\xc3xtmac
;

697
	}
}

699 
	$maccheck
(*
\xa5\x8c
)

701 
k
;

703 
k
 = 0;
	`n\xd9nu\x\xfb
(
\xa5\x8c
[k]) && (sptr[k] != '='); k++)

705 i\xe0(
	`i\xa2u\x\xfb
(
\xa5\x8c
[
k
]))

706  (
FALSE
);

709
\xa5\x8c
[
k
] =
NUL
;

710
	`add_ma\xfco
(
\xa5\x8c
, s\xb1\xb8+
k
 + 1);

711  (
TRUE
);

713
	}
}

715 
	$x_s\xf\xe2
(*
\xa4c
, 
pos
, *
de\xa1
) {

716 
b\x8brm
,
\x91\x94m
;

717 
\xfat
;

720 i\xe0(
\xa4c
[
pos
] == '(')

721
\x91\x94m
 = ')';

722 i\xe0(
\xa4c
[
pos
] == '{')

723
\x91\x94m
 = '}';

725
	`\xb7nic
("very bad\x81hings happening in x_scan");

727
b\x8brm
 =
\xa4c
[
pos
++];

728
\xfat
 = 1;

730 
	`n\xd9nu\x\xfb
(
\xa4c
[
pos
])) {

731 i\xe0(
\xa4c
[
pos
] =\xf0
b\x8brm
)

732
\xfat
++;

733 i\xe0(
\xa4c
[
pos
] =\xf0
\x91\x94m
) {

734
\xfat
--;

735 i\xe0(
\xfat
 == 0) {

736 *
de\xa1
 =
NUL
;

737  (
pos
);

740 *
de\xa1
++ =
\xa4c
[
pos
++];

742
	`\xb7nic2
("N\xd8\xfeos\x9ag b\xbf\xfb/\xb7\xbb\xc0f\xdc %s",
\xa4c
);

744
	}
}

747 
	$mv_\x9a\xa1\x\xabl
(*
\xe4om
, *
to
, 
back
) {

748 
i
;

750 
i
 = 0;
	`n\xd9nu\x\xfb
(
\xe4om
[i]); i++)

751
to
[
back
++] =
\xe4om
[
i
];

752  (
back
);

753
	}
}

762 
de\xe2\xbbc
 *
	$\x8cyru\xcbs
(
\xa1r\x9ag
)

763 *
\xa1r\x9ag
;

765 
ru˻c
 *
\xbd\x8c
, *
	`i\xa4u\xcb
();

766 
\xcei\xa1
 *
\xa5\x8c
;

767 
de\xe2\xbbc
 *
\xbbtv\xae
;

768 
s
[
INMAXSH
],
buf
[INMAXSH],
\xa3xt
[10];

770
	`my_\xa1r\xfdy
(
s
,
\xa1r\x9ag
);

771
	`g\x91_ext
(
s
,
\xa3xt
);

773 i\xe0(
\xa3xt
[0] =\xf0
NUL
) {

775  (
NULL
);

779 
\xa5\x8c
 =
suff_h\x97d
; s\xb1\xb8!\xf0
NULL
; s\xb1\xb8\xf0\xa5\x8c->
\xc3xt
)

780 i\xe0(
	`EQ
(
\xa5\x8c
->
\xc7me
,
\xa3xt
))

783 i\xe0(
\xa5\x8c
 =\xf0
NULL
) {

785  (
NULL
);

789 
\xa5\x8c
 = s\xb1r->
\xc3xt
; s\xb1\xb8!\xf0
NULL
; sptr = sptr->next)

790 i\xe0(
	`exi\xa1s
(
s
,
\xa5\x8c
->
\xc7me
\xe8&& ((
\xbd\x8c
 =
	`i\xa4u\xcb
(
ru\xcbli\xa1
, s\xb1r->\xc7me,
\xa3xt
)\xe8!\xf0
NULL
))

793 i\xe0(
\xa5\x8c
 =\xf0
NULL
) {

795  (
NULL
);

798
\xbbtv\xae
 = (
de\xe2\xbbc
 *)
	`g\x91_mem
((
UI
)(defnrec));

799
	`my_\xa1r\xfdy
(
buf
,
s
);

800
	`\xa1r\xf\xe1
(
buf
,
\xbd\x8c
->
\x8frg
);

801
\xbbtv\xae
->
\xc7me
 =
	`mov_\x9a
(
buf
);

802
	`my_\xa1r\xfdy
(
buf
,
s
);

803
	`\xa1r\xf\xe1
(
buf
,
\xbd\x8c
->
d\x95
);

804
\xbbtv\xae
->
d\x95\x92ds\xda
 =
	`mk\x\xfbi\xa1
(
buf
);

805
\xbbtv\xae
->
u\xb1od\xa9e
 =
FALSE
;

806
\xbbtv\xae
->
modif\x9bd
 =
	`g\x91modif\x9bd
ԑv\xae->
\xc7me
);

807
\xbbtv\xae
->
\xc3xtde\xe2
 =
NULL
;

808
\xbbtv\xae
->
howto
 =
	`mkexphow
(
\xbd\x8c
->
ru\xcb
,\x84\x91v\xae->
\xc7me
, (\xbd\x8c->
def_\xe6ag
\xe8?
IGN_ERR
 :
REPT_ERR
);

809  (
\xbbtv\xae
);

810
	}
}

813 
	$exi\xa1s
(*
\xc7me
, *
suffix
) {

814 
t
[
INMAXSH
];

816
	`my_\xa1r\xfdy
(
t
,
\xc7me
);

817
	`\xa1r\xf\xe1
(
t
,
suffix
);

818  (
	`g\x91modif\x9bd
(
t
\xe8!\xf0(
TIME
)0 ?
TRUE
 :
FALSE
);

819
	}
}

821 
ru˻c
 *
	$i\xa4u\xcb
(
h\x97d
,
\xa4c
,
de\xa1
)

822 
ru˻c
 *
h\x97d
;

823 *
\xa4c
, *
de\xa1
;

826 
ru˻c
 *
\xb1r
;

828 i\xe0(
h\x97d
 =\xf0
NULL
)

829  (
NULL
);

831 
\xb1r
 =
h\x97d
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3x\x8cu\xcb
)

832 i\xe0(
	`EQ
(
\xb1r
->
d\x95
,
\xa4c
\xe8&& EQՌ->
\x8frg
,
de\xa1
))

833  (
\xb1r
);

834  (
NULL
);

836
	}
}

838 #ifde\xe0
DEBUG


841 
	$\xb4\x8c\x93
() {

842 
de\xe2\xbbc
 *
dummy
;

843 
ma\xf\xfbc
 *
mdum
;

844 
\xcei\xa1
 *
dum2
, *
dum3
, *
rdum2
;

845 
ru˻c
 *
rdum
;

846 
\xfat
;

848
dummy
 =
de\xe2li\xa1
;

849 
dummy
 !\xf0
NULL
) {

850
	`\xe5r\x9\xa9f
(
\xa1dout
, "\xc7m\x90'%s'\x83xi\xa1s: %s\n",
dummy
->
\xc7me
, (dummy->
modif\x9bd
) ? "no" : "yes");

852
dum2
 =
dummy
->
d\x95\x92ds\xda
;

853
	`\xe5r\x9\xa9f
(
\xa1dout
, " depends-on:");

854
\xfat
 = 0;

855 
dum2
 !\xf0
NULL
) {

856
	`\xe5r\x9\xa9f
(
\xa1dout
, " %13\xa0",
dum2
->
\xc7me
);

857
\xfat
++;

858 i\xe0(
\xfat
 == 4) {

859
\xfat
 = 0;

860
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n ");

862
dum2
 = dum2->
\xc3xt
;

864
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n");

866
dum3
 =
dummy
->
howto
;

867 
dum3
 !\xf0
NULL
) {

868
	`\xe5r\x9\xa9f
(
\xa1dout
, " comm\xaad: %s\n",
dum3
->
\xc7me
);

869
dum3
 = dum3->
\xc3xt
;

871
dummy
 = dummy->
\xc3xtde\xe2
;

872
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n");

875
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n *RULES*\n\n");

876
	`\xe5r\x9\xa9f
(
\xa1dout
, "src= dest=\x84ule=\n");

877
rdum
 =
ru\xcbli\xa1
;

878 
rdum
 !\xf0
NULL
) {

879 i\xe0(
rdum
->
ru\xcb
 =\xf0
NULL
)

880
	`\xe5r\x9\xa9f
(
\xa1dout
, "%4\xa0 %4\xa0 %s\n",
rdum
->
d\x95
,\x84dum->
\x8frg
, "** Empty Rule **");

882
	`\xe5r\x9\xa9f
(
\xa1dout
, "%4\xa0 %4\xa0 %s\n",
rdum
->
d\x95
,\x84dum->
\x8frg
,\x84dum->
ru\xcb
->
\xc7me
);

883
rdum2
 =
rdum
->
ru\xcb
->
\xc3xt
;

884 
rdum2
 !\xf0
NULL
) {

885
	`\xe5r\x9\xa9f
(
\xa1dout
, " %s\n",
rdum2
->
\xc7me
);

886
rdum2
 =\x84dum2->
\xc3xt
;

889
rdum
 =\x84dum->
\xc3x\x8cu\xcb
;

892
mdum
 =
ma\x\xe3i\xa1
;

893 i\xe0(
mdum
 =\xf0
NULL
)

894
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n *NO MACROS*\n");

896
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n *MACROS*\n\n");

897
	`\xe5r\x9\xa9f
(
\xa1dout
, " macro\x83xpansion\n");

898 
mdum
 !\xf0
NULL
) {

899
	`\xe5r\x9\xa9f
(
\xa1dout
, " %8\xa0 %s\n",
mdum
->
\xc7me
, mdum->
mex\xb7nd
);

900
mdum
 = mdum->
\xc3xtmac
;

903
	`\xe5r\x9\xa9f
(
\xa1dout
, "\n\nsuffix\x86ist is");

904 i\xe0(
suff_h\x97d
 =\xf0
NULL
)

905
	`\xe5r\x9\xa9f
(
\xa1dout
, "\x83mpty.");

907 
dum2
 =
suff_h\x97d
; dum2 !\xf0
NULL
; dum2 = dum2->
\xc3xt
) {

908
	`\xe5r\x9\xa9f
(
\xa1dout
, " %s",
dum2
->
\xc7me
);

910
	`\xe5r\x9\xa9f
(
\xa1dout
, "\npath is ");

911 i\xe0(
\xb7th_h\x97d
 =\xf0
NULL
)

912
	`\xe5r\x9\xa9f
(
\xa1dout
, "\x83mpty.");

914 
dum2
 =
\xb7th_h\x97d
; dum2 !\xf0
NULL
; dum2 = dum2->
\xc3xt
)

915
	`\xe5r\x9\xa9f
(
\xa1dout
, " %s:",
dum2
->
\xc7me
);

917
	`\xe5r\x9\xa9f
(
\xa1dout
, "\nsw\x99ch ch\xaca\xf9\x94 '%c'\n",
sw\x99chc
);

918
	`\xe5r\x9\xa9f
(
\xa1dout
, "l\x9a\x90c\xdat\x9au\xa9i\xda '%c'\n",
l\x9\xabc\xd\xa9
);

919
	}
}

922
	$\x94r\xdc
(
s1
) *s1;

924
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: ",
wh\xdfmi
);

925
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,
s1
);

926
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n");

927 i\xe0(
\xa1\xddOnE\xbc
)

928
	`my\xa1\xdd_\x94r
();

931
	}
}

933
	$\x94r\xdc2
(
s1
,
s2
) *s1, *s2;

935
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: ",
wh\xdfmi
);

936
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,
s1
,
s2
);

937
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n");

938 i\xe0(
\xa1\xddOnE\xbc
)

939
	`my\xa1\xdd_\x94r
();

942
	}
}

944
	$\xb7nic
(
s1
) *s1;

946
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: ",
wh\xdfmi
);

947
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,
s1
);

948
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n");

949
	`my\xa1\xdd_\x94r
();

951
	}
}

953
	$\xb7nic2
(
s1
,
s2
) *s1, *s2;

955
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: ",
wh\xdfmi
);

956
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,
s1
,
s2
);

957
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n");

958
	`my\xa1\xdd_\x94r
();

960
	}
}

962
	$\xb7nic\xa1\xdd
() {

963
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n\n ***Stop.\n");

964
	`my\xa1\xdd_\x94r
();

966
	}
}

968
	$my\xa1\xdd_\x94r
() {

969
	`d\xd\xab
(-1);

971
	}
}

973
	$\x9a_d\xdei\xa1
(
s
)

974 *
s
;

976 
\xcei\xa1
 *
\xb1r
;

978 
\xb1r
 =
d\xdei\xa1
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
)

979 i\xe0(
	`EQ
(
\xb1r
->
\xc7me
,
s
))

980  (
TRUE
);

982  (
FALSE
);

983
	}
}

985 *
	$add_\xb4\x94eq
(
h\x97d
,
\xc7m
,
f
)

986 *
h\x97d
, *
\xc7m
;

987 
m_\xb4eq
 *
f
;

989 *
	`\xa1\xbfdd
();

990 
\xcei\xa1
 *
\xb1r
;

1000
	`my_\xa1r\xfdy
(
f
->
m_\xc7me
,
\xc7m
);

1001
	`g\x91_ext
(
f
->
m_\xc7me
, f->
m_\x8\xe4g
);

1002 i\xe0(
f
->
m_\x8\xe4g
[0] =\xf0
NUL
)

1003  (
h\x97d
);

1006 
\xb1r
 =
suff_h\x97d
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
)

1007 i\xe0(
	`EQ
(
\xb1r
->
\xc7me
,
f
->
m_\x8\xe4g
))

1009 i\xe0(
\xb1r
 =\xf0
NULL
)

1010  (
h\x97d
);

1013 ;
\xb1r
 !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
)

1014 i\xe0(
	`exi\xa1s
(
f
->
m_\xc7me
,
\xb1r
->
\xc7me
))

1016 i\xe0(
\xb1r
 =\xf0
NULL
)

1017  (
h\x97d
);

1020
	`my_\xa1r\xfdy
(
f
->
m_d\x95
,
\xb1r
->
\xc7me
);

1021  (
	`\xa1\xbfdd
(
h\x97d
,
f
->
m_\xc7me
, f->
m_d\x95
));

1022
	}
}

1024 *
	$\xa1\xbfdd
(
f1
,
f2
,
f3
)

1025 *
f1
, *
f2
, *
f3
;

1027 *
\xb1r
;

1029
\xb1r
 =
	`g\x91_mem
((
UI
)(
	`my_\xa1\xbe\x92
(
f1
\xe8+
	`\xa1\xbe\x92
(
f2
\xe8+ s\x8c\xcbn(
f3
) + 2));

1030
	`my_\xa1r\xfdy
(
\xb1r
,
f1
);

1031
	`\xa1r\xf\xe1
(
\xb1r
, " ");

1032
	`\xa1r\xf\xe1
(
\xb1r
,
f2
);

1033
	`\xa1r\xf\xe1
(
\xb1r
,
f3
);

1034 i\xe0(
f1
 !\xf0
NULL
)

1035
	`\xa7\xe3_\xe4\x93
(
f1
);

1036  (
\xb1r
);

1037
	}
}

1039
	$g\x91_ext
(
n
,
ex
) *ex, *n;

1041 
\xa1\xact
,
\x92d
,
x
;

1046
\xa1\xact
 =
	`my_\xa1\xbe\x92
(
n
);

1047
\x92d
 = (
\xa1\xact
 > 6) ? start - 6 : 0;

1049 
x
 =
\xa1\xact
; x >
\x92d
; x--)

1050 i\xe0(
n
[
x
] == '.')

1053 i\xe0(
x
 =\xf0
\x92d
) {

1054
ex
[0] =
NUL
;

1057
	`my_\xa1r\xfdy
(
ex
,
n
 +
x
);

1058
n
[
x
] =
NUL
;

1060
	}
}

1063 
	#DONE
 1

	)

1064 
	#ADEFN
 2

	)

1065 
	#ARULE
 3

	)

1066 
	#AMACRO
 4

	)

1067 
	#DIRECTIVE
 5

	)

1070
FILE
 *
	gf\x9e
;

1071 *
	gfw\xdcd
, *
	g\xbb\xa1l\x9\xab
,
	gl\x9\xab
[
INMAX
],
	gbackup
[INMAX];

1072 *
	g\xe4u\xcb
;

1073 
\xcei\xa1
 *
	gfhowto
, *
	ghowp3
;

1074 
\xcei\xa1
 *
	gfd\x95s
, *
	gd\x95\xbbc3
;

1075 
de\xe2\xbbc
 *
	gde\xe2p
;

1076 
	g\xa3nd\x9ag
,
	gdef_\xbbady
,
	ggd\xd\xab
,
	gru\xcb_\xa3nd
,
	gru\xcb_\xbbady
;

1077 
\xcei\xa1
 *
	g\x8\xe4g
, *
	gq_how
, *
	gq_d\x95
, *
	g\x8\xe4g2
;

1079
	$\xbbadmakef\x9\x93
(
s
) *s;

1081 
i
,
k
;

1082 
\x8bmp
[50],
\x8bmpd\x95
[50];

1083
FILE
 *
	`fݒ
();

1086 i\xe0(
	`EQ
(
s
, "-"))

1087
f\x9e
 =
\xa1d\x9a
;

1088 i\xe0((
f\x9e
 =
	`fݒ
(
s
, "r")\xe8=\xf0
NULL
) {

1089
	`\x94r\xdc2
("couldn'\x88ݒ %s",
s
);

1094
\xa3nd\x9ag
 =
def_\xbbady
 =
gd\xd\xab
 =
ru\xcb_\xa3nd
 =
ru\xcb_\xbbady
 =
FALSE
;

1095
\x8frg
 =
q_how
 =
q_d\x95
 =
NULL
;

1096 i\xe0(
	`g\x91l\x9\xab
(
f\x9e
,
backup
\xe8=\xf0
FALSE
)

1097
	`\xb7nic
("Empty Makefile");

1100 
TRUE
)

1101 
	`g\x91nxt
()) {

1103 
DONE
:

1104
	`f\x\xe3o\xa3
(
f\x9e
);

1107 
AMACRO
:

1108
	`add_ma\xfco
(
fw\xdcd
,
\xbb\xa1l\x9ae
);

1111 
DIRECTIVE
:

1112
	`squ\x93ze\xa5
(
\x8bmp
,
fw\xdcd
);

1113 i\xe0(
	`EQ
(
\x8bmp
, "PATH")) {

1114 i\xe0(
	`my_\xa1\xbe\x92
(
\xbb\xa1l\x9ae
) == 0) {

1115
	`\xe4\x93_li\xa1
(
\xb7th_h\x97d
);

1116
\xb7th_h\x97d
 =
NULL
;

1117
\xb7th_\xa3t
 =
TRUE
;

1122 i\xe0(!
\xb7th_\xa3t
) {

1123
	`mk\xb7thli\xa1
();

1124
\xb7th_\xa3t
 =
TRUE
;

1126
	`add_\xb7th
(
\xbb\xa1l\x9ae
);

1128 } i\xe0(
	`EQ
(
\x8bmp
, "SUFFIXES")) {

1130 i\xe0(
	`my_\xa1\xbe\x92
(
\xbb\xa1l\x9ae
) == 0) {

1131
	`\xe4\x93_li\xa1
(
suff_h\x97d
);

1132
suff_h\x97d
 =
NULL
;

1134
	`add_suff
(
\xbb\xa1l\x9ae
);

1135 } i\xe0(
	`EQ
(
\x8bmp
, "IGNORE"))

1136
\xa1\xddOnE\xbc
 =
FALSE
;

1137 i\xe0(
	`EQ
(
\x8bmp
, "SWITCH"))

1138
sw\x99chc
 = (
	`i\xa2u\x\xfb
(
\xbb\xa1l\x9ae
[0])) ? switchc :\x84estline[0];

1139 i\xe0(
	`EQ
(
\x8bmp
, "LINECONT"))

1140
l\x9\xabc\xd\xa9
 = (
	`i\xa2u\x\xfb
(
\xbb\xa1l\x9ae
[0])) ?\x86inecont :\x84estline[0];

1141 i\xe0(
	`EQ
(
\x8bmp
, "SILENT"))

1142
s\x9e\x92tf
 =
TRUE
;

1143 #ifde\xe0
LC


1144 i\xe0(
	`EQ
(
\x8bmp
, "LINKER")) {

1145 i\xe0(
	`my_\xa1\xbe\x92
(
\xbb\xa1l\x9ae
) == 0)

1146
l\x9ak\x94f
 =
TRUE
;

1148 
\xbb\xa1l\x9ae
[0]) {

1151
l\x9ak\x94f
 =
FALSE
;

1154
l\x9ak\x94f
 =
TRUE
;

1156
	`\xb7nic
("Bad\x87rgument\x81o LINKER (TRUE/FALSE)");

1158 } i\xe0(
	`EQ
(
\x8bmp
, "MACFILE")) {

1159 i\xe0(
	`my_\xa1\xbe\x92
(
\xbb\xa1l\x9ae
) == 0) {

1160
	`w\xa\xfa2
("n\xd8MACFILE\x82ame, de\xe7uɚg\x81\xd8%s",
tf\x9e\x92ame
);

1162
	`my_\xa1r\xfdy
(
tf\x9e\x92ame
,
\xbb\xa1l\x9ae
);

1166
	`\x94r\xdc2
("unknow\xc0d\x9ce\xf9iv\x90\\xd4u\xcb?\\xe8'%s'",
\x8bmp
);

1170 
ARULE
:

1173 
i
 = 1;
	`n\xd9nu\x\xfb
(
fw\xdcd
[i]); i++)

1174 i\xe0(
fw\xdcd
[
i
] == '.')

1177 i\xe0(
i
 =\xf0
	`my_\xa1\xbe\x92
(
fw\xdcd
)) {

1178
	`\xb7nic2
("Bad\x84u\xcb '%s'",
fw\xdcd
);

1182
fw\xdcd
[
i
] =
NUL
;

1183
	`my_\xa1r\xfdy
(
\x8bmpd\x95
,
fw\xdcd
);

1186 
k
 =
i
 + 1;

1187
	`n\xd9nu\x\xfb
(
fw\xdcd
[
k
]\xe8&& !
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(fword[k])); k++)

1190 i\xe0(
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
fw\xdcd
[
k
])))

1191
fw\xdcd
[
k
] =
NUL
;

1192
	`my_\xa1r\xfdy
(
\x8bmp
, ".");

1193
	`\xa1r\xf\xe1
(
\x8bmp
,
fw\xdcd
 +
i
 + 1);

1194
	`add_ru\xcb2
(
\x8bmpd\x95
,
\x8bmp
,
fhowto
,
FALSE
);

1200
	`add_s_suff
(
\x8bmp
);

1201
	`add_s_suff
(
\x8bmpd\x95
);

1204 
ADEFN
:

1206 i\xe0(
no_f\x9\x93
) {

1207
d\xdei\xa1
 =
	`add_\x\xfbi\xa1
(d\xdei\xa1,
fw\xdcd
);

1208
no_f\x9\x93
 =
FALSE
;

1213 i\xe0(
de\xe2li\xa1
 =\xf0
NULL
) {

1215
	`add_de\xe2
(
fw\xdcd
,
FALSE
,
	`g\x91modif\x9bd
(fw\xdcd),
fd\x95s
,
fhowto
);

1217
de\xe2p
 =
de\xe2li\xa1
;

1218 
de\xe2p
 !\xf0
NULL
) {

1219 i\xe0(
	`EQ
(
de\xe2p
->
\xc7me
,
fw\xdcd
))

1222
de\xe2p
 = de\xe2p->
\xc3xtde\xe2
;

1224 i\xe0(
de\xe2p
 =\xf0
NULL
) {

1226
	`add_de\xe2
(
fw\xdcd
,
FALSE
,
	`g\x91modif\x9bd
(fw\xdcd),
fd\x95s
,
fhowto
);

1229 i\xe0(
de\xe2p
->
d\x95\x92ds\xda
 =\xf0
NULL
)

1230
de\xe2p
->
d\x95\x92ds\xda
 =
fd\x95s
;

1232
d\x95\xbbc3
 =
de\xe2p
->
d\x95\x92ds\xda
;

1233 
d\x95\xbbc3
->
\xc3xt
 !\xf0
NULL
)

1234
d\x95\xbbc3
 = d\x95\xbbc3->
\xc3xt
;

1235
d\x95\xbbc3
->
\xc3xt
 =
fd\x95s
;

1238 i\xe0(
de\xe2p
->
howto
 =\xf0
NULL
)

1239
de\xe2p
->
howto
 =
fhowto
;

1241
howp3
 =
de\xe2p
->
howto
;

1242 
howp3
->
\xc3xt
 !\xf0
NULL
)

1243
howp3
 = howp3->
\xc3xt
;

1244
howp3
->
\xc3xt
 =
fhowto
;

1250
	}
}

1252
	$add_de\xe2
(
n
,
u
,
m
,
d
,
h
)

1253 *
n
;

1254 
u
;

1255
TIME

m
;

1256 
\xcei\xa1
 *
d
, *
h
;

1258 
de\xe2\xbbc
 *
\xb1r
, *
\xb1r2
;

1259
\xb1r
 = (
de\xe2\xbbc
 *)
	`g\x91_mem
((defnrec));

1260
\xb1r
->
\xc7me
 =
	`mov_\x9a
(
n
);

1261
\xb1r
->
u\xb1od\xa9e
 =
u
;

1262
\xb1r
->
modif\x9bd
 =
m
;

1263
\xb1r
->
d\x95\x92ds\xda
 =
d
;

1264
\xb1r
->
howto
 =
h
;

1265
\xb1r
->
\xc3xtde\xe2
 =
NULL
;

1266 i\xe0(
de\xe2li\xa1
 =\xf0
NULL
) {

1267
de\xe2li\xa1
 =
\xb1r
;

1270
\xb1r2
 =
de\xe2li\xa1
;

1271 
\xb1r2
->
\xc3xtde\xe2
 !\xf0
NULL
)

1272
\xb1r2
 =\x85\x8c2->
\xc3xtde\xe2
;

1273
\xb1r2
->
\xc3xtde\xe2
 =
\xb1r
;

1275
	}
}

1277
	$g\x91nxt
() {

1278 
pos
,
m\xack
,
\xb7r\xa3d
,
x
;

1279 
exp_l\x9\xab
[
INMAX
];

1280 
\xcei\xa1
 *
q_how2
, *
q_how3
;

1282 
TRUE
) {

1285 i\xe0(
\xa3nd\x9ag
) {

1286 i\xe0(
\x8frg2
->
\xc3xt
 =\xf0
NULL
) {

1287
\xa3nd\x9ag
 =
def_\xbbady
 =
FALSE
;

1289
fw\xdcd
 =
	`mov_\x9a
(
\x8frg2
->
\xc7me
);

1290
fhowto
 =
	`mkexphow
(
q_how
,
\x8frg2
->
\xc7me
,
REPT_ERR
);

1291
fd\x95s
 =
	`mkexpd\x95
(
q_d\x95
,
\x8frg2
->
\xc7me
);

1292
\x8frg2
 =\x81\xacg2->
\xc3xt
;

1293  (
ADEFN
);

1297 i\xe0(
ru\xcb_\xa3nd
) {

1298
fw\xdcd
 =
\xe4u\xcb
;

1299
fhowto
 =
	`mkexphow
(
q_how
, (*)
NULL
,
IGN_ERR
);

1300
ru\xcb_\xa3nd
 =
ru\xcb_\xbbady
 =
FALSE
;

1301  (
ARULE
);

1304 i\xe0(
gd\xd\xab
)

1305  (
DONE
);

1309 i\xe0(
backup
[0] !\xf0
NUL
) {

1310
	`my_\xa1r\xfdy
(
l\x9\xab
,
backup
);

1311
backup
[0] =
NUL
;

1313 i\xe0(
	`g\x91l\x9\xab
(
f\x9e
,
l\x9\xab
\xe8=\xf0
FALSE
) {

1314 i\xe0(
def_\xbbady
)

1315
\xa3nd\x9ag
 =
TRUE
;

1316 i\xe0(
ru\xcb_\xbbady
)

1317
ru\xcb_\xa3nd
 =
TRUE
;

1318
gd\xd\xab
 =
TRUE
;

1322
\xb7r\xa3d
 =
FALSE
;

1325 i\xe0(
l\x9\xab
[0] == '.') {

1326 
pos
 = 0;
l\x9\xab
[pos] !\xf0':' &&
	`n\xd9nu\x\xfb
(line[pos]);\x85os++)

1329 i\xe0(
	`i\xa2u\x\xfb
(
l\x9\xab
[
pos
]))

1330
	`\x94r\xdc2
("bad\x84u\xcb o\xb8d\x9ce\xf9ive,\x82\x93d\xa0c\xde\xda s\x95\xac\xa9\xdc:\n%s",
l\x9\xab
);

1331
m\xack
 =
pos
;

1332 
x
 = 1; x <
m\xack
; x++)

1333 i\xe0(
l\x9\xab
[
x
] == '.')

1335 i\xe0(
x
 =\xf0
m\xack
) {

1337
l\x9\xab
[
m\xack
] =
NUL
;

1338
fw\xdcd
 =
l\x9\xab
 + 1;

1339 
x
++;
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[x])); x++)

1341
\xbb\xa1l\x9ae
 =
l\x9\xab
 +
x
;

1342  (
DIRECTIVE
);

1345
\xb7r\xa3d
 =
TRUE
;

1346 i\xe0(
ru\xcb_\xbbady
 ||
def_\xbbady
) {

1347 i\xe0(
def_\xbbady
)

1348
\xa3nd\x9ag
 =
TRUE
;

1350
ru\xcb_\xa3nd
 =
TRUE
;

1352
	`my_\xa1r\xfdy
(
backup
,
l\x9\xab
);

1355
ru\xcb_\xbbady
 =
TRUE
;

1356
l\x9\xab
[
m\xack
] =
NUL
;

1357
\xe4u\xcb
 =
	`mov_\x9a
(
l\x9\xab
);

1358
	`\xe4\x93_li\xa1
(
q_how
);

1364 
pos
++;
l\x9\xab
[pos] !\xf0';' &&
	`n\xd9nu\x\xfb
(line[pos]);\x85os++)

1365 i\xe0(!
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[
pos
])))

1367 i\xe0(
	`n\xd9nu\x\xfb
(
l\x9\xab
[
pos
])) {

1368 i\xe0(
l\x9\xab
[
pos
] == '#')

1370 i\xe0(
l\x9\xab
[
pos
] != ';')

1372
	`\x94r\xdc
("rule\x82eeds ';<rule>' or <newline>\x87fter ':'");

1375
q_how
 =
	`MkLi\xa1Mem
();

1376
q_how
->
\xc7me
 =
	`mov_\x9a
(
l\x9\xab
 +
pos
 + 1);

1377
q_how
->
\xc3xt
 =
NULL
;

1385 i\xe0(!
\xb7r\xa3d
) {

1386
pos
 = 0;

1387 
l\x9\xab
[
pos
] != '=' &&\x86ine[pos] != ':' &&

1388 !
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[
pos
])\xe8&&
	`n\xd9nu\x\xfb
(line[pos]))

1389
pos
++;

1390
m\xack
 =
pos
;

1391 i\xe0(
	`n\xd9nu\x\xfb
(
l\x9\xab
[
pos
]) &&\x86ine[pos] != ':') {

1393 i\xe0(
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[
pos
])))

1394 
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[
pos
])) &&

1395
	`n\xd9nu\x\xfb
(
l\x9\xab
[
pos
]))

1396
pos
++;

1397 i\xe0(
	`i\xa2u\x\xfb
(
l\x9\xab
[
pos
]))

1398
	`\xb7nic2
("bad ma\xfc\xd8\xdc def\x9a\x99i\xda '%s'",
l\x9\xab
);

1399 i\xe0(
l\x9\xab
[
pos
] == '=') {

1401
l\x9\xab
[
m\xack
] =
NUL
;

1402
fw\xdcd
 =
l\x9\xab
;

1403
m\xack
 =
pos
 + 1;

1404 
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[
m\xack
])))

1405
m\xack
++;

1406
\xbb\xa1l\x9ae
 =
l\x9\xab
 +
m\xack
;

1407  (
AMACRO
);

1413 i\xe0(
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
l\x9\xab
[0]))) {

1414 i\xe0(!
def_\xbbady
 && !
ru\xcb_\xbbady
)

1415
	`\x94r\xdc2
("how-t\xd8l\x9a\x90w\x99hou\x88\xb4e\xfbed\x9ag def\x9a\x99i\xda o\xb8ru\xcb\n%s",
l\x9\xab
);

1416
q_how2
 =
	`MkLi\xa1Mem
();

1417 i\xe0(
q_how
 =\xf0
NULL
) {

1418
q_how
 =
q_how2
;

1420 
q_how3
 =
q_how
; q_how3->
\xc3xt
 !\xf0
NULL
; q_how3 = q_how3->next)

1422
q_how3
->
\xc3xt
 =
q_how2
;

1424
q_how2
->
\xc7me
 =
	`mov_\x9a
(
l\x9\xab
);

1425
q_how2
->
\xc3xt
 =
NULL
;

1426
\xb7r\xa3d
 =
TRUE
;

1430 i\xe0(!
\xb7r\xa3d
) {

1431
pos
 = 0;

1432 
	`n\xd9nu\x\xfb
(
l\x9\xab
[
pos
]) &&\x86ine[pos] != ':')

1433
pos
++;

1434 i\xe0(
l\x9\xab
[
pos
] == ':') {

1436
\xb7r\xa3d
 =
TRUE
;

1437 i\xe0(
def_\xbbady
 ||
ru\xcb_\xbbady
) {

1438 i\xe0(
def_\xbbady
)

1439
\xa3nd\x9ag
 =
TRUE
;

1441
ru\xcb_\xa3nd
 =
TRUE
;

1442
	`my_\xa1r\xfdy
(
backup
,
l\x9\xab
);

1445
	`\xe4\x93_li\xa1
(
\x8frg
);

1446
\x8frg
 =
NULL
;

1447
	`\xe4\x93_li\xa1
(
q_how
);

1448
q_how
 =
NULL
;

1449
	`\xe4\x93_li\xa1
(
q_d\x95
);

1450
q_d\x95
 =
NULL
;

1451
l\x9\xab
[
pos
] =
NUL
;

1452
	`ex\xb7nd
(
l\x9\xab
,
exp_l\x9\xab
, "",
NO_TARG
);

1453
\x8frg2
 =
\x8frg
 =
	`mk\x\xfbi\xa1
(
exp_l\x9\xab
);

1454
q_d\x95
 =
	`mk\x\xfbi\xa1
(
l\x9\xab
 +
pos
 + 1);

1455
def_\xbbady
 =
TRUE
;

1459 i\xe0(!
\xb7r\xa3d
)

1460
	`\xb7nic2
("u\xc7bˁطr\xa3\x86\x9a\x90'%s'",
l\x9\xab
);

1462
	}
}

1468
	$g\x91l\x9\xab
(
\xa1\xbbam
,
wh\x94e
) *where;

1469
FILE
 *
\xa1\xbbam
;

1471 
i
;

1473 i\xe0(
	`g\x91_\xa1r\x9d\xb3d_l\x9\xab
(
wh\x94e
,
INMAX
,
\xa1\xbbam
\xe8=\xf0
TRUE
) {

1474
i
 =
	`my_\xa1\xbe\x92
(
wh\x94e
);

1475
wh\x94e
[--
i
] =
NUL
;

1476 
wh\x94e
[
i
 - 1] =\xf0
l\x9\xabc\xd\xa9
) {

1477 i\xe0(
	`g\x91_\xa1r\x9d\xb3d_l\x9\xab
(
wh\x94e
 +
i
 - 1,
INMAX
,
\xa1\xbbam
\xe8=\xf0
FALSE
)

1478
	`\xb7nic
("end of file before\x83nd of\x86ine");

1479
i
 =
	`my_\xa1\xbe\x92
(
wh\x94e
);

1480
wh\x94e
[--
i
] =
NUL
;

1482 i\xe0(
i
 >\xf0
INMAX
) {

1483
wh\x94e
[
INMAX
] =
NUL
;

1484
	`\xb7nic2
("l\x9a\x90to\xd8l\xdag\n'%s'",
wh\x94e
);

1486  (
TRUE
);

1488  (
FALSE
);

1489
	}
}

1491
	$g\x91_\xa1r\x9d\xb3d_l\x9\xab
(
wh\x94e
,
\xcbn
,
\xa1\xbbam
) *where;

1492 
\xcbn
;

1493
FILE
 *
\xa1\xbbam
;

1495 
x
;

1497 
TRUE
) {

1498 i\xe0(
	`fg\x91s
(
wh\x94e
,
\xcbn
,
\xa1\xbbam
\xe8=\xf0
NULL
)

1499  (
FALSE
);

1501 i\xe0(
wh\x94e
[
	`my_\xa1\xbe\x92
(where) - 1] != '\n') {

1502
x
 =
	`my_\xa1\xbe\x92
(
wh\x94e
);

1503
wh\x94e
[
x
] = '\n';

1504
wh\x94e
[
x
 + 1] =
NUL
;

1508 i\xe0((
\xa1\xbbam
 =\xf0
\xa1d\x9a
\xe8&&
	`EQ
(
wh\x94e
, ".\n"))

1509  (
FALSE
);

1512 
x
 = 0;
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
wh\x94e
[x])) && (where[x] != '\n'); x++)

1514 i\xe0((
wh\x94e
[
x
] == '\n') || (where[x] == '#'))

1518  (
TRUE
);

1521
	}
}

1523 
\xcei\xa1
 *
	$mk\x\xfbi\xa1
(
s
)

1524 *
s
;

1526 
pos
;

1527 
\xcaame
[
INMAX
];

1528 
\xcei\xa1
 *
\xb1r
, *
\xb1r2
, *
\xbbtv\xae
;

1530
pos
 = 0;

1531
\xbbtv\xae
 =
NULL
;

1532 
TRUE
) {

1534
pos
 =
	`g\x91_\x96em\x92t
(
s
,\x85os,
\xcaame
);

1535 i\xe0(
	`i\xa2u\x\xfb
(
\xcaame
[0]))

1536  (
\xbbtv\xae
);

1539
\xb1r
 =
	`MkLi\xa1Mem
();

1540 i\xe0(
\xbbtv\xae
 =\xf0
NULL
)

1541
\xbbtv\xae
 =
\xb1r
;

1543 
\xb1r2
 =
\xbbtv\xae
;\x85\x8c2->
\xc3xt
 !\xf0
NULL
;\x85tr2 =\x85tr2->next)

1545
\xb1r2
->
\xc3xt
 =
\xb1r
;

1547
\xb1r
->
\xc7me
 =
	`mov_\x9a
(
\xcaame
);

1548
\xb1r
->
\xc3xt
 =
NULL
;

1550
	}
}

1552
	$g\x91_\x96em\x92t
(
\xa4c
,
p
,
de\xa1
) *src, *dest;

1553 
p
;

1555 
i
,
qu\xd9e\xa1\xdd
;

1557
i
 = 0;

1558
de\xa1
[0] =
NUL
;

1559 
	`n\xd9nu\x\xfb
(
\xa4c
[
p
]\xe8&&
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(src[p])))

1560
p
++;

1561 i\xe0(
	`i\xa2u\x\xfb
(
\xa4c
[
p
]))

1562  (
p
);

1564 i\xe0(
\xa4c
[
p
] == '"') {

1565
qu\xd9e\xa1\xdd
 =
TRUE
;

1566
p
++;

1568
qu\xd9e\xa1\xdd
 =
FALSE
;

1570 
TRUE
) {

1571 i\xe0(
	`i\xa2u\x\xfb
(
\xa4c
[
p
]))

1573 i\xe0(
\xa4c
[
p
] =\xf0
BKSLSH
) {

1574 i\xe0(
\xa4c
[
p
 + 1] == '"')

1575
p
++;

1576
de\xa1
[
i
++] =
\xa4c
[
p
++];

1577 } i\xe0(!
qu\xd9e\xa1\xdd
 &&
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
\xa4c
[
p
])))

1579 i\xe0(
qu\xd9e\xa1\xdd
 && (
\xa4c
[
p
] == '"'))

1582
de\xa1
[
i
++] =
\xa4c
[
p
++];

1584
de\xa1
[
i
] =
NUL
;

1585  (
p
);

1586
	}
}

1588 
\xcei\xa1
 *
	$mkexphow
(
h\x97d
,
\x8frg\x91
,
e\xe6ag
)

1589 
\xcei\xa1
 *
h\x97d
;

1590 *
\x8frg\x91
;

1591 
e\xe6ag
;

1593 
\xcei\xa1
 *
p
, *
p2
, *
\xbbtv\xae
;

1594 
x
;

1595 
\x8bmp
[
INMAX
];

1597 i\xe0(
h\x97d
 =\xf0
NULL
) {

1598  (
NULL
);

1601
\xbbtv\xae
 =
NULL
;

1602 
h\x97d
 !\xf0
NULL
) {

1604 i\xe0(
\x8frg\x91
 !\xf0
NULL
)

1605
	`ex\xb7nd
(
h\x97d
->
\xc7me
,
\x8bmp
,
\x8frg\x91
,
e\xe6ag
);

1607
	`my_\xa1r\xfdy
(
\x8bmp
,
h\x97d
->
\xc7me
);

1608
p
 =
	`MkLi\xa1Mem
();

1609 
x
 = 0;
	`n\xd9nu\x\xfb
(
\x8bmp
[x]); x++)

1610 i\xe0(!
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
\x8bmp
[
x
])))

1612
p
->
\xc7me
 =
	`mov_\x9a
(
\x8bmp
 +
x
);

1613
p
->
\xc3xt
 =
NULL
;

1615 i\xe0(
\xbbtv\xae
 =\xf0
NULL
)

1616
\xbbtv\xae
 =
p
;

1618
p2
 =
\xbbtv\xae
;

1619 
p2
->
\xc3xt
 !\xf0
NULL
)

1620
p2
 =\x852->
\xc3xt
;

1621
p2
->
\xc3xt
 =
p
;

1623
h\x97d
 = h\x97d->
\xc3xt
;

1625  (
\xbbtv\xae
);

1626
	}
}

1628 
\xcei\xa1
 *
	$mkexpd\x95
(
h\x97d
,
\x8frg\x91
)

1629 
\xcei\xa1
 *
h\x97d
;

1630 *
\x8frg\x91
;

1632 
\xcei\xa1
 *
p
, *
p2
, *
p3
, *
\xbbtv\xae
;

1633 
\x8bmp
[
INMAX
];

1635 i\xe0(
h\x97d
 =\xf0
NULL
) {

1636  (
NULL
);

1639
\xbbtv\xae
 =
NULL
;

1640 
h\x97d
 !\xf0
NULL
) {

1642
	`ex\xb7nd
(
h\x97d
->
\xc7me
,
\x8bmp
,
\x8frg\x91
,
REPT_ERR
);

1643
p3
 =
	`mk\x\xfbi\xa1
(
\x8bmp
);

1644 
p3
 !\xf0
NULL
) {

1645
p
 =
	`MkLi\xa1Mem
();

1646
p
->
\xc7me
 =
	`mov_\x9a
(
p3
->name);

1647
p
->
\xc3xt
 =
NULL
;

1649 i\xe0(
\xbbtv\xae
 =\xf0
NULL
)

1650
\xbbtv\xae
 =
p
;

1652
p2
 =
\xbbtv\xae
;

1653 
p2
->
\xc3xt
 !\xf0
NULL
)

1654
p2
 =\x852->
\xc3xt
;

1655
p2
->
\xc3xt
 =
p
;

1657
p3
 =\x853->
\xc3xt
;

1659
	`\xe4\x93_li\xa1
(
p3
);

1660
h\x97d
 = h\x97d->
\xc3xt
;

1662  (
\xbbtv\xae
);

1663
	}
}

1665
	$add_suff
(
l\x9a
) *lin;

1667 
\xcei\xa1
 *
\xb1r
;

1671 i\xe0(
l\x9a
 =\xf0
NULL
)

1674 i\xe0(
suff_h\x97d
 =\xf0
NULL
)

1675
suff_h\x97d
 =
	`mk\x\xfbi\xa1
(
l\x9a
);

1678 
\xb1r
 =
suff_h\x97d
;\x85\x8c->
\xc3xt
 !\xf0
NULL
;\x85tr =\x85tr->next)

1680
\xb1r
->
\xc3xt
 =
	`mk\x\xfbi\xa1
(
l\x9a
);

1684 
\xb1r
 =
suff_h\x97d
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
)

1685 i\xe0(
\xb1r
->
\xc7me
[0] != '.')

1686
	`\x94r\xdc2
("add_suffix: bad sy\xc1ax '%s'",
\xb1r
->
\xc7me
);

1687
	}
}

1689
	$add_s_suff
(
\xcbxt
) *lext;

1691 
\xcei\xa1
 *
\xa5\x8c
;

1695 
\xa5\x8c
 =
suff_h\x97d
; s\xb1\xb8!\xf0
NULL
; s\xb1\xb8\xf0\xa5\x8c->
\xc3xt
)

1696 i\xe0(
	`EQ
(
\xa5\x8c
->
\xc7me
,
\xcbxt
))

1699
suff_h\x97d
 =
	`add_\x\xfbi\xa1
(suff_h\x97d,
\xcbxt
);

1700
	}
}

1702
	$add_ma\xfco
(
m\xc7me
,
ex\xb7n
) *mname, *expan;

1704 
ma\xf\xfbc
 *
ma\xfd
, *
ma\xfd2
;

1706 i\xe0(
ma\x\xe3i\xa1
 =\xf0
NULL
)

1707
ma\x\xe3i\xa1
 =
ma\xfd
 = (
ma\xf\xfbc
 *)
	`g\x91_mem
((
UI
)(macrec));

1709
ma\xfd2
 =
ma\x\xe3i\xa1
;

1710 
ma\xfd2
->
\xc3xtmac
 !\xf0
NULL
) {

1711 i\xe0(
	`EQ
(
ma\xfd2
->
\xc7me
,
m\xc7me
)) {

1712
ma\xfd2
->
mex\xb7nd
 =
	`mov_\x9a
(
ex\xb7n
);

1718
ma\xfd2
 = ma\xfd2->
\xc3xtmac
;

1720 i\xe0(
	`EQ
(
ma\xfd2
->
\xc7me
,
m\xc7me
)) {

1724
ma\xfd2
->
mex\xb7nd
 =
	`mov_\x9a
(
ex\xb7n
);

1727
ma\xfd2
->
\xc3xtmac
 =
ma\xfd
 = (
ma\xf\xfbc
 *)
	`g\x91_mem
((
UI
)(macrec));

1729
ma\xfd
->
\xc7me
 =
	`mov_\x9a
(
m\xc7me
);

1730
ma\xfd
->
mex\xb7nd
 =
	`mov_\x9a
(
ex\xb7n
);

1731
ma\xfd
->
\xc3xtmac
 =
NULL
;

1732
	}
}

1734
	$add_ru\xcb2
(
ad\x95
,
\xa9\xacg
,
\xacu\xcb
,
a\xe6ag
) *adep, *atarg;

1735 
\xcei\xa1
 *
\xacu\xcb
;

1736 
a\xe6ag
;

1738 
ru˻c
 *
ru\xcbp
, *
ru\xcbp2
;

1740 i\xe0(
ru\xcbli\xa1
 =\xf0
NULL
)

1741
ru\xcbli\xa1
 =
ru\xcbp
 = (
ru˻c
 *)
	`g\x91_mem
((
UI
)(rulerec));

1743
ru\xcbp2
 =
ru\xcbli\xa1
;

1744 
ru\xcbp2
->
\xc3x\x8cu\xcb
 !\xf0
NULL
) {

1745 i\xe0(
	`EQ
(
ru\xcbp2
->
d\x95
,
ad\x95
\xe8&& EQ\xd4u\xcbp2->
\x8frg
,
\xa9\xacg
)) {

1746
	`\xe4\x93_li\xa1
(
ru\xcbp2
->
ru\xcb
);

1747
ru\xcbp2
->
ru\xcb
 =
\xacu\xcb
;

1750
ru\xcbp2
 =\x84u\xcbp2->
\xc3x\x8cu\xcb
;

1752 i\xe0(
	`EQ
(
ru\xcbp2
->
d\x95
,
ad\x95
\xe8&& EQ\xd4u\xcbp2->
\x8frg
,
\xa9\xacg
)) {

1753
	`\xe4\x93_li\xa1
(
ru\xcbp2
->
ru\xcb
);

1754
ru\xcbp2
->
ru\xcb
 =
\xacu\xcb
;

1757
ru\xcbp2
->
\xc3x\x8cu\xcb
 =
ru\xcbp
 = (
ru˻c
 *)
	`g\x91_mem
((
UI
)(rulerec));

1759
ru\xcbp
->
d\x95
 =
	`mov_\x9a
(
ad\x95
);

1760
ru\xcbp
->
\x8frg
 =
	`mov_\x9a
(
\xa9\xacg
);

1761
ru\xcbp
->
ru\xcb
 =
\xacu\xcb
;

1762
ru\xcbp
->
def_\xe6ag
 =
a\xe6ag
;

1763
ru\xcbp
->
\xc3x\x8cu\xcb
 =
NULL
;

1764
	}
}

1766
	$\xe4\x93_li\xa1
(
h\x97d
)

1767 
\xcei\xa1
 *
h\x97d
;

1769 
\xcei\xa1
 *
\xb1r
;

1771 i\xe0(
h\x97d
 =\xf0
NULL
)

1773 i\xe0(
h\x97d
->
\xc3xt
 =\xf0
NULL
) {

1774
	`\xa7\xe3_\xe4\x93
(
h\x97d
->
\xc7me
);

1775
	`\xa7\xe3_\xe4\x93
((*)
h\x97d
);

1778 
TRUE
) {

1779 
\xb1r
 =
h\x97d
;\x85\x8c->
\xc3xt
->\xc3x\x88!\xf0
NULL
;\x85tr =\x85tr->next)

1781
	`\xa7\xe3_\xe4\x93
(
\xb1r
->
\xc3xt
->
\xc7me
);

1782
	`\xa7\xe3_\xe4\x93
((*)
\xb1r
->
\xc3xt
);

1783
\xb1r
->
\xc3xt
 =
NULL
;

1784 i\xe0(
\xb1r
 =\xf0
h\x97d
) {

1785
	`\xa7\xe3_\xe4\x93
(
\xb1r
->
\xc7me
);

1786
	`\xa7\xe3_\xe4\x93
((*)
\xb1r
);

1791
	}
}

1793
	$exec_how
(
cmd
) *cmd;

1795 
pos
,
this_echo
,
this_ign
,
x
,
i
,
no_m\xd\xfb_\xe6ags
;

1796 
\x94r_\xbbt
;

1797 
cmd\xc7me
[
INMAXSH
];

1799
i
 =
pos
 = 0;

1800
this_echo
 = !
s\x9e\x92tf
;

1801
this_ign
 =
FALSE
;

1802
no_m\xd\xfb_\xe6ags
 =
FALSE
;

1803 
TRUE
) {

1804 
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
cmd
[
pos
])))

1805
pos
++;

1806 
cmd
[
pos
]) {

1808
this_echo
 =
FALSE
;

1812
this_ign
 =
TRUE
;

1816
no_m\xd\xfb_\xe6ags
 =
TRUE
;

1819 i\xe0(
no_m\xd\xfb_\xe6ags
)

1822
pos
++;

1826 
x
 =
pos
; !
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
cmd
[x])\xe8&&
	`n\xd9nu\x\xfb
(cmd[x]); x++)

1827
cmd\xc7me
[
i
++] =
cmd
[
x
];

1828
cmd\xc7me
[
i
] =
NUL
;

1831 i\xe0(
this_echo
) {

1832
	`\xe5r\x9\xa9f
(
\xa1dout
, " %s\n",
cmd
 +
pos
);

1835 i\xe0(!
execu\x8b
 && !
this_echo
) {

1836
	`\xe5r\x9\xa9f
(
\xa1dout
, " %s\n",
cmd
 +
pos
);

1841 i\xe0(!
execu\x8b
)

1844 #ifde\xe0
LC


1845 i\xe0(
	`EQ
(
cmd\xc7me
, "write-macro") || EQ(cmdname, "WRITE-MACRO")) {

1846
\x94r_\xbbt
 =
	`w_ma\xfcos
(
cmd
 +
x
);

1847  ((
this_ign
\xe8? 0 :
\x94r_\xbbt
);

1852
\x94r_\xbbt
 =
	`\xb3rf\xdcm
(
cmd\xc7me
,
cmd
 +
pos
);

1853  ((
this_ign
\xe8? 0 :
\x94r_\xbbt
);

1855
	}
}

1857
	$\xb3rf\xdcm
(
\xfaame
,
syscmd
) *cname;

1858 *
syscmd
;

1860 
x
,
ccode
;

1861 #i\xe2de\xe0
LC


1862 
pid
;

1863
WAIT

\xa1\xa9us
;

1865 
\xcei\xa1
 *
\xcfrgs
;

1866 **
v\xacgs
, **
	`mk\xacgs
();

1867 
whޒam
[
INMAXSH
];

1870 
x
 = 0;
	`n\xd9nu\x\xfb
(
syscmd
[x]); x++)

1871 i\xe0((
syscmd
[
x
] == '>') || (syscmd[x] == '<') || (syscmd[x] == '|') || (syscmd[x] == '*') ||

1872 (
syscmd
[
x
] == '?') || (syscmd[x] == '&')) {

1873  (
	`mysy\xa1em
(
syscmd
));

1877 i\xe0(
	`f\x9adexec
(
\xfaame
,
whޒam
\xe8=\xf0(
TIME
)0) {

1879  (
	`mysy\xa1em
(
syscmd
));

1883
\xcfrgs
 =
	`mk\x\xfbi\xa1
(
syscmd
);

1884
v\xacgs
 =
	`mk\xacgs
(
\xcfrgs
);

1886 #i\xe2de\xe0
LC


1888 i\xe0((
pid
 =
	`f\xdck
()) == 0) {

1889
	`execv
(
whޒam
,
v\xacgs
);

1890
	`d\xd\xab
(-1);

1892
	`\xa7\xe3_\xe4\x93
((*)
v\xacgs
);

1893
	`\xe4\x93_li\xa1
(
\xcfrgs
);

1895 i\xe0(
pid
 < 0) {

1896
	`\xb3\xbc\xdc
(
wh\xdfmi
);

1899 ((
ccode
 =
	`wa\x99
(&
\xa1\xa9us
)\xe8!\xf0
pid
) && (ccode != -1))

1901 i\xe0(
pid
 < 0) {

1902
	`\xb3\xbc\xdc
(
wh\xdfmi
);

1905  (
	`\xb4_w\xa\xfa\x9ag
(&
\xa1\xa9us
));

1908 i\xe0(
	`f\xdckv
(
whޒam
,
v\xacgs
) != 0) {

1909
	`\xb3\xbc\xdc
(
wh\xdfmi
);

1910
	`\xb7nic\xa1\xdd
();

1912
	`\xa7\xe3_\xe4\x93
((*)
v\xacgs
);

1913
	`\xe4\x93_li\xa1
(
\xcfrgs
);

1914
ccode
 =
	`wa\x99
();

1915  (
	`\xb4_w\xa\xfa\x9ag
(&
ccode
));

1917
	}
}

1919 #i\xe2de\xe0
LC


1920 
	$mysy\xa1em
(*
cmd
)

1922 
ccode
,
pid
;

1923
WAIT

\xa1\xa9us
;

1925 i\xe0((
pid
 =
	`f\xdck
()) == 0) {

1926
	`exe\x\xe3
(
SHELL
, "sh", "-c",
cmd
, 0);

1927
	`d\xd\xab
(-1);

1929 i\xe0(
pid
 < 0) {

1930
	`\xb3\xbc\xdc
(
wh\xdfmi
);

1933 ((
ccode
 =
	`wa\x99
(&
\xa1\xa9us
)\xe8!\xf0
pid
) && (ccode != -1))

1935 i\xe0(
pid
 < 0) {

1936
	`\xb3\xbc\xdc
(
wh\xdfmi
);

1939  (
	`\xb4_w\xa\xfa\x9ag
(&
\xa1\xa9us
));

1941
	}
}

1943 
	$mysy\xa1em
(*
cmd
) {

1944 
_o\xa3\xbc
;

1946 i\xe0(
	`sy\xa1em
(
cmd
) != 0) {

1947 i\xe0(
_o\xa3\xbc
 == 0)

1948
	`\xb7nic
("Can't\x85rocess system()\x87rgs");

1950
	`\xb7nic
("error calling system()");

1952  (
	`\xb4_w\xa\xfa\x9ag
(
	`wa\x99
()));

1953
	}
}

1956 
	$\xb4_w\xa\xfa\x9ag
(
WAIT
 *
s
)

1959 #ifde\xe0
BSD4
.2

1960 i\xe0((
s
->
w_T
.
w_T\x94msig
 =\xf00\xe8&& (s->w_T.
w_R\x91code
 == 0))

1964 i\xe0(
s
->
w_T
.
w_T\x94msig
)

1965
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s:\x84e\xfbived sig\xc7\xc8%x\n",
wh\xdfmi
,
s
->
w_T
.
w_T\x94msig
);

1967
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: E\xbc\xdc cod\x90%x",
wh\xdfmi
,
s
->
w_T
.
w_R\x91code
);

1968
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s\n", (
\xa1\xddOnE\xbc
) ? "" : " (ignored)");

1972
	}
}

1974 i\xe0(*
	gs
 == 0)

1978
\xe5r\x9atf
(
\xa1d\x94r
, "%s:",
wh\xdfmi
);

1979 i\xe0(*
	gs
 & 0xFF) {

1980
\xe5r\x9atf
(
\xa1d\x94r
, "\x84e\xfbived sig\xc7\xc8%x\n", *
s
 & 0xFF);

1982
\xe5r\x9atf
(
\xa1d\x94r
, " E\xbc\xdc cod\x90%x", (*
s
 & ~0xFF) >> 8);

1983
\xe5r\x9atf
(
\xa1d\x94r
, "%s\n", (
\xa1\xddOnE\xbc
) ? "" : " (ignored)");

1990 **
	$mk\xacgs
(
\xacgli\xa1
)

1991 
\xcei\xa1
 *
\xacgli\xa1
;

1993 
\xcei\xa1
 *
\xb1r
;

1994 **
\xbbtv\xae
;

1995 
i
;

1998 
i
 = 0,
\xb1r
 =
\xacgli\xa1
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
, i++)

2001
\xbbtv\xae
 = (**)
	`g\x91_mem
(((
UI
)(
i
 + 1) * (*)));

2002 
i
 = 0,
\xb1r
 =
\xacgli\xa1
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
, i++)

2003
\xbbtv\xae
[
i
] =
\xb1r
->
\xc7me
;

2004
\xbbtv\xae
[
i
] =
NULL
;

2005  (
\xbbtv\xae
);

2006
	}
}

2008 *
	$g\x91_mem
(
size
)

2009
UI

size
;

2011 *
p
;

2013
p
 =
	`\xa7\xe3_m\x\xabloc
(
size
);

2014  (
p
);

2015
	}
}

2017 
\xcei\xa1
 *
	$MkLi\xa1Mem
() {

2018 
\xcei\xa1
 *
p
;

2020
p
 = (
\xcei\xa1
 *)
	`\xa7\xe3_m\x\xabloc
((llist));

2021  (
p
);

2022
	}
}

2024 *
	$mov_\x9a
(
\xa1r\x9ag
)

2025 *
\xa1r\x9ag
;

2027 *
\xb1r
;

2029
\xb1r
 =
	`g\x91_mem
((
UI
)(
	`my_\xa1\xbe\x92
(
\xa1r\x9ag
) + 1));

2030
	`my_\xa1r\xfdy
(
\xb1r
,
\xa1r\x9ag
);

2031  (
\xb1r
);

2032
	}
}

2034 
	$mk\xb7thli\xa1
() {

2035 *
	`g\x91\x92v
();

2038 *
\xb7th
;

2040
\xb7th_h\x97d
 =
NULL
;

2042
\xb7th
 =
	`g\x91\x92v
("PATH");

2043
	`add_\xb7th
(
\xb7th
);

2044
	}
}

2046 
	$squ\x93ze\xa5
(*
to
, *
\xe4om
) {

2048 i\xe0(
\xe4om
 =\xf0
NULL
)

2050 *
\xe4om
) {

2051 i\xe0(
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(*
\xe4om
)))

2052
\xe4om
++;

2054 *
to
++ = *
\xe4om
++;

2056 *
to
 =
NUL
;

2057
	}
}

2059
TIME

	$f\x9adexec
(
s
,
wh\x94e
)

2060 *
s
, *
wh\x94e
;

2062 
i
;

2063
TIME

\xbbtv\xae
;

2064 
\xcei\xa1
 *
\xb1r
;

2066
	`my_\xa1r\xfdy
(
wh\x94e
,
s
);

2071 
i
 = 0;
	`n\xd9nu\x\xfb
(
s
[i]); i++)

2072 i\xe0(
s
[
i
] =\xf0
sw\x99chc
)

2073  (
	`g\x91modif\x9bd
(
wh\x94e
));

2075 i\xe0((
\xbbtv\xae
 =
	`g\x91modif\x9bd
(
wh\x94e
)\xe8!\xf0(
TIME
)0)

2076  (
\xbbtv\xae
);

2079 
\xb1r
 =
\xb7th_h\x97d
;\x85\x8c !\xf0
NULL
;\x85\x8c =\x85\x8c->
\xc3xt
) {

2080
	`my_\xa1r\xfdy
(
wh\x94e
,
\xb1r
->
\xc7me
);

2081
	`\xa1r\xf\xe1
(
wh\x94e
,
s
);

2082 i\xe0((
\xbbtv\xae
 =
	`g\x91modif\x9bd
(
wh\x94e
)\xe8!\xf0(
TIME
)0)

2083  (
\xbbtv\xae
);

2086  ((
TIME
)0);

2087
	}
}

2089
TIME

	$g\x91modif\x9bd
(
s
)

2090 *
s
;

2092 
\xa1\xa9

\xa1\xa9b
;

2094 i\xe0(
	`\xa1\xa9
(
s
, &
\xa1\xa9b
) != 0) {

2095 i\xe0(
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
ENOENT
)

2096  ((
TIME
)0);

2098
	`\xb3\xbc\xdc
(
wh\xdfmi
);

2099 i\xe0(
\xa1\xddOnE\xbc
)

2100
	`\xb7nic\xa1\xdd
();

2102  ((
TIME
)0);

2105  (
\xa1\xa9b
.
\xa1_mtime
);

2108
	}
}

2110 
	$add_\xb7th
(*
p
) {

2111 
\x8bmp
[50];

2112 
i
,
k
;

2115
k
 =
i
 = 0;

2116
	`squ\x93ze\xa5
(
p
,\x85);

2117 i\xe0(
p
 =\xf0
NULL
)

2119 
TRUE
) {

2121 
	`n\xd9nu\x\xfb
(
p
[
k
]\xe8&& (p[k] !\xf0
PATHCHAR
))

2122
\x8bmp
[
i
++] =
p
[
k
++];

2123 i\xe0(
\x8bmp
[
i
 - 1] !\xf0
sw\x99chc
)

2124
\x8bmp
[
i
++] =
sw\x99chc
;

2125
\x8bmp
[
i
] =
NUL
;

2126 i\xe0(
i
 == 0)

2129
\xb7th_h\x97d
 =
	`add_\x\xfbi\xa1
թh_h\x97d,
\x8bmp
);

2130 i\xe0(
	`i\xa2u\x\xfb
(
p
[
k
])) {

2133
k
++;

2134
i
 = 0;

2136
	}
}

2139 *
	$g\x91\x92v
(
s
)

2140 *
s
;

2142 **
p
, *
\x8d
, *
	`em\xa9ch
();

2144
p
 =
ext_\x92v
;

2146 *
p
 !\xf0
NULL
) {

2147 i\xe0((
\x8d
 =
	`em\xa9ch
(
s
, *
p
)\xe8!\xf0
NULL
)

2148  (
	`mov_\x9a
(
\x8d
));

2149
p
++;

2151  (
NULL
);

2152
	}
}

2154 *
	$em\xa9ch
(
s
,
p
)

2155 *
s
, *
p
;

2158 *
s
 !\xf0
NULL
)

2159 i\xe0(*
s
++ !\xf0*
p
++)

2160  (
NULL
);

2161 i\xe0(*
p
++ != '=')

2162  (
NULL
);

2163  (
p
);

2164
	}
}

2166 #ifde\xe0
LC


2168 
	~<f\x\xe7\x8e.h
>

2170 
	$\xa1\xa9_f\x9\x93
(cڡ *
\xa1
, 
\xa1\xa9
 *
\xb1r
) {

2171 
fd
;

2172
TIME

	`g\x91\xe1
(),
\xbbtv\xae
;

2175
fd
 =
	`ݒ
(
\xa1
,
O_RDONLY
);

2176 i\xe0(
fd
 < 0)

2178
\xbbtv\xae
 =
	`g\x91\xe1
(
fd
);

2179 i\xe0(
\xbbtv\xae
 =\xf0(
TIME
)(-1))

2182
\xb1r
->
\xa1_mtime
 =
\xbbtv\xae
;

2185
	}
}

2187 
	#W_PERLINE
 4

	)

2188 
	#W_BUFLEN
 80

	)

2189 
	gw_buf
[
W_BUFLEN
];

2190 
	gw_cou\xc1
;

2191 
	gw_f\x9c\xa1
;

2193 
	$w_ma\xfcos
(*
li\xa1
) {

2195
FILE
 *
t\xe5
;

2196 
\xcei\xa1
 *
\xb1r
, *
\xb1r2
, *
	`mk\x\xfbi\xa1
();

2198 i\xe0((
t\xe5
 =
	`fݒ
(
tf\x9e\x92ame
, "w")\xe8=\xf0
NULL
) {

2199
	`w\xa\xfa2
("C\xaa'\x88wr\x99\x90t\xd8'%s'",
tf\x9e\x92ame
);

2203
w_buf
[0] =
NUL
;

2204
w_cou\xc1
 = 0;

2205
w_f\x9c\xa1
 =
TRUE
;

2207
\xb1r
 =
	`mk\x\xfbi\xa1
(
li\xa1
);

2208 
\xb1r2
 =
\xb1r
;\x85\x8c2 !\xf0
NULL
;\x85\x8c2 =\x85\x8c2->
\xc3xt
)

2209 i\xe0(
	`w_mac2
(
\xb1r2
->
\xc7me
,
t\xe5
,\x85\x8c2->
\xc3xt
) != 0)

2211
	`\xe4\x93_li\xa1
(
\xb1r
);

2212 i\xe0(
w_buf
[0] !\xf0
NUL
)

2213
	`\xe5r\x9\xa9f
(
t\xe5
, "%s\n",
w_buf
);

2214
	`f\x\xe3o\xa3
(
t\xe5
);

2216
	}
}

2218 
	$w_mac2
(*
w_w\xdcd
,
FILE
 *
\xa1\xbbam
, 
\xcei\xa1
 *
n
) {

2221 i\xe0(!
l\x9ak\x94f
) {

2222
	`\xe5r\x9\xa9f
(
\xa1\xbbam
, "%s\n",
w_w\xdcd
);

2225 i\xe0(
w_f\x9c\xa1
) {

2226
	`my_\xa1r\xfdy
(
w_buf
,
w_w\xdcd
);

2227
w_f\x9c\xa1
 =
FALSE
;

2228
w_cou\xc1
++;

2230
	`\xa1r\xf\xe1
(
w_buf
, " + ");

2231 i\xe0((
	`my_\xa1\xbe\x92
(
w_buf
\xe8+
	`\xa1\xbe\x92
(
w_w\xdcd
)\xe8>
W_BUFLEN
) {

2232
	`\xe5r\x9\xa9f
(
\xa1\xbbam
, "%s\n",
w_buf
);

2233
w_buf
[0] =
NUL
;

2234
w_cou\xc1
 = 1;

2236
	`\xa1r\xf\xe1
(
w_buf
,
w_w\xdcd
);

2237
w_cou\xc1
++;

2238 i\xe0(
w_cou\xc1
 >\xf0
W_PERLINE
) {

2239
w_cou\xc1
 = 0;

2240
w_f\x9c\xa1
 =
TRUE
;

2241
	`\xe5r\x9\xa9f
(
\xa1\xbbam
, "%\xa0%c\n",
w_buf
, (
n
 =\xf0
NULL
) ? ' ' : '+');

2242
w_buf
[0] =
NUL
;

2244
w_cou\xc1
++;

2249
	}
}

2251 
	$w\xa\xfa2
(*
s1
, *
s2
) {

2252
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s: ",
wh\xdfmi
);

2253
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,
s1
,
s2
);

2254
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\n");

2255
	}
}

2259 
	$d\xd\xab
(
n
) {

2260
	`_\x\xe3\x97nup
();

2261
	`ex\x99
(
n
);

2262
	}
}

2264 
	$my_\xa1\xbe\x92
(*
\xa4c
) {

2265 i\xe0(
\xa4c
 =\xf0
NULL
)

2267 
	`\xa1\xbe\x92
(
\xa4c
);

2268
	}
}

2270 *
	$my_\xa1r\xfdy
(*
de\xa1
, *
\xa4c
) {

2271 i\xe0(
\xa4c
 =\xf0
NULL
)

2272 *
de\xa1
 = '\0';

2274 
	`\xa1r\xfdy
(
de\xa1
,
\xa4c
);

2275
	}
}

	@commands/mined.hpp

11 #i\xe2de\xe0
YMAX


12 #ifde\xe0
UNIX


13 
	~<c\xa1dio
>

14 #unde\xe0
g\x91ch\xac


15 #unde\xe0
NULL


16 #unde\xe0
EOF


17 
_putch\xac
();

18 *
CE
, *
VS
, *
SO
, *
SE
, *
CL
, *
AL
, *
CM
;

19 
	#YMAX
 23

	)

21 
	#YMAX
 24

	)

23 *
\x92\x8br_\xa1r\x9ag
;

24 *
\xbbv_video
;

25 *
n\xdcm\x\xab_video
;

26 *
\xbbv_s\xfc\xdel
;

27 *
pos_\xa1r\x9ag
;

28 
	#X_PLUS
 ' '

	)

29 
	#Y_PLUS
 ' '

	)

32 
	#XMAX
 79

	)

33 
	#SCREENMAX
 (
YMAX
 - 1\xe8

	)

34 
	#XBREAK
 (
XMAX
 - 2\xe8

	)

35 
	#SHIFT_SIZE
 25

	)

36 
	#SHIFT_MARK
 '!'

	)

37 
	#MAX_CHARS
 1024

	)

39 
	#LINE_START
 (((-
MAX_CHARS
 - 1\xe8/
SHIFT_SIZE
\xe8* SHIFT_SIZE - SHIFT_SIZE)

	)

40 
	#LINE_END
 (
MAX_CHARS
 + 1\xe8

	)

42 
	#LINE_LEN
 (
XMAX
 + 1\xe8

	)

43 
	#SCREEN_SIZE
 (
XMAX
 *
YMAX
\xe8

	)

44
\x9al\x9ae

cڡex\xb4
 
	gBLOCK_SIZE
 = 1024;

48 \xfeas\xa0
	cR\x91u\xbaCode
 {
	mE\xbc\xdcs
 = -1,
	mNoL\x9\xab
 = -2,
	mF\x9\xab
 = 0,
	mNoI\xc5ut
 = 1 };

50 
	#STD_OUT
 1

	)

51 
	#FILE_LENGTH
 14

	)

52 
	#MEMORY_SIZE
 (50 * 1024\xe8

	)

54 
	#REPORT
 2

	)

67 
	eFLAG
 {

69
	mFALSE_ENUM
 = 0,

70
	mTRUE_ENUM
 = 1,

71
	mNOT_VALID
,

72
	mVALID
,

73
	mOFF
,

74
	mON
,

77
	mFORWARD
,

78
	mREVERSE
,

81
	mSMALLER
,

82
	mBIGGER
,

83
	mSAME
,

84
	mEMPTY
,

85
	mNO_DELETE
,

86
	mDELETE
,

87
	mREAD
,

88
	mWRITE


96 
	sL\x9\xab
 {

97 
L\x9\xab
 *
	m\xc3xt
;

98 
L\x9\xab
 *
	m\xb4ev
;

99 *
	m\x8bxt
;

100 
	mshi\xe1_cou\xc1
;

106 
	#DUMMY
 0x80

	)

107 
	#DUMMY_MASK
 0x7F

	)

110 
	#NO_MATCH
 0

	)

111 
	#MATCH
 1

	)

112 
	#REG_ERROR
 2

	)

114 
	#BEGIN_LINE
 (2 *
REG_ERROR
)

	)

115 
	#END_LINE
 (2 *
BEGIN_LINE
)

	)

122 
	s\xbbgex
 {

124 *
	m\x94r_mess
;

125 *
	mex\xb4essi\xda
;

126 }
	m\xbbsu\xc9
;

127 
	m\xa1\xa9us
;

128 *
	m\xa1\xa\xf9_\xb1r
;

129 *
	m\x92d_\xb1r
;

135 
	#NIL_PTR
 ((*)0)

	)

136 
	#NIL_LINE
 ((
LINE
 *)0)

	)

137 
	#NIL_REG
 ((
REGEX
 *)0)

	)

138 
	#NIL_INT
 ((*)0)

	)

143 
ƚes
;

144
LINE
 *
h\x97d\x94
;

145
LINE
 *
\x8f\x9e
;

146
LINE
 *
t\xdd_l\x9\xab
;

147
LINE
 *
b\xd9_l\x9\xab
;

148
LINE
 *
cur_l\x9\xab
;

149 *
cur_\x8bxt
;

150 
ϡ_y
;

151 
s\xfc\x93n
[
SCREEN_SIZE
];

153 
x
,
y
;

154
FLAG

modif\x9bd
;

155
FLAG

\xa1\xa9_visib\xcb
;

156
FLAG

wr\x99ab\xcb
;

157
FLAG

qu\x99
;

158
FLAG

\xbd\x9de
;

159 
\x9aput_fd
;

160
FLAG

l\xdfd\x9ag
;

161 
out_cou\xc1
;

162 
f\x9\x93_\xc7me
[
LINE_LEN
];

163 
\x8bxt_buf\xe3r
[
MAX_CHARS
];

164 
b\xc\xe2k_l\x9\xab
[
LINE_LEN
];

166 
y\x\xafk_f\x9\x93
[];

167
FLAG

y\x\xafk_\xa1\xa9us
;

168 
ch\xacs_\xa7ved
;

173 
	#\x\xe3\x97r_buf\xe3r
(\xe8(
out_cou\xc1
 = 0)

	)

179
\x9al\x9ae
 
	$putch\xac
(
c
\xe8{
\xa1d
::
	`putch\xac
(c);
	}
}

184 
	#r\x9ag_b\x96l
(\xe8
	`putch\xac
('\07')

	)

189 
	#\xa1r\x9ag_\xb4\x9\xa9
(
\xa1r
\xe8()
	`wr\x99\x96\x9\xab
(
STD_OUT
, (\xa1r))

	)

194 
	#\xe6ush
(\xe8()
	`\xe6ush_buf\xe3r
(
STD_OUT
)

	)

199 
	#\x8fb
(
\xfat
\xe8(((\xfat\xe8+ 8\xe8& ~07)

	)

200 
	#is_\x8fb
(
c
\xe8((c\xe8=\xf0'\t')

	)

205 
	#wh\x99e_\xa5a\xfb
(
c
\xe8((c\xe8=\xf0' ' || (c\xe8=\xf0'\t')

	)

206 
	#\x\xabpha
(
c
\xe8((c\xe8!\xf0' ' && (c\xe8!\xf0'\t' && (c\xe8!\xf0'\n')

	)

211
\x9al\x9ae
 
	$l\x9\xab_\xb4\x9\xa9
(
LINE
 *
l\x9\xab
\xe8{
	`put_l\x9\xab
֚e, 0,
TRUE
);
	}
}

216 
	#move_to
(
nx
,
ny
\xe8
	`move
(\xd2x),
NIL_PTR
, (ny))

	)

221 
	#move_add\xbbss
(
add\xbbss
\xe8
	`move
(0, (add\xbbss),
y
)

	)

226 
	#\xa1\xa9us_l\x9\xab
(
\xa1r1
,
\xa1r2
\xe8()
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1), (\xa1r2),
NIL_PTR
,
FALSE
)

	)

227 
	#\x94r\xdc
(
\xa1r1
,
\xa1r2
\xe8()
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1), (\xa1r2),
NIL_PTR
,
FALSE
)

	)

228 
	#g\x91_\xa1r\x9ag
(
\xa1r1
,
\xa1r2
,
\xe6
\xe8
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1),
NIL_PTR
, (\xa1r2), fl)

	)

229 
	#\x\xe3\x97r_\xa1\xa9us
(\xe8()
	`b\xd9tom_l\x9\xab
(
OFF
,
NIL_PTR
, NIL_PTR, NIL_PTR,
FALSE
)

	)

234 
	#f\xa1\xa9us
(
mess
,
\xfat
\xe8
	`f\x9\x93_\xa1\xa9us
((mess), (\xfat),
f\x9\x93_\xc7me
,
ƚes
,
wr\x99ab\xcb
,
modif\x9bd
)

	)

239 
	#g\x91_shi\xe1
(
\xfat
\xe8((\xfat\xe8&
DUMMY_MASK
)

	)

242
LINE
 *
\xb4o\xfbed
(), *
\x9a\xa1\xael_l\x9ae
();

243
LINE
 *
m\xa9ch
(), *
l\x9\xab_\x9a\xa3\xb9
();

244 *
\xaeloc
(), *
num_out
(), *
ba\xa3\xc7me
();

	@commands/mined1.cpp

413 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

414 
	~"m\x9\xabd.h\xb5
"

415 
	~"sg\x89y.h\xb5
"

416 
	~"sig\xc7l.h\xb5
"

417 #ifde\xe0
UNIX


418 
	~<\x94\xbao.h
>

420 
	~"\x94\xbao.h\xb5
"

423 
\x94\xbao
;

428
	$FS
(\xe8{
	`f\xa1\xa9us
(
f\x9\x93_\xc7me
[0] ? "" : "[buf\xe3r]", -1L);
	}
}

434
	$VI
() {

435 
\xc3w_f\x9ee
[
LINE_LEN
];

437 i\xe0(
modif\x9bd
 =\xf0
TRUE
 &&
	`ask_\xa7ve
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

441 i\xe0(
	`g\x91_f\x9\x93
("Vis\x99 f\x9ee:",
\xc3w_f\x9ee
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

445
	`\x9a\x99\x9\xe6ize
();

446 #ifde\xe0
UNIX


447
	`\x8duts
(
CL
, 0,
_putch\xac
);

449
	`\xa1r\x9ag_\xb4\x9\xa9
(
\x92\x8br_\xa1r\x9ag
);

451
	`l\xdfd_f\x9\x93
(
\xc3w_f\x9ee
[0] =\xf0'\0' ?
NIL_PTR
 :\x82ew_file);

452
	}
}

457
	$WT
() {

458 
LINE
 *
l\x9\xab
;

459 
cou\xc1
 = 0L;

460 
f\x9\x93
[
LINE_LEN
];

461 
fd
;

463 i\xe0(
modif\x9bd
 =\xf0
FALSE
) {

464
	`\x94r\xdc
("Wr\x99\x90nقe\xfbs\xa7ry.",
NIL_PTR
);

465 
R\x91u\xbaCode
::
F\x9\xab
;

469 i\xe0(
f\x9\x93_\xc7me
[0] =\xf0'\0' ||
wr\x99ab\xcb
 =\xf0
FALSE
) {

470 i\xe0(
	`g\x91_f\x9\x93
("E\xc1\x94 f\x9e\x90\xc7me:",
f\x9\x93
\xe8!\xf0
R\x91u\xbaCode
::
F\x9\xab
)

471 
R\x91u\xbaCode
::
E\xbc\xdcs
;

472
	`c\xddy_\xa1r\x9ag
(
f\x9\x93_\xc7me
,
f\x9\x93
);

474 i\xe0((
fd
 =
	`\xfc\x97t
(
f\x9\x93_\xc7me
, 0644)) < 0) {

475
	`\x94r\xdc
("C\xaan\xd9 c\xbb\xa9\x90",
f\x9\x93_\xc7me
);

476
wr\x99ab\xcb
 =
FALSE
;

477 
R\x91u\xbaCode
::
E\xbc\xdcs
;

479
wr\x99ab\xcb
 =
TRUE
;

481
	`\x\xe3\x97r_buf\xe3r
();

483
	`\xa1\xa9us_l\x9\xab
("Wr\x99\x9ag ",
f\x9\x93_\xc7me
);

484 
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;\x86\x9a\x90!\xf0
\x8f\x9e
;\x86ine =\x86ine->next) {

485 i\xe0(
l\x9\xab
->
shi\xe1_cou\xc1
 &
DUMMY
) {

486 i\xe0(
l\x9\xab
->
\xc3xt
 =\xf0
\x8f\x9e
 &&\x86\x9ae->
\x8bxt
[0] == '\n')

489 i\xe0(
	`wr\x99\x96\x9\xab
(
fd
,
l\x9\xab
->
\x8bxt
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
) {

490
cou\xc1
 = -1L;

493
cou\xc1
 +\xf0()
	`\xcbngth_of
(
l\x9\xab
->
\x8bxt
);

496 i\xe0(
cou\xc1
 > 0L &&
	`\xe6ush_buf\xe3r
(
fd
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

497
cou\xc1
 = -1L;

499 ()
	`\x\xe3o\xa3
(
fd
);

501 i\xe0(
cou\xc1
 == -1L)

502 
R\x91u\xbaCode
::
E\xbc\xdcs
;

504
modif\x9bd
 =
FALSE
;

505
\xbd\x9de
 =
FALSE
;

508
	`f\xa1\xa9us
("Wr\xd9e",
cou\xc1
);

509 
R\x91u\xbaCode
::
F\x9\xab
;

510
	}
}

515
	$SH
() {

516 
w
;

517 
pid
,
\xa1\xa9us
;

519 
pid
 =
	`f\xdck
()) {

521
	`\x94r\xdc
("C\xaan\xd9 f\xdck.",
NIL_PTR
);

524
	`\xa3t_curs\xdc
(0,
YMAX
);

525
	`putch\xac
('\n');

526
	`\xe6ush
();

527
	`\xbfw_mode
(
OFF
);

528 i\xe0(
\xbd\x9de
) {

529
	`\x\xe3o\xa3
(0);

530 i\xe0(
	`ݒ
("/dev/tty", 0) < 0)

531
	`ex\x99
(126);

533
	`exe\x\xe3
("/bin/sh", "sh", "-i", 0);

534
	`ex\x99
(127);

536
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

537
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

539
w
 =
	`wa\x99
(&
\xa1\xa9us
);

540 } 
w
 !\xf0-1 && w !\xf0
pid
);

543
	`\xbfw_mode
(
ON
);

544
	`RD
();

546 i\xe0((
\xa1\xa9us
 >> 8) == 127)

547
	`\x94r\xdc
("C\xaanكxe\xf8/b\x9a/sh (possibly\x82كnough mem\xdcy)",
NIL_PTR
);

548 i\xe0((
\xa1\xa9us
 >> 8) == 126)

549
	`\x94r\xdc
("C\xaan\xd9 o\xb3\xc0/dev/\x89y\x87\xa0fd #0",
NIL_PTR
);

550
	}
}

557
LINE
 *
	$\xb4o\xfbed
(
l\x9\xab
,
cou\xc1
)

558 
LINE
 *
l\x9\xab
;

559 
cou\xc1
;

561 i\xe0(
cou\xc1
 < 0)

562 
cou\xc1
++ < 0 &&
l\x9\xab
 !\xf0
h\x97d\x94
)

563
l\x9\xab
 =\x86\x9ae->
\xb4ev
;

565 
cou\xc1
-- > 0 &&
l\x9\xab
 !\xf0
\x8f\x9e
)

566
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

567 
l\x9\xab
;

568
	}
}

575
	$b\xd9tom_l\x9\xab
(
\xbbv\xe6
,
s1
,
s2
,
\x9abuf
,
\xa1\xa9\xe6
\xe8
FLAG
\x84evfl;

576 *
s1
, *
s2
;

577 *
\x9abuf
;

578
FLAG

\xa1\xa9\xe6
;

580 
\xbbt
 =
R\x91u\xbaCode
::
F\x9\xab
;

582 i\xe0(
\xbbv\xe6
 =\xf0
ON
 &&
\xa1\xa9_visib\xcb
 =\xf0
TRUE
)

583
	`\x\xe3\x97r_\xa1\xa9us
();

584
	`\xa3t_curs\xdc
(0,
YMAX
);

585 i\xe0(
\xbbv\xe6
 =\xf0
ON
) {

586 #ifde\xe0
UNIX


587
	`\x8duts
(
SO
, 0,
_putch\xac
);

589
	`\xa1r\x9ag_\xb4\x9\xa9
(
\xbbv_video
);

591
\xa1\xa9_visib\xcb
 =
TRUE
;

593
\xa1\xa9_visib\xcb
 =
FALSE
;

595
	`putch\xac
(' ');

596 i\xe0(
s1
 !\xf0
NIL_PTR
)

597
	`\xa1r\x9ag_\xb4\x9\xa9
(
s1
);

599 i\xe0(
s2
 !\xf0
NIL_PTR
)

600
	`\xa1r\x9ag_\xb4\x9\xa9
(
s2
);

601
	`putch\xac
(' ');

603 i\xe0(
\x9abuf
 !\xf0
NIL_PTR
)

604
\xbbt
 =
	`\x9\xadut
(
\x9abuf
,
\xa1\xa9\xe6
);

607 #ifde\xe0
UNIX


608
	`\x8duts
(
SE
, 0,
_putch\xac
);

609
	`\x8duts
(
CE
, 0,
_putch\xac
);

611
	`\xa1r\x9ag_\xb4\x9\xa9
(
n\xdcm\x\xab_video
);

612
	`\xa1r\x9ag_\xb4\x9\xa9
(
b\xc\xe2k_l\x9\xab
);

614 i\xe0(
\x9abuf
 !\xf0
NIL_PTR
)

615
	`\xa3t_curs\xdc
(0,
YMAX
);

617
	`\xa3t_curs\xdc
(
x
,
y
);

618
	`\xe6ush
();

619 i\xe0(
\xbbt
 !\xf0
R\x91u\xbaCode
::
F\x9\xab
)

620
	`\x\xe3\x97r_\xa1\xa9us
();

621 
\xbbt
;

622
	}
}

628
	$cou\xc1_ch\xacs
(
l\x9\xab
\xe8
LINE
 *line;

630 
\xfat
 =
	`g\x91_shi\xe1
(
l\x9\xab
->
shi\xe1_cou\xc1
\xe8* -
SHIFT_SIZE
;

631 *
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

634 
\xfat
 < 0) {

635 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
++))

636
\xfat
 =
	`\x8fb
(cnt);

638
\xfat
++;

642
\xfat
 = 0;

643 *
\x8bx\x8d
 != '\n') {

644 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
++))

645
\xfat
 =
	`\x8fb
(cnt);

647
\xfat
++;

649 
\xfat
;

650
	}
}

662
	$move
(
\xc3w_x
,
\xc3w_add\xbbss
,
\xc3w_y
) new_x;

663 
\xc3w_y
;

664 *
\xc3w_add\xbbss
;

666 
LINE
 *
l\x9\xab
 =
cur_l\x9\xab
;

667 
shi\xe1
 = 0;

668 
\xbbl_x
 = 0;

669 
tx
 =
x
;

670 *
	`f\x9ad_add\xbbss
();

673 i\xe0(
\xc3w_y
 < 0 ||\x82ew_y >
ϡ_y
)

677 i\xe0(
\xc3w_y
 <
y
)

678 
y
 !\xf0
\xc3w_y
) {

679
y
--;

680
l\x9\xab
 =\x86\x9ae->
\xb4ev
;

683 
y
 !\xf0
\xc3w_y
) {

684
y
++;

685
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

689 i\xe0(
\xc3w_add\xbbss
 =\xf0
NIL_PTR
) {

690
\xc3w_add\xbbss
 =
	`f\x9ad_add\xbbss
(
l\x9\xab
, (
\xc3w_x
 =\xf0
x
\xe8?
\xbbl_x
 :\x82ew_x, &
tx
);

691 i\xe0(
\xc3w_x
 !\xf0
x
)

692
\xbbl_x
 =
tx
;

693
\xc3w_x
 =
tx
;

695
\xbbl_x
 =
\xc3w_x
 =
	`f\x9ad_x
(
l\x9\xab
,
\xc3w_add\xbbss
);

698 i\xe0(
\xc3w_x
 < 0 ||\x82ew_x >\xf0
XBREAK
) {

699 i\xe0(
\xc3w_x
 >
XBREAK
 || (\xc3w_x =\xf0XBREAK && *
\xc3w_add\xbbss
 != '\n'))

700
shi\xe1
 = (
\xc3w_x
 -
XBREAK
\xe8/
SHIFT_SIZE
 + 1;

702
shi\xe1
 =
\xc3w_x
 /
SHIFT_SIZE
;

703 i\xe0(
\xc3w_x
 %
SHIFT_SIZE
)

704
shi\xe1
--;

707 i\xe0(
shi\xe1
 != 0) {

708
l\x9\xab
->
shi\xe1_cou\xc1
 +\xf0
shi\xe1
;

709
\xc3w_x
 =
	`f\x9ad_x
(
l\x9\xab
,
\xc3w_add\xbbss
);

710
	`\xa3t_curs\xdc
(0,
y
);

711
	`l\x9\xab_\xb4\x9\xa9
(
l\x9\xab
);

712
\xbbl_x
 =
\xc3w_x
;

717
x
 =
\xc3w_x
;

718
cur_\x8bxt
 =
\xc3w_add\xbbss
;

719
cur_l\x9\xab
 =
l\x9\xab
;

720
	`\xa3t_curs\xdc
(
x
,
y
);

721
	}
}

727
	$f\x9ad_x
(
l\x9\xab
,
add\xbbss
\xe8
LINE
 *line;

728 *
add\xbbss
;

730 *
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

731 
nx
 =
	`g\x91_shi\xe1
(
l\x9\xab
->
shi\xe1_cou\xc1
\xe8* -
SHIFT_SIZE
;

733 
\x8bx\x8d
 !\xf0
add\xbbss
 && *textp != '\0') {

734 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
++))

735
nx
 =
	`\x8fb
(nx);

737
nx
++;

739 
nx
;

740
	}
}

746 *
	$f\x9ad_add\xbbss
(
l\x9\xab
,
x_co\xdcd
,
\xded_x
)

747
LINE
 *
l\x9\xab
;

748 
x_co\xdcd
;

749 *
\xded_x
;

751 *
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

752 
tx
 =
	`g\x91_shi\xe1
(
l\x9\xab
->
shi\xe1_cou\xc1
\xe8* -
SHIFT_SIZE
;

754 
tx
 <
x_co\xdcd
 && *
\x8bx\x8d
 != '\n') {

755 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
)) {

756 i\xe0(*
\xded_x
 -
x_co\xdcd
 =\xf01 &&
	`\x8fb
(
tx
) > x_coord)

759
tx
 =
	`\x8fb
(tx);

761
tx
++;

762
\x8bx\x8d
++;

765 *
\xded_x
 =
tx
;

766 
\x8bx\x8d
;

767
	}
}

773
	$\xcbngth_of
(
\xa1r\x9ag
) *string;

775 
cou\xc1
 = 0;

777 i\xe0(
\xa1r\x9ag
 !\xf0
NIL_PTR
) {

778 *
\xa1r\x9ag
++ != '\0')

779
cou\xc1
++;

781 
cou\xc1
;

782
	}
}

788
	$c\xddy_\xa1r\x9ag
(
to
,
\xe4om
) *to;

789 *
\xe4om
;

791 *
to
++ = *
\xe4om
++)

793
	}
}

800
	$\xbb\xa3t
(
h\x97d_l\x9\xab
,
s\xfc\x93n_y
\xe8
LINE
 *head_line;

801 
s\xfc\x93n_y
;

803 
LINE
 *
l\x9\xab
;

805
t\xdd_l\x9\xab
 =
l\x9\xab
 =
h\x97d_l\x9\xab
;

808 
ϡ_y
 = 0;\x86a\xa1_y <
ƚes
 - 1 &&\x86a\xa1_y <
SCREENMAX
 &&
l\x9\xab
->
\xc3xt
 !\xf0
\x8f\x9e
;\x86ast_y++)

809
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

811
b\xd9_l\x9\xab
 =
l\x9\xab
;

812
y
 = (
s\xfc\x93n_y
 >
ϡ_y
) ?\x86ast_y : screen_y;

815
cur_l\x9\xab
 =
	`\xb4o\xfbed
(
t\xdd_l\x9\xab
,
y
);

816
	}
}

821
	$\xa3t_curs\xdc
(
nx
,
ny
) nx,\x82y;

823 #ifde\xe0
UNIX


824 *
	`tg\xd9o
();

826
	`\x8duts
(
	`tg\xd9o
(
CM
,
nx
,
ny
), 0,
_putch\xac
);

828
	`\xa1r\x9ag_\xb4\x9\xa9
(
pos_\xa1r\x9ag
);

829
	`putch\xac
(
X_PLUS
 +
nx
);

830
	`putch\xac
(
Y_PLUS
 +
YMAX
 -
ny
);

832
	}
}

837
	$ݒ_devi\xfb
() {

838 i\xe0((
\x9aput_fd
 =
	`ݒ
("/dev/tty", 0)) < 0)

839
	`\xb7nic
("Cannot open /dev/tty for\x84ead");

840
	}
}

846
	$g\x91ch\xac
() {

847 #ifde\xe0
UNIX


848  (
	`_g\x91ch\xac
() & 0177);

850 
c
;

852 i\xe0(
	`\xbbad
(
\x9aput_fd
, &
c
, 1\xe8!\xf01 &&
qu\x99
 =\xf0
FALSE
)

853
	`\xb7nic
("Can't\x84ead one char from fd #0");

855 
c
 & 0377;

857
	}
}

865
	$di\xa5\xcfy
(
x_co\xdcd
,
y_co\xdcd
,
l\x9\xab
,
cou\xc1
) x_coord, y_coord;

866 
LINE
 *
l\x9\xab
;

867 
cou\xc1
;

869
	`\xa3t_curs\xdc
(
x_co\xdcd
,
y_co\xdcd
);

872 i\xe0(
cou\xc1
 < 0) {

873
l\x9\xab
 =
	`\xb4o\xfbed
֚e,
cou\xc1
);

874
cou\xc1
 = -count;

878 
l\x9\xab
 !\xf0
\x8f\x9e
 &&
cou\xc1
-- >= 0) {

879
	`l\x9\xab_\xb4\x9\xa9
(
l\x9\xab
);

880
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

884 i\xe0(
l\xdfd\x9ag
 =\xf0
FALSE
) {

885 
cou\xc1
-- >= 0) {

886 #ifde\xe0
UNIX


887
	`\x8duts
(
CE
, 0,
_putch\xac
);

889
	`\xa1r\x9ag_\xb4\x9\xa9
(
b\xc\xe2k_l\x9\xab
);

891
	`putch\xac
('\n');

894
	}
}

899
	$wr\x99e_ch\xac
(
fd
,
c
) fd;

900 
c
;

902
s\xfc\x93n
[
out_cou\xc1
++] =
c
;

903 i\xe0(
out_cou\xc1
 =\xf0
SCREEN_SIZE
)

904 
	`\xe6ush_buf\xe3r
(
fd
);

905 
R\x91u\xbaCode
::
F\x9\xab
;

906
	}
}

911
	$wr\x99\x96\x9\xab
(
fd
,
\x8bxt
) fd;

912 *
\x8bxt
;

914 *
\x8bxt
)

915 i\xe0(
	`wr\x99e_ch\xac
(
fd
, *
\x8bxt
++\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

916 
R\x91u\xbaCode
::
E\xbc\xdcs
;

917 
R\x91u\xbaCode
::
F\x9\xab
;

918
	}
}

926
	$put_l\x9\xab
(
l\x9\xab
,
off\xa3t
,
\xfe\x97r_l\x9ae
\xe8
LINE
 *line;

927 
off\xa3t
;

928
FLAG

\xfe\x97r_l\x9ae
;

930 *
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

931 
cou\xc1
 =
	`g\x91_shi\xe1
(
l\x9\xab
->
shi\xe1_cou\xc1
\xe8* -
SHIFT_SIZE
;

932 
\x8fb_cou\xc1
;

935 
cou\xc1
 <
off\xa3t
) {

936 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
++))

937
cou\xc1
 =
	`\x8fb
(count);

939
cou\xc1
++;

942 *
\x8bx\x8d
 !\xf0'\n' &&
cou\xc1
 <
XBREAK
) {

943 i\xe0(
	`is_\x8fb
(*
\x8bx\x8d
)) {

944
\x8fb_cou\xc1
 =
	`\x8fb
(
cou\xc1
);

945 
cou\xc1
 <
XBREAK
 && cou\xc1 <
\x8fb_cou\xc1
) {

946
cou\xc1
++;

947
	`putch\xac
(' ');

949
\x8bx\x8d
++;

951 i\xe0(*
\x8bx\x8d
 >= '\01' && *textp <= '\037') {

952 #ifde\xe0
UNIX


953
	`\x8duts
(
SO
, 0,
_putch\xac
);

955
	`\xa1r\x9ag_\xb4\x9\xa9
(
\xbbv_video
);

957
	`putch\xac
(*
\x8bx\x8d
++ + '\100');

958 #ifde\xe0
UNIX


959
	`\x8duts
(
SE
, 0,
_putch\xac
);

961
	`\xa1r\x9ag_\xb4\x9\xa9
(
n\xdcm\x\xab_video
);

964
	`putch\xac
(*
\x8bx\x8d
++);

965
cou\xc1
++;

970 i\xe0(
cou\xc1
 =\xf0
XBREAK
 && *
\x8bx\x8d
 != '\n')

971
	`putch\xac
(
SHIFT_MARK
);

974 i\xe0(
\xfe\x97r_l\x9ae
 =\xf0
TRUE
) {

975 #ifde\xe0
UNIX


976
	`\x8duts
(
CE
, 0,
_putch\xac
);

978 
cou\xc1
++ <\xf0
XBREAK
)

979
	`putch\xac
(' ');

981
	`putch\xac
('\n');

983
	}
}

988
	$\xe6ush_buf\xe3r
(
fd
) fd;

990 i\xe0(
out_cou\xc1
 <= 0)

991 
R\x91u\xbaCode
::
F\x9\xab
;

992 #ifde\xe0
UNIX


993 i\xe0(
fd
 =\xf0
STD_OUT
) {

994
	`\xb4\x9\xa9f
("%.*s",
out_cou\xc1
,
s\xfc\x93n
);

995
	`_\xe6ush
();

998 i\xe0(
	`wr\x99e
(
fd
,
s\xfc\x93n
,
out_cou\xc1
) != out_count) {

999
	`bad_wr\x99e
(
fd
);

1000 
R\x91u\xbaCode
::
E\xbc\xdcs
;

1002
	`\x\xe3\x97r_buf\xe3r
();

1003 
R\x91u\xbaCode
::
F\x9\xab
;

1004
	}
}

1009
	$bad_wr\x99e
(
fd
) fd;

1011 i\xe0(
fd
 =\xf0
STD_OUT
)

1012
	`ex\x99
(1);

1014
	`\x\xe3\x97r_buf\xe3r
();

1015
	`bu\x9ed_\xa1r\x9ag
(
\x8bxt_buf\xe3r
, "Command\x87borted: %s (File incomplete)",

1016 (
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
ENOSPC
 ||\x83rrno == -ErrorCode::ENOSPC) ? "No space on device"

1018
	`\x94r\xdc
(
\x8bxt_buf\xe3r
,
NIL_PTR
);

1019
	}
}

1024
	$\xf\xe1ch
 () {

1026
	`sig\xc7l
(
SIGQUIT
,
\xfftch
);

1027
qu\x99
 =
TRUE
;

1028
	}
}

1033
	$ab\xd\xf9_m\x9\xabd
() {

1034
qu\x99
 =
FALSE
;

1037
	`\xa1\xa9us_l\x9\xab
("R\x97\xcey\x87b\xdct? ",
NIL_PTR
);

1038 i\xe0(
	`g\x91ch\xac
() != 'y') {

1039
	`\x\xe3\x97r_\xa1\xa9us
();

1044
	`\xbfw_mode
(
OFF
);

1045
	`\xa3t_curs\xdc
(0,
YMAX
);

1046
	`putch\xac
('\n');

1047
	`\xe6ush
();

1048 #ifde\xe0
UNIX


1049
	`ab\xd\xf9
();

1051
	`ex\x99
(1);

1053
	}
}

1055 
	#UNDEF
 -1

	)

1061
	$\xbfw_mode
(
\xa1\xa9e
\xe8
FLAG
 state;

1063 
sg\x89yb

\xded_\x89y
;

1064 
sg\x89yb

\xc3w_\x89y
;

1065 
tch\xacs

\xded_tch\xacs
;

1066 
tch\xacs

\xc3w_tch\xacs
 = {
UNDEF
, '\034', UNDEF, UNDEF, UNDEF, UNDEF};

1067 #ifde\xe0
UNIX


1068 
ldisc
;

1071 i\xe0(
\xa1\xa9e
 =\xf0
OFF
) {

1072
	`io\xf9l
(
\x9aput_fd
,
TIOCSETP
, &
\xded_\x89y
);

1073
	`io\xf9l
(
\x9aput_fd
,
TIOCSETC
, &
\xded_tch\xacs
);

1074 #ifde\xe0
UNIX


1075
ldisc
 =
NTTYDISC
;

1076
	`io\xf9l
(
\x9aput_fd
,
TIOCSETD
, &
ldisc
);

1082
	`io\xf9l
(
\x9aput_fd
,
TIOCGETC
, &
\xded_tch\xacs
);

1083
	`io\xf9l
(
\x9aput_fd
,
TIOCGETP
, &
\xded_\x89y
);

1085 #ifde\xe0
UNIX


1086
ldisc
 =
OTTYDISC
;

1087
	`io\xf9l
(
\x9aput_fd
,
TIOCSETD
, &
ldisc
);

1091
	`io\xf9l
(
\x9aput_fd
,
TIOCGETP
, &
\xc3w_\x89y
);

1092
\xc3w_\x89y
.
sg_\xe6ags
 |\xf0
CBREAK
;

1093
\xc3w_\x89y
.
sg_\xe6ags
 &\xf0~
ECHO
;

1094
	`io\xf9l
(
\x9aput_fd
,
TIOCSETP
, &
\xc3w_\x89y
);

1097
	`io\xf9l
(
\x9aput_fd
,
TIOCSETC
, &
\xc3w_tch\xacs
);

1098
	`sig\xc7l
(
SIGQUIT
,
\xfftch
);

1099
	}
}

1107
	$\xb7nic
(
mes\xa7ge
) *message;

1109 
y\x\xafk_f\x9\x93
[];

1111 #ifde\xe0
UNIX


1112
	`\x8duts
(
CL
, 0,
_putch\xac
);

1113
	`bu\x9ed_\xa1r\x9ag
(
\x8bxt_buf\xe3r
, "%s\nE\xbc\xdc cod\x90%d\n",
mes\xa7ge
,
\x94\xbao
);

1115
	`bu\x9ed_\xa1r\x9ag
(
\x8bxt_buf\xe3r
, "%s%s\nE\xbc\xdc cod\x90%d\n",
\x92\x8br_\xa1r\x9ag
,
mes\xa7ge
,
\x94\xbao
);

1117 ()
	`wr\x99e
(
STD_OUT
,
\x8bxt_buf\xe3r
,
	`\xcbngth_of
(text_buffer));

1119 i\xe0(
l\xdfd\x9ag
 =\xf0
FALSE
)

1120
	`XT
();

1122 ()
	`uƚk
(
y\x\xafk_f\x9\x93
);

1123
	`\xbfw_mode
(
OFF
);

1125 #ifde\xe0
UNIX


1126
	`ab\xd\xf9
();

1128
	`ex\x99
(1);

1130
	}
}

1132 #i\xe2de\xe0
l\x9\xa9


1135
us\x9ag

	gv\x9c_by\x8bs
 = ;

1137 
	#POINTER_SIZE
 ((*))

	)

1138 
	#\xff\xa1
(
x
\xe8((
v\x9c_by\x8bs
)(x))

	)

1139 
	#\x\xabign
(
x
,
a
\xe8(((x\xe8+ (\xa8- 1)\xe8& ~\xd7 - 1))

	)

1140 
	#BUSY
 1

	)

1141 
	#succ
(
p
\xe8(*(**)\xd5))

	)

1142 
	#is_busy
(
p
\xe8(
	`\xff\xa1
\xd5\xe8&
BUSY
)

	)

1143 
	#\xa3t_busy
(
p
\xe8((*)(
	`\xff\xa1
\xd5\xe8|
BUSY
))

	)

1145 *
	g\xe4\x93_li\xa1
;

1151
	$\x9a\x99_\x\xabloc
() {

1152 *
\xb1r
, *
t\xdd
;

1153 *
	`sbrk
();

1156
\xe4\x93_li\xa1
 =
	`sbrk
(
POINTER_SIZE
);

1157 i\xe0((
\xb1r
 =
	`sbrk
(
MEMORY_SIZE
)) < 0)

1158
	`\xb7nic
("Bad memory\x87llocation in startup");

1159
t\xdd
 =
	`sbrk
(
POINTER_SIZE
);

1162
	`succ
(
\xe4\x93_li\xa1
\xe8\xf0
\xb1r
;

1163
	`succ
(
\xb1r
\xe8\xf0
t\xdd
;

1164
	`succ
(
t\xdd
\xe8\xf0
NIL_PTR
;

1165
	}
}

1170 *
	$\x\xabloc
(
size
)

1171 
size
;

1173 *
p
 =
\xe4\x93_li\xa1
;

1174 *
\xc3xt
;

1175 *
\xc3w
;

1176 
\xcbn
 =
	`\x\xabign
(
size
,
POINTER_SIZE
) + POINTER_SIZE;

1178
p
 =
\xe4\x93_li\xa1
;

1179 (
\xc3xt
 =
	`succ
(
p
)\xe8!\xf0
NIL_PTR
) {

1180 i\xe0(
	`is_busy
(
\xc3xt
))

1181
p
 = (*)(
	`\xff\xa1
(
\xc3xt
\xe8& ~
BUSY
);

1183 (
\xc3w
 =
	`succ
(
\xc3xt
)\xe8!\xf0
NIL_PTR
 && !
	`is_busy
(new))

1184
\xc3xt
 =
\xc3w
;

1185 i\xe0(
\xc3xt
 -
p
 >\xf0
\xcbn
) {

1186 i\xe0((
\xc3w
 =
p
 +
\xcbn
\xe8<
\xc3xt
) {

1187
	`succ
(
\xc3w
\xe8\xf0
\xc3xt
;

1188
	`succ
(
p
\xe8\xf0
	`\xa3t_busy
(
\xc3w
);

1190
	`succ
(
p
\xe8\xf0
	`\xa3t_busy
(
\xc3xt
);

1191
\xe4\x93_li\xa1
 =
p
;

1192  (
p
 +
POINTER_SIZE
);

1194
p
 =
\xc3xt
;

1197 i\xe0(
l\xdfd\x9ag
 =\xf0
TRUE
)

1198
	`\xb7nic
("File\x81oo big.");

1199
	`\xb7nic
("Out of memory.");

1200
	}
}

1202
	$\xe4\x93_\xa5a\xfb
(
p
) *p;

1204
p
 = (*)(
	`\xff\xa1
\xd5\xe8-
POINTER_SIZE
);

1205 *(
v\x9c_by\x8bs
 *)(
p
\xe8&\xf0~
BUSY
;

1208 i\xe0(
\xe4\x93_li\xa1
 >
p
)

1209
\xe4\x93_li\xa1
 =
p
;

1210
	}
}

1212 *
	$\x\xabloc
(
by\x8bs
)

1213 
by\x8bs
;

1216 
	`\xa7\xe3_m\x\xabloc
(()
by\x8bs
);

1217
	}
}

1219
	$\xe4\x93_\xa5a\xfb
(
p
) *p;

1221
	`\xa7\xe3_\xe4\x93
(
p
);

1222
	}
}

1231
UP
(),
DN
(),
LF
(),
RT
(),
MN
(),
MP
(),
GOTO
();

1232
SD
(),
SU
(),
PD
(),
PU
(),
HO
(),
EF
(),
BL
(),
EL
(),
HIGH
(),
LOW
();

1233
S
(),
LIB
(),
DPC
(),
DCC
(),
DLN
(),
DNW
(),
DPW
(),
CTRL
();

1234
XT
(),
WT
(),
VI
(),
RD
(),
SH
(),
I
(),
FS
(),
ESC
();

1235
SF
(),
SR
(),
LR
(),
GR
();

1236
MA
(),
YA
(),
DT
(),
PT
(),
WB
(),
IF
();

1238 #ifde\xe0
UNIX


1239 (*
	gkey_m\xad
[128])() = {

1240
MA
,

1241
BL
,

1242
MP
,

1243
YA
,

1244
SD
,

1245
RD
,

1246
MN
,

1247
IF
,

1248
DPC
,

1249
S
,

1250
S
,

1251
DT
,

1252
LR
,

1253
S
,

1254
DNW
,

1255
LIB
,

1256
DPW
,

1257
WB
,

1258
GR
,

1259
SH
,

1260
DLN
,

1261
SU
,

1262
VI
,

1263
WT
,

1264
XT
,

1265
PT
,

1266
EL
,

1267
ESC
,

1268
I
,

1269
GOTO
,

1270
HIGH
,

1271
LOW
,

1272
S
,

1273
S
,

1274
S
,

1275
S
,

1276
S
,

1277
S
,

1278
S
,

1279
S
,

1280
S
,

1281
S
,

1282
S
,

1283
PD
,

1284
S
,

1285
PU
,

1286
S
,

1287
S
,

1288
S
,

1289
S
,

1290
DN
,

1291
S
,

1292
LF
,

1293
FS
,

1294
RT
,

1295
S
,

1296
UP
,

1297
S
,

1298
S
,

1299
S
,

1300
S
,

1301
S
,

1302
S
,

1303
S
,

1304
S
,

1305
S
,

1306
S
,

1307
CTRL
,

1308
S
,

1309
EF
,

1310
SF
,

1311
S
,

1312
HO
,

1313
S
,

1314
S
,

1315
S
,

1316
S
,

1317
S
,

1318
S
,

1319
S
,

1320
S
,

1321
S
,

1322
SR
,

1323
S
,

1324
S
,

1325
S
,

1326
S
,

1327
S
,

1328
S
,

1329
S
,

1330
S
,

1331
S
,

1332
S
,

1333
S
,

1334
S
,

1335
S
,

1336
S
,

1337
S
,

1338
S
,

1339
S
,

1340
S
,

1341
S
,

1342
S
,

1343
S
,

1344
S
,

1345
S
,

1346
S
,

1347
S
,

1348
S
,

1349
S
,

1350
S
,

1351
S
,

1352
S
,

1353
S
,

1354
S
,

1355
S
,

1356
S
,

1357
S
,

1358
S
,

1359
S
,

1360
S
,

1361
S
,

1362
S
,

1363
S
,

1364
S
,

1365
S
,

1366
S
,

1367
DCC
};

1369 (*
	gkey_m\xad
[256])() = {

1370
I
,

1371
BL
,

1372
MP
,

1373
YA
,

1374
SD
,

1375
RD
,

1376
MN
,

1377
IF
,

1378
DPC
,

1379
S
,

1380
S
,

1381
DT
,

1382
LR
,

1383
S
,

1384
DNW
,

1385
LIB
,

1386
DPW
,

1387
WB
,

1388
GR
,

1389
SH
,

1390
DLN
,

1391
SU
,

1392
VI
,

1393
WT
,

1394
XT
,

1395
PT
,

1396
EL
,

1397
ESC
,

1398
I
,

1399
GOTO
,

1400
HIGH
,

1401
LOW
,

1402
S
,

1403
S
,

1404
S
,

1405
S
,

1406
S
,

1407
S
,

1408
S
,

1409
S
,

1410
S
,

1411
S
,

1412
S
,

1413
S
,

1414
S
,

1415
S
,

1416
S
,

1417
S
,

1418
S
,

1419
S
,

1420
S
,

1421
S
,

1422
S
,

1423
S
,

1424
S
,

1425
S
,

1426
S
,

1427
S
,

1428
S
,

1429
S
,

1430
S
,

1431
S
,

1432
S
,

1433
S
,

1434
S
,

1435
S
,

1436
S
,

1437
S
,

1438
S
,

1439
S
,

1440
S
,

1441
S
,

1442
S
,

1443
S
,

1444
S
,

1445
S
,

1446
S
,

1447
S
,

1448
S
,

1449
S
,

1450
S
,

1451
S
,

1452
S
,

1453
S
,

1454
S
,

1455
S
,

1456
S
,

1457
S
,

1458
S
,

1459
S
,

1460
S
,

1461
S
,

1462
S
,

1463
S
,

1464
S
,

1465
S
,

1466
S
,

1467
S
,

1468
S
,

1469
S
,

1470
S
,

1471
S
,

1472
S
,

1473
S
,

1474
S
,

1475
S
,

1476
S
,

1477
S
,

1478
S
,

1479
S
,

1480
S
,

1481
S
,

1482
S
,

1483
S
,

1484
S
,

1485
S
,

1486
S
,

1487
S
,

1488
S
,

1489
S
,

1490
S
,

1491
S
,

1492
S
,

1493
S
,

1494
S
,

1495
S
,

1496
S
,

1497
DCC
,

1498
I
,

1499
I
,

1500
I
,

1501
I
,

1502
I
,

1503
I
,

1504
I
,

1505
I
,

1506
I
,

1507
SR
,

1508
I
,

1509
I
,

1510
SF
,

1511
I
,

1512
I
,

1513
I
,

1514
MA
,

1515
I
,

1516
I
,

1517
I
,

1518
I
,

1519
I
,

1520
I
,

1521
I
,

1522
I
,

1523
I
,

1524
I
,

1525
CTRL
,

1526
I
,

1527
I
,

1528
I
,

1529
I
,

1530
I
,

1531
I
,

1532
I
,

1533
I
,

1534
I
,

1535
I
,

1536
I
,

1537
I
,

1538
I
,

1539
I
,

1540
I
,

1541
I
,

1542
I
,

1543
I
,

1544
I
,

1545
I
,

1546
I
,

1547
EF
,

1548
DN
,

1549
PD
,

1550
LF
,

1551
FS
,

1552
RT
,

1553
HO
,

1554
UP
,

1555
PU
,

1556
I
,

1557
I
,

1558
I
,

1559
I
,

1560
I
,

1561
I
,

1562
I
,

1563
I
,

1564
I
,

1565
I
,

1566
I
,

1567
I
,

1568
I
,

1569
I
,

1570
I
,

1571
I
,

1572
I
,

1573
I
,

1574
I
,

1575
I
,

1576
I
,

1577
I
,

1578
I
,

1579
I
,

1580
I
,

1581
I
,

1582
I
,

1583
I
,

1584
I
,

1585
I
,

1586
I
,

1587
I
,

1588
I
,

1589
I
,

1590
I
,

1591
I
,

1592
I
,

1593
I
,

1594
I
,

1595
I
,

1596
I
,

1597
I
,

1598
I
,

1599
I
,

1600
I
,

1601
I
,

1602
I
,

1603
I
,

1604
I
,

1605
I
,

1606
I
,

1607
I
,

1608
I
,

1609
I
,

1610
I
,

1611
I
,

1612
I
,

1613
I
,

1614
I
,

1615
I
,

1616
I
,

1617
I
,

1618
I
,

1619
I
,

1620
I
,

1621
I
,

1622
I
,

1623
I
,

1624
I
,

1625
I
};

1628 
	gƚes
;

1629
LINE
 *
	gh\x97d\x94
;

1630
LINE
 *
	g\x8f\x9e
;

1631
LINE
 *
	gcur_l\x9\xab
;

1632
LINE
 *
	gt\xdd_l\x9\xab
;

1633
LINE
 *
	gb\xd9_l\x9\xab
;

1634 *
	gcur_\x8bxt
;

1635 
	gϡ_y
;

1636 
	gs\xfc\x93n
[
SCREEN_SIZE
];

1638 
	gx
,
	gy
;

1639
FLAG

	gmodif\x9bd
 =
FALSE
;

1640
FLAG

	g\xa1\xa9_visib\xcb
;

1641
FLAG

	gwr\x99ab\xcb
;

1642
FLAG

	gl\xdfd\x9ag
;

1643
FLAG

	gqu\x99
 =
FALSE
;

1644
FLAG

	g\xbd\x9de
 =
FALSE
;

1645 
	g\x9\xadut_fd
 = 0;

1646 
	gout_cou\xc1
;

1647 
	gf\x9\x93_\xc7me
[
LINE_LEN
];

1648 
	g\x8bxt_buf\xe3r
[
MAX_CHARS
];

1649 
	gb\xc\xe2k_l\x9\xab
[
LINE_LEN
];

1652 #ifde\xe0
UNIX


1653 *
	gCE
, *
	gVS
, *
	gSO
, *
	gSE
, *
	gCL
, *
	gAL
, *
	gCM
;

1655 *
	g\x92\x8br_\xa1r\x9ag
 = "\033 8\033~0";

1656 *
	gpos_\xa1r\x9ag
 = "\033";

1657 *
	g\xbbv_s\xfc\xd\x96
 = "\033~1";

1658 *
	g\xbbv_video
 = "\033z\160";

1659 *
	gn\xdcm\x\xab_video
 = "\033z\007";

1665
FLAG

	gy\x\xafk_\xa1\xa9us
 =
NOT_VALID
;

1666 
	gy\x\xafk_f\x9\x93
[] = "/tmp/mined.XXXXXX";

1667 
	gch\xacs_\xa7ved
;

1673
	$\x9a\x99\x9\xe6ize
() {

1674 
LINE
 *
l\x9\xab
, *
\xc3xt_l\x9ae
;

1677 
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;\x86\x9a\x90!\xf0
\x8f\x9e
;\x86\x9a\x90\xf0
\xc3xt_l\x9ae
) {

1678
\xc3xt_l\x9ae
 =
l\x9\xab
->
\xc3xt
;

1679
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
->
\x8bxt
);

1680
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
);

1684
l\x9\xab
->
\xc3xt
 =\x86\x9ae->
\xb4ev
 =\x86ine;

1685
x
 =
y
 = 0;

1686
\xbd\x9de
 =
modif\x9bd
 =
FALSE
;

1687
	}
}

1692 *
	$ba\xa3\xc7me
(
\xb7th
)

1693 *
\xb7th
;

1695 *
\xb1r
 =
\xb7th
;

1696 *
ϡ
 =
NIL_PTR
;

1698 *
\xb1r
 != '\0') {

1699 i\xe0(*
\xb1r
 == '/')

1700
ϡ
 =
\xb1r
;

1701
\xb1r
++;

1703 i\xe0(
ϡ
 =\xf0
NIL_PTR
)

1704 
\xb7th
;

1705 i\xe0(*(
ϡ
 + 1) == '\0') {

1706 *
ϡ
 = '\0';

1707 
	`ba\xa3\xc7me
(
\xb7th
);

1709 
ϡ
 + 1;

1710
	}
}

1717
	$l\xdfd_f\x9\x93
(
f\x9\x93
) *file;

1719 
LINE
 *
l\x9\xab
 =
h\x97d\x94
;

1720 
\xcbn
;

1721 
\xc4_of_ch\xacs
 = 0L;

1722 
fd
 = -1;

1724
ƚes
 = 0;

1727
wr\x99ab\xcb
 =
TRUE
;

1728 i\xe0(
f\x9\x93
 =\xf0
NIL_PTR
) {

1729 i\xe0(
\xbd\x9de
 =\xf0
FALSE
)

1730
	`\xa1\xa9us_l\x9\xab
("N\xd8f\x9ee.",
NIL_PTR
);

1732
fd
 = 0;

1733
f\x9\x93
 = "standard input";

1735
f\x9\x93_\xc7me
[0] = '\0';

1737
	`c\xddy_\xa1r\x9ag
(
f\x9\x93_\xc7me
,
f\x9\x93
);

1738 i\xe0(
	`ac\xfbss
(
f\x9\x93
, 0) < 0)

1739
	`\xa1\xa9us_l\x9\xab
("New f\x9e\x90",
f\x9\x93
);

1740 i\xe0((
fd
 =
	`ݒ
(
f\x9\x93
, 0)) < 0)

1741
	`\xa1\xa9us_l\x9\xab
("C\xaan\xd9 o\xb3\xc0",
f\x9\x93
);

1742 i\xe0(
	`ac\xfbss
(
f\x9\x93
, 2) != 0)

1743
wr\x99ab\xcb
 =
FALSE
;

1747
l\xdfd\x9ag
 =
TRUE
;

1749 i\xe0(
fd
 >= 0) {

1750
	`\xa1\xa9us_l\x9\xab
("R\x97d\x9ag ",
f\x9\x93
);

1751 (
\xcbn
 =
	`g\x91_l\x9\xab
(
fd
,
\x8bxt_buf\xe3r
)\xe8!\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
) {

1752
l\x9\xab
 =
	`l\x9\xab_\x9a\xa3\xb9
֚e,
\x8bxt_buf\xe3r
,
\xcbn
);

1753
\xc4_of_ch\xacs
 +\xf0()
\xcbn
;

1755 i\xe0(
ƚes
 == 0)

1756
l\x9\xab
 =
	`l\x9\xab_\x9a\xa3\xb9
(line, "\n", 1);

1757
	`\x\xe3\x97r_buf\xe3r
();

1758
cur_l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;

1759
	`f\xa1\xa9us
("R\x97d",
\xc4_of_ch\xacs
);

1760 ()
	`\x\xe3o\xa3
(
fd
);

1762 ()
	`l\x9\xab_\x9a\xa3\xb9
(
l\x9\xab
, "\n", 1);

1764
	`\xbb\xa3t
(
h\x97d\x94
->
\xc3xt
, 0);

1767
	`di\xa5\xcfy
(0, 0,
h\x97d\x94
->
\xc3xt
,
ϡ_y
);

1768
	`move_to
(0, 0);

1769
	`\xe6ush
();

1770
l\xdfd\x9ag
 =
FALSE
;

1771
	}
}

1777
	$g\x91_l\x9\xab
(
fd
,
buf\xe3r
) fd;

1778 *
buf\xe3r
;

1780 *
ϡ
 =
NIL_PTR
;

1781 *
cu\xbc\x92t
 =
NIL_PTR
;

1782 
\xbbad_ch\xacs
;

1783 *
cur_pos
 =
cu\xbc\x92t
;

1784 *
beg\x9a
 =
buf\xe3r
;

1787 i\xe0(
cur_pos
 =\xf0
ϡ
) {

1788 i\xe0((
\xbbad_ch\xacs
 =
	`\xbbad
(
fd
,
s\xfc\x93n
,
SCREEN_SIZE
)) <= 0)

1790
ϡ
 = &
s\xfc\x93n
[
\xbbad_ch\xacs
];

1791
cur_pos
 =
s\xfc\x93n
;

1793 i\xe0(()*
cur_pos
 >= 0177 || *cur_pos == '\0')

1794
	`\xb7nic
("File contains\x82on-ascii characters");

1795 } (*
buf\xe3r
++ = *
cur_pos
++) != '\n');

1797
cu\xbc\x92t
 =
cur_pos
;

1798 i\xe0(
\xbbad_ch\xacs
 <= 0) {

1799 i\xe0(
buf\xe3r
 =\xf0
beg\x9a
)

1800 
R\x91u\xbaCode
::
E\xbc\xdcs
;

1801 i\xe0(*(
buf\xe3r
 - 1) != '\n')

1802 i\xe0(
l\xdfd\x9ag
 =\xf0
TRUE
)

1803 *
buf\xe3r
++ = '\n';

1805 *
buf\xe3r
 = '\0';

1806 
R\x91u\xbaCode
::
NoL\x9\xab
;

1810 *
buf\xe3r
 = '\0';

1811 
buf\xe3r
 -
beg\x9a
;

1812
	}
}

1818
LINE
 *
	$\x9a\xa1\x\xabl_l\x9\xab
(
buf\xe3r
,
\xcbngth
)

1819 *
buf\xe3r
;

1820 
\xcbngth
;

1822 
LINE
 *
\xc3w_l\x9ae
 = (LINE *)
	`\x\xabloc
((LINE));

1824
\xc3w_l\x9ae
->
\x8bxt
 =
	`\x\xabloc
(
\xcbngth
 + 1);

1825
\xc3w_l\x9ae
->
shi\xe1_cou\xc1
 = 0;

1826
	`c\xddy_\xa1r\x9ag
(
\xc3w_l\x9ae
->
\x8bxt
,
buf\xe3r
);

1828 
\xc3w_l\x9ae
;

1829
	}
}

1831
	$ma\x9a
(
\xacgc
,
\xacgv
) argc;

1832 *
\xacgv
[];

1836 
\x9adex
;

1838 #ifde\xe0
UNIX


1839
	`g\x91_\x8brm
();

1840
	`\x8duts
(
VS
, 0,
_putch\xac
);

1841
	`\x8duts
(
CL
, 0,
_putch\xac
);

1843
	`\xa1r\x9ag_\xb4\x9\xa9
(
\x92\x8br_\xa1r\x9ag
);

1844 
\x9adex
 = 0; index <
XMAX
; index++)

1845
b\xc\xe2k_l\x9\xab
[
\x9adex
] = ' ';

1846
b\xc\xe2k_l\x9\xab
[
XMAX
] = '\0';

1849 i\xe0(!
	`i\xa7\x89y
(0)) {

1850 i\xe0(
\xacgc
 != 1) {

1851
	`wr\x99e
(2, "Cannot find\x81erminal.\n", 22);

1852
	`ex\x99
(1);

1854
\xbd\x9de
 =
TRUE
;

1855
modif\x9bd
 =
TRUE
;

1856
	`ݒ_devi\xfb
();

1859
	`\xbfw_mode
(
ON
);

1861
	`\x9a\x99_\x\xabloc
();

1862
h\x97d\x94
 =
\x8f\x9e
 = (
LINE
 *)
	`\x\xabloc
((LINE));

1863
h\x97d\x94
->
\x8bxt
 =
NIL_PTR
;

1864
h\x97d\x94
->
\xc3xt
 =
\x8f\x9e
->
\xb4ev
 = header;

1867 i\xe0(
\xacgc
 < 2)

1868
	`l\xdfd_f\x9\x93
(
NIL_PTR
);

1870 ()
	`g\x91_f\x9\x93
(
NIL_PTR
,
\xacgv
[1]);

1871
	`l\xdfd_f\x9\x93
(
\xacgv
[1]);

1876
\x9adex
 =
	`g\x91ch\xac
();

1877 i\xe0(
\xa1\xa9_visib\xcb
 =\xf0
TRUE
)

1878
	`\x\xe3\x97r_\xa1\xa9us
();

1879 i\xe0(
qu\x99
 =\xf0
TRUE
)

1880
	`ab\xd\xf9_m\x9\xabd
();

1882 (*
key_m\xad
[
\x9adex
])(index);

1883
	`\xe6ush
();

1884 i\xe0(
qu\x99
 =\xf0
TRUE
)

1885
qu\x99
 =
FALSE
;

1889
	}
}

1898
	$RD
() {

1900 #ifde\xe0
UNIX


1901
	`\x8duts
(
VS
, 0,
_putch\xac
);

1902
	`\x8duts
(
CL
, 0,
_putch\xac
);

1904
	`\xa1r\x9ag_\xb4\x9\xa9
(
\x92\x8br_\xa1r\x9ag
);

1908
	`di\xa5\xcfy
(0, 0,
t\xdd_l\x9\xab
,
ϡ_y
);

1911
	`\xa3t_curs\xdc
(0,
YMAX
);

1912 #ifde\xe0
UNIX


1913
	`\x8duts
(
CE
, 0,
_putch\xac
);

1915
	`\xa1r\x9ag_\xb4\x9\xa9
(
b\xc\xe2k_l\x9\xab
);

1917
	`move_to
(
x
,
y
);

1918
	}
}

1923
	$I
(\xe8{
	}
}

1928
	$XT
() {

1929 i\xe0(
modif\x9bd
 =\xf0
TRUE
 &&
	`ask_\xa7ve
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

1932
	`\xbfw_mode
(
OFF
);

1933
	`\xa3t_curs\xdc
(0,
YMAX
);

1934
	`putch\xac
('\n');

1935
	`\xe6ush
();

1936 ()
	`uƚk
(
y\x\xafk_f\x9\x93
);

1937
	`ex\x99
(0);

1938
	}
}

1945
	$ESC
() {

1946 
cou\xc1
;

1947 (*
func
)();

1948 
\x9adex
,
numb\x94
;

1949 (*
key_m\xad
[])(),
	`I
();

1951 i\xe0((
\x9adex
 =
	`g\x91_numb\x94
("P\xcba\xa3\x83\xc1\x94\x84\x95\x97\x88cou\xc1.", &
numb\x94
)\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

1954 i\xe0((
func
 =
key_m\xad
[
\x9adex
]\xe8=\xf0
I
) {

1955
	`\x\xe3\x97r_\xa1\xa9us
();

1959
cou\xc1
 =
numb\x94
;

1961 
cou\xc1
-- > 0 &&
qu\x99
 =\xf0
FALSE
) {

1962 i\xe0(
\xa1\xa9_visib\xcb
 =\xf0
TRUE
)

1963
	`\x\xe3\x97r_\xa1\xa9us
();

1964 (*
func
)(
\x9adex
);

1965
	`\xe6ush
();

1968 i\xe0(
qu\x99
 =\xf0
TRUE
)

1969
	`\x94r\xdc
("Ab܋d",
NIL_PTR
);

1971
	`\x\xe3\x97r_\xa1\xa9us
();

1972
	}
}

1977
	$ask_\xa7ve
() {

1978 
c
;

1980
	`\xa1\xa9us_l\x9\xab
(
f\x9\x93_\xc7me
[0] ?
	`ba\xa3\xc7me
(file_name) : "[buffer]", " has been modified. Save? (y/n)");

1982 (
c
 =
	`g\x91ch\xac
()\xe8!\xf0'y' && c !\xf0'n' &&
qu\x99
 =\xf0
FALSE
) {

1983
	`r\x9ag_b\x96l
();

1984
	`\xe6ush
();

1987
	`\x\xe3\x97r_\xa1\xa9us
();

1989 i\xe0(
c
 == 'y')

1990 
	`WT
();

1992 i\xe0(
c
 == 'n')

1993 
R\x91u\xbaCode
::
F\x9\xab
;

1995
qu\x99
 =
FALSE
;

1996 
R\x91u\xbaCode
::
E\xbc\xdcs
;

1997
	}
}

2002
	$l\x9\xab_numb\x94
() {

2003 
LINE
 *
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;

2004 
cou\xc1
 = 1;

2006 
l\x9\xab
 !\xf0
cur_l\x9\xab
) {

2007
cou\xc1
++;

2008
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

2011 
cou\xc1
;

2012
	}
}

2018
	$f\x9\x93_\xa1\xa9us
(
mes\xa7ge
,
cou\xc1
,
f\x9\x93
,
l\x9\xabs
,
wr\x99e\xe6
,
ch\x\xafged
) *message;

2019 
cou\xc1
;

2020 *
f\x9\x93
;

2021 
l\x9\xabs
;

2022
FLAG

wr\x99e\xe6
,
ch\x\xafged
;

2024 
LINE
 *
l\x9\xab
;

2025 
msg
[
LINE_LEN
 + 40];

2026 
y\x\xafk_msg
[
LINE_LEN
];

2028 i\xe0(
cou\xc1
 < 0)

2029 
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;\x86\x9a\x90!\xf0
\x8f\x9e
;\x86ine =\x86ine->next)

2030
cou\xc1
 +\xf0
	`\xcbngth_of
(
l\x9\xab
->
\x8bxt
);

2032 i\xe0(
y\x\xafk_\xa1\xa9us
 !\xf0
NOT_VALID
)

2033
	`bu\x9ed_\xa1r\x9ag
(
y\x\xafk_msg
, " Buf\xe3r: %D ch\xac%s.",
ch\xacs_\xa7ved
, (chars_saved == 1L) ? "" : "s");

2035
y\x\xafk_msg
[0] = '\0';

2037
	`bu\x9ed_\xa1r\x9ag
(
msg
, "%\xa0%s%s%\xa0%d\x86\x9ae%\xa0%D ch\xac%s.%\xa0L\x9a\x90%d",
mes\xa7ge
,

2038 (
\xbd\x9de
 =\xf0
TRUE
 && *
mes\xa7ge
 !\xf0'['\xe8? "\xa1\xaad\xacd i\xc5ut" :
	`ba\xa3\xc7me
(
f\x9\x93
),

2039 (
ch\x\xafged
 =\xf0
TRUE
\xe8? "*" : "", (
wr\x99e\xe6
 =\xf0
FALSE
\xe8? " (R\x97d\xdaly)" : "",
l\x9\xabs
,

2040 (
l\x9\xabs
 =\xf01\xe8? "" : "s",
cou\xc1
, (cou\xc1 =\xf01L\xe8? "" : "s",
y\x\xafk_msg
,
	`l\x9\xab_numb\x94
());

2042 i\xe0(
	`\xcbngth_of
(
msg
\xe8+ 1 >
LINE_LEN
 - 4) {

2043
msg
[
LINE_LEN
 - 4] =
SHIFT_MARK
;

2044
msg
[
LINE_LEN
 - 3] = '\0';

2046
	`\xa1\xa9us_l\x9\xab
(
msg
,
NIL_PTR
);

2047
	}
}

2054
	$bu\x9ed_\xa1r\x9ag
(
buf
,
fmt
,
\xacgs
) *buf, *fmt;

2055 
\xacgs
;

2057 *
\xacg\xb1r
 = &
\xacgs
;

2058 *
s\xff\xc5
;

2060 *
fmt
) {

2061 i\xe0(*
fmt
 == '%') {

2062
fmt
++;

2063 *
fmt
++) {

2065
s\xff\xc5
 = (*)*
\xacg\xb1r
;

2068
s\xff\xc5
 =
	`num_out
(()*
\xacg\xb1r
);

2071
s\xff\xc5
 =
	`num_out
(()*((*)

2072 #ifde\xe0
UNIX


2073
\xacg\xb1r
));

2075
\xacg\xb1r
++));

2079
s\xff\xc5
 = "";

2081 *
buf
++ = *
s\xff\xc5
++)

2083
buf
--;

2084
\xacg\xb1r
++;

2086 *
buf
++ = *
fmt
++;

2088 *
buf
 = '\0';

2089
	}
}

2095 *
	$num_out
(
numb\x94
)

2096 
numb\x94
;

2098 
num_buf
[11];

2099 
dig\x99
;

2100 
pow
 = 1000000000L;

2101
FLAG

dig\x99_\xa3\x92
 =
FALSE
;

2102 
i
;

2104 
i
 = 0; i < 10; i++) {

2105
dig\x99
 =
numb\x94
 /
pow
;

2106 i\xe0(
dig\x99
 =\xf00L &&
dig\x99_\xa3\x92
 =\xf0
FALSE
 &&
i
 != 9)

2107
num_buf
[
i
] = ' ';

2109
num_buf
[
i
] = '0' + ()
dig\x99
;

2110
numb\x94
 -\xf0
dig\x99
 *
pow
;

2111
dig\x99_\xa3\x92
 =
TRUE
;

2113
pow
 /= 10L;

2115 
i
 = 0;
num_buf
[i] == ' '; i++)

2117  (&
num_buf
[
i
]);

2118
	}
}

2125
	$g\x91_numb\x94
(
mes\xa7ge
,
\xbbsu\xc9
) *message;

2126 *
\xbbsu\xc9
;

2128 
\x9adex
;

2129 
cou\xc1
 = 0;

2131
	`\xa1\xa9us_l\x9\xab
(
mes\xa7ge
,
NIL_PTR
);

2133
\x9adex
 =
	`g\x91ch\xac
();

2134 i\xe0(
qu\x99
 =\xf0
FALSE
 && (
\x9adex
 < '0' || index > '9')) {

2135
	`\x94r\xdc
("Bad cou\xc1",
NIL_PTR
);

2136 
R\x91u\xbaCode
::
E\xbc\xdcs
;

2140 
\x9adex
 >\xf0'0' && index <\xf0'9' &&
qu\x99
 =\xf0
FALSE
) {

2141
cou\xc1
 *= 10;

2142
cou\xc1
 +\xf0
\x9adex
 - '0';

2143
\x9adex
 =
	`g\x91ch\xac
();

2146 i\xe0(
qu\x99
 =\xf0
TRUE
) {

2147
	`\x\xe3\x97r_\xa1\xa9us
();

2148 
R\x91u\xbaCode
::
E\xbc\xdcs
;

2151 *
\xbbsu\xc9
 =
cou\xc1
;

2152 
\x9adex
;

2153
	}
}

2159
	$\x9\xadut
(
\x9abuf
,
\xfe\x97r\xe6
) *inbuf;

2160
FLAG

\xfe\x97r\xe6
;

2162 *
\xb1r
;

2163 
c
;

2165
\xb1r
 =
\x9abuf
;

2167 *
\xb1r
 = '\0';

2168 
qu\x99
 =\xf0
FALSE
) {

2169
	`\xe6ush
();

2170 
c
 =
	`g\x91ch\xac
()) {

2172 i\xe0(
\xb1r
 >
\x9abuf
) {

2173
\xb1r
--;

2174 #ifde\xe0
UNIX


2175
	`\x8duts
(
SE
, 0,
_putch\xac
);

2177
	`\xa1r\x9ag_\xb4\x9\xa9
(
n\xdcm\x\xab_video
);

2179 i\xe0(
	`is_\x8fb
(*
\xb1r
))

2180
	`\xa1r\x9ag_\xb4\x9\xa9
(" \b\b\b \b\b");

2182
	`\xa1r\x9ag_\xb4\x9\xa9
(" \b\b \b");

2183 #ifde\xe0
UNIX


2184
	`\x8duts
(
SO
, 0,
_putch\xac
);

2186
	`\xa1r\x9ag_\xb4\x9\xa9
(
\xbbv_video
);

2188
	`\xa1r\x9ag_\xb4\x9\xa9
(" \b");

2189 *
\xb1r
 = '\0';

2191
	`r\x9ag_b\x96l
();

2195  (
\xb1r
 =\xf0
\x9abuf
 &&
\xfe\x97r\xe6
 =\xf0
TRUE
\xe8?
R\x91u\xbaCode
::
NoI\xc5ut
 : R\x91u\xbaCode::
F\x9\xab
;

2197 i\xe0((
c
 >= ' ' && c <= '~') || c == '\t') {

2198 *
\xb1r
++ =
c
;

2199 *
\xb1r
 = '\0';

2200 i\xe0(
c
 == '\t')

2201
	`\xa1r\x9ag_\xb4\x9\xa9
("^I");

2203
	`putch\xac
(
c
);

2204
	`\xa1r\x9ag_\xb4\x9\xa9
(" \b");

2206
	`r\x9ag_b\x96l
();

2209
qu\x99
 =
FALSE
;

2210 
R\x91u\xbaCode
::
E\xbc\xdcs
;

2211
	}
}

2217
	$g\x91_f\x9\x93
(
mes\xa7ge
,
f\x9\x93
) *message, *file;

2219 *
\xb1r
;

2220 
\xbbt
;

2222 i\xe0(
mes\xa7ge
 =\xf0
NIL_PTR
 || (
\xbbt
 =
	`g\x91_\xa1r\x9ag
(mes\xa7ge,
f\x9\x93
,
TRUE
)\xe8=\xf0
R\x91u\xbaCode
::
F\x9\xab
) {

2223 i\xe0(
	`\xcbngth_of
((
\xb1r
 =
	`ba\xa3\xc7me
(
f\x9\x93
))\xe8>
FILE_LENGTH
)

2224
\xb1r
[
FILE_LENGTH
] = '\0';

2226 
\xbbt
;

2227
	}
}

2233 #ifde\xe0
UNIX


2234 #unde\xe0
putch\xac


2236
	$_g\x91ch\xac
() {

2237 
c
;

2239 i\xe0(
	`\xbbad
(
\x9aput_fd
, &
c
, 1\xe8!\xf01 &&
qu\x99
 =\xf0
FALSE
)

2240
	`\xb7nic
("Cannot\x84ead 1 byte from input");

2241 
c
 & 0177;

2242
	}
}

2244
	$_\xe6ush
(\xe8{ ()
	`f\xe6ush
(
\xa1dout
);
	}
}

2246
	$_putch\xac
(
c
) c;

2248 ()
	`wr\x99e_ch\xac
(
STD_OUT
,
c
);

2249
	}
}

2251
	$g\x91_\x8brm
() {

2252 
\x8brmbuf
[50];

2253 *
	`tg\x91\xa1r
(), *
	`g\x91\x92v
();

2254 *
loc
 =
\x8brmbuf
;

2255 
\x92\x8cy
[1024];

2257 i\xe0(
	`tg\x91\x92t
(
\x92\x8cy
,
	`g\x91\x92v
("TERM")) <= 0) {

2258
	`\xb4\x9\xa9f
("Unknown\x81erminal.\n");

2259
	`ex\x99
(1);

2262
AL
 =
	`tg\x91\xa1r
("\xae", &
loc
);

2263
CE
 =
	`tg\x91\xa1r
("\xfb", &
loc
);

2264
VS
 =
	`tg\x91\xa1r
("vs", &
loc
);

2265
CL
 =
	`tg\x91\xa1r
("\xfe", &
loc
);

2266
SO
 =
	`tg\x91\xa1r
("so", &
loc
);

2267
SE
 =
	`tg\x91\xa1r
("\xa3", &
loc
);

2268
CM
 =
	`tg\x91\xa1r
("cm", &
loc
);

2270 i\xe0(!
CE
 || !
SO
 || !
SE
 || !
CL
 || !
AL
 || !
CM
) {

2271
	`\xb4\x9\xa9f
("Sorry,\x82o mined on\x81his\x81ype of\x81erminal\n");

2272
	`ex\x99
(1);

2274
	}
}

	@commands/mined2.cpp

15 
	~"m\x9\xabd.h\xb5
"

20 
	$UP
() {

21 i\xe0(
y
 == 0) {

22 ()
	`\xbbv\x94\xa3_s\xfc\xd\x96
();

23
	`move_to
(
x
,
y
);

25
	`move_to
(
x
,
y
 - 1);

26
	}
}

31 
	$DN
() {

32 i\xe0(
y
 =\xf0
ϡ_y
) {

33 i\xe0(
b\xd9_l\x9\xab
->
\xc3xt
 =\xf0
\x8f\x9e
 && b\xd9_l\x9ae->
\x8bxt
[0] != '\n') {

34
	`dummy_l\x9\xab
();

35
	`DN
();

38 ()
	`f\xdcw\xacd_s\xfc\xd\x96
();

39
	`move_to
(
x
,
y
);

42
	`move_to
(
x
,
y
 + 1);

43
	}
}

48 
	$LF
() {

49 i\xe0(
x
 =\xf00 &&
	`g\x91_shi\xe1
(
cur_l\x9\xab
->
shi\xe1_cou\xc1
) == 0) {

50 i\xe0(
cur_l\x9\xab
->
\xb4ev
 !\xf0
h\x97d\x94
) {

51
	`UP
();

52
	`move_to
(
LINE_END
,
y
);

55
	`move_to
(
x
 - 1,
y
);

56
	}
}

61 
	$RT
() {

62 i\xe0(*
cur_\x8bxt
 == '\n') {

63 i\xe0(
cur_l\x9\xab
->
\xc3xt
 !\xf0
\x8f\x9e
) {

64
	`DN
();

65
	`move_to
(
LINE_START
,
y
);

68
	`move_to
(
x
 + 1,
y
);

69
	}
}

74
	$HIGH
(\xe8{
	`move_to
(0, 0);
	}
}

79
	$LOW
(\xe8{
	`move_to
(0,
ϡ_y
);
	}
}

84
	$BL
(\xe8{
	`move_to
(
LINE_START
,
y
);
	}
}

89
	$EL
(\xe8{
	`move_to
(
LINE_END
,
y
);
	}
}

94
	$GOTO
() {

95 
numb\x94
;

96
LINE
 *
l\x9\xab
;

98 i\xe0(
	`g\x91_numb\x94
("P\xcba\xa3\x83\xc1\x94\x86\x9a\x90numb\x94.", &
numb\x94
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

101 i\xe0(
numb\x94
 <\xf00 || (
l\x9\xab
 =
	`\xb4o\xfbed
(
h\x97d\x94
->
\xc3xt
,\x82umb\x94 - 1)\xe8=\xf0
\x8f\x9e
)

102
	`\x94r\xdc
("I\xceeg\xae\x86\x9a\x90numb\x94: ",
	`num_out
(()
numb\x94
));

104
	`move_to
(
x
,
	`f\x9ad_y
(
l\x9\xab
));

105
	}
}

112
	$PD
() {

113 
i
;

115 
i
 = 0; i <
SCREENMAX
; i++)

116 i\xe0(
	`f\xdcw\xacd_s\xfc\xd\x96
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

118 i\xe0(
y
 -
i
 < 0)

119
	`move_to
(0,
SCREENMAX
 >> 1);

121
	`move_to
(0,
y
 -
i
);

122
	}
}

130
	$PU
() {

131 
i
;

133 
i
 = 0; i <
SCREENMAX
; i++)

134 i\xe0(
	`\xbbv\x94\xa3_s\xfc\xd\x96
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

136
	`\xa3t_curs\xdc
(0,
YMAX
);

137 #ifde\xe0
UNIX


138
	`\x8duts
(
CE
, 0,
_putch\xac
);

140
	`\xa1r\x9ag_\xb4\x9\xa9
(
b\xc\xe2k_l\x9\xab
);

142 i\xe0(
y
 +
i
 >
SCREENMAX
)

143
	`move_to
(0,
SCREENMAX
 >> 1);

145
	`move_to
(0,
y
 +
i
);

146
	}
}

151
	$HO
() {

152 i\xe0(
	`\xb4o\xfbed
(
t\xdd_l\x9\xab
, -
SCREENMAX
\xe8=\xf0
h\x97d\x94
)

153
	`PU
();

155
	`\xbb\xa3t
(
h\x97d\x94
->
\xc3xt
, 0);

156
	`RD
();

158
	`move_to
(
LINE_START
, 0);

159
	}
}

164
	$EF
() {

165 i\xe0(
\x8f\x9e
->
\xb4ev
->
\x8bxt
[0] != '\n')

166
	`dummy_l\x9\xab
();

167 i\xe0(
	`\xb4o\xfbed
(
b\xd9_l\x9\xab
,
SCREENMAX
\xe8=\xf0
\x8f\x9e
)

168
	`PD
();

170
	`\xbb\xa3t
(
	`\xb4o\xfbed
(
\x8f\x9e
->
\xb4ev
, -
SCREENMAX
), SCREENMAX);

171
	`RD
();

173
	`move_to
(
LINE_START
,
ϡ_y
);

174
	}
}

179
	$SU
() {

180 i\xe0(
t\xdd_l\x9\xab
->
\xb4ev
 =\xf0
h\x97d\x94
)

183 ()
	`\xbbv\x94\xa3_s\xfc\xd\x96
();

184
	`\xa3t_curs\xdc
(0,
YMAX
);

185 #ifde\xe0
UNIX


186
	`\x8duts
(
CE
, 0,
_putch\xac
);

188
	`\xa1r\x9ag_\xb4\x9\xa9
(
b\xc\xe2k_l\x9\xab
);

190
	`move_to
(
x
, (
y
 =\xf0
SCREENMAX
) ? SCREENMAX : y + 1);

191
	}
}

196
	$SD
() {

197 i\xe0(
	`f\xdcw\xacd_s\xfc\xd\x96
(\xe8!\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

198
	`move_to
(
x
, (
y
 == 0) ? 0 : y - 1);

200
	`\xa3t_curs\xdc
(
x
,
y
);

201
	}
}

207
	$f\xdcw\xacd_s\xfc\xd\x96
() {

208 i\xe0(
b\xd9_l\x9\xab
->
\xc3xt
 =\xf0
\x8f\x9e
)

209 
R\x91u\xbaCode
::
E\xbc\xdcs
;

210
t\xdd_l\x9\xab
 =\x81\xdd_l\x9ae->
\xc3xt
;

211
b\xd9_l\x9\xab
 = b\xd9_l\x9ae->
\xc3xt
;

212
cur_l\x9\xab
 = cur_l\x9ae->
\xc3xt
;

213
	`\xa3t_curs\xdc
(0,
YMAX
);

214
	`l\x9\xab_\xb4\x9\xa9
(
b\xd9_l\x9\xab
);

216 
R\x91u\xbaCode
::
F\x9\xab
;

217
	}
}

223
	$\xbbv\x94\xa3_s\xfc\xd\x96
() {

224 i\xe0(
t\xdd_l\x9\xab
->
\xb4ev
 =\xf0
h\x97d\x94
)

225 
R\x91u\xbaCode
::
E\xbc\xdcs
;

227 i\xe0(
ϡ_y
 !\xf0
SCREENMAX
)

228
ϡ_y
++;

230
b\xd9_l\x9\xab
 = b\xd9_l\x9ae->
\xb4ev
;

231
t\xdd_l\x9\xab
 =\x81\xdd_l\x9ae->
\xb4ev
;

232
cur_l\x9\xab
 = cur_l\x9ae->
\xb4ev
;

235
	`\xa3t_curs\xdc
(0, 0);

236 #ifde\xe0
UNIX


237
	`\x8duts
(
AL
, 0,
_putch\xac
);

239
	`\xa1r\x9ag_\xb4\x9\xa9
(
\xbbv_s\xfc\xdel
);

241
	`\xa3t_curs\xdc
(0, 0);

242
	`l\x9\xab_\xb4\x9\xa9
(
t\xdd_l\x9\xab
);

244 
R\x91u\xbaCode
::
F\x9\xab
;

245
	}
}

256
	$MP
(\xe8{
	`move_\xb4evious_w\xdcd
(
NO_DELETE
);
	}
}

258
	$move_\xb4evious_w\xdcd
(
\xbbmove
\xe8
FLAG
\x84emove;

260 *
beg\x9a_l\x9\xab
;

261 *
\x8bx\x8d
;

262 
\xa1\xact_ch\xac
 = *
cur_\x8bxt
;

263 *
\xa1\xact_pos
 =
cur_\x8bxt
;

266 i\xe0(
cur_\x8bxt
 =\xf0
cur_l\x9\xab
->
\x8bxt
) {

267 i\xe0(
cur_l\x9\xab
->
\xb4ev
 =\xf0
h\x97d\x94
)

269
\xa1\xact_ch\xac
 = '\0';

272
	`LF
();

274
beg\x9a_l\x9\xab
 =
cur_l\x9\xab
->
\x8bxt
;

275
\x8bx\x8d
 =
cur_\x8bxt
;

278 i\xe0(!
	`\x\xabpha
(*
\x8bx\x8d
\xe8|| !\xaepha(
\xa1\xact_ch\xac
)) {

279 
\x8bx\x8d
 !\xf0
beg\x9a_l\x9\xab
 && (
	`wh\x99e_\xa5a\xfb
(*textp) || *textp == '\n'))

280
\x8bx\x8d
--;

284 
\x8bx\x8d
 !\xf0
beg\x9a_l\x9\xab
 &&
	`\x\xabpha
(*textp))

285
\x8bx\x8d
--;

288 i\xe0(
\x8bx\x8d
 !\xf0
beg\x9a_l\x9\xab
 && *textp != '\n')

289
\x8bx\x8d
++;

292
	`move_add\xbbss
(
\x8bx\x8d
);

293 i\xe0(
\xbbmove
 =\xf0
DELETE
)

294
	`d\x96\x91e
 (
cur_l\x9\xab
,
\x8bx\x8d
, cur_l\x9ae,
\xa1\xact_pos
);

295
	}
}

302
	$MN
(\xe8{
	`move_\xc3xt_w\xdcd
(
NO_DELETE
);
	}
}

304
	$move_\xc3xt_w\xdcd
(
\xbbmove
\xe8
FLAG
\x84emove;

306 *
\x8bx\x8d
 =
cur_\x8bxt
;

309 *
\x8bx\x8d
 !\xf0'\n' &&
	`\x\xabpha
(*textp))

310
\x8bx\x8d
++;

313 *
\x8bx\x8d
 !\xf0'\n' &&
	`wh\x99e_\xa5a\xfb
(*textp))

314
\x8bx\x8d
++;

316 i\xe0(
\xbbmove
 =\xf0
DELETE
) {

317
	`d\x96\x91e
 (
cur_l\x9\xab
,
cur_\x8bxt
, cur_l\x9ae,
\x8bx\x8d
);

322 i\xe0(*
\x8bx\x8d
 =\xf0'\n' &&
cur_l\x9\xab
->
\xc3xt
 !\xf0
\x8f\x9e
) {

323
	`DN
();

324
	`move_to
(
LINE_START
,
y
);

325
\x8bx\x8d
 =
cur_\x8bxt
;

326 *
\x8bx\x8d
 !\xf0'\n' &&
	`wh\x99e_\xa5a\xfb
(*textp))

327
\x8bx\x8d
++;

329
	`move_add\xbbss
(
\x8bx\x8d
);

330
	}
}

342
	$DCC
() {

343 i\xe0(*
cur_\x8bxt
 == '\n')

344
	`d\x96\x91e
 (
cur_l\x9\xab
,
cur_\x8bxt
, cur_l\x9ae->
\xc3xt
, cur_l\x9ae->\xc3xt->
\x8bxt
);

346
	`d\x96\x91e
 (
cur_l\x9\xab
,
cur_\x8bxt
, cur_line, cur_text + 1);

347
	}
}

354
	$DPC
() {

355 i\xe0(
x
 =\xf00 &&
cur_l\x9\xab
->
\xb4ev
 =\xf0
h\x97d\x94
)

358
	`LF
();

359
	`DCC
();

360
	}
}

366
	$DLN
() {

367 i\xe0(*
cur_\x8bxt
 == '\n')

368
	`DCC
();

370
	`d\x96\x91e
 (
cur_l\x9\xab
,
cur_\x8bxt
, cur_l\x9ae, cur_\x8bx\x88+
	`\xcbngth_of
(cur_text) - 1);

371
	}
}

376
	$DNW
() {

377 i\xe0(*
cur_\x8bxt
 == '\n')

378
	`DCC
();

380
	`move_\xc3xt_w\xdcd
(
DELETE
);

381
	}
}

386
	$DPW
() {

387 i\xe0(
cur_\x8bxt
 =\xf0
cur_l\x9\xab
->
\x8bxt
)

388
	`DPC
();

390
	`move_\xb4evious_w\xdcd
(
DELETE
);

391
	}
}

396
	$S
(
ch\xa\xff\xf9\x94
)

397 
ch\xa\xff\xf9\x94
;

399 
buf\xe3r
[2];

401
buf\xe3r
[0] =
ch\xa\xff\xf9\x94
;

403 i\xe0(
	`\x9a\xa3\xb9
(
cur_l\x9\xab
,
cur_\x8bxt
,
buf\xe3r
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

407 i\xe0(
ch\xa\xff\xf9\x94
 == '\n') {

408
	`\xa3t_curs\xdc
(0,
y
);

409 i\xe0(
y
 =\xf0
SCREENMAX
) {

410
	`l\x9\xab_\xb4\x9\xa9
(
cur_l\x9\xab
);

411 ()
	`f\xdcw\xacd_s\xfc\xd\x96
();

413
	`\xbb\xa3t
(
t\xdd_l\x9\xab
,
y
);

414
	`di\xa5\xcfy
(0,
y
,
cur_l\x9\xab
,
ϡ_y
 - y);

416
	`move_to
(0, (
y
 =\xf0
SCREENMAX
) ? y : y + 1);

417 } i\xe0(
x
 + 1 =\xf0
XBREAK
)

418
	`move_to
(
x
 + 1,
y
);

420
	`put_l\x9\xab
(
cur_l\x9\xab
,
x
,
FALSE
);

421
	`move_to
(
x
 + 1,
y
);

423
	}
}

429
	$CTRL
() {

430 
\xf9\xbe
;

432
	`\xa1\xa9us_l\x9\xab
("E\xc1\x94 cڌ\xde ch\xaca\xf9\x94.",
NIL_PTR
);

433 i\xe0((
\xf9\xbe
 =
	`g\x91ch\xac
()) >= '\01' && ctrl <= '\037') {

434
	`S
(
\xf9\xbe
);

435
	`\x\xe3\x97r_\xa1\xa9us
();

437
	`\x94r\xdc
("Unknow\xc0cڌ\xde ch\xaca\xf9\x94",
NIL_PTR
);

438
	}
}

444
	$LIB
() {

445
	`S
('\n');

446
	`UP
();

447
	`move_to
(
LINE_END
,
y
);

448
	}
}

454
LINE
 *
	$l\x9\xab_\x9a\xa3\xb9
(
l\x9\xab
,
\xa1r\x9ag
,
\xcbn
)

455 
LINE
 *
l\x9\xab
;

456 *
\xa1r\x9ag
;

457 
\xcbn
;

459 
LINE
 *
\xc3w_l\x9ae
;

462
\xc3w_l\x9ae
 =
	`\x9a\xa1\x\xabl_l\x9\xab
(
\xa1r\x9ag
,
\xcbn
);

465
\xc3w_l\x9ae
->
\xb4ev
 =
l\x9\xab
;

466
\xc3w_l\x9ae
->
\xc3xt
 =
l\x9\xab
->next;

467
l\x9\xab
->
\xc3xt
 =
\xc3w_l\x9ae
;

468
\xc3w_l\x9ae
->
\xc3xt
->
\xb4ev
 =\x82ew_line;

471
ƚes
++;

473 
\xc3w_l\x9ae
;

474
	}
}

479
	$\x9a\xa3\xb9
(
l\x9\xab
,
lo\xf\xe1i\xda
,
\xa1r\x9ag
\xe8
LINE
 *line;

480 *
lo\xf\xe1i\xda
, *
\xa1r\x9ag
;

482 *
bu\xe5
 =
\x8bxt_buf\xe3r
;

483 *
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

485 i\xe0(
	`\xcbngth_of
(
\x8bx\x8d
\xe8+\x86\x92gth_of(
\xa1r\x9ag
\xe8>\xf0
MAX_CHARS
) {

486
	`\x94r\xdc
("L\x9a\x90to\xd8l\xdag",
NIL_PTR
);

487 
R\x91u\xbaCode
::
E\xbc\xdcs
;

490
modif\x9bd
 =
TRUE
;

493 
\x8bx\x8d
 !\xf0
lo\xf\xe1i\xda
)

494 *
bu\xe5
++ = *
\x8bx\x8d
++;

497 *
\xa1r\x9ag
 != '\0')

498 *
bu\xe5
++ = *
\xa1r\x9ag
++;

499 *
bu\xe5
 = '\0';

501 i\xe0(*(
\xa1r\x9ag
 - 1) == '\n')

502 ()
	`l\x9\xab_\x9a\xa3\xb9
(
l\x9\xab
,
lo\xf\xe1i\xda
,
	`\xcbngth_of
(location));

504
	`c\xddy_\xa1r\x9ag
(
bu\xe5
,
lo\xf\xe1i\xda
);

507
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
->
\x8bxt
);

508
l\x9\xab
->
\x8bxt
 =
	`\x\xabloc
(
	`\xcbngth_of
(
\x8bxt_buf\xe3r
) + 1);

509
	`c\xddy_\xa1r\x9ag
(
l\x9\xab
->
\x8bxt
,
\x8bxt_buf\xe3r
);

511 
R\x91u\xbaCode
::
F\x9\xab
;

512
	}
}

518
LINE
 *
	$l\x9\xab_d\x96\x91e
(
l\x9\xab
)

519 
LINE
 *
l\x9\xab
;

521 
LINE
 *
\xc3xt_l\x9ae
 =
l\x9\xab
->
\xc3xt
;

524
l\x9\xab
->
\xb4ev
->
\xc3xt
 =\x86ine->next;

525
l\x9\xab
->
\xc3xt
->
\xb4ev
 =\x86ine->prev;

528
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
->
\x8bxt
);

529
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
);

532
ƚes
--;

534 
\xc3xt_l\x9ae
;

535
	}
}

542
	$d\x96\x91e
 (
\xa1\xact_l\x9ae
,
\xa1\xact_\x8bx\x8d
,
\x92d_l\x9ae
,
\x92d_\x8bx\x8d
\xe8
LINE
 *start_line;

543
LINE
 *
\x92d_l\x9ae
;

544 *
\xa1\xact_\x8bx\x8d
, *
\x92d_\x8bx\x8d
;

546 *
\x8bx\x8d
 =
\xa1\xact_l\x9ae
->
\x8bxt
;

547 *
bu\xe5
 =
\x8bxt_buf\xe3r
;

548
LINE
 *
l\x9\xab
;

549 
l\x9\xab_\x\xe7t
 = 0;

550 
cou\xc1
 = 0;

551 
shi\xe1
 = 0;

552 
nx
 =
x
;

554
modif\x9bd
 =
TRUE
;

557 
\x8bx\x8d
 <
\xa1\xact_\x8bx\x8d
) {

558 *
bu\xe5
++ = *
\x8bx\x8d
++;

559
cou\xc1
++;

563 i\xe0(
cou\xc1
 +
	`\xcbngth_of
(
\x92d_\x8bx\x8d
\xe8>\xf0
MAX_CHARS
) {

564
	`\x94r\xdc
("L\x9a\x90to\xd8l\xdag",
NIL_PTR
);

569
	`c\xddy_\xa1r\x9ag
(
bu\xe5
, (
\x92d_\x8bx\x8d
 !\xf0
NIL_PTR
) ?\x83nd_textp : "\n");

572
l\x9\xab
 =
\xa1\xact_l\x9ae
->
\xc3xt
;

573 
l\x9\xab
 !\xf0
\x92d_l\x9ae
->
\xc3xt
 &&\x86\x9a\x90!\xf0
\x8f\x9e
) {

574
l\x9\xab
 =
	`l\x9\xab_d\x96\x91e
(line);

575
l\x9\xab_\x\xe7t
++;

579 i\xe0(
\x92d_\x8bx\x8d
 =\xf0
NIL_PTR
 &&
	`\xcbngth_of
(
\xa1\xact_l\x9ae
->
\x8bxt
\xe8=\xf01 &&
ƚes
 > 1) {

580
\xa1\xact_l\x9ae
 = s\x8f\xb9_l\x9ae->
\xb4ev
;

581 ()
	`l\x9\xab_d\x96\x91e
(
\xa1\xact_l\x9ae
->
\xc3xt
);

582
l\x9\xab_\x\xe7t
++;

584
	`\xe4\x93_\xa5a\xfb
(
\xa1\xact_l\x9ae
->
\x8bxt
);

585
\xa1\xact_l\x9ae
->
\x8bxt
 =
	`\x\xabloc
(
	`\xcbngth_of
(
\x8bxt_buf\xe3r
) + 1);

586
	`c\xddy_\xa1r\x9ag
(
\xa1\xact_l\x9ae
->
\x8bxt
,
\x8bxt_buf\xe3r
);

590 i\xe0(
	`g\x91_shi\xe1
(
\xa1\xact_l\x9ae
->
shi\xe1_cou\xc1
)) {

591
shi\xe1
 = (
XBREAK
 -
	`cou\xc1_ch\xacs
(
\xa1\xact_l\x9ae
)\xe8/
SHIFT_SIZE
;

592 i\xe0(
shi\xe1
 > 0) {

593 i\xe0(
shi\xe1
 >\xf0
	`g\x91_shi\xe1
(
\xa1\xact_l\x9ae
->
shi\xe1_cou\xc1
))

594
\xa1\xact_l\x9ae
->
shi\xe1_cou\xc1
 = 0;

596
\xa1\xact_l\x9ae
->
shi\xe1_cou\xc1
 -\xf0
shi\xe1
;

597
nx
 +\xf0
shi\xe1
 *
SHIFT_SIZE
;

601 i\xe0(
l\x9\xab_\x\xe7t
 == 0) {

602 i\xe0(
shi\xe1
 > 0) {

603
	`\xa3t_curs\xdc
(0,
y
);

604
	`l\x9\xab_\xb4\x9\xa9
(
\xa1\xact_l\x9ae
);

606
	`\xa3t_curs\xdc
(
x
,
y
);

607
	`put_l\x9\xab
(
\xa1\xact_l\x9ae
,
x
,
TRUE
);

609
	`move_to
(
nx
,
y
);

613
shi\xe1
 =
ϡ_y
;

614
	`\xbb\xa3t
(
t\xdd_l\x9\xab
,
y
);

615
	`di\xa5\xcfy
(0,
y
,
\xa1\xact_l\x9ae
,
shi\xe1
 - y);

616
	`move_to
((
l\x9\xab_\x\xe7t
 =\xf01\xe8?
nx
 : 0,
y
);

617
	}
}

623
LINE
 *
	gm\xack_l\x9\xab
;

624 *
	gm\xack_\x8bxt
;

625 
	gl\x9\xabs_\xa7ved
;

630
	$PT
() {

631 
fd
;

633 i\xe0((
fd
 =
	`s\xfc\xa9ch_f\x9\x93
(
READ
)\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

634
	`\x94r\xdc
("Buf\xe3\xb8i\xa0em\xb1y.",
NIL_PTR
);

636
	`f\x9\x93_\x9a\xa3\xb9
(
fd
,
FALSE
);

637 ()
	`\x\xe3o\xa3
(
fd
);

639
	}
}

645
	$IF
() {

646 
fd
;

647 
\xc7me
[
LINE_LEN
];

650 i\xe0(
	`g\x91_f\x9\x93
("G\x91\x87nd in\xa3\xb9 f\x9ee:",
\xc7me
\xe8!\xf0
R\x91u\xbaCode
::
F\x9\xab
)

653 i\xe0((
fd
 =
	`ݒ
(
\xc7me
, 0)) < 0)

654
	`\x94r\xdc
("C\xaan\xd9 o\xb3\xc0",
\xc7me
);

656
	`f\x9\x93_\x9a\xa3\xb9
(
fd
,
TRUE
);

657 ()
	`\x\xe3o\xa3
(
fd
);

659
	}
}

665
	$f\x9\x93_\x9a\xa3\xb9
(
fd
,
\xded_pos
) fd;

666
FLAG

\xded_pos
;

668 
l\x9\xab_buf\xe3r
[
MAX_CHARS
];

669 
LINE
 *
l\x9\xab
 =
cur_l\x9\xab
;

670 
l\x9\xab_cou\xc1
 =
ƚes
;

671
LINE
 *
\xb7ge
 =
cur_l\x9\xab
;

672 
\xbbt
 =
R\x91u\xbaCode
::
E\xbc\xdcs
;

675 i\xe0(
	`g\x91_l\x9\xab
(
fd
,
l\x9\xab_buf\xe3r
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

679 i\xe0(
	`\x9a\xa3\xb9
(
l\x9\xab
,
cur_\x8bxt
,
l\x9\xab_buf\xe3r
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

683 (
\xbbt
 =
	`g\x91_l\x9\xab
(
fd
,
l\x9\xab_buf\xe3r
)\xe8!\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
 &&\x84\x91 !\xf0R\x91u\xbaCode::
NoL\x9\xab
)

684
l\x9\xab
 =
	`l\x9\xab_\x9a\xa3\xb9
֚e,
l\x9\xab_buf\xe3r
,
\xbbt
);

686 i\xe0(
\xbbt
 =\xf0
R\x91u\xbaCode
::
NoL\x9\xab
) {

687
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

688 ()
	`\x9a\xa3\xb9
(
l\x9\xab
,\x86\x9ae->
\x8bxt
,
l\x9\xab_buf\xe3r
);

692
l\x9\xab_cou\xc1
 =
ƚes
 -\x86ine_count;

695 i\xe0(
l\x9\xab_cou\xc1
 == 0) {

696
	`\xa3t_curs\xdc
(0,
y
);

697
	`l\x9\xab_\xb4\x9\xa9
(
l\x9\xab
);

698
	`move_to
((
\xded_pos
 =\xf0
TRUE
\xe8?
x
 : x +
	`\xcbngth_of
(
l\x9\xab_buf\xe3r
),
y
);

700
	`\xbb\xa3t
(
t\xdd_l\x9\xab
,
y
);

701 
\xb7ge
 !\xf0
l\x9\xab
 &&\x85ag\x90!\xf0
b\xd9_l\x9\xab
->
\xc3xt
)

702
\xb7ge
 =\x85age->
\xc3xt
;

703 i\xe0(
\xb7ge
 !\xf0
b\xd9_l\x9\xab
->
\xc3xt
 ||
\xded_pos
 =\xf0
TRUE
)

704
	`di\xa5\xcfy
(0,
y
,
cur_l\x9\xab
,
SCREENMAX
 - y);

705 i\xe0(
\xded_pos
 =\xf0
TRUE
)

706
	`move_to
(
x
,
y
);

707 i\xe0(
\xbbt
 =\xf0
R\x91u\xbaCode
::
NoL\x9\xab
)

708
	`move_to
(
	`\xcbngth_of
(
l\x9\xab_buf\xe3r
),
	`f\x9ad_y
(
l\x9\xab
));

710
	`move_to
(0,
	`f\x9ad_y
(
l\x9\xab
->
\xc3xt
));

714 i\xe0(
l\x9\xab_cou\xc1
 >\xf0
REPORT
)

715
	`\xa1\xa9us_l\x9\xab
(
	`num_out
(()
l\x9\xab_cou\xc1
), "\x86ines\x87dded.");

716
	}
}

722
	$WB
() {

723 
\xc3w_fd
;

724 
y\x\xafk_fd
;

725 
\xfat
;

726 
\xbbt
;

727 
f\x9\x93
[
LINE_LEN
];

730 i\xe0((
y\x\xafk_fd
 =
	`s\xfc\xa9ch_f\x9\x93
(
READ
)\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
) {

731
	`\x94r\xdc
("Buf\xe3\xb8i\xa0em\xb1y.",
NIL_PTR
);

736 i\xe0(
	`g\x91_f\x9\x93
("Wr\x99\x90buf\xe3\xb8t\xd8f\x9ee:",
f\x9\x93
\xe8!\xf0
R\x91u\xbaCode
::
F\x9\xab
)

740 i\xe0((
\xc3w_fd
 =
	`\xfc\x97t
(
f\x9\x93
, 0644)) < 0) {

741
	`\x94r\xdc
("C\xaan\xd9 c\xbb\xa9\x90",
f\x9\x93
);

745
	`\xa1\xa9us_l\x9\xab
("Wr\x99\x9ag ",
f\x9\x93
);

748 (
\xfat
 =
	`\xbbad
(
y\x\xafk_fd
,
\x8bxt_buf\xe3r
, (text_buffer))) > 0)

749 i\xe0(
	`wr\x99e
(
\xc3w_fd
,
\x8bxt_buf\xe3r
,
\xfat
) != cnt) {

750
	`bad_wr\x99e
(
\xc3w_fd
);

751
\xbbt
 =
R\x91u\xbaCode
::
E\xbc\xdcs
;

756 ()
	`\x\xe3o\xa3
(
\xc3w_fd
);

757 ()
	`\x\xe3o\xa3
(
y\x\xafk_fd
);

759 i\xe0(
\xbbt
 !\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

760
	`f\x9\x93_\xa1\xa9us
("Wr\xd9e",
ch\xacs_\xa7ved
,
f\x9\x93
,
l\x9\xabs_\xa7ved
,
TRUE
,
FALSE
);

761
	}
}

766
	$MA
() {

767
m\xack_l\x9\xab
 =
cur_l\x9\xab
;

768
m\xack_\x8bxt
 =
cur_\x8bxt
;

769
	`\xa1\xa9us_l\x9\xab
("M\xack s\x91",
NIL_PTR
);

770
	}
}

776
	$YA
(\xe8{
	`\xa3t_up
(
NO_DELETE
);
	}
}

781
	$DT
(\xe8{
	`\xa3t_up
(
DELETE
);
	}
}

788
	$\xa3t_up
(
\xbbmove
\xe8
FLAG
\x84emove;

790
FLAG

	`checkm\xack
();

792 
	`checkm\xack
()) {

793 
NOT_VALID
:

794
	`\x94r\xdc
("M\xack\x82\xd9 s\x91.",
NIL_PTR
);

796 
SMALLER
:

797
	`y\x\xafk
(
m\xack_l\x9\xab
,
m\xack_\x8bxt
,
cur_l\x9\xab
,
cur_\x8bxt
,
\xbbmove
);

799 
BIGGER
:

800
	`y\x\xafk
(
cur_l\x9\xab
,
cur_\x8bxt
,
m\xack_l\x9\xab
,
m\xack_\x8bxt
,
\xbbmove
);

802 
SAME
:

803
y\x\xafk_\xa1\xa9us
 =
EMPTY
;

804
ch\xacs_\xa7ved
 = 0L;

805
	`\xa1\xa9us_l\x9\xab
("0 ch\xaca\xf9\x94\xa0\xa7ved i\xc0buf\xe3r.",
NIL_PTR
);

808
	}
}

817
FLAG

	$checkm\xack
() {

818 
LINE
 *
l\x9\xab
;

819
FLAG

cur_\xa3\x92
 =
FALSE
;

822 i\xe0(
m\xack_l\x9\xab
 =\xf0
cur_l\x9\xab
) {

823 i\xe0(
m\xack_\x8bxt
 =\xf0
cur_\x8bxt
)

824 
SAME
;

825 i\xe0(
	`\xcbg\x\xab
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

826 
NOT_VALID
;

827  (
m\xack_\x8bxt
 <
cur_\x8bxt
\xe8?
SMALLER
 :
BIGGER
;

831 
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;\x86\x9a\x90!\xf0
\x8f\x9e
;\x86ine =\x86ine->next) {

832 i\xe0(
l\x9\xab
 =\xf0
cur_l\x9\xab
)

833
cur_\xa3\x92
 =
TRUE
;

834 i\xe0(
l\x9\xab
 =\xf0
m\xack_l\x9\xab
)

839 i\xe0(
l\x9\xab
 =\xf0
\x8f\x9e
 ||
	`\xcbg\x\xab
(\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

840 
NOT_VALID
;

843  (
cur_\xa3\x92
 =\xf0
TRUE
\xe8?
BIGGER
 :
SMALLER
;

844
	}
}

849
	$\xcbg\x\xab
() {

850 *
\x8bx\x8d
 =
m\xack_l\x9\xab
->
\x8bxt
;

853 
\x8bx\x8d
 !\xf0
m\xack_\x8bxt
 && *textp++ != '\0')

855  (*
\x8bx\x8d
 =\xf0'\0'\xe8?
R\x91u\xbaCode
::
E\xbc\xdcs
 : R\x91u\xbaCode::
F\x9\xab
;

856
	}
}

864
	$y\x\xafk
(
\xa1\xact_l\x9ae
,
\xa1\xact_\x8bx\x8d
,
\x92d_l\x9ae
,
\x92d_\x8bx\x8d
,
\xbbmove
\xe8
LINE
 *start_line, *end_line;

865 *
\xa1\xact_\x8bx\x8d
, *
\x92d_\x8bx\x8d
;

866
FLAG

\xbbmove
;

868 
LINE
 *
l\x9\xab
 =
\xa1\xact_l\x9ae
;

869 *
\x8bx\x8d
 =
\xa1\xact_\x8bx\x8d
;

870 
fd
;

873 i\xe0((
fd
 =
	`s\xfc\xa9ch_f\x9\x93
(
WRITE
)\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

876
ch\xacs_\xa7ved
 = 0L;

877
l\x9\xabs_\xa7ved
 = 0;

878
	`\xa1\xa9us_l\x9\xab
("Sav\x9ag\x81ext.",
NIL_PTR
);

881 
\x8bx\x8d
 !\xf0
\x92d_\x8bx\x8d
) {

882 i\xe0(
	`wr\x99e_ch\xac
(
fd
, *
\x8bx\x8d
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
) {

883 ()
	`\x\xe3o\xa3
(
fd
);

886 i\xe0(*
\x8bx\x8d
++ == '\n') {

887
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

888
\x8bx\x8d
 =
l\x9\xab
->
\x8bxt
;

889
l\x9\xabs_\xa7ved
++;

891
ch\xacs_\xa7ved
++;

895 i\xe0(
	`\xe6ush_buf\xe3r
(
fd
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
) {

896 ()
	`\x\xe3o\xa3
(
fd
);

899 ()
	`\x\xe3o\xa3
(
fd
);

900
y\x\xafk_\xa1\xa9us
 =
VALID
;

909 i\xe0(
\xbbmove
 =\xf0
DELETE
) {

910
	`move_to
(
	`f\x9ad_x
(
\xa1\xact_l\x9ae
,
\xa1\xact_\x8bx\x8d
),
	`f\x9ad_y
(start_line));

911
	`d\x96\x91e
 (
\xa1\xact_l\x9ae
,
\xa1\xact_\x8bx\x8d
,
\x92d_l\x9ae
,
\x92d_\x8bx\x8d
);

914
	`\xa1\xa9us_l\x9\xab
(
	`num_out
(
ch\xacs_\xa7ved
), " characters saved in buffer.");

915
	}
}

924 
	#MAXTRAILS
 26

	)

926
	$s\xfc\xa9ch_f\x9\x93
(
mode
\xe8
FLAG
 mode;

928 
\x8c\x9fls
 = 0;

929 *
y_\xb1r
, *
n_\xb1r
;

930 
fd
;

933 i\xe0(
y\x\xafk_\xa1\xa9us
 =\xf0
NOT_VALID
 &&
mode
 =\xf0
WRITE
) {

935
y_\xb1r
 = &
y\x\xafk_f\x9\x93
[11];

936
n_\xb1r
 =
	`num_out
(()
	`g\x91pid
());

937 (*
y_\xb1r
 = *
n_\xb1r
++) != '\0')

938
y_\xb1r
++;

939 *
y_\xb1r
++ = 'a' +
\x8c\x9fls
;

940 *
y_\xb1r
 = '\0';

942 i\xe0(
	`ac\xfbss
(
y\x\xafk_f\x9\x93
, 0\xe8=\xf00 || (
fd
 =
	`\xfc\x97t
(yank_file, 0644)) < 0) {

943 i\xe0(
\x8c\x9fls
++ >\xf0
MAXTRAILS
) {

944
	`\x94r\xdc
("U\xc7bˁ\xd8\xfc\x97\x88s\xfc\xa9chf\x9ee.",
NIL_PTR
);

945 
R\x91u\xbaCode
::
E\xbc\xdcs
;

947 
	`s\xfc\xa9ch_f\x9\x93
(
mode
);

949 } i\xe0((
mode
 =\xf0
READ
 && (
fd
 =
	`ݒ
(
y\x\xafk_f\x9\x93
, 0)) < 0) ||

950 (
mode
 =\xf0
WRITE
 && (
fd
 =
	`\xfc\x97t
(
y\x\xafk_f\x9\x93
, 0644)) < 0)) {

951
y\x\xafk_\xa1\xa9us
 =
NOT_VALID
;

952 
R\x91u\xbaCode
::
E\xbc\xdcs
;

955
	`\x\xe3\x97r_buf\xe3r
();

956 
fd
;

957
	}
}

981 
	gty\xb3d_ex\xb4essi\xda
[
LINE_LEN
];

986
	$SF
(\xe8{
	`\xa3\xacch
("S\x97rch f\xdcw\xacd:",
FORWARD
);
	}
}

991
	$SR
(\xe8{
	`\xa3\xacch
("S\x97rch\x84ev\x94\xa3:",
REVERSE
);
	}
}

1000
REGEX
 *
	$g\x91_ex\xb4essi\xda
(
mes\xa7ge
)

1001 *
mes\xa7ge
;

1003 
REGEX

\xb4og\xbfm
;

1004 
exp_buf
[
LINE_LEN
];

1006 i\xe0(
	`g\x91_\xa1r\x9ag
(
mes\xa7ge
,
exp_buf
,
FALSE
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

1007 
NIL_REG
;

1009 i\xe0(
exp_buf
[0] =\xf0'\0' &&
ty\xb3d_ex\xb4essi\xda
[0] == '\0') {

1010
	`\x94r\xdc
("Nشeviou\xa0ex\xb4essi\xda.",
NIL_PTR
);

1011 
NIL_REG
;

1014 i\xe0(
exp_buf
[0] != '\0') {

1015
	`c\xddy_\xa1r\x9ag
(
ty\xb3d_ex\xb4essi\xda
,
exp_buf
);

1016
	`comp\x9\x93
(
exp_buf
, &
\xb4og\xbfm
);

1019 i\xe0(
\xb4og\xbfm
.
\xa1\xa9us
 =\xf0
REG_ERROR
) {

1020
	`\x94r\xdc
(
\xb4og\xbfm
.
\xbbsu\xc9
.
\x94r_mess
,
NIL_PTR
);

1021 
NIL_REG
;

1023  &
\xb4og\xbfm
;

1024
	}
}

1030
	$GR
(\xe8{
	`ch\x\xafge
("Glob\xae\x84\x95\xcf\xfb:",
VALID
);
	}
}

1035
	$LR
(\xe8{
	`ch\x\xafge
("L\x9a\x90\xbb\xb6a\xfb:",
NOT_VALID
);
	}
}

1043
	$ch\x\xafge
(
mes\xa7ge
,
f\x9\x93
) *message;

1044
FLAG

f\x9\x93
;

1046 
mess_buf
[
LINE_LEN
];

1047 
\xbb\xb6a\xfbm\x92t
[
LINE_LEN
];

1048
REGEX
 *
\xb4og\xbfm
;

1049 
LINE
 *
l\x9\xab
 =
cur_l\x9\xab
;

1050 *
\x8bx\x8d
;

1051 *
	`sub\xa1\x99u\x8b
();

1052 
l\x9\xabs
 = 0L;

1053 
subs
 = 0L;

1054 
\xb7ge
 =
y
;

1057
	`c\xddy_\xa1r\x9ag
(
mess_buf
,
mes\xa7ge
);

1058 i\xe0((
\xb4og\xbfm
 =
	`g\x91_ex\xb4essi\xda
(
mess_buf
)\xe8=\xf0
NIL_REG
)

1062
	`bu\x9ed_\xa1r\x9ag
(
mess_buf
, "%\xa0%\xa0by:", mess_buf,
ty\xb3d_ex\xb4essi\xda
);

1063 i\xe0(
	`g\x91_\xa1r\x9ag
(
mess_buf
,
\xbb\xb6a\xfbm\x92t
,
FALSE
\xe8=\xf0
R\x91u\xbaCode
::
E\xbc\xdcs
)

1066
	`\xa3t_curs\xdc
(0,
YMAX
);

1067
	`\xe6ush
();

1070 i\xe0(
	`l\x9\xab_check
(
\xb4og\xbfm
,
l\x9\xab
->
\x8bxt
,
FORWARD
)) {

1071
l\x9\xabs
++;

1074
subs
++;

1075 i\xe0((
\x8bx\x8d
 =
	`sub\xa1\x99u\x8b
(
l\x9\xab
,
\xb4og\xbfm
,
\xbb\xb6a\xfbm\x92t
)\xe8=\xf0
NIL_PTR
)

1077 } (
\xb4og\xbfm
->
\xa1\xa9us
 &
BEGIN_LINE
) != BEGIN_LINE &&

1078 (
\xb4og\xbfm
->
\xa1\xa9us
 &
END_LINE
) != END_LINE &&

1079
	`l\x9\xab_check
(
\xb4og\xbfm
,
\x8bx\x8d
,
FORWARD
));

1081 i\xe0(
\xb7ge
 <\xf0
SCREENMAX
) {

1082
	`\xa3t_curs\xdc
(0,
\xb7ge
);

1083
	`l\x9\xab_\xb4\x9\xa9
(
l\x9\xab
);

1086 i\xe0(
\xb7ge
 <\xf0
SCREENMAX
)

1087
\xb7ge
++;

1088
l\x9\xab
 =\x86\x9ae->
\xc3xt
;

1089 } 
l\x9\xab
 !\xf0
\x8f\x9e
 &&
f\x9\x93
 =\xf0
VALID
 &&
qu\x99
 =\xf0
FALSE
);

1091
	`c\xddy_\xa1r\x9ag
(
mess_buf
, (
qu\x99
 =\xf0
TRUE
) ? "(Aborted) " : "");

1093 i\xe0(
subs
 =\xf00L &&
qu\x99
 =\xf0
FALSE
)

1094
	`\x94r\xdc
("P\xa9\x8b\xba\x82\xd9 found.",
NIL_PTR
);

1095 i\xe0(
l\x9\xabs
 >\xf0
REPORT
 ||
qu\x99
 =\xf0
TRUE
) {

1096
	`bu\x9ed_\xa1r\x9ag
(
mess_buf
, "%\xa0%D sub\xa1\x99utiڠ\xda %D\x86\x9aes.", mess_buf,
subs
,
l\x9\xabs
);

1097
	`\xa1\xa9us_l\x9\xab
(
mess_buf
,
NIL_PTR
);

1098 } i\xe0(
f\x9\x93
 =\xf0
NOT_VALID
 &&
subs
 >\xf0
REPORT
)

1099
	`\xa1\xa9us_l\x9\xab
(
	`num_out
(
subs
), " substitutions.");

1101
	`\x\xe3\x97r_\xa1\xa9us
();

1102
	`move_to
(
x
,
y
);

1103
	}
}

1110 *
	$sub\xa1\x99u\x8b
(
l\x9\xab
,
\xb4og\xbfm
,
\xbb\xb6a\xfbm\x92t
)

1111
LINE
 *
l\x9\xab
;

1112
REGEX
 *
\xb4og\xbfm
;

1113 *
\xbb\xb6a\xfbm\x92t
;

1115 *
\x8bx\x8d
 =
\x8bxt_buf\xe3r
;

1116 *
subp
 =
\xbb\xb6a\xfbm\x92t
;

1117 *
l\x9a\x95
 =
l\x9\xab
->
\x8bxt
;

1118 *
amp
;

1120
modif\x9bd
 =
TRUE
;

1123 
l\x9a\x95
 !\xf0
\xb4og\xbfm
->
\xa1\xact_\xb1r
)

1124 *
\x8bx\x8d
++ = *
l\x9a\x95
++;

1130 *
subp
 !\xf0'\0' &&
\x8bx\x8d
 < &
\x8bxt_buf\xe3r
[
MAX_CHARS
]) {

1131 i\xe0(*
subp
 == '&') {

1132
amp
 =
\xb4og\xbfm
->
\xa1\xact_\xb1r
;

1133 
amp
 <
\xb4og\xbfm
->
\x92d_\xb1r
 &&
\x8bx\x8d
 < &
\x8bxt_buf\xe3r
[
MAX_CHARS
])

1134 *
\x8bx\x8d
++ = *
amp
++;

1135
subp
++;

1137 i\xe0(*
subp
 == '\\' && *(subp + 1) != '\0')

1138
subp
++;

1139 *
\x8bx\x8d
++ = *
subp
++;

1144 i\xe0(
	`\xcbngth_of
(
\x8bxt_buf\xe3r
\xe8+\x86\x92gth_of(
\xb4og\xbfm
->
\x92d_\xb1r
\xe8>\xf0
MAX_CHARS
) {

1145
	`\x94r\xdc
("Sub\xa1\x99utiڄesu\xc9:\x86\x9a\x90to\xd8big",
NIL_PTR
);

1146 
NIL_PTR
;

1150
	`c\xddy_\xa1r\x9ag
(
\x8bx\x8d
,
\xb4og\xbfm
->
\x92d_\xb1r
);

1153
	`\xe4\x93_\xa5a\xfb
(
l\x9\xab
->
\x8bxt
);

1154
l\x9\xab
->
\x8bxt
 =
	`\x\xabloc
(
	`\xcbngth_of
(
\x8bxt_buf\xe3r
) + 1);

1155
	`c\xddy_\xa1r\x9ag
(
l\x9\xab
->
\x8bxt
,
\x8bxt_buf\xe3r
);

1157  (
l\x9\xab
->
\x8bxt
 + (
\x8bx\x8d
 -
\x8bxt_buf\xe3r
));

1158
	}
}

1167
	$\xa3\xacch
(
mes\xa7ge
,
m\x91hod
) *message;

1168
FLAG

m\x91hod
;

1170 
REGEX
 *
\xb4og\xbfm
;

1171 
LINE
 *
m\xa9ch_l\x9\xab
;

1174 i\xe0((
\xb4og\xbfm
 =
	`g\x91_ex\xb4essi\xda
(
mes\xa7ge
)\xe8=\xf0
NIL_REG
)

1177
	`\xa3t_curs\xdc
(0,
YMAX
);

1178
	`\xe6ush
();

1180 i\xe0((
m\xa9ch_l\x9\xab
 =
	`m\xa9ch
(
\xb4og\xbfm
,
cur_\x8bxt
,
m\x91hod
)\xe8=\xf0
NIL_LINE
) {

1181 i\xe0(
qu\x99
 =\xf0
TRUE
)

1182
	`\xa1\xa9us_l\x9\xab
("Ab܋d",
NIL_PTR
);

1184
	`\xa1\xa9us_l\x9\xab
("P\xa9\x8b\xba\x82\xd9 found.",
NIL_PTR
);

1188
	`move
(0,
\xb4og\xbfm
->
\xa1\xact_\xb1r
,
	`f\x9ad_y
(
m\xa9ch_l\x9\xab
));

1189
	`\x\xe3\x97r_\xa1\xa9us
();

1190
	}
}

1197
	$f\x9ad_y
(
m\xa9ch_l\x9\xab
\xe8
LINE
 *match_line;

1199 
LINE
 *
l\x9\xab
;

1200 
cou\xc1
 = 0;

1203 
l\x9\xab
 =
t\xdd_l\x9\xab
;\x86\x9a\x90!\xf0
m\xa9ch_l\x9\xab
 &&\x86\x9a\x90!\xf0
b\xd9_l\x9\xab
->
\xc3xt
;\x86ine =\x86ine->next)

1204
cou\xc1
++;

1205 i\xe0(
l\x9\xab
 !\xf0
b\xd9_l\x9\xab
->
\xc3xt
)

1206 
cou\xc1
;

1209 i\xe0((
l\x9\xab
 =
	`\xb4o\xfbed
(
m\xa9ch_l\x9\xab
, -(
SCREENMAX
 >> 1))\xe8=\xf0
h\x97d\x94
) {

1211
cou\xc1
 = 0;

1212 
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;\x86\x9a\x90!\xf0
m\xa9ch_l\x9\xab
;\x86ine =\x86ine->next)

1213
cou\xc1
++;

1214
l\x9\xab
 =
h\x97d\x94
->
\xc3xt
;

1216
cou\xc1
 =
SCREENMAX
 >> 1;

1219
	`\xbb\xa3t
(
l\x9\xab
, 0);

1220
	`RD
();

1222 
cou\xc1
;

1223
	}
}

1226 
	#NORMAL
 0x0200

	)

1227 
	#DOT
 0x0400

	)

1228 
	#EOLN
 0x0800

	)

1229 
	#STAR
 0x1000

	)

1230 
	#BRACKET
 0x2000

	)

1231 
	#NEGATE
 0x0100

	)

1232 
	#DONE
 0x4000

	)

1235 
	#LOW_BYTE
 0x00FF

	)

1236 
	#HIGH_BYTE
 0xFF00

	)

1239 
	#\xb4evious
(
\xb1r
\xe8(*(Ռ\xe8- 1))

	)

1242 
	gexp_buf\xe3r
[
BLOCK_SIZE
];

1245 *
	gtoo_l\xdag
 = "Regular\x83xpression\x81oo\x86ong";

1251 
	#\xbbg_\x94r\xdc
(
\xa1r
\xe8
\xb4og\xbfm
->
\xa1\xa9us
 =
REG_ERROR
,\x85rog\xbfm->
\xbbsu\xc9
.
\x94r_mess
 = (\xa1r)

	)

1257
	$f\x9aished
(
\xb4og\xbfm
,
ϡ_exp
\xe8
REGEX
 *program;

1258 *
ϡ_exp
;

1260 
\xcbngth
 = (
ϡ_exp
 -
exp_buf\xe3r
) * ();

1263
\xb4og\xbfm
->
\xbbsu\xc9
.
ex\xb4essi\xda
 = (*)
	`\x\xabloc
(
\xcbngth
);

1265
	`bc\xddy
(
exp_buf\xe3r
,
\xb4og\xbfm
->
\xbbsu\xc9
.
ex\xb4essi\xda
,
\xcbngth
);

1266
	}
}

1271
	$bc\xddy
(
\xe4om
,
to
,
by\x8bs
) *from, *to;

1272 
by\x8bs
;

1274 
by\x8bs
--)

1275 *
to
++ = *
\xe4om
++;

1276
	}
}

1285
	$comp\x9\x93
(
\xb7\x89\x94n
,
\xb4og\xbfm
) *pattern;

1286
REGEX
 *
\xb4og\xbfm
;

1288 *
ex\xb4essi\xda
 =
exp_buf\xe3r
;

1289 *
\xb4ev_ch\xac
;

1290 *
ac\xf9_f\x9bld
;

1291
FLAG

\xc3g\xa9e
;

1292 
low_ch\xac
;

1293 
c
;

1296 i\xe0(*
\xb7\x89\x94n
 == '^') {

1297
\xb4og\xbfm
->
\xa1\xa9us
 =
BEGIN_LINE
;

1298
\xb7\x89\x94n
++;

1300
\xb4og\xbfm
->
\xa1\xa9us
 = 0;

1302 i\xe0(*
\xb7\x89\x94n
 == '*') {

1303 *
ex\xb4essi\xda
++ = '*' +
NORMAL
;

1304
\xb7\x89\x94n
++;

1309 
c
 = *
\xb7\x89\x94n
++) {

1311 *
ex\xb4essi\xda
++ =
DOT
;

1317 i\xe0(*
\xb7\x89\x94n
 == '\0') {

1318 *
ex\xb4essi\xda
++ =
EOLN
 |
DONE
;

1319
\xb4og\xbfm
->
\xa1\xa9us
 |\xf0
END_LINE
;

1320
	`f\x9aished
(
\xb4og\xbfm
,
ex\xb4essi\xda
);

1323 *
ex\xb4essi\xda
++ =
NORMAL
 + '$';

1326 *
ex\xb4essi\xda
++ =
DONE
;

1327
	`f\x9aished
(
\xb4og\xbfm
,
ex\xb4essi\xda
);

1331 i\xe0(*
\xb7\x89\x94n
 == '\0')

1332 *
ex\xb4essi\xda
++ =
NORMAL
 + '\\';

1334 *
ex\xb4essi\xda
++ =
NORMAL
 + *
\xb7\x89\x94n
++;

1341
\xb4ev_ch\xac
 =
ex\xb4essi\xda
 - 1;

1342 i\xe0(*
\xb4ev_ch\xac
 &
BRACKET
)

1343 *(
ex\xb4essi\xda
 - (*
ac\xf9_f\x9bld
 &
LOW_BYTE
)\xe8|\xf0
STAR
;

1345 *
\xb4ev_ch\xac
 |\xf0
STAR
;

1357
ac\xf9_f\x9bld
 =
ex\xb4essi\xda
++;

1358 i\xe0(*
\xb7\x89\x94n
 == '^') {

1359
\xb7\x89\x94n
++;

1360
\xc3g\xa9e
 =
TRUE
;

1362
\xc3g\xa9e
 =
FALSE
;

1363 *
\xb7\x89\x94n
 != ']') {

1364 i\xe0(*
\xb7\x89\x94n
 == '\0') {

1365
	`\xbbg_\x94r\xdc
("Missing ]");

1368 i\xe0(*
\xb7\x89\x94n
 == '\\')

1369
\xb7\x89\x94n
++;

1370 *
ex\xb4essi\xda
++ = *
\xb7\x89\x94n
++;

1371 i\xe0(*
\xb7\x89\x94n
 == '-') {

1373
low_ch\xac
 =
	`\xb4evious
(
\xb7\x89\x94n
);

1374
\xb7\x89\x94n
++;

1375 i\xe0(
low_ch\xac
++ > *
\xb7\x89\x94n
) {

1376
	`\xbbg_\x94r\xdc
("Bad\x84ange in [a-z]");

1380 
low_ch\xac
 <\xf0*
\xb7\x89\x94n
)

1381 *
ex\xb4essi\xda
++ =
low_ch\xac
++;

1382
\xb7\x89\x94n
++;

1384 i\xe0(
ex\xb4essi\xda
 >\xf0&
exp_buf\xe3r
[
BLOCK_SIZE
]) {

1385
	`\xbbg_\x94r\xdc
(
too_l\xdag
);

1389
\xb7\x89\x94n
++;

1391 i\xe0((*
ac\xf9_f\x9bld
 = (
ex\xb4essi\xda
 -\x87cct_field)) == 1) {

1392
	`\xbbg_\x94r\xdc
("Empty []");

1396 *
ac\xf9_f\x9bld
 |\xf0
BRACKET
;

1397 i\xe0(
\xc3g\xa9e
 =\xf0
TRUE
)

1398 *
ac\xf9_f\x9bld
 |\xf0
NEGATE
;

1403
	`\xb4evious
(
ex\xb4essi\xda
\xe8|\xf0
BRACKET
;

1406 *
ex\xb4essi\xda
++ =
c
 +
NORMAL
;

1408 i\xe0(
ex\xb4essi\xda
 =\xf0&
exp_buf\xe3r
[
BLOCK_SIZE
]) {

1409
	`\xbbg_\x94r\xdc
(
too_l\xdag
);

1414
	}
}

1422
LINE
 *
	$m\xa9ch
(
\xb4og\xbfm
,
\xa1r\x9ag
,
m\x91hod
)

1423
REGEX
 *
\xb4og\xbfm
;

1424 *
\xa1r\x9ag
;

1425 
FLAG

m\x91hod
;

1427 
LINE
 *
l\x9\xab
 =
cur_l\x9\xab
;

1428 
\xded_ch\xac
;

1431 i\xe0(
\xb4og\xbfm
->
\xa1\xa9us
 =\xf0
REG_ERROR
)

1432 
NIL_LINE
;

1435 i\xe0(!(
\xb4og\xbfm
->
\xa1\xa9us
 &
BEGIN_LINE
)) {

1436 i\xe0(
m\x91hod
 =\xf0
FORWARD
) {

1437 i\xe0(
	`l\x9\xab_check
(
\xb4og\xbfm
,
\xa1r\x9ag
 + 1,
m\x91hod
\xe8=\xf0
MATCH
)

1438 
cur_l\x9\xab
;

1439 } i\xe0(!(
\xb4og\xbfm
->
\xa1\xa9us
 &
END_LINE
)) {

1440
\xded_ch\xac
 = *
\xa1r\x9ag
;

1441 *
\xa1r\x9ag
 = '\n';

1442 i\xe0(
	`l\x9\xab_check
(
\xb4og\xbfm
,
l\x9\xab
->
\x8bxt
,
m\x91hod
\xe8=\xf0
MATCH
) {

1443 *
\xa1r\x9ag
 =
\xded_ch\xac
;

1444 
cur_l\x9\xab
;

1446 *
\xa1r\x9ag
 =
\xded_ch\xac
;

1452
l\x9\xab
 = (
m\x91hod
 =\xf0
FORWARD
\xe8?\x86\x9ae->
\xc3xt
 :\x86\x9ae->
\xb4ev
;

1453 i\xe0(
l\x9\xab
->
\x8bxt
 =\xf0
NIL_PTR
)

1455 i\xe0(
	`l\x9\xab_check
(
\xb4og\xbfm
,
l\x9\xab
->
\x8bxt
,
m\x91hod
\xe8=\xf0
MATCH
)

1456 
l\x9\xab
;

1457 } 
l\x9\xab
 !\xf0
cur_l\x9\xab
 &&
qu\x99
 =\xf0
FALSE
);

1460 
NIL_LINE
;

1461
	}
}

1468
	$l\x9\xab_check
(
\xb4og\xbfm
,
\xa1r\x9ag
,
m\x91hod
\xe8
REGEX
 *program;

1469 *
\xa1r\x9ag
;

1470
FLAG

m\x91hod
;

1472 *
\x8bx\x8d
 =
\xa1r\x9ag
;

1475
\xb4og\xbfm
->
\xa1\xact_\xb1r
 =
\x8bx\x8d
;

1478 i\xe0(
\xb4og\xbfm
->
\xa1\xa9us
 &
BEGIN_LINE
)

1479 
	`check_\xa1r\x9ag
(
\xb4og\xbfm
,
\xa1r\x9ag
,
NIL_INT
);

1481 i\xe0(
m\x91hod
 =\xf0
REVERSE
) {

1483 
\x8bx\x8d
 =
\xa1r\x9ag
; *textp != '\n';\x81extp++)

1486 
\x8bx\x8d
 >\xf0
\xa1r\x9ag
) {

1487
\xb4og\xbfm
->
\xa1\xact_\xb1r
 =
\x8bx\x8d
;

1488 i\xe0(
	`check_\xa1r\x9ag
(
\xb4og\xbfm
,
\x8bx\x8d
--,
NIL_INT
))

1489 
MATCH
;

1493 
qu\x99
 =\xf0
FALSE
 && *
\x8bx\x8d
 != '\0') {

1494
\xb4og\xbfm
->
\xa1\xact_\xb1r
 =
\x8bx\x8d
;

1495 i\xe0(
	`check_\xa1r\x9ag
(
\xb4og\xbfm
,
\x8bx\x8d
,
NIL_INT
))

1496 
MATCH
;

1497 i\xe0(*
\x8bx\x8d
 == '\n')

1499
\x8bx\x8d
++;

1503 
NO_MATCH
;

1504
	}
}

1514
	$check_\xa1r\x9ag
(
\xb4og\xbfm
,
\xa1r\x9ag
,
ex\xb4essi\xda
\xe8
REGEX
 *program;

1515 *
\xa1r\x9ag
;

1516 *
ex\xb4essi\xda
;

1518 
\xddcode
;

1519 
c
;

1520 *
m\xack
;

1521 
\xa1\xac_\xe6
;

1523 i\xe0(
ex\xb4essi\xda
 =\xf0
NIL_INT
)

1524
ex\xb4essi\xda
 =
\xb4og\xbfm
->
\xbbsu\xc9
.expression;

1527 
qu\x99
 =\xf0
FALSE
 && !(*
ex\xb4essi\xda
 &
DONE
\xe8&& *
\xa1r\x9ag
 != '\0' && *string != '\n') {

1528
c
 = *
ex\xb4essi\xda
 &
LOW_BYTE
;

1529
\xddcode
 = *
ex\xb4essi\xda
 &
HIGH_BYTE
;

1530 i\xe0(
\xa1\xac_\xe6
 = (
\xddcode
 &
STAR
)) {

1531
\xddcode
 &\xf0~
STAR
;

1532
m\xack
 =
\xa1r\x9ag
;

1534
ex\xb4essi\xda
++;

1535 
\xddcode
) {

1536 
NORMAL
:

1537 i\xe0(
\xa1\xac_\xe6
)

1538 *
\xa1r\x9ag
++ =\xf0
c
)

1540 i\xe0(*
\xa1r\x9ag
++ !\xf0
c
)

1541 
NO_MATCH
;

1543 
DOT
:

1544
\xa1r\x9ag
++;

1545 i\xe0(
\xa1\xac_\xe6
)

1546 *
\xa1r\x9ag
 != '\0' && *string++ != '\n')

1549 
NEGATE
 |
BRACKET
:

1550 
BRACKET
:

1551 i\xe0(
\xa1\xac_\xe6
)

1552 
	`\x9a_li\xa1
(
ex\xb4essi\xda
, *
\xa1r\x9ag
++,
c
,
\xddcode
\xe8=\xf0
MATCH
)

1554 i\xe0(
	`\x9a_li\xa1
(
ex\xb4essi\xda
, *
\xa1r\x9ag
++,
c
,
\xddcode
\xe8=\xf0
NO_MATCH
)

1555 
NO_MATCH
;

1556
ex\xb4essi\xda
 +\xf0
c
 - 1;

1559
	`\xb7nic
("Corrupted\x85rogram in check_string()");

1561 i\xe0(
\xa1\xac_\xe6
)

1562 
	`\xa1\xac
(
\xb4og\xbfm
,
m\xack
,
\xa1r\x9ag
,
ex\xb4essi\xda
);

1564 i\xe0(*
ex\xb4essi\xda
 &
DONE
) {

1565
\xb4og\xbfm
->
\x92d_\xb1r
 =
\xa1r\x9ag
;

1572 i\xe0((*
ex\xb4essi\xda
 &
EOLN
\xe8&& *
\xa1r\x9ag
 != '\n' && *string != '\0')

1573 
NO_MATCH
;

1574 i\xe0(
\xa1r\x9ag
 =\xf0
\xb4og\xbfm
->
\xa1\xact_\xb1r
 && !\xd5rog\xbfm->
\xa1\xa9us
 &
BEGIN_LINE
) &&

1575 !(*
ex\xb4essi\xda
 &
EOLN
))

1576 
NO_MATCH
;

1577 
MATCH
;

1579 
NO_MATCH
;

1580
	}
}

1587
	$\xa1\xac
(
\xb4og\xbfm
,
\x92d_pos\x99i\xda
,
\xa1r\x9ag
,
ex\xb4essi\xda
\xe8
REGEX
 *program;

1588 *
\x92d_pos\x99i\xda
;

1589 *
\xa1r\x9ag
;

1590 *
ex\xb4essi\xda
;

1593
\xa1r\x9ag
--;

1594 i\xe0(
	`check_\xa1r\x9ag
(
\xb4og\xbfm
,
\xa1r\x9ag
,
ex\xb4essi\xda
))

1595 
MATCH
;

1596 } 
\xa1r\x9ag
 !\xf0
\x92d_pos\x99i\xda
);

1598 
NO_MATCH
;

1599
	}
}

1606
	$\x9a_li\xa1
(
li\xa1
,
c
,
li\xa1_\xcbngth
,
\xddcode
) *list;

1607 
c
;

1608 
li\xa1_\xcbngth
;

1609 
\xddcode
;

1611 i\xe0(
c
 == '\0' || c == '\n')

1612 
NO_MATCH
;

1613 
li\xa1_\xcbngth
-- > 1) {

1614 i\xe0((*
li\xa1
 &
LOW_BYTE
\xe8=\xf0
c
)

1615  (
\xddcode
 &
NEGATE
\xe8?
NO_MATCH
 :
MATCH
;

1616
li\xa1
++;

1618  (
\xddcode
 &
NEGATE
\xe8?
MATCH
 :
NO_MATCH
;

1619
	}
}

1626
	$dummy_l\x9\xab
() {

1627 ()
	`l\x9\xab_\x9a\xa3\xb9
(
\x8f\x9e
->
\xb4ev
, "\n", 1);

1628
\x8f\x9e
->
\xb4ev
->
shi\xe1_cou\xc1
 =
DUMMY
;

1629 i\xe0(
ϡ_y
 !\xf0
SCREENMAX
) {

1630
ϡ_y
++;

1631
b\xd9_l\x9\xab
 = b\xd9_l\x9ae->
\xc3xt
;

1633
	}
}

	@commands/mkdir.cpp

9 
	~"sig\xc7l.h\xb5
"

11 
	g\x94r\xdc
 = 0;

14 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

15 i\xe0(
\xacgc
 < 2) {

16
	`\xa1d_\x94r
("Usage: mkdir directory...\n");

17
	`ex\x99
(1);

19
	`sig\xc7l
(
SIGHUP
,
SIG_IGN
);

20
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

21
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

22
	`sig\xc7l
(
SIGTERM
,
SIG_IGN
);

23 --
\xacgc
)

24
	`maked\x9c
(*++
\xacgv
);

25 i\xe0(
\x94r\xdc
)

26
	`ex\x99
(1);

27
	}
}

30 
	$maked\x9c
(*
d\x9c\xc7me
) {

31 
d\xd9s
[128],
\xb7\xbb\xc1
[128];

32 
\xa6
 = 0,
i
 = 0;

34 
d\x9c\xc7me
[
i
])

35 i\xe0(
d\x9c\xc7me
[
i
++] == '/')

36
\xa6
 =
i
;

37
	`\xa1\xba\xfdy
(
\xb7\xbb\xc1
,
d\x9c\xc7me
,
\xa6
);

38
\xb7\xbb\xc1
[
\xa6
] = '\0';

39
	`\xa1r\xf\xe1
(
\xb7\xbb\xc1
, ".");

40 i\xe0(
	`ac\xfbss
(
\xb7\xbb\xc1
, 2)) {

41
	`\xa1d\x94r3
("mkd\x9c: c\xaa'\x88ac\xfbs\xa0",
\xb7\xbb\xc1
, "\n");

42
	`ex\x99
(1);

44 i\xe0(
	`mknod
(
d\x9c\xc7me
, 040777, 0)) {

45
	`\xa1d\x94r3
("mkd\x9c: c\xaa'\x88\xfc\x97\x8b ",
d\x9c\xc7me
, "\n");

46
\x94r\xdc
++;

49
	`chown
(
d\x9c\xc7me
,
	`g\x91uid
(),
	`g\x91gid
());

50
	`\xa1r\xfdy
(
d\xd9s
,
d\x9c\xc7me
);

51
	`\xa1r\xf\xe1
(
d\xd9s
, "/.");

52 i\xe0(
	`l\x9ak
(
d\x9c\xc7me
,
d\xd9s
)) {

53
	`\xa1d\x94r3
("mkd\x9c: c\xaa'\x88l\x9ak ",
d\xd9s
, "\x81o ");

54
	`\xa1d\x94r3
(
d\x9c\xc7me
, "\n", "");

55
\x94r\xdc
++;

56
	`uƚk
(
d\x9c\xc7me
);

59
	`\xa1r\xf\xe1
(
d\xd9s
, ".");

60 i\xe0(
	`l\x9ak
(
\xb7\xbb\xc1
,
d\xd9s
)) {

61
	`\xa1d\x94r3
("mkd\x9c: c\xaa'\x88l\x9ak ",
d\xd9s
, "\x81o ");

62
	`\xa1d\x94r3
(
\xb7\xbb\xc1
, "\n", "");

63
\x94r\xdc
++;

64
d\xd9s
[
	`\xa1\xbe\x92
(dots)] = '\0';

65
	`uƚk
(
d\xd9s
);

66
	`uƚk
(
d\x9c\xc7me
);

69
	}
}

72 
	$\xa1d\x94r3
(cڡ *
s1
, cڡ *
s2
, cڡ *
s3
) {

73
	`\xa1d_\x94r
(
s1
);

74
	`\xa1d_\x94r
(
s2
);

75
	`\xa1d_\x94r
(
s3
);

76
	}
}

	@commands/mkfs.cpp

21 
	~"../fs/cڡ.h
"

22 
	~"../h/cڡ.h\xb5
"

23 
	~"../h/ty\xb3.h\xb5
"

24 #unde\xe0
EXTERN


25 
	#EXTERN


	)

26 
	~"../fs/su\xb3r.h
"

27 
	~"../fs/ty\xb3.h
"

29 #ifde\xe0
DOS


30 
	~"/lib/c86/\xa1dio.h
"

31 
	#COMPILERFLAG


	)

34 #ifde\xe0
UNIX


35 
	~<\xa1dio.h
>

36 
	~<sys/\xa1\xa9.h
>

37 
	~<sys/ty\xb3s.h
>

38 
	#COMPILERFLAG


	)

41 #i\xe2de\xe0
COMPILERFLAG


42 
	~"\xa1\xa9.h\xb5
"

43 
	~"\xa1dio.h\xb5
"

46 #i\xe2de\xe0
DOS


47 #i\xe2de\xe0
UNIX


48 
	#UNIX


	)

52 #ifde\xe0
UNIX


53 #unde\xe0
\xb4\x9atf


56 
	#INODE_MAP
 2

	)

57 
	#ZONE_MAP
 3

	)

58 
	#MAX_TOKENS
 10

	)

59 
	#LINE_LEN
 200

	)

60 
	#BIN
 2

	)

61 
	#BINGRP
 2

	)

62 
	#BIT_MAP_SHIFT
 13

	)

63 
	#N_BLOCKS
 32000

	)

65 #ifde\xe0
DOS


66 
	#BREAD
 4

	)

67 
	#BWRITE
 5

	)

69 
	#BREAD
 0

	)

70 
	#BWRITE
 1

	)

73 
	g\xc3xt_z\xd\xab
,
	g\xc3xt_\x9aode
,
	gz\xd\xab_size
,
	gz\xd\xab_shi\xe1
 = 0,
	gzoff
,
	g\xc4blocks
,
	g\x9aode_off\xa3t
,
	gĚodes
,

74
	gl\xf9
 = 1,
	gdisk
,
	gfd
,
	g\xb4\x9\xa9
 = 0,
	gf\x9\x93
 = 0,
	gov\x94ride
 = 0,

75
	gsim\xb6e
 = 0;

77 
	gcu\xbc\x92t_time
;

78 
	gz\x94o
[
BLOCK_SIZE
], *
	gϡp
;

79 
	gum\xad
[(
N_BLOCKS
 + 8) / 8];

81
FILE
 *
	g\xb4\xd9o
;

82 
l\xa3ek
();

83 *
	gsize_fmt
 = "%6D";

84 *
	gldfmt
 = "%6ld";

85 *
	gmode_fmt
 = "%6o";

86 *
	gldmode
 = "%06o";

87 
	ggw\xa\xfa\x9ag
[] = {65, 46, 83, 46, 84, 97, 110, 101, 110, 98, 97, 117, 109, 10};

95 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

96 
i
,
blocks
,
z\xd\xabs
,
\x9aodes
,
mode
,
u\xa4id
,
g\xbdid
,
badu\xa7ge
 = 0;

97 *
tok\x92
[
MAX_TOKENS
],
buf
[
BLOCK_SIZE
];

98 
\x8b\xa1b
[2];

99
FILE
 *
	`fݒ
();

100 
	`time
(),
ls
;

101 
\xa1\xa9

\xa1\xa9buf
;

105
cu\xbc\x92t_time
 =
	`time
(0L);

106 i\xe0(
\xacgc
 != 3 &&\x87rgc != 4)

107
badu\xa7ge
 = 1;

108 i\xe0(
	`\xa1\xa9
(
\xacgv
[
\xacgc
 - 1], &
\xa1\xa9buf
) == 0) {

109 i\xe0((
\xa1\xa9buf
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFREG
)

110
badu\xa7ge
 = 1;

112 i\xe0(
badu\xa7ge
) {

113
	`wr\x99e
(2, "Usage: mkfs [-L] special\x85roto\n", 31);

114
	`ex\x99
(1);

116 --
\xacgc
) {

117 
\xacgv
[
\xacgc
][0]) {

119 *++
\xacgv
[
\xacgc
])

120 *
\xacgv
[
\xacgc
]) {

122
\xb4\x9at
 = 1;

125
\xb4\x9at
 = 1;

126
size_fmt
 =
ldfmt
;

127
mode_fmt
 =
ldmode
;

131
ov\x94ride
 = 1;

134
	`\xb4\x9\xa9f
("Bad sw\x99ch %c, ign\xdced.\n", *
\xacgv
[
\xacgc
]);

141
\xb4\xd9o
 =
	`fݒ
(
\xacgv
[
\xacgc
], "r");

142 i\xe0(
\xb4\xd9o
 !\xf0
NULL
) {

144
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

147
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

148
blocks
 =
	`\xa9oi
(
tok\x92
[0]);

149 i\xe0(
blocks
 >
N_BLOCKS
)

150
	`\xb3x\x99
("Block count\x81oo\x86arge");

151
\x9aodes
 =
	`\xa9oi
(
tok\x92
[1]);

154
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

155
mode
 =
	`mode_c\xda
(
tok\x92
[0]);

156
u\xa4id
 =
	`\xa9oi
(
tok\x92
[1]);

157
g\xbdid
 =
	`\xa9oi
(
tok\x92
[2]);

162
blocks
 =
	`\xa9oi
(
\xacgv
[
\xacgc
]);

163 i\xe0(
blocks
 < 4)

164
	`\xb3x\x99
("Can't open\x85rototype file");

167
\x9aodes
 = (
blocks
 / 3) + 8;

168
mode
 = 040777;

169
u\xa4id
 =
BIN
;

170
g\xbdid
 =
BINGRP
;

171
sim\xb6e
 = 1;

175
\xacgc
--;

176
	`\xa5ec\x9\xe6
(
\xacgv
[
\xacgc
]);

178
\xc4blocks
 =
blocks
;

179
Ěodes
 =
\x9aodes
;

183 #ifde\xe0
UNIX


185
ls
 =
	`l\xa3ek
(
fd
, (()
blocks
 - 1L\xe8*
BLOCK_SIZE
, 0);

186
\x8b\xa1b
[0] = 0x3245;

187
\x8b\xa1b
[1] = 0x11FF;

188 i\xe0(
	`wr\x99e
(
fd
,
\x8b\xa1b
,
BLOCK_SIZE
) != BLOCK_SIZE)

189
	`\xb3x\x99
("File system is\x81oo big for minor device");

190
	`l\xa3ek
(
fd
, (()
blocks
 - 1L\xe8*
BLOCK_SIZE
, 0);

191
\x8b\xa1b
[0] = 0;

192
\x8b\xa1b
[1] = 0;

193
i
 =
	`\xbbad
(
fd
,
\x8b\xa1b
,
BLOCK_SIZE
);

194 i\xe0(
i
 !\xf0
BLOCK_SIZE
 ||
\x8b\xa1b
[0] != 0x3245 ||\x81estb[1] != 0x11FF)

195
	`\xb3x\x99
("File system is\x81oo big for minor device");

196
	`l\xa3ek
(
fd
, 0L, 0);

201
	`\xffche_\x9a\x99
();

202
	`put_block
(0,
z\x94o
);

204
z\xd\xab_shi\xe1
 = 0;

205
z\xd\xabs
 =
blocks
 >>
z\xd\xab_shi\xe1
;

207
	`su\xb3r
(
z\xd\xabs
,
\x9aodes
);

209
i
 =
	`\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
);

210
	`ro\xd9d\x9c
(
i
);

211 i\xe0(
sim\xb6e
 == 0)

212
	`\x97t_d\x9c
(
i
);

214 i\xe0(
\xb4\x9at
)

215
	`\xb4\x9\xa9_fs
();

216
	`\xe6ush
();

219
	}
}

225
	$su\xb3r
(
z\xd\xabs
,
\x9aodes
) zones, inodes;

228 
i
,
\x9aodeblks
,
\x9a\x99blks
,
\x9a\x99z\xdaes
,
\xc4z\xdaes
;

229 
zo
;

230 
su\xb3r_block
 *
sup
;

231 
buf
[
BLOCK_SIZE
], *
\xfd
;

233
sup
 = (
su\xb3r_block
 *)
buf
;

235
sup
->
s_n\x9aodes
 =
\x9aodes
;

236
sup
->
s_nz\xd\xabs
 =
z\xd\xabs
;

237
sup
->
s_im\xad_blocks
 = (
\x9aodes
 + (1 <<
BIT_MAP_SHIFT
) - 1) >> BIT_MAP_SHIFT;

238
sup
->
s_zm\xad_blocks
 = (
z\xd\xabs
 + (1 <<
BIT_MAP_SHIFT
) - 1) >> BIT_MAP_SHIFT;

239
\x9aode_off\xa3t
 =
sup
->
s_im\xad_blocks
 + sup->
s_zm\xad_blocks
 + 2;

240
\x9aodeblks
 = (
\x9aodes
 +
INODES_PER_BLOCK
 - 1) / INODES_PER_BLOCK;

241
\x9a\x99blks
 =
\x9aode_off\xa3t
 +
\x9aodeblks
;

242
\x9a\x99z\xdaes
 = (
\x9a\x99blks
 + (1 <<
z\xd\xab_shi\xe1
) - 1) >> zone_shift;

243
\xc4z\xdaes
 =
\xc4blocks
 >>
z\xd\xab_shi\xe1
;

244
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
 = (
\x9a\x99blks
 + (1 <<
z\xd\xab_shi\xe1
) - 1) >> zone_shift;

245
zoff
 =
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
 - 1;

246
sup
->
s_log_z\xd\xab_size
 =
z\xd\xab_shi\xe1
;

247
sup
->
s_magic
 =
SUPER_MAGIC
;

248
zo
 = 7L + ()
NR_INDIRECTS
 + ()NR_INDIRECTS * NR_INDIRECTS;

249
sup
->
s_max_size
 =
zo
 *
BLOCK_SIZE
;

250
z\xd\xab_size
 = 1 <<
z\xd\xab_shi\xe1
;

252 
\xfd
 =
buf
 + (*
sup
); c\xb0< &buf[
BLOCK_SIZE
]; cp++)

253 *
\xfd
 = 0;

254
	`put_block
(1,
buf
);

257 
i
 = 2; i <
\x9a\x99blks
; i++)

258
	`put_block
(
i
,
z\x94o
);

260
\xc3xt_z\xdae
 =
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
;

261
\xc3xt_\x9aode
 = 1;

262
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
, 0, 1);

263
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
, 0, 1);

266
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
,
\xc4z\xdaes
 -
\x9a\x99z\xdaes
 + 1, 8 *
BLOCK_SIZE
 - (nrzones - initzones + 1));

267
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
,
\x9aodes
 + 1, 8 *
BLOCK_SIZE
 - inodes - 1);

268
	}
}

274
	$ro\xd9d\x9c
(
\x9aode
) inode;

276 
z
;

278
z
 =
	`\x\xabloc_z\xd\xab
();

279
	`add_z\xd\xab
(
\x9aode
,
z
, 32L,
cu\xbc\x92t_time
);

280
	`\x92\x8br_d\x9c
(
\x9aode
, ".", inode);

281
	`\x92\x8br_d\x9c
(
\x9aode
, "..", inode);

282
	`\x9a\xfc_l\x9ak
(
\x9aode
);

283
	`\x9a\xfc_l\x9ak
(
\x9aode
);

284
	}
}

290
	$\x97t_d\x9c
(
\xb7\xbb\xc1
) parent;

293 *
tok\x92
[
MAX_TOKENS
], *
p
;

294 
l\x9\xab
[
LINE_LEN
];

295 
mode
,
n
,
u\xa4id
,
g\xbdid
,
z
,
maj\xdc
,
m\x9a\xdc
,
f
;

296 
size
;

299
	`g\x91l\x9\xab
(
l\x9\xab
,
tok\x92
);

300
p
 =
tok\x92
[0];

301 i\xe0(*
p
 == '$')

303
p
 =
tok\x92
[1];

304
mode
 =
	`mode_c\xda
(
p
);

305
u\xa4id
 =
	`\xa9oi
(
tok\x92
[2]);

306
g\xbdid
 =
	`\xa9oi
(
tok\x92
[3]);

307 i\xe0(
g\xbdid
 & 0200)

308
	`wr\x99e
(2,
gw\xa\xfa\x9ag
, 14);

309
n
 =
	`\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
);

312
	`\x92\x8br_d\x9c
(
\xb7\xbb\xc1
,
tok\x92
[0],
n
);

313
	`\x9a\xfc_size
(
\xb7\xbb\xc1
, 16L);

316
	`\x9a\xfc_l\x9ak
(
n
);

317 i\xe0(*
p
 == 'd') {

319
z
 =
	`\x\xabloc_z\xd\xab
();

320
	`add_z\xd\xab
(
n
,
z
, 32L,
cu\xbc\x92t_time
);

321
	`\x92\x8br_d\x9c
(
n
, ".",\x82);

322
	`\x92\x8br_d\x9c
(
n
, "..",
\xb7\xbb\xc1
);

323
	`\x9a\xfc_l\x9ak
(
\xb7\xbb\xc1
);

324
	`\x9a\xfc_l\x9ak
(
n
);

325
	`\x97t_d\x9c
(
n
);

326 } i\xe0(*
p
 == 'b' || *p == 'c') {

328
maj\xdc
 =
	`\xa9oi
(
tok\x92
[4]);

329
m\x9a\xdc
 =
	`\xa9oi
(
tok\x92
[5]);

330
size
 =
	`\xa9oi
(
tok\x92
[6]);

331
size
 =
BLOCK_SIZE
 * size;

332
	`add_z\xd\xab
(
n
, (
maj\xdc
 << 8\xe8|
m\x9a\xdc
,
size
,
cu\xbc\x92t_time
);

335 i\xe0((
f
 =
	`ݒ
(
tok\x92
[4],
BREAD
)) < 0) {

336
	`wr\x99e
(2, "Can't open file ", 16);

337
	`wr\x99e
(2,
tok\x92
[4],
	`\xa1\xbe\x92
(token[4]));

338
	`wr\x99e
(2, "\n", 1);

340
	`\x97t_f\x9\x93
(
n
,
f
);

343
	}
}

350
	$\x97t_f\x9\x93
(
\x9aode
,
f
) inode, f;

352 
z
,
\xf9
,
i
,
j
,
k
;

353 
buf
[
BLOCK_SIZE
];

354 
	`f\x9\x93_time
();

357 
i
 = 0,
j
 = 0; i <
z\xd\xab_size
; i++, j +\xf0
\xf9
) {

358 
k
 = 0; k <
BLOCK_SIZE
; k++)

359
buf
[
k
] = 0;

360 i\xe0((
\xf9
 =
	`\xbbad
(
f
,
buf
,
BLOCK_SIZE
)) > 0) {

361 i\xe0(
i
 == 0)

362
z
 =
	`\x\xabloc_z\xd\xab
();

363
	`put_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
i
,
buf
);

366 i\xe0(
\xf9
)

367
	`add_z\xd\xab
(
\x9aode
,
z
, ()
j
,
	`f\x9\x93_time
(
f
));

368 } 
\xf9
 =\xf0
BLOCK_SIZE
);

369
	`\x\xe3o\xa3
(
f
);

370
	}
}

376
	$\x92\x8br_d\x9c
(
\xb7\xbb\xc1
,
\xc7me
,
ch\x9ed
) parent, child;

377 *
\xc7me
;

381 
i
,
j
,
k
,
l
,
b
,
z
,
off
;

382 *
p1
, *
p2
;

384 
\x9aumb
;

385 
\xc7me
[14];

386 }
d\x9c_\x92\x8cy
[
NR_DIR_ENTRIES
];

388
d_\x9aode

\x9ao
[
INODES_PER_BLOCK
];

390
b
 = ((
\xb7\xbb\xc1
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

391
off
 = (
\xb7\xbb\xc1
 - 1\xe8%
INODES_PER_BLOCK
;

392
	`g\x91_block
(
b
,
\x9ao
);

394 
k
 = 0; k <
NR_DZONE_NUM
; k++) {

395
z
 =
\x9ao
[
off
].
i_z\xd\xab
[
k
];

396 i\xe0(
z
 == 0) {

397
z
 =
	`\x\xabloc_z\xd\xab
();

398
\x9ao
[
off
].
i_z\xd\xab
[
k
] =
z
;

400 
l
 = 0;\x86 <
z\xd\xab_size
;\x86++) {

401
	`g\x91_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
l
,
d\x9c_\x92\x8cy
);

402 
i
 = 0; i <
NR_DIR_ENTRIES
; i++) {

403 i\xe0(
d\x9c_\x92\x8cy
[
i
].
\x9aumb
 == 0) {

404
d\x9c_\x92\x8cy
[
i
].
\x9aumb
 =
ch\x9ed
;

405
p1
 =
\xc7me
;

406
p2
 =
d\x9c_\x92\x8cy
[
i
].
\xc7me
;

407
j
 = 14;

408 
j
--) {

409 *
p2
++ = *
p1
;

410 i\xe0(*
p1
 != 0)

411
p1
++;

413
	`put_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
l
,
d\x9c_\x92\x8cy
);

414
	`put_block
(
b
,
\x9ao
);

421
	`\xb4\x9\xa9f
("D\x9ce\xf9\xdcy-\x9aod\x90%d bey\xdad d\x9ce\xf9 blocks. Could\x82ك\xc1\x94 %s\n",
\xb7\xbb\xc1
,
\xc7me
);

422
	`\xb3x\x99
("Halt");

423
	}
}

425
	$add_z\xd\xab
(
n
,
z
,
by\x8bs
,
cur_time
) n, z;

426 
by\x8bs
,
cur_time
;

430 
b
,
off
,
blk
[
INTS_PER_BLOCK
],
\x9ad\x9c
,
i
;

431
d_\x9aode
 *
p
;

432
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

434
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

435
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

436
	`g\x91_block
(
b
,
\x9aode
);

437
p
 = &
\x9aode
[
off
];

438
p
->
i_size
 +\xf0
by\x8bs
;

439
p
->
i_modtime
 =
cur_time
;

440 
i
 = 0; i <
NR_DZONE_NUM
; i++)

441 i\xe0(
p
->
i_z\xd\xab
[
i
] == 0) {

442
p
->
i_z\xd\xab
[
i
] =
z
;

443
	`put_block
(
b
,
\x9aode
);

446
	`put_block
(
b
,
\x9aode
);

449 i\xe0(
p
->
i_z\xd\xab
[
NR_DZONE_NUM
] == 0)

450
p
->
i_z\xd\xab
[
NR_DZONE_NUM
] =
	`\x\xabloc_z\xd\xab
();

451
\x9ad\x9c
 =
p
->
i_z\xd\xab
[
NR_DZONE_NUM
];

452
	`put_block
(
b
,
\x9aode
);

453
b
 =
\x9ad\x9c
 <<
z\xd\xab_shi\xe1
;

454
	`g\x91_block
(
b
,
blk
);

455 
i
 = 0; i <
INTS_PER_BLOCK
; i++)

456 i\xe0(
blk
[
i
] == 0) {

457
blk
[
i
] =
z
;

458
	`put_block
(
b
,
blk
);

461
	`\xb3x\x99
("File has grown beyond single indirect");

462
	}
}

464
	$\x9a\xfc_l\x9ak
(
n
) n;

467 
b
,
off
;

468
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

470
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

471
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

472
	`g\x91_block
(
b
,
\x9aode
);

473
\x9aode
[
off
].
i_ƚks
++;

474
	`put_block
(
b
,
\x9aode
);

475
	}
}

477
	$\x9a\xfc_size
(
n
,
cou\xc1
) n;

478 
cou\xc1
;

481 
b
,
off
;

482
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

484
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

485
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

486
	`g\x91_block
(
b
,
\x9aode
);

487
\x9aode
[
off
].
i_size
 +\xf0
cou\xc1
;

488
	`put_block
(
b
,
\x9aode
);

489
	}
}

495 
	$\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
)

496 
mode
,
u\xa4id
,
g\xbdid
;

498 
num
,
b
,
off
;

499
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

501
num
 =
\xc3xt_\x9aode
++;

502 i\xe0(
num
 >\xf0
Ěodes
)

503
	`\xb3x\x99
("File system does\x82ot have\x83nough inodes");

504
b
 = ((
num
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

505
off
 = (
num
 - 1\xe8%
INODES_PER_BLOCK
;

506
	`g\x91_block
(
b
,
\x9aode
);

507
\x9aode
[
off
].
i_mode
 =
mode
;

508
\x9aode
[
off
].
i_uid
 =
u\xa4id
;

509
\x9aode
[
off
].
i_gid
 =
g\xbdid
;

510
	`put_block
(
b
,
\x9aode
);

513
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
,
num
, 1);

514  (
num
);

515
	}
}

517 
	$\x\xabloc_z\xd\xab
() {

520 
b
,
z
,
i
;

522
z
 =
\xc3xt_z\xdae
++;

523
b
 =
z
 <<
z\xd\xab_shi\xe1
;

525 i\xe0((
b
 +
z\xd\xab_size
\xe8>
\xc4blocks
)

526
	`\xb3x\x99
("File system\x82ot big\x83nough for\x87ll\x81he files");

527 
i
 = 0; i <
z\xd\xab_size
; i++)

528
	`put_block
(
b
 +
i
,
z\x94o
);

529
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
,
z
 -
zoff
, 1);

530  (
z
);

531
	}
}

533
	$\x9a\xa3\xb9_b\x99
(
block
,
b\x99
,
cou\xc1
) block, bit, count;

536 
w
,
s
,
i
;

537 
buf
[
BLOCK_SIZE
];

539
	`g\x91_block
(
block
,
buf
);

540 
i
 =
b\x99
; i < b\x99 +
cou\xc1
; i++) {

541
w
 =
i
 / 8;

542
s
 =
i
 % 8;

543
buf
[
w
] |\xf0(1 <<
s
);

545
	`put_block
(
block
,
buf
);

546
	}
}

552 
	$mode_c\xda
(
p
)

553 *
p
;

556 
o1
,
o2
,
o3
,
mode
;

557 
c1
,
c2
,
c3
;

559
c1
 = *
p
++;

560
c2
 = *
p
++;

561
c3
 = *
p
++;

562
o1
 = *
p
++ - '0';

563
o2
 = *
p
++ - '0';

564
o3
 = *
p
++ - '0';

565
mode
 = (
o1
 << 6\xe8| (
o2
 << 3\xe8|
o3
;

566 i\xe0(
c1
 == 'd')

567
mode
 +\xf0
I_DIRECTORY
;

568 i\xe0(
c1
 == 'b')

569
mode
 +\xf0
I_BLOCK_SPECIAL
;

570 i\xe0(
c1
 == 'c')

571
mode
 +\xf0
I_CHAR_SPECIAL
;

572 i\xe0(
c1
 == '-')

573
mode
 +\xf0
I_REGULAR
;

574 i\xe0(
c2
 == 'u')

575
mode
 +\xf0
I_SET_UID_BIT
;

576 i\xe0(
c3
 == 'g')

577
mode
 +\xf0
I_SET_GID_BIT
;

578  (
mode
);

579
	}
}

581
	$g\x91l\x9\xab
(
l\x9\xab
,
\xb7r\xa3
\xe8*\xb7r\xa3[
MAX_TOKENS
];

582 
l\x9\xab
[
LINE_LEN
];

585 
k
;

586 
c
, *
p
;

588 
k
 = 0; k <
MAX_TOKEN
; k++)

589
\xb7r\xa3
[
k
] = 0;

590 
k
 = 0; k <
LINE_LEN
; k++)

591
l\x9\xab
[
k
] = 0;

592
k
 = 0;

593
\xb7r\xa3
[0] = 0;

594
p
 =
l\x9\xab
;

596 *
p
 =
	`fg\x91c
(
\xb4\xd9o
);

597 i\xe0(*
p
 == '\n')

598
l\xf9
++;

599 i\xe0(*
p
 <= 0)

600
	`\xb3x\x99
("Unexpected\x83nd-of-file\n");

601 i\xe0(*
p
 == ' ' || *p == '\t')

602 *
p
 = 0;

603 i\xe0(*
p
 == '\n') {

604 *
p
++ = 0;

605 *
p
 = '\n';

608
p
++;

611
p
 =
l\x9\xab
;

612
ϡp
 =
l\x9\xab
;

614
c
 = *
p
++;

615 i\xe0(
c
 == '\n')

617 i\xe0(
c
 == 0)

619
\xb7r\xa3
[
k
++] =
p
 - 1;

621
c
 = *
p
++;

622 } 
c
 != 0 && c != '\n');

624
	}
}

630 
	$f\x9\x93_time
(
f
)

631 
f
;

633 #ifde\xe0
UNIX


634 
\xa1\xa9

\xa1\xa9buf
;

635
	`f\xa1\xa9
(
f
, &
\xa1\xa9buf
);

636  (
\xa1\xa9buf
.
\xa1_mtime
);

640
	}
}

642
	$\xb3x\x99
(
s
) *s;

644 *
s0
;

646
s0
 =
s
;

647 *
s0
 != 0)

648
s0
++;

649
	`wr\x99e
(2, "Error: ", 7);

650
	`wr\x99e
(2,
s
,
s0
 - s);

651
	`wr\x99e
(2, "\n", 1);

652
	`\xb4\x9\xa9f
("L\x9a\x90%d be\x9ag\x85ro\xfbs\xa3d wh\x92\x83\xbc\xdc d\x91e\xf9ed.\n",
l\xf9
);

653
	`\xe6ush
();

654
	`ex\x99
(2);

655
	}
}

657
	$c\xddy
(
\xe4om
,
to
,
cou\xc1
) *from, *to;

658 
cou\xc1
;

660 
cou\xc1
--)

661 *
to
++ = *
\xe4om
++;

662
	}
}

664
	$\xb4\x9\xa9_fs
() {

666 
i
,
j
,
k
;

667
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

668 
ibuf
[
INTS_PER_BLOCK
],
b
;

670 
\x9aum
;

671 
\xc7me
[14];

672 }
d\x9c
[
NR_DIR_ENTRIES
];

674
	`g\x91_block
(1,
ibuf
);

675
	`\xb4\x9\xa9f
("\nSuperblock: ");

676 
i
 = 0; i < 8; i++)

677
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

678
	`g\x91_block
(2,
ibuf
);

679
	`\xb4\x9\xa9f
("\nInode map: ");

680 
i
 = 0; i < 9; i++)

681
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

682
	`g\x91_block
(3,
ibuf
);

683
	`\xb4\x9\xa9f
("\nZone map: ");

684 
i
 = 0; i < 9; i++)

685
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

686
	`\xb4\x9\xa9f
("\n");

687 
b
 = 4; b < 8; b++) {

688
	`g\x91_block
(
b
,
\x9aode
);

689 
i
 = 0; i <
INODES_PER_BLOCK
; i++) {

690
k
 =
INODES_PER_BLOCK
 * (
b
 - 4\xe8+
i
 + 1;

691 i\xe0(
k
 >
Ěodes
)

693 i\xe0(
\x9aode
[
i
].
i_mode
 != 0) {

694
	`\xb4\x9\xa9f
("Inod\x90%2d: mode=",
k
,
\x9aode
[
i
].
i_mode
);

695
	`\xb4\x9\xa9f
(
mode_fmt
,
\x9aode
[
i
].
i_mode
);

696
	`\xb4\x9\xa9f
(" uid=%2d gid=%2d size=",
\x9aode
[
i
].
i_uid
, inode[i].
i_gid
);

697
	`\xb4\x9\xa9f
(
size_fmt
,
\x9aode
[
i
].
i_size
);

698
	`\xb4\x9\xa9f
(" z\xdae[0]=%d\n",
\x9aode
[
i
].
i_z\xd\xab
[0]);

701 i\xe0((
\x9aode
[
i
].
i_mode
 &
I_TYPE
\xe8=\xf0
I_DIRECTORY
) {

703
	`g\x91_block
(
\x9aode
[
i
].
i_z\xd\xab
[0],
d\x9c
);

704 
j
 = 0; j <
NR_DIR_ENTRIES
; j++)

705 i\xe0(
d\x9c
[
j
].
\x9aum
)

706
	`\xb4\x9\xa9f
("\tInod\x90%2d: %s\n",
d\x9c
[
j
].
\x9aum
, d\x9c[j].
\xc7me
);

711
	`\xb4\x9\xa9f
("%d inode\xa0u\xa3d. %d z\xdae\xa0u\xa3d.\n",
\xc3xt_\x9aode
 - 1,
\xc3xt_z\xdae
);

712
	}
}

714 
	$\xbbad_\x\xafd_\xa3t
(
n
)

715 
n
;

721 
w
,
s
,
mask
,
r
;

723
w
 =
n
 / 8;

724
s
 =
n
 % 8;

725
mask
 = 1 <<
s
;

726
r
 = (
um\xad
[
w
] &
mask
 ? 1 : 0);

727
um\xad
[
w
] |\xf0
mask
;

728  (
r
);

729
	}
}

735 #ifde\xe0
DOS


751 
	#PH_SECTSIZE
 512

	)

753 *
	gd\x94\xb9ab
[14] = {"no\x83rror",

768 
	#CACHE_SIZE
 20

	)

770 
	s\xffche
 {

771 
	mblockbuf
[
BLOCK_SIZE
];

772 
	mblocknum
;

773 
	md\x9\xf9y
;

774 
	mu\xa3\x\xe7t
;

775 }
	g\xffche
[
CACHE_SIZE
];

777
	$\xa5ec\x9\xe6
(
\xa1r\x9ag
) *string;

780 i\xe0(
\xa1r\x9ag
[1] == ':' && string[2] == 0) {

782
disk
 = (
\xa1r\x9ag
[0] & ~32) - 'A';

783 i\xe0(
disk
 > 1 && !
ov\x94ride
)

784
	`\xb3x\x99
("Bad drive specifier for special");

786
f\x9\x93
 = 1;

787 i\xe0((
fd
 =
	`\xfc\x97t
(
\xa1r\x9ag
,
BWRITE
)) == 0)

788
	`\xb3x\x99
("Can't open special file");

790
	}
}

792
	$g\x91_block
(
n
,
buf
) n;

793 
buf
[
BLOCK_SIZE
];

796 
\xffche
 *
bp
, *
\xe5
;

799 i\xe0(
	`\xbbad_\x\xafd_\xa3t
(
n
) == 0) {

800
	`c\xddy
(
z\x94o
,
buf
,
BLOCK_SIZE
);

805
\xe5
 = 0;

806 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++) {

807 i\xe0(
bp
->
blocknum
 =\xf0
n
) {

808
	`c\xddy
(
bp
,
buf
,
BLOCK_SIZE
);

809
bp
->
u\xa3\x\xe7t
++;

813 i\xe0(
bp
->
d\x9\xf9y
 == 0)

814 i\xe0(
\xe5
) {

815 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

816
\xe5
 =
bp
;

818
\xe5
 =
bp
;

822 i\xe0(!
\xe5
) {

824 
bp
 =
\xffche
,
\xe5
 = cache; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

825 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

826
\xe5
 =
bp
;

827
	`mx_wr\x99e
(
\xe5
->
blocknum
, fp);

830
	`mx_\xbbad
(
n
,
\xe5
);

831
\xe5
->
d\x9\xf9y
 = 0;

832
\xe5
->
u\xa3\x\xe7t
 = 0;

833
\xe5
->
blocknum
 =
n
;

834
	`c\xddy
(
\xe5
,
buf
,
BLOCK_SIZE
);

835
	}
}

837
	$put_block
(
n
,
buf
) n;

838 
buf
[
BLOCK_SIZE
];

841 
\xffche
 *
\xe5
, *
bp
;

843
	`\xbbad_\x\xafd_\xa3t
(
n
);

846
\xe5
 = 0;

847 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++) {

848 i\xe0(
bp
->
blocknum
 =\xf0
n
) {

849
	`c\xddy
(
buf
,
bp
,
BLOCK_SIZE
);

850
bp
->
d\x9\xf9y
 = 1;

854 i\xe0(
bp
->
d\x9\xf9y
 == 0)

855 i\xe0(
\xe5
) {

856 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

857
\xe5
 =
bp
;

859
\xe5
 =
bp
;

863 i\xe0(!
\xe5
) {

865 
bp
 =
\xffche
,
\xe5
 = cache; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

866 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

867
\xe5
 =
bp
;

868
	`mx_wr\x99e
(
\xe5
->
blocknum
, fp);

871
\xe5
->
d\x9\xf9y
 = 1;

872
\xe5
->
u\xa3\x\xe7t
 = 1;

873
\xe5
->
blocknum
 =
n
;

874
	`c\xddy
(
buf
,
\xe5
,
BLOCK_SIZE
);

875
	}
}

877
	$\xffche_\x9a\x99
() {

878 
\xffche
 *
bp
;

879 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

880
bp
->
blocknum
 = -1;

881
	}
}

883
	$\xe6ush
() {

885 
\xffche
 *
bp
;

887 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

888 i\xe0(
bp
->
d\x9\xf9y
) {

889
	`mx_wr\x99e
(
bp
->
blocknum
, bp);

890
bp
->
d\x9\xf9y
 = 0;

892
	}
}

898 
	#MAX_RETRIES
 5

	)

900
	$mx_\xbbad
(
block\xc4
,
buf
) blocknr;

901 
buf
[
BLOCK_SIZE
];

905 (*
bp
)[
PH_SECTSIZE
];

906 
\xa3\xf9num
,
\xbb\x8c\x9bs
,
\x94r
;

908 i\xe0(
f\x9\x93
) {

909
	`l\xa3ek
(
fd
, ()
block\xc4
 *
BLOCK_SIZE
, 0);

910 i\xe0(
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE)

911
	`\xb3x\x99
("mx_read:\x83rror\x84eading file");

913
\xa3\xf9num
 =
block\xc4
 * (
BLOCK_SIZE
 /
PH_SECTSIZE
);

914 
bp
 =
buf
; b\xb0< &buf[
BLOCK_SIZE
]; bp++) {

915
\xbb\x8c\x9bs
 =
MAX_RETRIES
;

917
\x94r
 =
	`ab\xa4\x97d
(
disk
,
\xa3\xf9num
,
bp
);

918 
\x94r
 && --
\xbb\x8c\x9bs
);

920 i\xe0(
\xbb\x8c\x9bs
) {

921
\xa3\xf9num
++;

923
	`dex\x99
("mx_\xbbad",
\xa3\xf9num
,
\x94r
);

927
	}
}

929
	$mx_wr\x99e
(
block\xc4
,
buf
) blocknr;

930 
buf
[
BLOCK_SIZE
];

933 (*
bp
)[
PH_SECTSIZE
];

934 
\xbb\x8c\x9bs
,
\xa3\xf9num
,
\x94r
;

936 i\xe0(
f\x9\x93
) {

937
	`l\xa3ek
(
fd
,
block\xc4
 *
BLOCK_SIZE
, 0);

938 i\xe0(
	`wr\x99e
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE) {

939
	`\xb3x\x99
("mx_write:\x83rror writing file");

942
\xa3\xf9num
 =
block\xc4
 * (
BLOCK_SIZE
 /
PH_SECTSIZE
);

943 
bp
 =
buf
; b\xb0< &buf[
BLOCK_SIZE
]; bp++) {

944
\xbb\x8c\x9bs
 =
MAX_RETRIES
;

946
\x94r
 =
	`abswr\x99e
(
disk
,
\xa3\xf9num
,
bp
);

947 } 
\x94r
 && --
\xbb\x8c\x9bs
);

949 i\xe0(
\xbb\x8c\x9bs
) {

950
\xa3\xf9num
++;

952
	`dex\x99
("mx_wr\x99e",
\xa3\xf9num
,
\x94r
);

956
	}
}

958
	$dex\x99
(
s
,
\xa3\xf9num
,
\x94r
) sectnum,\x83rr;

959 *
s
;

961
	`\xb4\x9\xa9f
("E\xbc\xdc: %s, se\xf9\xdc: %d, code: %d, m\x97n\x9ag: %s\n",
s
,
\xa3\xf9num
,
\x94r
,
d\x94\xb9ab
[err]);

962
	`ex\x99
(2);

963
	}
}

970 #ifde\xe0
UNIX


972
	$\xa5ec\x9\xe6
(
\xa1r\x9ag
) *string;

974
fd
 =
	`\xfc\x97t
(
\xa1r\x9ag
, 0777);

975
	`\x\xe3o\xa3
(
fd
);

976
fd
 =
	`ݒ
(
\xa1r\x9ag
, 2);

977 i\xe0(
fd
 < 0)

978
	`\xb3x\x99
("Can't open special file");

979
	}
}

981
	$g\x91_block
(
n
,
buf
) n;

982 
buf
[
BLOCK_SIZE
];

986 
k
;

989 i\xe0(
	`\xbbad_\x\xafd_\xa3t
(
n
) == 0) {

990
	`c\xddy
(
z\x94o
,
buf
,
BLOCK_SIZE
);

994
	`l\xa3ek
(
fd
, ()
n
 *
BLOCK_SIZE
, 0);

995
k
 =
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
);

996 i\xe0(
k
 !\xf0
BLOCK_SIZE
) {

997
	`\xb3x\x99
("get_block couldn't\x84ead");

999
	}
}

1001
	$put_block
(
n
,
buf
) n;

1002 
buf
[
BLOCK_SIZE
];

1006
	`\xbbad_\x\xafd_\xa3t
(
n
);

1008 i\xe0(
	`l\xa3ek
(
fd
, ()
n
 *
BLOCK_SIZE
, 0) < 0L) {

1009
	`\xb3x\x99
("put_block couldn't seek");

1011 i\xe0(
	`wr\x99e
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE) {

1012
	`\xb3x\x99
("put_block couldn't write");

1014
	}
}

1018
	$\xe6ush
(\xe8{ ;
	}
}

1020
	$\xffche_\x9a\x99
(\xe8{ ;
	}
}

	@commands/mknod.cpp

10 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

13 
mode
,
maj\xdc
,
m\x9a\xdc
;

15 i\xe0(
\xacgc
 != 5)

16
	`badcomm
();

17 i\xe0(*
\xacgv
[2] != 'b' && *argv[2] != 'c')

18
	`badcomm
();

19
mode
 = (*
\xacgv
[2] == 'b' ? 060666 : 020666);

20
maj\xdc
 =
	`\xa9oi
(
\xacgv
[3]);

21
m\x9a\xdc
 =
	`\xa9oi
(
\xacgv
[4]);

22 i\xe0(
maj\xdc
 < 0 ||
m\x9a\xdc
 < 0)

23
	`badcomm
();

24 i\xe0(
	`mknod
(
\xacgv
[1],
mode
, (
maj\xdc
 << 8\xe8|
m\x9a\xdc
) < 0)

25
	`\xb3\xbc\xdc
("mknod");

27
	}
}

30 
	$\xa9oi
(cڡ *
p
) {

32 
c
,
n
;

34
n
 = 0;

35 
c
 = *
p
++) {

36 i\xe0(
c
 < '0' || c > '9')

38
n
 = 10 *\x82 + (
c
 - '0');

40  (
n
);

41
	}
}

44 [[
nܑu\xba
]] 
	$badcomm
() {

45
	`\xa1d_\x94r
("Usage: mknod\x82ame b/c major minor\n");

46
	`ex\x99
(1);

47
	}
}

	@commands/mount.cpp

9 
	~"\x94\xbao.h\xb5
"

10 
\x94\xbao
;

13 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

15 
ro
;

17 i\xe0(
\xacgc
 < 3 ||\x87rgc > 4)

18
	`u\xa7ge
();

19 i\xe0(
\xacgc
 =\xf04 && *
\xacgv
[3] != '-' && *(argv[3] + 1) != 'r')

20
	`u\xa7ge
();

21
ro
 = (
\xacgc
 == 4 ? 1 : 0);

22 i\xe0(
	`mou\xc1
(
\xacgv
[1],\x87rgv[2],
ro
) < 0) {

23 i\xe0(
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
EINVAL
) {

24
	`\xa1d_\x94r
("mount: ");

25
	`\xa1d_\x94r
(
\xacgv
[1]);

26
	`\xa1d_\x94r
(" is\x82ot\x87 valid file system.\n");

28
	`\xb3\xbc\xdc
("mount");

30
	`ex\x99
(1);

32
	`\xa1d_\x94r
(
\xacgv
[1]);

33
	`\xa1d_\x94r
(" mounted\n");

34
	`ex\x99
(0);

35
	}
}

38 
	$u\xa7ge
() {

39
	`\xa1d_\x94r
("Usage: mount special\x82ame [-r]\n");

40
	`ex\x99
(1);

41
	}
}

	@commands/mv.cpp

9 
	~"sig\xc7l.h\xb5
"

10 
	~"\xa1\xa9.h\xb5
"

12 
	g\x94r\xdc
 = 0;

13 
\xa1\xa9

	g\xa1
;

16 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

17 *
de\xa1d\x9c
;

19 i\xe0(
\xacgc
 < 3) {

20
	`\xa1d_\x94r
("Usage: mv file1 file2 or mv dir1 dir2 or mv file1 file2 ... dir\n");

21
	`ex\x99
(1);

23 i\xe0(
\xacgc
 == 3) {

24 i\xe0(
	`\xa1\xa9
(
\xacgv
[1], &
\xa1
)) {

25
	`\xa1d_\x94r
("mv: ");

26
	`\xa1d_\x94r
(
\xacgv
[1]);

27
	`\xa1d_\x94r
(" doesn't\x83xist\n");

28
	`ex\x99
(1);

30 i\xe0((
\xa1
.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFDIR
) {

31 i\xe0(!
	`\xa1\xa9
(
\xacgv
[2], &
\xa1
\xe8&& (\xa1.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFDIR
) {

32
	`\xa1d_\x94r
("mv:\x81arget ");

33
	`\xa1d_\x94r
(
\xacgv
[2]);

34
	`\xa1d_\x94r
("\x83xists\n");

35
	`ex\x99
(1);

38
	`\xa3tgid
(
	`g\x91gid
());

39
	`\xa3tuid
(
	`g\x91uid
());

41
	`move
(
\xacgv
[1],\x87rgv[2]);

43
	`\xa3tgid
(
	`g\x91gid
());

44
	`\xa3tuid
(
	`g\x91uid
());

45
de\xa1d\x9c
 =
\xacgv
[--
\xacgc
];

46 i\xe0(
	`\xa1\xa9
(
de\xa1d\x9c
, &
\xa1
)) {

47
	`\xa1d_\x94r
("mv:\x81arget directory ");

48
	`\xa1d_\x94r
(
de\xa1d\x9c
);

49
	`\xa1d_\x94r
(" doesn't\x83xist\n");

50
	`ex\x99
(1);

52 i\xe0((
\xa1
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFDIR
) {

53
	`\xa1d_\x94r
("mv:\x81arget ");

54
	`\xa1d_\x94r
(
de\xa1d\x9c
);

55
	`\xa1d_\x94r
("\x82ot\x87 directory\n");

56
	`ex\x99
(1);

58 --
\xacgc
)

59
	`move
(*++
\xacgv
,
de\xa1d\x9c
);

61 i\xe0(
\x94r\xdc
)

62
	`ex\x99
(1);

63
	`ex\x99
(0);

64
	}
}

67 
	$move
(*
\xded
, *
\xc3w
) {

68 
\xbbtv\xae
;

70 i\xe0(!
	`\xa1\xa9
(
\xc3w
, &
\xa1
))

71 i\xe0((
\xa1
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFDIR
)

72
	`uƚk
(
\xc3w
);

74 
\xc7me
[64], *
p
, *
	`r\x9adex
();

76 i\xe0((
	`\xa1\xbe\x92
(
\xded
\xe8+ s\x8c\xcbn(
\xc3w
) + 2) > 64) {

77
	`\xff\xc1
(
\xded
);

78
\x94r\xdc
++;

81
	`\xa1r\xfdy
(
\xc7me
,
\xc3w
);

82
	`\xa1r\xf\xe1
(
\xc7me
, "/");

83
p
 =
	`r\x9adex
(
\xded
, '/');

84
	`\xa1r\xf\xe1
(
\xc7me
,
p
 ?\x85 :
\xded
);

85
\xc3w
 =
\xc7me
;

87
	`\xa1\xa9
(
\xded
, &
\xa1
);

88 i\xe0(
	`l\x9ak
(
\xded
,
\xc3w
))

89 i\xe0((
\xa1
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFDIR
) {

90 
	`f\xdck
()) {

92
	`exe\x\xe3
("/b\x9a/\xfd", "\xfd",
\xded
,
\xc3w
, 0);

93
	`\xff\xc1
(
\xded
);

95
	`\xa1d_\x94r
("mv: can't fork\n");

96
	`ex\x99
(1);

98
	`wa\x99
(&
\xbbtv\xae
);

99 i\xe0(
\xbbtv\xae
)

100
	`\xff\xc1
(
\xded
);

103
	`\xff\xc1
(
\xded
);

104
	`utime
(
\xc3w
, &
\xa1
.
\xa1_\xa9ime
);

105
	`uƚk
(
\xded
);

106
	}
}

109 
	$\xff\xc1
(cڡ *
\xc7me
) {

110
	`\xa1d_\x94r
("mv: can't move ");

111
	`\xa1d_\x94r
(
\xc7me
);

112
	`\xa1d_\x94r
("\n");

113
	`ex\x99
(1);

114
	}
}

	@commands/od.cpp

9 
	~"\xa1dio.h\xb5
"

11 
	gb\xe6ag
,
	gc\xe6ag
,
	gd\xe6ag
,
	go\xe6ag
,
	gx\xe6ag
,
	gh\xe6ag
,
	gl\x9a\x92r
,
	gwidth
,
	g\xa1\xa9e
,
	gev\x94
;

12 
	g\xb4evwds
[8];

13 
	goff
;

14 
	gbuf
[512],
	gbuf\xe3r
[
BUFSIZ
];

15 
	g\xc3xt
;

16 
	gby\x8b\xa5\xbb\xa3\xc1
;

17 
hex\x99
();

20 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

21 
k
,
\xe6ags
;

22 
	`off\xa3t
();

23 *
p
;

26
	`\xa3tbuf
(
\xa1dout
,
buf\xe3r
);

27
\xe6ags
 = 0;

28
p
 =
\xacgv
[1];

29 i\xe0(*
p
 == '-') {

31
\xe6ags
++;

32
p
++;

33 *
p
) {

34 *
p
) {

36
b\xe6ag
++;

39
c\xe6ag
++;

42
d\xe6ag
++;

45
h\xe6ag
++;

48
o\xe6ag
++;

51
x\xe6ag
++;

54
	`u\xa7ge
();

56
p
++;

59
o\xe6ag
 = 1;

61 i\xe0((
b\xe6ag
 |
c\xe6ag
 |
d\xe6ag
 |
o\xe6ag
 |
x\xe6ag
) == 0)

62
o\xe6ag
 = 1;

63
k
 = (
\xe6ags
 ? 2 : 1);

64 i\xe0(
b\xe6ag
 |
c\xe6ag
) {

65
width
 = 8;

66 } i\xe0(
o\xe6ag
) {

67
width
 = 7;

68 } i\xe0(
d\xe6ag
) {

69
width
 = 6;

71
width
 = 5;

75
p
 =
\xacgv
[
k
];

76 i\xe0(
k
 <
\xacgc
 && *
p
 != '+') {

78
	`\x\xe3o\xa3
(0);

79 i\xe0(
	`ݒ
(
\xacgv
[
k
], 0) != 0) {

80
	`\xa1d_\x94r
("od: cannot open ");

81
	`\xa1d_\x94r
(
\xacgv
[
k
]);

82
	`\xa1d_\x94r
("\n");

83
	`f\xe6ush
(
\xa1dout
);

84
	`ex\x99
(1);

86
k
++;

90 i\xe0(
k
 <
\xacgc
) {

92
off
 =
	`off\xa3t
(
\xacgc
,
\xacgv
,
k
);

93
off
 = (off / 16L) * 16L;

94
	`l\xa3ek
(0,
off
, 0);

97
	`dumpf\x9\x93
();

98
	`addrout
(
off
);

99
	`\xb4\x9\xa9f
("\n");

100
	`f\xe6ush
(
\xa1dout
);

101
	`ex\x99
(0);

102
	}
}

104 
	$off\xa3t
(
\xacgc
,
\xacgv
,
k
)

105 
\xacgc
;

106 *
\xacgv
[];

107 
k
;

109 
d\xd9
,
\xbfdix
;

110 
\xa1r
[80], *
p
,
c
;

111 
v\x\xab
;

114
d\xd9
 = 0;

115
p
 =
\xacgv
[
k
];

116 *
p
)

117 i\xe0(*
p
++ == '.')

118
d\xd9
 = 1;

121
\xbfdix
 = (
d\xd9
 ? 10 : 8);

122
v\x\xab
 = 0;

123
p
 =
\xacgv
[
k
];

124 i\xe0(*
p
 == '+')

125
p
++;

126 *
p
 != 0 && *p != '.') {

127
c
 = *
p
++;

128 i\xe0(
c
 < '0' || c > '9') {

129
	`\xb4\x9\xa9f
("Bad ch\xaca\xf9\x94 i\xc0off\xa3t: %c\n",
c
);

130
	`f\xe6ush
(
\xa1dout
);

131
	`ex\x99
(1);

133
v\x\xab
 =
\xbfdix
 * v\xae +
c
 - '0';

136
p
 =
\xacgv
[
k
 + 1];

137 i\xe0(
k
 + 1 =\xf0
\xacgc
 - 1 && *
p
 == 'b')

138
v\x\xab
 = 512L * val;

139  (
v\x\xab
);

140
	}
}

142
	$dumpf\x9\x93
() {

143 
k
;

144 *
w\xdcds
;

146 (
k
 =
	`g\x91w\xdcds
(&
w\xdcds
))) {

147 i\xe0(
k
 =\xf016 &&
	`\xa7me
(
w\xdcds
,
\xb4evwds
\xe8&&
ev\x94
 == 1) {

148 i\xe0(
\xa1\xa9e
 == 0) {

149
	`\xb4\x9\xa9f
("*\n");

150
\xa1\xa9e
 = 1;

151
off
 += 16;

153 } i\xe0(
\xa1\xa9e
 == 1) {

154
off
 += 16;

159
	`addrout
(
off
);

160
off
 +\xf0
k
;

161
\xa1\xa9e
 = 0;

162
ev\x94
 = 1;

163
l\x9a\x92r
 = 1;

164 i\xe0(
o\xe6ag
)

165
	`wdump
(
w\xdcds
,
k
, 8);

166 i\xe0(
d\xe6ag
)

167
	`wdump
(
w\xdcds
,
k
, 10);

168 i\xe0(
x\xe6ag
)

169
	`wdump
(
w\xdcds
,
k
, 16);

170 i\xe0(
c\xe6ag
)

171
	`bdump
(
w\xdcds
,
k
, 'c');

172 i\xe0(
b\xe6ag
)

173
	`bdump
(
w\xdcds
,
k
, 'b');

174 
k
 = 0; k < 8; k++)

175
\xb4evwds
[
k
] =
w\xdcds
[k];

176 
k
 = 0; k < 8; k++)

177
w\xdcds
[
k
] = 0;

179
	}
}

181
	$wdump
(
w\xdcds
,
k
,
\xbfdix
) words[8], k,\x84adix;

183 
i
;

185 i\xe0(
l\x9a\x92r
++ != 1)

186
	`\xb4\x9\xa9f
(" ");

187 
i
 = 0; i < (
k
 + 1) / 2; i++)

188
	`outw\xdcd
(
w\xdcds
[
i
],
\xbfdix
);

189
	`\xb4\x9\xa9f
("\n");

190
	}
}

192
	$bdump
(
w\xdcds
,
k
,
c
) words[8];

193 
k
;

194 
c
;

196 
i
;

197 
c1
,
c2
;

199
i
 = 0;

200 i\xe0(
l\x9a\x92r
++ != 1)

201
	`\xb4\x9\xa9f
(" ");

202 
i
 <
k
) {

203
c1
 =
w\xdcds
[
i
 >> 1] & 0377;

204
c2
 = (
w\xdcds
[
i
 >> 1] >> 8) & 0377;

205
	`by\x8b
(
c1
,
c
);

206
i
++;

207 i\xe0(
i
 =\xf0
k
) {

208
	`\xb4\x9\xa9f
("\n");

211
	`by\x8b
(
c2
,
c
);

212
i
++;

214
	`\xb4\x9\xa9f
("\n");

215
	}
}

217
	$by\x8b
(
v\x\xab
,
c
) val;

218 
c
;

220 i\xe0(
c
 == 'b') {

221
	`\xb4\x9\xa9f
(" ");

222
	`ou\x8aum
(
v\x\xab
, 7);

226 i\xe0(
v\x\xab
 == 0)

227
	`\xb4\x9\xa9f
(" \\0");

228 i\xe0(
v\x\xab
 == '\b')

229
	`\xb4\x9\xa9f
(" \\b");

230 i\xe0(
v\x\xab
 == '\f')

231
	`\xb4\x9\xa9f
(" \\f");

232 i\xe0(
v\x\xab
 == '\n')

233
	`\xb4\x9\xa9f
(" \\n");

234 i\xe0(
v\x\xab
 == '\r')

235
	`\xb4\x9\xa9f
(" \\r");

236 i\xe0(
v\x\xab
 == '\t')

237
	`\xb4\x9\xa9f
(" \\t");

238 i\xe0(
v\x\xab
 >= ' ' && val < 0177)

239
	`\xb4\x9\xa9f
(" %c",
v\x\xab
);

241
	`\xb4\x9\xa9f
(" ");

242
	`ou\x8aum
(
v\x\xab
, 7);

244
	}
}

246 
	$g\x91w\xdcds
(
w\xdcds
)

247 **
w\xdcds
;

249 
cou\xc1
;

251 i\xe0(
\xc3xt
 >\xf0
by\x8b\xa5\xbb\xa3\xc1
) {

252
by\x8b\xa5\xbb\xa3\xc1
 =
	`\xbbad
(0,
buf
, 512);

253
\xc3xt
 = 0;

255 i\xe0(
\xc3xt
 >\xf0
by\x8b\xa5\xbb\xa3\xc1
)

257 *
w\xdcds
 = (*)&
buf
[
\xc3xt
];

258 i\xe0(
\xc3xt
 + 16 <\xf0
by\x8b\xa5\xbb\xa3\xc1
)

259
cou\xc1
 = 16;

261
cou\xc1
 =
by\x8b\xa5\xbb\xa3\xc1
 -
\xc3xt
;

263
\xc3xt
 +\xf0
cou\xc1
;

264  (
cou\xc1
);

265
	}
}

267 
	$\xa7me
(
w1
,
w2
)

268 *
w1
, *
w2
;

270 
i
;

271
i
 = 8;

272 
i
--)

273 i\xe0(*
w1
++ !\xf0*
w2
++)

276
	}
}

278
	$outw\xdcd
(
v\x\xab
,
\xbfdix
) val,\x84adix;

282 
i
;

284 i\xe0(
\xbfdix
 == 16)

285
i
 =
width
 - 4;

286 i\xe0(
\xbfdix
 == 10)

287
i
 =
width
 - 5;

288 i\xe0(
\xbfdix
 == 8)

289
i
 =
width
 - 6;

290 i\xe0(
i
 == 1)

291
	`\xb4\x9\xa9f
(" ");

292 i\xe0(
i
 == 2)

293
	`\xb4\x9\xa9f
(" ");

294 i\xe0(
i
 == 3)

295
	`\xb4\x9\xa9f
(" ");

296 i\xe0(
i
 == 4)

297
	`\xb4\x9\xa9f
(" ");

298
	`ou\x8aum
(
v\x\xab
,
\xbfdix
);

299
	}
}

301
	$ou\x8aum
(
num
,
\xbfdix
) num,\x84adix;

306 
d
,
i
;

307 
v\x\xab
;

308 
s
[8];

310
v\x\xab
 = ()
num
;

311 i\xe0(
\xbfdix
 == 8)

312
d
 = 6;

313 i\xe0(
\xbfdix
 == 10)

314
d
 = 5;

315 i\xe0(
\xbfdix
 == 16)

316
d
 = 4;

317 i\xe0(
\xbfdix
 == 7) {

318
d
 = 3;

319
\xbfdix
 = 8;

322 
i
 = 0; i <
d
; i++) {

323
s
[
i
] =
v\x\xab
 %
\xbfdix
;

324
v\x\xab
 -\xf0
s
[
i
];

325
v\x\xab
 = v\xae /
\xbfdix
;

327 
i
 =
d
 - 1; i >= 0; i--) {

328 i\xe0(
s
[
i
] > 9)

329
	`\xb4\x9\xa9f
("%c", 'a' +
s
[
i
] - 10);

331
	`\xb4\x9\xa9f
("%c",
s
[
i
] + '0');

333
	}
}

335
	$addrout
(
l
) l;

337 
i
;

339 i\xe0(
h\xe6ag
 == 0) {

340 
i
 = 0; i < 7; i++)

341
	`\xb4\x9\xa9f
("%c", ((
l
 >> (18 - 3 *
i
)) & 07) + '0');

343 
i
 = 0; i < 7; i++)

344
	`\xb4\x9\xa9f
("%c",
	`hex\x99
(((
l
 >> (24 - 4 *
i
)) & 0x0F)));

346
	}
}

348 
	$hex\x99
(
k
)

349 
k
;

351 i\xe0(
k
 <= 9)

352  ('0' +
k
);

354  ('A' +
k
 - 10);

355
	}
}

357
	$u\xa7ge
(\xe8{
	`\xa1d_\x94r
("U\xa7ge: od [-bcdhox] [f\x9ee] [ [+] off\xa3\x88[.] [b] ]");
	}
}

	@commands/passwd.cpp

9 
	~"pwd.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

12 
	gpwd_f\x9\x93
[] = "/etc/passwd";

13 
	gpw_tmp
[] = "/etc/pwtemp";

14 
	gbad
[] = "Permission denied\n";

15 
	gbuf
[512];

18 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

19 
uid
,
\xfa
,
n
;

20 
\xe5\x9a
,
\xe5out
;

21 
\xa7\xc9
;

22 
\xb7sswd
 *
pwd
, *
	`g\x91pw\xc7m
(), *
	`g\x91pwuid
(), *
	`g\x91pw\x92t
();

23 
\xc7me
[9],
\xb7ssw\xdcd
[14],
\xa6
[2];

24 *
	`g\x91\xb7ss
(), *
	`\xfcy\xb1
();

26
uid
 =
	`g\x91uid
();

28 i\xe0(!
	`ac\xfbss
(
pw_tmp
, 0)) {

29
	`\xa1d_\x94r
("Temporary file in use.\nTry\x87gain\x86ater\n");

30
	`ex\x99
(1);

33 i\xe0(
\xacgc
 < 2) {

34
pwd
 =
	`g\x91pwuid
(
uid
);

35
	`\xa1r\xfdy
(
\xc7me
,
pwd
->
pw_\xc7me
);

37
	`\xa1r\xfdy
(
\xc7me
,
\xacgv
[1]);

38
pwd
 =
	`g\x91pw\xc7m
(
\xc7me
);

40 i\xe0(!
pwd
 || ((
uid
 !\xf0pwd->
pw_uid
) && uid)) {

41
	`\xa1d_\x94r
(
bad
);

42
	`ex\x99
(1);

44
	`sig\xc7l
(
SIGHUP
,
SIG_IGN
);

45
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

46
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

47
	`sig\xc7l
(
SIGTERM
,
SIG_IGN
);

48
	`\xb4\x9\xa9s
("Ch\xaag\x9ag\x85assw\xdcd f\xdc %s\n",
\xc7me
);

49 i\xe0(
pwd
->
pw_\xb7sswd
[0] &&
uid
)

50 i\xe0(
	`\xa1rcmp
(
pwd
->
pw_\xb7sswd
,
	`\xfcy\xb1
(
	`g\x91\xb7ss
("Old\x85assword: "),\x85wd->pw_passwd))) {

51
	`\xa1d_\x94r
(
bad
);

52
	`ex\x99
(1);

54
	`\xa1r\xfdy
(
\xb7ssw\xdcd
,
	`g\x91\xb7ss
("New\x85assword: "));

55 i\xe0(
	`\xa1rcmp
(
\xb7ssw\xdcd
,
	`g\x91\xb7ss
("Retype\x85assword: "))) {

56
	`\xa1d_\x94r
("Passwords don't match\n");

57
	`ex\x99
(1);

59
	`time
(&
\xa7\xc9
);

60
\xa6
[0] = (
\xa7\xc9
 & 077) + '.';

61
\xa6
[1] = ((
\xa7\xc9
 >> 6) & 077) + '.';

62 
\xfa
 = 0; cn < 2; cn++) {

63 i\xe0(
\xa6
[
\xfa
] > '9')

64
\xa6
[
\xfa
] += 7;

65 i\xe0(
\xa6
[
\xfa
] > 'Z')

66
\xa6
[
\xfa
] += 6;

68 i\xe0(
\xb7ssw\xdcd
[0])

69
	`\xa1r\xfdy
(
\xb7ssw\xdcd
,
	`\xfcy\xb1
\xd5assw\xdcd,
\xa6
));

70
	`umask
(0);

71
	`\x\xe3o\xa3
(1);

72
\xe5out
 =
	`\xfc\x97t
(
pw_tmp
, 0600);

73 i\xe0(
\xe5out
 != 1) {

74
	`\xa1d_\x94r
("Can't create\x81emporary file\n");

75
	`ex\x99
(1);

77
	`\xa3\x8dw\x92t
();

78 (
pwd
 =
	`g\x91pw\x92t
()) != 0) {

79 i\xe0(!
	`\xa1rcmp
(
\xc7me
,
pwd
->
pw_\xc7me
))

80
pwd
->
pw_\xb7sswd
 =
\xb7ssw\xdcd
;

81
	`\xb4\x9\xa9s
("%s:%s:%s:",
pwd
->
pw_\xc7me
,\x85wd->
pw_\xb7sswd
,
	`\x99\xdf
\xd5wd->
pw_uid
));

82
	`\xb4\x9\xa9s
("%s:%s:%s:%s\n",
	`\x99\xdf
(
pwd
->
pw_gid
),\x85wd->
pw_gecos
,\x85wd->
pw_d\x9c
,\x85wd->
pw_sh\x96l
);

84
	`\x92dpw\x92t
();

85
	`\x\xe3o\xa3
(0);

86 i\xe0((
\xe5\x9a
 =
	`ݒ
(
pw_tmp
, 0)) != 0) {

87
	`\xa1d_\x94r
("Can't\x84eopen\x81emporary file\n");

88
	`ex\x99
(1);

90
	`\x\xe3o\xa3
(
\xe5out
);

91 i\xe0((
\xe5out
 =
	`ݒ
(
pwd_f\x9\x93
, 2)) < 0) {

92
	`\xa1d_\x94r
("Can't\x84ecreate\x85assword file\n");

93
	`uƚk
(
pw_tmp
);

94
	`ex\x99
(1);

97
n
 =
	`\xbbad
(
\xe5\x9a
,
buf
, 512);

98 i\xe0(
n
 <= 0)

100
	`wr\x99e
(1,
buf
,
n
);

103
	`f\x\xe3o\xa3
(
\xe5\x9a
);

104
	`f\x\xe3o\xa3
(
\xe5out
);

105
	`uƚk
(
pw_tmp
);

106
	}
}

	@commands/pr.cpp

22 
	~"\xa1dio.h\xb5
"

23 
	~<mem\xdcy
>

25 *
	gc\xdebuf
;

28
cڡex\xb4
 
	gkDe\xe7u\xc9L\x92gth
 = 66;

31
cڡex\xb4
 
	gkDe\xe7u\xc9Width
 = 72;

34
us\x9ag

	gBo\xde
 =
bo\xde
;

36 
	#NIL_PTR
 ((*)0)

	)

38 *
	gh\x97d\x94
;

39
Bo\xde

	gno_h\x97d\x94
;

40
Bo\xde

	gnumb\x94
;

41 
	gc\xdeumns
;

42 
	gcwidth
;

43 
	g\xa1\xa\xf9_\xb7ge
 = 1;

44 
	gwidth
 =
kDe\xe7u\xc9Width
;

45 
	g\xcbngth
 =
kDe\xe7u\xc9L\x92gth
;

47 
	gou\x8dut
[1024];

48
FILE
 *
fݒ
();

60 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

61
\xa1d
::
unique_\xb1r
<
FILE
,
	`de\x\xe3ty\xb3
(&
f\x\xe3o\xa3
)>
	`f\x9\x93
(
nuαr
, fclose);

62 *
\xb1r
;

63 
\x9adex
 = 1;

65 
\xacgc
 >
\x9adex
) {

66
\xb1r
 =
\xacgv
[
\x9adex
++];

67 i\xe0(*
\xb1r
 == '+') {

68
\xa1\xact_\xb7ge
 =
	`\xa9oi
(++
\xb1r
);

71 i\xe0(*
\xb1r
 != '-') {

72
\x9adex
--;

75 i\xe0(*++
\xb1r
 >= '0' && *ptr <= '9') {

76
c\xdeumns
 =
	`\xa9oi
(
\xb1r
);

79 *
\xb1r
)

80 *
\xb1r
++) {

82
no_h\x97d\x94
 =
\x8cue
;

85
numb\x94
 =
\x8cue
;

88
h\x97d\x94
 =
\xacgv
[
\x9adex
++];

91
width
 =
	`\xa9oi
(
\xb1r
);

92 *
\xb1r
 = '\0';

95
\xcbngth
 =
	`\xa9oi
(
\xb1r
);

96 *
\xb1r
 = '\0';

99
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,

102
\xacgv
[0]);

103
	`ex\x99
(1);

107 i\xe0(!
no_h\x97d\x94
)

108
\xcbngth
 -= 10;

110 i\xe0(
\xcbngth
 <= 0)

111
\xcbngth
 =
kDe\xe7u\xc9L\x92gth
;

113 i\xe0(
c\xdeumns
) {

114
cwidth
 =
width
 /
c\xdeumns
 + 1;

115 i\xe0(
c\xdeumns
 >
width
) {

116
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Too many columns for\x85agewidth.\n");

117
	`ex\x99
(1);

119 i\xe0((
c\xdebuf
 = (*)
	`sbrk
(
cwidth
 *
c\xdeumns
 *
\xcbngth
)) < 0) {

120
	`\xe5r\x9\xa9f
(
\xa1d\x94r
,

122
\xcbngth
,
cwidth
);

123
	`ex\x99
(1);

127
	`\xa3tbuf
(
\xa1dout
,
ou\x8dut
);

129 i\xe0(
\xacgc
 =\xf0
\x9adex
) {

130
h\x97d\x94
 = "";

131
	`\xb4\x9\xa9
(
\xa1d\x9a
);

134 
\x9adex
 !\xf0
\xacgc
) {

135
f\x9\x93
.
	`\xbb\xa3t
(
	`fݒ
(
\xacgv
[
\x9adex
], "r"));

136 i\xe0(!
f\x9\x93
) {

137
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "C\xaan\xd9 o\xb3\xc0%s\n",
\xacgv
[
\x9adex
++]);

140
h\x97d\x94
 =
\xacgv
[
\x9adex
];

141 i\xe0(
c\xdeumns
)

142
	`f\xdcm\xa9
(
f\x9\x93
);

144
	`\xb4\x9\xa9
(
f\x9\x93
);

145
f\x9\x93
.
	`\xbb\xa3t
();

146
\x9adex
++;

149 i\xe0(
c\xdeumns
) {

150 i\xe0(
	`brk
(
c\xdebuf
) < 0) {

151
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Can't\x84eset memory!\n");

152
	`ex\x99
(1);

156 ()
	`f\xe6ush
(
\xa1dout
);

157
	`ex\x99
(0);

158
	}
}

167 
	$sk\x9d_\xb7ge
(
l\x9\xabs
,
FILE
 *
f\x9e\x95
) {

168 
c
{};

170 (
c
 =
	`g\x91c
(
f\x9e\x95
)\xe8!\xf0'\n' && c !\xf0
EOF
)

172 --
l\x9\xabs
;

173 } 
l\x9\xabs
 &&
c
 !\xf0
EOF
);

174 
c
;

175
	}
}

182 
	$f\xdcm\xa9
(
FILE
 *
f\x9e\x95
) {

183 
c
 = '\0';

184 
\x9adex
,
l\x9\xabs
,
i
;

185 
\xb7ge_numb\x94
 = 0;

186 
maxc\xde
 =
c\xdeumns
;

190
\xb7ge_numb\x94
++;

192 i\xe0(
\xb7ge_numb\x94
 <
\xa1\xact_\xb7ge
 &&
c
 !\xf0
EOF
) {

193
c
 =
	`sk\x9d_\xb7ge
(
c\xdeumns
 *
\xcbngth
,
f\x9e\x95
);

197 i\xe0(
c
 =\xf0
EOF
)

200
l\x9\xabs
 =
c\xdeumns
 *
\xcbngth
;

201
\x9adex
 = 0;

203 
i
 = 0; i <
cwidth
 - 1; i++) {

204 i\xe0((
c
 =
	`g\x91c
(
f\x9e\x95
)\xe8=\xf0'\n' || c =\xf0
EOF
)

206
c\xdebuf
[
\x9adex
++] =
c
;

209 i\xe0(
i
 =\xf00 &&
l\x9\xabs
 =\xf0
c\xdeumns
 *
\xcbngth
 &&
c
 =\xf0
EOF
)

211 
c
 !\xf0'\n' && c !\xf0
EOF
)

212
c
 =
	`g\x91c
(
f\x9e\x95
);

213
c\xdebuf
[
\x9adex
++] = '\0';

214 ++
i
 <
cwidth
)

215
\x9adex
++;

216
l\x9\xabs
--;

217 i\xe0(
c
 =\xf0
EOF
) {

218
maxc\xde
 =
c\xdeumns
 -
l\x9\xabs
 /
\xcbngth
;

219 
l\x9\xabs
--)

220 
i
 = 0; i <
cwidth
; i++)

221
c\xdebuf
[
\x9adex
++] = '\0';

223 } 
c
 !\xf0
EOF
 &&
l\x9\xabs
);

224
	`\xb4\x9\xa9_\xb7ge
(
c\xdebuf
,
\xb7ge_numb\x94
,
maxc\xde
);

225 } 
c
 !\xf0
EOF
);

226
	}
}

235 
	$\xb4\x9\xa9_\xb7ge
(
buf
[], 
\xb7g\x92r
, 
maxc\xde
) {

236 
l\x9a\x92r
 = (
\xb7g\x92r
 - 1\xe8*
\xcbngth
 + 1;

237 
\xb7d
,
i
,
j
,
\xa1\xact
;

239 i\xe0(!
no_h\x97d\x94
)

240
	`out_h\x97d\x94
(
\xb7g\x92r
);

241 
i
 = 0; i <
\xcbngth
; i++) {

242 i\xe0(
numb\x94
)

243
	`\xb4\x9\xa9f
("%d\t",
l\x9a\x92r
++);

244 
j
 = 0; j <
maxc\xde
; j++) {

245
\xa1\xact
 = (
i
 +
j
 *
\xcbngth
\xe8*
cwidth
;

246 
\xb7d
 = 0;\x85ad <
cwidth
 - 1 &&
buf
[
\xa1\xact
 +\x85ad];\x85ad++)

247
	`putch\xac
(
buf
[
\xa1\xact
 +
\xb7d
]);

248 i\xe0(
j
 <
maxc\xde
 - 1)

249 
\xb7d
++ <
cwidth
 - 1)

250
	`putch\xac
(' ');

252
	`putch\xac
('\n');

254 i\xe0(!
no_h\x97d\x94
)

255
	`\xb4\x9\xa9f
("\n\n\n\n\n");

256
	}
}

263 
	$\xb4\x9\xa9
(
FILE
 *
f\x9e\x95
) {

264 
c
 = '\0';

265 
\xb7ge_numb\x94
 = 0;

266 
l\x9a\x92r
 = 1;

267 
l\x9\xabs
;

271
\xb7ge_numb\x94
++;

272 i\xe0(
\xb7ge_numb\x94
 <
\xa1\xact_\xb7ge
 &&
c
 !\xf0
EOF
) {

273
c
 =
	`sk\x9d_\xb7ge
(
\xcbngth
,
f\x9e\x95
);

277 i\xe0(
c
 =\xf0
EOF
)

280 i\xe0(
\xb7ge_numb\x94
 =\xf0
\xa1\xact_\xb7ge
)

281
c
 =
	`g\x91c
(
f\x9e\x95
);

284
l\x9\xabs
 =
\xcbngth
;

285 i\xe0(!
no_h\x97d\x94
)

286
	`out_h\x97d\x94
(
\xb7ge_numb\x94
);

287 
l\x9\xabs
 &&
c
 !\xf0
EOF
) {

288 i\xe0(
numb\x94
)

289
	`\xb4\x9\xa9f
("%d\t",
l\x9a\x92r
++);

291
	`putch\xac
(
c
);

292 } (
c
 =
	`g\x91c
(
f\x9e\x95
)\xe8!\xf0'\n' && c !\xf0
EOF
);

293
	`putch\xac
('\n');

294
l\x9\xabs
--;

295
c
 =
	`g\x91c
(
f\x9e\x95
);

297 i\xe0(
l\x9\xabs
 =\xf0
\xcbngth
)

299 i\xe0(!
no_h\x97d\x94
)

300
	`\xb4\x9\xa9f
("\n\n\n\n\n");

302 } 
c
 !\xf0
EOF
);

305 i\xe0(
\xb7ge_numb\x94
 >\xf0
\xa1\xact_\xb7ge
) {

306 
l\x9\xabs
--)

307
	`putch\xac
('\n');

309
	}
}

316 
	$out_h\x97d\x94
(
\xb7ge
) {

317 
	`time
();

318 
t
;

320 ()
	`time
(&
t
);

321
	`\xb4\x9\xa9_time
(
t
);

322
	`\xb4\x9\xa9f
(" %\xa0 Pag\x90%d\n\n\n",
h\x97d\x94
,
\xb7ge
);

323
	}
}

326
cڡex\xb4
 
	gkM\x9au\x8b
 = 60L;

329
cڡex\xb4
 
	gkHour
 = 60L *
kM\x9au\x8b
;

332
cڡex\xb4
 
	gkDay
 = 24L *
kHour
;

335
cڡex\xb4
 
	gkY\x97r
 = 365L *
kDay
;

338
cڡex\xb4
 
	gkL\x97pY\x97r
 = 366L *
kDay
;

340 
	gmo
[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

342 *
	gm\xd\xafme
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

352 
	$\xb4\x9\xa9_time
(
t
) {

353 
i
,
y\x97r
,
day
,
m\xd\xa9h
,
hour
,
m\x9au\x8b
;

354 
\xcbngth
,
	`time
(),
\xdcig\x9a\xae
;

356
y\x97r
 = 1970;

357
\xdcig\x9a\xae
 =
t
;

358 
t
 > 0) {

359
\xcbngth
 = (
y\x97r
 % 4 =\xf00 ?
kL\x97pY\x97r
 :
kY\x97r
);

360 i\xe0(
t
 <
\xcbngth
)

362
t
 -\xf0
\xcbngth
;

363
y\x97r
++;

367
day
 =
\xa1\xa9ic_\xff\xa1
<>(
t
 /
kDay
);

368
t
 -\xf0
\xa1\xa9ic_\xff\xa1
<>(
day
\xe8*
kDay
;

369
hour
 =
\xa1\xa9ic_\xff\xa1
<>(
t
 /
kHour
);

370
t
 -\xf0
\xa1\xa9ic_\xff\xa1
<>(
hour
\xe8*
kHour
;

371
m\x9au\x8b
 =
\xa1\xa9ic_\xff\xa1
<>(
t
 /
kM\x9au\x8b
);

374
mo
[1] = (
y\x97r
 % 4 == 0 ? 29 : 28);

375
m\xd\xa9h
 = 0;

376
i
 = 0;

377 
day
 >\xf0
mo
[
i
]) {

378
m\xd\xa9h
++;

379
day
 -\xf0
mo
[
i
];

380
i
++;

384
	`\xb4\x9\xa9f
("\n\n%\xa0%d %0d:%0d %d",
m\xd\xafme
[
m\xd\xa9h
],
day
 + 1,
hour
 + 1,
m\x9au\x8b
,
y\x97r
);

385
	}
}

	@commands/pwd.cpp

9 
	~"\xa1\xa9.h\xb5
"

11 
	sd\x9\xfb\xf9
 {

12 
	md_\x9ao
;

13 
	md_\xc7me
[14];

16 
	$ma\x9a
()

18 
fd
;

19 
\xc7me
[128], *
n
;

20 *
	`ϡ_\x9adex
();

21 
\xa1\xa9

s
,
\xa1
;

22 
d\x9\xfb\xf9

d
;

24 *
\xc7me
 = 0;

25
	`\xa1\xa9
(".", &
s
);

27 i\xe0((
fd
 =
	`ݒ
("..", 0)) < 0) {

28
	`\xb4\x9\xa9s
("Can't open ..\n");

29
	`ex\x99
(1);

31
\xa1
.
\xa1_dev
 =
s
.st_dev;

32
\xa1
.
\xa1_\x9ao
 =
s
.st_ino;

33
\xa1
.
\xa1_mode
 =
s
.st_mode;

34
\xa1
.
\xa1_ƚk
 =
s
.st_nlink;

35
\xa1
.
\xa1_uid
 =
s
.st_uid;

36
\xa1
.
\xa1_gid
 =
s
.st_gid;

37
\xa1
.
\xa1_rdev
 =
s
.st_rdev;

38
\xa1
.
\xa1_size
 =
s
.st_size;

39
\xa1
.
\xa1_\xa9ime
 =
s
.st_atime;

40
\xa1
.
\xa1_mtime
 =
s
.st_mtime;

41
\xa1
.
\xa1_\xf9ime
 =
s
.st_ctime;

42
	`\xa1\xa9
("..", &
s
);

43
	`chd\x9c
("..");

44 i\xe0(
s
.
\xa1_dev
 =\xf0
\xa1
.st_dev)

46 i\xe0(
	`\xbbad
(
fd
, (*)&
d
, (
d\x9\xfb\xf9
)) < (direct)) {

47
	`\xb4\x9\xa9s
("Can't\x84ead ..\n");

48
	`ex\x99
(1);

50 
d
.
d_\x9ao
 !\xf0
\xa1
.
\xa1_\x9ao
);

53 i\xe0(
	`\xbbad
(
fd
, (*)&
d
, (
d\x9\xfb\xf9
)) < (direct)) {

54
	`\xb4\x9\xa9s
("Can't\x84ead ..\n");

55
	`ex\x99
(1);

57
	`\xa1\xa9
(
d
.
d_\xc7me
, &
s
);

58 } (
s
.
\xa1_dev
 !\xf0
\xa1
.\xa1_dev\xe8|| (s.
\xa1_\x9ao
 != st.st_ino));

59
	`\x\xe3o\xa3
(
fd
);

60 i\xe0(
	`\xa1rcmp
(".",
d
.
d_\xc7me
)) {

61
	`\xa1r\xf\xe1
(
\xc7me
, "/");

62
	`\xa1r\xf\xe1
(
\xc7me
,
d
.
d_\xc7me
);

64 } (
s
.
\xa1_\x9ao
 !\xf0
\xa1
.\xa1_\x9ao\xe8|| (s.
\xa1_dev
 != st.st_dev));

65 i\xe0(!*
\xc7me
)

66
	`\xb4\x9\xa9s
("/");

68 
n
 =
	`ϡ_\x9adex
(
\xc7me
, '/')) {

69
	`\xb4\x9\xa9s
(
n
);

70 *
n
 = 0;

72
	`\xb4\x9\xa9s
(
\xc7me
);

73
	`\xb4\x9\xa9s
("\n");

74
	`ex\x99
(0);

75
	}
}

78 *
	$ϡ_\x9adex
(*
\xa1r\x9ag
, 
ch
) {

79 *
\xbbtv\xae
 = 0;

81 ; *
\xa1r\x9ag
; *string++)

82 i\xe0(*
\xa1r\x9ag
 =\xf0
ch
)

83
\xbbtv\xae
 =
\xa1r\x9ag
;

84  (
\xbbtv\xae
);

85
	}
}

	@commands/rev.cpp

9 
	~"blocksiz.h\xb5
"

16 #i\xe2de\xe0
NULL


17 
	#NULL
 0

	)

20 #i\xe2de\xe0
EOF


21 
	#EOF
 (()-1)

	)

24 
	gfd
;

27 
\xbbv
();

28 
\xc3xtch\xac
();

30 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

31 
i
;

33 i\xe0(
\xacgc
 == 1) {

34
fd
 = 0;

35
	`\xbbv
();

36
	`ex\x99
(0);

38 
i
 = 1; i <
\xacgc
; i++) {

39 i\xe0((
fd
 =
	`ݒ
(
\xacgv
[
i
], 0)) < 0) {

40
	`\xa1d_\x94r
("Cannot open ");

41
	`\xa1d_\x94r
(
\xacgv
[
i
]);

42
	`\xa1d_\x94r
("\n");

45
	`\xbbv
();

46
	`\x\xe3o\xa3
(
fd
);

48
	`ex\x99
(0);

49
	}
}

55 
	$\xbbv
() {

56 
ou\x8dut
[
BLOCK_SIZE
];

57 
i
;

60
i
 =
BLOCK_SIZE
 - 1;

61 (
ou\x8dut
[
i
] =
	`\xc3xtch\xac
()\xe8!\xf0'\n' && ou\x8dut[i] !\xf0
EOF
)

62
i
--;

63
	`wr\x99e
(1, &
ou\x8dut
[
i
 + 1],
BLOCK_SIZE
 - 1 - i);

64 i\xe0(
ou\x8dut
[
i
] == '\n')

65
	`wr\x99e
(1, "\n", 1);

66 } 
ou\x8dut
[
i
] !\xf0
EOF
);

67
	}
}

70 
	gbuf
[
BLOCK_SIZE
];

75 
	$\xc3xtch\xac
()

77 
n
 = 0;

78 
i
;

80 i\xe0(--
n
 <= 0) {

81
n
 =
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
);

82
i
 = 0;

84  ((
n
 <\xf00\xe8?
EOF
 :
buf
[
i
++]);

85
	}
}

	@commands/rm.cpp

5 
	~"\xa1\xa9.h\xb5
"

7 
	sd\x9\xfb\xf9
 {

8 
	md_\x9ao
;

9 
	md_\xc7me
[14];

12 
	g\x94r\xdcs
 = 0;

13 
	gf\xe6ag
 = 0;

14 
	gi\xe6ag
 = 0;

15 
	gr\xe6ag
 = 0;

16 
	gex\xa1\xa9us
;

19 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

20 *
\xddt
;

22 i\xe0(
\xacgc
 < 2)

23
	`u\xa7ge
();

24 *++
\xacgv
;

25 --
\xacgc
;

26 **
\xacgv
 == '-') {

27
\xddt
 = *
\xacgv
;

28 *++
\xddt
 != '\0')

29 *
\xddt
) {

31
f\xe6ag
++;

34
i\xe6ag
++;

37
r\xe6ag
++;

40
	`\xa1d_\x94r
("rm: unknown option\n");

41
	`u\xa7ge
();

44
\xacgc
--;

45 *++
\xacgv
;

47 i\xe0(
\xacgc
 < 1)

48
	`u\xa7ge
();

49 
\xacgc
--)

50
	`\xbbmove
(*
\xacgv
++);

51
ex\xa1\xa9us
 = (
\x94r\xdcs
 == 0 ? 0 : 1);

52 i\xe0(
f\xe6ag
)

53
ex\xa1\xa9us
 = 0;

54
	`ex\x99
(
ex\xa1\xa9us
);

55
	}
}

58 
	$u\xa7ge
() {

59
	`\xa1d_\x94r
("Usage:\x84m [-fir] file\n");

60
	`ex\x99
(1);

61
	}
}

64 
	$\xbbmove
(*
\xc7me
) {

65 
\xa1\xa9

s
;

66 
d\x9\xfb\xf9

d
;

67 
\xbaame
[128], *
	`\xa1r\xfdy
(), *
	`\xa1r\xf\xe1
();

68 
fd
;

70 i\xe0(
	`\xa1\xa9
(
\xc7me
, &
s
)) {

71 i\xe0(!
f\xe6ag
)

72
	`\xa1d\x94r3
("rm: ",
\xc7me
, "\x82on-existent\n");

73
\x94r\xdcs
++;

76 i\xe0(
i\xe6ag
) {

77
	`\xa1d\x94r3
("rm:\x84emov\x90",
\xc7me
, "? ");

78 i\xe0(!
	`c\xdaf\x9cm
())

81 i\xe0((
s
.
\xa1_mode
 &
S_IFMT
\xe8=\xf0
S_IFDIR
) {

82 i\xe0(
r\xe6ag
) {

83 i\xe0((
fd
 =
	`ݒ
(
\xc7me
, 0)) < 0) {

84 i\xe0(!
f\xe6ag
)

85
	`\xa1d\x94r3
("rm: c\xaa'\x88ݒ ",
\xc7me
, "\n");

86
\x94r\xdcs
++;

89 
	`\xbbad
(
fd
, (*)&
d
, (
d\x9\xfb\xf9
)) > 0) {

90 i\xe0(
d
.
d_\x9ao
 &&
	`\xa1rcmp
("..", d.
d_\xc7me
) && strcmp(".", d.d_name)) {

91
	`\xa1r\xfdy
(
\xbaame
,
\xc7me
);

92
	`\xa1r\xf\xe1
(
\xbaame
, "/");

93
	`\xa1r\xf\xe1
(
\xbaame
,
d
.
d_\xc7me
);

94
	`\xbbmove
(
\xbaame
);

97
	`\x\xe3o\xa3
(
fd
);

98
	`\xbbm_d\x9c
(
\xc7me
);

100 i\xe0(!
f\xe6ag
)

101
	`\xa1d\x94r3
("rm: ",
\xc7me
, " is\x87 directory\n");

102
\x94r\xdcs
++;

106 i\xe0(
	`ac\xfbss
(
\xc7me
, 2\xe8&& !
f\xe6ag
) {

107
	`\xa1d\x94r3
("rm:\x84emov\x90",
\xc7me
, " with mode ");

108
	`o\xf9\x\xab
(
s
.
\xa1_mode
 & 0777);

109
	`\xa1d_\x94r
("? ");

110 i\xe0(!
	`c\xdaf\x9cm
())

113 i\xe0(
	`uƚk
(
\xc7me
)) {

114 i\xe0(!
f\xe6ag
)

115
	`\xa1d\x94r3
("rm: ",
\xc7me
, "\x82ot\x84emoved\n");

116
\x94r\xdcs
++;

119
	}
}

122 
	$\xbbm_d\x9c
(*
\xc7me
) {

123 
\xa1\xa9us
;

125 
	`f\xdck
()) {

127
	`\xa1d_\x94r
("rm: can't fork\n");

128
\x94r\xdcs
++;

131
	`exe\x\xe3
("/b\x9a/rmd\x9c", "rmd\x9c",
\xc7me
, 0);

132
	`exe\x\xe3
("/u\xa4/b\x9a/rmd\x9c", "rmd\x9c",
\xc7me
, 0);

133
	`\xa1d_\x94r
("rm: can't\x83xec\x84mdir\n");

134
	`ex\x99
(1);

136
	`wa\x99
(&
\xa1\xa9us
);

137
\x94r\xdcs
 +\xf0
\xa1\xa9us
;

139
	}
}

142 
	$c\xdaf\x9cm
() {

143 
c
,
t
;

144
	`\xbbad
(0, &
c
, 1);

145
t
 =
c
;

147
	`\xbbad
(0, &
t
, 1);

148 
t
 != '\n' &&\x81 != -1);

149  (
c
 == 'y' || c == 'Y');

150
	}
}

153 
	$o\xf9\x\xab
(
num
) {

154 
a
[4];

156
a
[0] = (((
num
 >> 6) & 7) + '0');

157
a
[1] = (((
num
 >> 3) & 7) + '0');

158
a
[2] = ((
num
 & 7) + '0');

159
a
[3] = 0;

160
	`\xa1d_\x94r
(
a
);

161
	}
}

164 
	$\xa1d\x94r3
(cڡ *
s1
, cڡ *
s2
, cڡ *
s3
) {

165
	`\xa1d_\x94r
(
s1
);

166
	`\xa1d_\x94r
(
s2
);

167
	`\xa1d_\x94r
(
s3
);

168
	}
}

	@commands/rmdir.cpp

9 
	~"../\x9a\x\xe3ude/sig\xc7l.h\xb5
"

10 
	~"../\x9a\x\xe3ude/\xa1\xa9.h\xb5
"

12 
	sd\x9\xfb\xf9
 {

13 
	md_\x9ao
;

14 
	md_\xc7me
[14];

16 
	g\x94r\xdc
 = 0;

19 
	$ma\x9a
(
\xacgc
, **
\xacgv
) {

20 i\xe0(
\xacgc
 < 2) {

21
	`\xb4\x9\xa9s
("Usage:\x84mdir dir ...\n");

22
	`ex\x99
(1);

24
	`sig\xc7l
(
SIGHUP
,
SIG_IGN
);

25
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

26
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

27
	`sig\xc7l
(
SIGTERM
,
SIG_IGN
);

28 --
\xacgc
)

29
	`\xbbmove
(*++
\xacgv
);

30 i\xe0(
\x94r\xdc
)

31
	`ex\x99
(1);

32
	}
}

35 
	$\xbbmove
(*
d\x9c\xc7me
) {

36 
d\x9\xfb\xf9

d
;

37 
\xa1\xa9

s
,
cwd
;

38 
fd
 = 0,
\xa6
 = 0;

39 
d\xd9s
[128];

41 i\xe0(
	`\xa1\xa9
(
d\x9c\xc7me
, &
s
)) {

42
	`\xa1d\x94r2
(
d\x9c\xc7me
, " doesn't\x83xist\n");

43
\x94r\xdc
++;

46 i\xe0((
s
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFDIR
) {

47
	`\xa1d\x94r2
(
d\x9c\xc7me
, "\x82ot\x87 directory\n");

48
\x94r\xdc
++;

51
	`\xa1r\xfdy
(
d\xd9s
,
d\x9c\xc7me
);

52 
d\x9c\xc7me
[
fd
])

53 i\xe0(
d\x9c\xc7me
[
fd
++] == '/')

54
\xa6
 =
fd
;

55
d\xd9s
[
\xa6
] = '\0';

56 i\xe0(
	`ac\xfbss
(
d\xd9s
, 2)) {

57
	`\xa1d\x94r2
(
d\x9c\xc7me
, "\x82o\x85ermission\n");

58
\x94r\xdc
++;

61
	`\xa1\xa9
("", &
cwd
);

62 i\xe0((
s
.
\xa1_\x9ao
 =\xf0
cwd
.\xa1_\x9ao\xe8&& (s.
\xa1_dev
 == cwd.st_dev)) {

63
	`\xa1d_\x94r
("rmdir: can't\x84emove current directory\n");

64
\x94r\xdc
++;

67 i\xe0((
fd
 =
	`ݒ
(
d\x9c\xc7me
, 0)) < 0) {

68
	`\xa1d\x94r2
("\xffn'\x88\xbbad ",
d\x9c\xc7me
);

69
	`\xa1d_\x94r
("\n");

70
\x94r\xdc
++;

73 
	`\xbbad
(
fd
, (*)&
d
, (
d\x9\xfb\xf9
)) == (direct))

74 i\xe0(
d
.
d_\x9ao
 != 0)

75 i\xe0(
	`\xa1rcmp
(
d
.
d_\xc7me
, ".") && strcmp(d.d_name, "..")) {

76
	`\xa1d\x94r2
(
d\x9c\xc7me
, "\x82ot\x83mpty\n");

77
	`\x\xe3o\xa3
(
fd
);

78
\x94r\xdc
++;

81
	`\x\xe3o\xa3
(
fd
);

82
	`\xa1r\xfdy
(
d\xd9s
,
d\x9c\xc7me
);

83
	`\xa1r\xf\xe1
(
d\xd9s
, "/.");

84
	`uƚk
(
d\xd9s
);

85
	`\xa1r\xf\xe1
(
d\xd9s
, ".");

86
	`uƚk
(
d\xd9s
);

87 i\xe0(
	`uƚk
(
d\x9c\xc7me
)) {

88
	`\xa1d\x94r2
("\xffn'\x88\xbbmov\x90",
d\x9c\xc7me
);

89
	`\xa1d_\x94r
("\n");

90
\x94r\xdc
++;

93
	}
}

96 
	$\xa1d\x94r2
(cڡ *
s1
, cڡ *
s2
) {

97
	`\xa1d_\x94r
("rmdir: ");

98
	`\xa1d_\x94r
(
s1
);

99
	`\xa1d_\x94r
(
s2
);

100
	}
}

	@commands/roff.cpp

9 
	~"sg\x89y.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

11 
	~"\xa1\xa9.h\xb5
"

12 
	~"\xa1dio.h\xb5
"

14 
	#SUFTAB
 "/u\xa4/lib/su\xe1ab"

	)

15 
	#TXTLEN
 (
o_\xb6
 -
o_m1
 -
o_m2
 -
o_m3
 -
o_m4
 - 2)

	)

16 
	#IDTLEN
 (
o_ti
 >\xf00 ? o_t\x98:
o_\x9a
)

	)

17 
	#MAXMAC
 64

	)

18 
	#MAXDEPTH
 10

	)

19 
	#MAXLENGTH
 255

	)

20 
	#UNDERL
 0200

	)

22 
	gcumbuf
[
BUFSIZ
];

23 
	g\xa5a\xfbch\xacs
[] = " \t\n";

24 
	gs\xe6ag
,
	gh\xe6ag
,
	g\xa1\xac\x8dage
,
	g\xa1ݷge
;

25 
	gh\xdedw\xdcd
[
MAXLENGTH
], *
	gh\xdedp
;

26 
	gassyl\x9\xab
[
MAXLENGTH
];

27 
	gassy\xcbn
;

28 
	geh\x97d
[100],
	gefo\xd9
[100],
	goh\x97d
[100],
	gofo\xd9
[100];

29 
	sma\xfc\xd9y\xb3
 {

30 
	mm\xc7me
[3];

31 
	mmoff
;

32 }
	gma\xfco
[
MAXMAC
];

33 
	gn_ma\xfcos
;

34 
	gd\x95th
;

35 
	gadjtogg\xcb
;

36 
	gi\xa4eque\xa1
 = 0;

37 
	go_\x8c
[40][2];

38 
	go_cc
 = '.';

39 
	go_hc
 = -1;

40 
	go_tc
 = ' ';

41 
	go_\x9a
 = 0;

42 
	go_ix
 = -1;

43 
	go_\x8f
[20] = {9, 17, 25, 33, 41, 49, 57, 65, 73, 81,

45 
	gn_\x8f
 = 20;

46 
	go_\x\xfb
 = 65,
	go_ad
 = 1,
	go_po
 = 0,
	go_ls
 = 1,
	go_ig
 = 0,
	go_fi
 = 1;

47 
	go_\xb6
 = 66,
	go_ro
 = 0,
	go_hx
 = 0,
	go_bl
 = 0,
	go_\xa5
 = 0,
	go_sk
 = 0;

48 
	go_\xfb
 = 0,
	go_m1
 = 2,
	go_m2
 = 2,
	go_m3
 = 1,
	go_m4
 = 3,
	go_ul
 = 0;

49 
	go_li
 = 0,
	go_n1
 = 0,
	go_n2
 = 0,
	go_bp
 = -1,
	go_hy
 = 1;

50 
	go_ni
 = 1;

51 
	go_\xc2
 = 0;

52 
	go_ti
 = -1;

53 
	g\xfb\xc1\x94
 = 0;

54 
	g\xb7ge_no
 = -1;

55 
	gl\x9\xab_no
 = 9999;

56 
	gn_outw\xdcds
;

57
FILE
 *
	gF\x9\x93
, *
	gMa\xfc\x97d
, *
	gMacwr\x99e
;

58
FILE
 *
	gSave
;

59 
	g\x8bΔ
[
MAXDEPTH
],
\xe1\x96l
();

60 *
\xa1r\xfft
(), *
\xa1r\xfdy
(), *
\xa1\xbbnd
(), *
\xa1rhas
();

61 *
\xa5r\x9atf
();

62 *
	g\xbbque\xa1
[] = {"ad", "ar", "bl", "bp", "br", "cc", "ce", "de", "ds", "ef", "eh", "fi", "fo",

66 *
mk\x8bmp
(), *
	gmf\x9e\xc7m
 = "/tmp/rtmXXXXXX";

67 
	gc
;

68 
sg\x89yb

	g\x89y
;

70
FILE
 *
fݒ
();

73 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

74 i\xe0(!
	`i\xa7\x89y
(1))

75
	`\xa3tbuf
(
\xa1dout
,
cumbuf
);

76 --
\xacgc
)

77 **++
\xacgv
) {

79
\xa1\xac\x8dage
 =
	`\xa9oi
(++*
\xacgv
);

82 ++*
\xacgv
;

83 i\xe0(
	`isdig\x99
(**
\xacgv
))

84
\xa1ݷge
 =
	`\xa9oi
(*
\xacgv
);

86 **
\xacgv
) {

88
s\xe6ag
++;

91
h\xe6ag
++;

94
	`bomb
();

98
\xacgc
++;

99 
\x92d\xacgs
;

101
\x92d\xacgs
:

102 i\xe0(
s\xe6ag
)

103
	`io\xf9l
(0,
TIOCGETP
, &
\x89y
);

104
	`mesg
(0);

105
assy\xcbn
 = 0;

106
assyl\x9\xab
[0] = '\0';

107 i\xe0(!
\xacgc
) {

108
F\x9\x93
 =
\xa1d\x9a
;

109
	`\xbbadf\x9\x93
();

111 --
\xacgc
) {

112
F\x9\x93
 =
	`fݒ
(*
\xacgv
, "r");

113 i\xe0(
NULL
 =\xf0
F\x9\x93
) {

114
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "roff: c\xaanل\x97d %s\n", *
\xacgv
);

115
	`d\xd\xab
(1);

117
	`\xbbadf\x9\x93
();

118
	`f\x\xe3o\xa3
(
F\x9\x93
);

119
\xacgv
++;

121
	`wr\x99eb\xbbak
();

122
	`\x92d\xb7ge
();

123 ;
o_sk
; o_sk--)

124
	`b\xc\xe2k\xb7ge
();

125
	`mesg
(1);

126
	`d\xd\xab
(0);

128
	}
}

130
	$mesg
(
f
) f;

132 
mode
;

133 
\xa1\xa9

cbuf
;

134 *
	`\x89y\xc7me
();

145
	}
}

147
	$\xbbadf\x9\x93
() {

148 
	`\xbbadl\x9\xab
()) {

149 i\xe0(
i\xa4eque\xa1
)

151 i\xe0(
\xfb\xc1\x94
 || !
o_fi
) {

152 i\xe0(
assy\xcbn
)

153
	`wr\x99\x96\x9\xab
(0, 1);

155
	`b\xc\xe2kl\x9\xab
();

158
	}
}

160
	$\xbbadl\x9\xab
() {

161 
\xa1\xac\x8e\x9ae
,
do\x9agw\xdcd
;

162
i\xa4eque\xa1
 = 0;

163
\xa1\xac\x8e\x9ae
 = 1;

164
do\x9agw\xdcd
 = 0;

165
c
 =
	`suck
();

166 i\xe0(
c
 == '\n') {

167
o_\xa5
 = 1;

168
	`wr\x99eb\xbbak
();

169 
out
;

170 } i\xe0(
	`is\xa5a\xfb
(
c
))

171
	`wr\x99eb\xbbak
();

173 i\xe0(
c
 =\xf0
EOF
) {

174 i\xe0(
do\x9agw\xdcd
)

175
	`bumpw\xdcd
();

178 i\xe0(
c
 !\xf0
o_cc
 &&
o_ig
) {

179 
c
 !\xf0'\n' && c !\xf0
EOF
)

180
c
 =
	`suck
();

183 i\xe0(
	`is\xa5a\xfb
(
c
\xe8&& !
do\x9agw\xdcd
) {

184
\xa1\xac\x8e\x9ae
 = 0;

185 
c
) {

187
assyl\x9\xab
[
assy\xcbn
++] = ' ';

190
	`\x8fbuϋ
();

193 
out
;

195
c
 =
	`suck
();

198 i\xe0(
	`is\xa5a\xfb
(
c
\xe8&&
do\x9agw\xdcd
) {

199
	`bumpw\xdcd
();

200 i\xe0(
c
 == '\t')

201
	`\x8fbuϋ
();

202 i\xe0(
assy\xcbn
)

203
assyl\x9\xab
[
assy\xcbn
++] = ' ';

204
do\x9agw\xdcd
 = 0;

205 i\xe0(
c
 == '\n')

208 i\xe0(!
	`is\xa5a\xfb
(
c
)) {

209 i\xe0(
do\x9agw\xdcd
)

210 *
h\xdedp
++ =
o_ul
 ?
c
 |
UNDERL
 : c;

211 i\xe0(
\xa1\xac\x8e\x9ae
 &&
c
 =\xf0
o_cc
 && !
o_li
) {

212
i\xa4eque\xa1
 = 1;

213 
	`\xbbad\xbbq
();

215
do\x9agw\xdcd
 = 1;

216
h\xdedp
 =
h\xdedw\xdcd
;

217 *
h\xdedp
++ =
o_ul
 ?
c
 |
UNDERL
 : c;

220
\xa1\xac\x8e\x9ae
 = 0;

221
c
 =
	`suck
();

223
out
:

224 i\xe0(
o_ul
)

225
o_ul
--;

226
\xfb\xc1\x94
 =
o_\xfb
;

227 i\xe0(
o_\xfb
)

228
o_\xfb
--;

229 i\xe0(
o_li
)

230
o_li
--;

231 
c
 !\xf0
EOF
;

232
	}
}

238
	$bumpw\xdcd
() {

239 *
hc
;

240 *
h\xdedp
 = '\0';

245 i\xe0(
assy\xcbn
 +
	`\xbb\x\xab\xcbn
(
h\xdedw\xdcd
\xe8>
o_\x\xfb
 -
IDTLEN
) {

246 i\xe0(!
o_hy
)

247
	`wr\x99\x96\x9\xab
(
o_ad
, 0);

249 
assy\xcbn
 +
	`\xbb\x\xab\xcbn
(
h\xdedw\xdcd
\xe8>
o_\x\xfb
 -
IDTLEN
) {

253 i\xe0(
o_hc
 &&
	`\xa1rhas
(
h\xdedw\xdcd
, o_hc)) {

257 
hc
 =
	`\xa1\xbbnd
(
h\xdedw\xdcd
); hc >= holdword; hc--) {

258 i\xe0(*
hc
 !\xf0
o_hc
)

260 *
hc
 = '\0';

261 i\xe0(
assy\xcbn
 +
	`\xbb\x\xab\xcbn
(
h\xdedw\xdcd
\xe8+ 1 >
o_\x\xfb
 -
IDTLEN
) {

262 *
hc
 =
o_hc
;

268
	`dehyph
(
h\xdedw\xdcd
);

269
	`\xa1r\xfdy
(&
assyl\x9\xab
[
assy\xcbn
],
h\xdedw\xdcd
);

270
	`\xa1r\xf\xe1
(
assyl\x9\xab
, "-");

271
assy\xcbn
 +\xf0
	`\xa1\xbe\x92
(
h\xdedw\xdcd
) + 1;

272
	`\xa1r\xfdy
(
h\xdedw\xdcd
, ++
hc
);

278
	`wr\x99\x96\x9\xab
(
o_ad
, 0);

279 i\xe0(
hc
 <
h\xdedw\xdcd
)

280 
giveup
;

286
	`wr\x99\x96\x9\xab
(
o_ad
, 0);

287 
giveup
;

291
giveup
:

295 i\xe0(
o_hc
)

296
	`dehyph
(
h\xdedw\xdcd
);

297
	`\xa1r\xfdy
(&
assyl\x9\xab
[
assy\xcbn
],
h\xdedw\xdcd
);

298
assy\xcbn
 +\xf0
	`\xa1\xbe\x92
(
h\xdedw\xdcd
);

299
h\xdedp
 =
h\xdedw\xdcd
;

300
	}
}

306
	$dehyph
(
s
) *s;

308 *
t
;

309 
t
 =
s
; *s; s++)

310 i\xe0(*
s
 !\xf0
o_hc
)

311 *
t
++ = *
s
;

312 *
t
 = '\0';

313
	}
}

319 
	$\xbb\x\xab\xcbn
(
s
)

320 *
s
;

322 
n
;

323
n
 = 0;

324 *
s
)

325
n
 +\xf0(
o_hc
 !\xf0*
s
++);

326 
n
;

327
	}
}

329
	$\x8fbuϋ
() {

330 
j
;

331 
j
 = 0; j <
n_\x8f
; j++)

332 i\xe0(
o_\x8f
[
j
] - 1 >
assy\xcbn
 +
IDTLEN
) {

333 ;
assy\xcbn
 +
IDTLEN
 <
o_\x8f
[
j
] - 1;\x87ssylen++)

334
assyl\x9\xab
[
assy\xcbn
] =
o_tc
;

338
assyl\x9\xab
[
assy\xcbn
++] =
o_tc
;

339
	}
}

341 
	$\xbbad\xbbq
() {

342 
\xbbq
[3];

343 
r
,
s
;

344 i\xe0(
	`sk\x9d\xa5
())

345 
c
 !\xf0
EOF
;

346
c
 =
	`suck
();

347 i\xe0(
c
 =\xf0
EOF
 || c == '\n')

348 
c
 !\xf0
EOF
;

349 i\xe0(
c
 == '.') {

350
o_ig
 = 0;

352 (
c
 =
	`suck
());

353 
c
 !\xf0
EOF
 && c != '\n');

354 i\xe0(
d\x95th
)

355
	`\x92dmac
();

356 
c
 !\xf0
EOF
;

358 i\xe0(
o_ig
) {

359 
c
 !\xf0
EOF
 && c != '\n')

360
c
 =
	`suck
();

361 
c
 !\xf0
EOF
;

363
\xbbq
[0] =
c
;

364
c
 =
	`suck
();

365 i\xe0(
c
 =\xf0
EOF
 || c == '\n')

366
\xbbq
[1] = '\0';

368
\xbbq
[1] =
c
;

369
\xbbq
[2] = '\0';

370 
r
 = 0;\x84 <
n_ma\xfcos
;\x84++)

371 i\xe0(!
	`\xa1rcmp
(
ma\xfco
[
r
].
m\xc7me
,
\xbbq
)) {

372
	`submac
(
r
);

373 
\xbbq\xe6sh
;

375 
r
 = 0;
\xbbque\xa1
[r];\x84++)

376 i\xe0(!
	`\xa1rcmp
(
\xbbque\xa1
[
r
],
\xbbq
))

378 i\xe0(!
\xbbque\xa1
[
r
]) {

380 (
c
 =
	`suck
());

381 
c
 !\xf0
EOF
 && c != '\n');

382 
c
 !\xf0
EOF
;

384 
r
) {

386
o_ad
 = 1;

387
	`wr\x99eb\xbbak
();

390
o_ro
 = 0;

393
	`ėd
(&
o_bl
);

394
	`wr\x99eb\xbbak
();

398
c
 =
	`\xa2\xbbad
(&
r
, &
s
, 1);

399 i\xe0(
s
 > 0)

400
o_bp
 =
\xb7ge_no
 -
r
;

401 i\xe0(
s
 < 0)

402
o_bp
 =
\xb7ge_no
 +
r
;

404
o_bp
 =
r
;

405
	`wr\x99eb\xbbak
();

406 i\xe0(
l\x9\xab_no
) {

407
	`\x92d\xb7ge
();

408
	`beg\x9a\xb7ge
();

412
	`wr\x99eb\xbbak
();

415
c
 =
	`\xfc\x97d
(&
o_cc
);

418
	`ėd
(&
o_\xfb
);

419
	`wr\x99eb\xbbak
();

422
	`defmac
();

425
o_ls
 = 2;

426
	`wr\x99eb\xbbak
();

429
c
 =
	`\x8c\x97d
(
efo\xd9
);

432
c
 =
	`\x8c\x97d
(
eh\x97d
);

435
o_fi
 = 1;

436
	`wr\x99eb\xbbak
();

439
c
 =
	`\x8c\x97d
(
efo\xd9
);

440
	`\xa1r\xfdy
(
ofo\xd9
,
efo\xd9
);

443
c
 =
	`\xfc\x97d
(&
o_hc
);

446
c
 =
	`\x8c\x97d
(
eh\x97d
);

447
	`\xa1r\xfdy
(
oh\x97d
,
eh\x97d
);

450
o_hx
 = 1;

453
	`ėd
(&
o_hy
);

456
o_ig
 = 1;

459
	`wr\x99eb\xbbak
();

460
	`\xa2\xa3t
(&
o_\x9a
);

461
o_ix
 = -1;

464
	`\xa2\xa3t
(&
o_ix
);

465 i\xe0(!
n_outw\xdcds
)

466
o_\x9a
 =
o_ix
;

469
	`ėd
(&
o_li
);

472
	`\xa2\xa3t
(&
o_\x\xfb
);

475
	`\xa2\xa3t
(&
o_ls
);

478
	`ėd
(&
o_m1
);

481
	`ėd
(&
o_m2
);

484
	`ėd
(&
o_m3
);

487
	`ėd
(&
o_m4
);

490
o_n1
 = 1;

493
	`ėd
(&
o_n2
);

496
o_ad
 = 0;

497
	`wr\x99eb\xbbak
();

500
	`ėd
(&
r
);

501 i\xe0(
l\x9\xab_no
 + (
r
 - 1\xe8*
o_ls
 + 1 >
TXTLEN
) {

502
	`wr\x99eb\xbbak
();

503
	`\x92d\xb7ge
();

504
	`beg\x9a\xb7ge
();

508
o_fi
 = 0;

509
	`wr\x99eb\xbbak
();

512
	`\xa2\xa3t
(&
o_ni
);

515
	`\xa2\xa3t
(&
o_\xc2
);

518
	`do_nx
();

519
c
 = '\n';

522
c
 =
	`\x8c\x97d
(
ofo\xd9
);

525
c
 =
	`\x8c\x97d
(
oh\x97d
);

528
	`\xa2\xa3t
(&
o_\xb6
);

531
	`\xa2\xa3t
(&
o_po
);

534
o_ro
 = 1;

537
	`ėd
(&
o_sk
);

540
	`ėd
(&
o_\xa5
);

541
	`wr\x99eb\xbbak
();

544
	`wr\x99eb\xbbak
();

545
o_ls
 = 1;

548
	`do_\x8f
();

551
c
 =
	`\xfc\x97d
(&
o_tc
);

554
	`wr\x99eb\xbbak
();

555
c
 =
	`\xa2\xbbad
(&
r
, &
s
, 0);

556 i\xe0(
s
 > 0)

557
o_ti
 =
o_\x9a
 +
r
;

558 i\xe0(
s
 < 0)

559
o_ti
 =
o_\x9a
 -
r
;

561
o_ti
 =
r
;

564
	`do_\x8c
();

567
	`ėd
(&
o_ul
);

570
\xbbq\xe6sh
:

571 
c
 !\xf0
EOF
 && c != '\n')

572
c
 =
	`suck
();

573 
c
 !\xf0
EOF
;

574
	}
}

576
	$\xa2\xa3t
(
\xb7r
) *par;

578 
r
,
s
;

579
c
 =
	`\xa2\xbbad
(&
r
, &
s
, 0);

580 i\xe0(
s
 > 0)

581 *
\xb7r
 +\xf0
r
;

582 i\xe0(
s
 < 0)

583 *
\xb7r
 -\xf0
r
;

585 *
\xb7r
 =
r
;

586
	}
}

588
	$\x8c\x97d
(
s
) *s;

590 
\xcbadbl
;

591
\xcbadbl
 = 0;

593
c
 =
	`suck
();

594 i\xe0(
c
 =\xf0' ' && !
\xcbadbl
)

596 i\xe0(
c
 =\xf0
EOF
 || c == '\n') {

597 *
s
 = '\0';

598 
c
;

600 *
s
++ =
c
;

601
\xcbadbl
++;

603
	}
}

605
	$ėd
(
i
) *i;

607 
f
;

608
f
 = 0;

609 *
i
 = 0;

610 i\xe0(!
	`sk\x9d\xa5
())

612
c
 =
	`suck
();

613 i\xe0(
c
 =\xf0
EOF
)

615 i\xe0(
	`is\xa5a\xfb
(
c
))

617 i\xe0(
	`isdig\x99
(
c
)) {

618
f
++;

619 *
i
 = *\x98* 10 +
c
 - '0';

623 i\xe0(!
f
)

624 *
i
 = 1;

625
	}
}

627 
	$\xa2\xbbad
(
i
,
s
,
sdef
)

628 *
i
, *
s
,
sdef
;

630 
f
;

631
f
 = *
i
 = *
s
 = 0;

633
c
 =
	`suck
();

634 i\xe0(
c
 =\xf0
EOF
 || c == '\n')

636 i\xe0(
	`is\xa5a\xfb
(
c
)) {

637 i\xe0(
f
)

642 i\xe0(
	`isdig\x99
(
c
)) {

643
f
++;

644 *
i
 = *\x98* 10 +
c
 - '0';

645 } i\xe0((
c
 =\xf0'+' || c =\xf0'-'\xe8&& !
f
) {

646
f
++;

647 *
s
 =
c
 == '+' ? 1 : -1;

651 
c
 !\xf0
EOF
 && c != '\n')

652
c
 =
	`suck
();

653 i\xe0(!
f
) {

654 *
i
 = 1;

655 *
s
 =
sdef
;

657 
c
;

658
	}
}

660 
	$\xfc\x97d
(
k
)

661 *
k
;

663 
u
;

664 *
k
 = -1;

666
u
 =
	`suck
();

667 i\xe0(
u
 =\xf0
EOF
 || u == '\n')

668 
u
;

669 i\xe0(
	`is\xa5a\xfb
(
u
))

671 i\xe0(*
k
 < 0)

672 *
k
 =
u
;

674
	}
}

676
	$defmac
() {

677 
i
;

678 
\xc3wmac
[3], *
nm
;

679 i\xe0(
	`sk\x9d\xa5
())

681
nm
 =
\xc3wmac
;

682 i\xe0(!
Macwr\x99e
)

683
	`ݒmac
();

684 *
nm
++ =
	`suck
();

685
c
 =
	`suck
();

686 i\xe0(
c
 !\xf0
EOF
 && c != '\n' && c != ' ' && c != '\t')

687 *
nm
++ =
c
;

688 *
nm
 = '\0';

690 
i
 = 0; i <
n_ma\xfcos
; i++)

691 i\xe0(!
	`\xa1rcmp
(
\xc3wmac
,
ma\xfco
[
i
].
m\xc7me
)) {

692
ma\xfco
[
i
].
m\xc7me
[0] = '\0';

695
ma\xfco
[
n_ma\xfcos
].
moff
 =
	`\xe1\x96l
(
Macwr\x99e
);

696
	`\xa1r\xfdy
(
ma\xfco
[
n_ma\xfcos
++].
m\xc7me
,
\xc3wmac
);

697 
c
 !\xf0
EOF
 && c != '\n')

698
c
 =
	`suck
();

699 
	`c\xddyl\x9\xab
())

701
	`f\xe6ush
(
Macwr\x99e
);

702
	}
}

704
	$ݒmac
() {

705 i\xe0(
NULL
 =\xf0(
Macwr\x99e
 =
	`fݒ
(
	`mk\x8bmp
(
mf\x9e\xc7m
), "w"))) {

706
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "roff: cannot open\x81emp file\n");

707
	`d\xd\xab
(1);

709
Ma\xfc\x97d
 =
	`fݒ
(
mf\x9e\xc7m
, "r");

710
	`uƚk
(
mf\x9e\xc7m
);

711
	}
}

713 
	$c\xddyl\x9\xab
() {

714 
n
,
f\x9c\xa1
,
\xa3c\xdad
;

715 i\xe0(
c
 =\xf0
EOF
) {

716
	`\xe5r\x9\xa9f
(
Macwr\x99e
, "..\n");

719
n
 = 0;

720
f\x9c\xa1
 = 1;

721
\xa3c\xdad
 = 0;

723
c
 =
	`suck
();

724 i\xe0(
c
 =\xf0
EOF
) {

725 i\xe0(!
f\x9c\xa1
)

726
	`putc
('\n',
Macwr\x99e
);

729 i\xe0(
c
 == '\n') {

730
	`putc
('\n',
Macwr\x99e
);

731 
n
 != 2;

733 i\xe0(
f\x9c\xa1
 &&
c
 == '.')

734
n
++;

735 i\xe0(
\xa3c\xdad
 &&
n
 =\xf01 &&
c
 == '.')

736
n
++;

737
	`putc
(
c
,
Macwr\x99e
);

738
\xa3c\xdad
 =
f\x9c\xa1
;

739
f\x9c\xa1
 = 0;

741
	}
}

743
	$submac
(
r
) r;

745 
c
 !\xf0
EOF
 && c != '\n')

746
c
 =
	`suck
();

747 i\xe0(
d\x95th
)

748
\x8bΔ
[
d\x95th
 - 1] =
	`\xe1\x96l
(
Ma\xfc\x97d
);

750
Save
 =
F\x9\x93
;

751
F\x9\x93
 =
Ma\xfc\x97d
;

753
d\x95th
++;

754
	`f\xa3ek
(
Ma\xfc\x97d
,
ma\xfco
[
r
].
moff
, 0);

755
	}
}

757
	$\x92dmac
() {

758
d\x95th
--;

759 i\xe0(
d\x95th
)

760
	`f\xa3ek
(
Ma\xfc\x97d
,
\x8bΔ
[
d\x95th
 - 1], 0);

762
F\x9\x93
 =
Save
;

763
c
 = '\n';

764
	}
}

766
	$do_\x8f
() {

767 
v
;

768
n_\x8f
 = 0;

770
	`ėd
(&
v
);

771 i\xe0(
v
 == 1)

774
o_\x8f
[
n_\x8f
++] =
v
;

775 i\xe0(
c
 =\xf0'\n' || c =\xf0
EOF
)

778
	}
}

780
	$do_\x8c
() {

781 *
t
;

782
t
 = &
o_\x8c
[0][0];

783 *
t
 = '\0';

784 i\xe0(
	`sk\x9d\xa5
())

787
c
 =
	`suck
();

788 i\xe0(
c
 =\xf0
EOF
 || c == '\n')

791 *
t
++ =
c
;

793 *
t
 = '\0';

794
	}
}

796
	$do_nx
() {

797 
\xe2ame
[100], *
f
;

798
f
 =
\xe2ame
;

799 i\xe0(
	`sk\x9d\xa5
())

802 
c
 =
	`suck
()) {

803 
EOF
:

807 i\xe0(
f
 =\xf0
\xe2ame
)

809 
g\xd9_nx
;

811 *
f
++ =
c
;

813
g\xd9_nx
:

814
	`f\x\xe3o\xa3
(
F\x9\x93
);

815 *
f
 = '\0';

816 i\xe0(!(
F\x9\x93
 =
	`fݒ
(
\xe2ame
, "r"))) {

817
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "roff: c\xaanل\x97d %s\n",
\xe2ame
);

818
	`d\xd\xab
(1);

820
	}
}

822 
	$sk\x9d\xa5
() {

824 
c
 =
	`suck
()) {

825 
EOF
:

832
	`ung\x91c
(
c
,
F\x9\x93
);

835
	}
}

837
	$wr\x99eb\xbbak
() {

838 
q
;

839 i\xe0(
assy\xcbn
)

840
	`wr\x99\x96\x9\xab
(0, 1);

841
q
 =
TXTLEN
;

842 i\xe0(
o_bl
) {

843 i\xe0(
o_bl
 +
l\x9\xab_no
 >
q
) {

844
	`\x92d\xb7ge
();

845
	`beg\x9a\xb7ge
();

847 ;
o_bl
; o_bl--)

848
	`b\xc\xe2kl\x9\xab
();

849 } i\xe0(
o_\xa5
) {

850 i\xe0(
o_\xa5
 +
l\x9\xab_no
 >
q
)

851
	`\xc3w\xb7ge
();

852 i\xe0(
l\x9\xab_no
)

853 ;
o_\xa5
; o_sp--)

854
	`b\xc\xe2kl\x9\xab
();

856
	}
}

858
	$b\xc\xe2kl\x9\xab
() {

859 i\xe0(
l\x9\xab_no
 >\xf0
TXTLEN
)

860
	`\xc3w\xb7ge
();

861 i\xe0(
o_n2
)

862
o_n2
++;

863
	`\xa5\x99
('\n');

864
l\x9\xab_no
++;

865
	}
}

867
	$wr\x99\x96\x9\xab
(
ad\xe6ag
,
\xe6ush\xe6ag
) adflag, flushflag;

869 
j
,
q
;

870 
ʡr\x9ag
[7];

871 
j
 =
assy\xcbn
 - 1; j; j--) {

872 i\xe0(
assyl\x9\xab
[
j
] == ' ')

873
assy\xcbn
--;

877
q
 =
TXTLEN
;

878 i\xe0(
l\x9\xab_no
 >\xf0
q
)

879
	`\xc3w\xb7ge
();

880 
j
 = 0; j <
o_po
; j++)

881
	`\xa5\x99
(' ');

882 i\xe0(
o_n1
) {

883 i\xe0(
o_\xc2
)

884 
j
 = 0; j <
o_ni
 + 4; j++)

885
	`\xa5\x99
(' ');

887 
j
 = 0; j <
o_ni
; j++)

888
	`\xa5\x99
(' ');

889
	`\xa5r\x9\xa9f
(
ʡr\x9ag
, "%3d ",
l\x9\xab_no
 + 1);

890
	`\xa5\x99s
(
ʡr\x9ag
);

893 i\xe0(
o_n2
) {

894 i\xe0(
o_\xc2
)

895 
j
 = 0; j <
o_ni
 + 4; j++)

896
	`\xa5\x99
(' ');

898 
j
 = 0; j <
o_ni
; j++)

899
	`\xa5\x99
(' ');

900
	`\xa5r\x9\xa9f
(
ʡr\x9ag
, "%3d ",
o_n2
++);

901
	`\xa5\x99s
(
ʡr\x9ag
);

904 i\xe0(
o_\xc2
)

905
o_\xc2
--;

906 i\xe0(
\xfb\xc1\x94
)

907 
j
 = 0; j < (
o_\x\xfb
 -
assy\xcbn
 + 1) / 2; j++)

908
	`\xa5\x99
(' ');

910 
j
 = 0; j <
IDTLEN
; j++)

911
	`\xa5\x99
(' ');

912 i\xe0(
ad\xe6ag
 && !
\xe6ush\xe6ag
)

913
	`f\x9\x96l\x9ae
();

914 
j
 = 0; j <
assy\xcbn
; j++)

915
	`\xa5\x99
(
assyl\x9\xab
[
j
]);

916
	`\xa5\x99
('\n');

917
assy\xcbn
 = 0;

918
assyl\x9\xab
[0] = '\0';

919
l\x9\xab_no
++;

920 
j
 = 1; j <
o_ls
; j++)

921 i\xe0(
l\x9\xab_no
 <\xf0
q
)

922
	`b\xc\xe2kl\x9\xab
();

923 i\xe0(!
\xe6ush\xe6ag
) {

924 i\xe0(
o_hc
)

925
	`dehyph
(
h\xdedw\xdcd
);

926
	`\xa1r\xfdy
(
assyl\x9\xab
,
h\xdedw\xdcd
);

927
assy\xcbn
 =
	`\xa1\xbe\x92
(
h\xdedw\xdcd
);

928 *
h\xdedw\xdcd
 = '\0';

929
h\xdedp
 =
h\xdedw\xdcd
;

931 i\xe0(
o_ix
 >= 0)

932
o_\x9a
 =
o_ix
;

933
o_ix
 =
o_ti
 = -1;

934
	}
}

936
	$f\x9\x96l\x9ae
() {

937 
ex\xfbss
,
j
,
s
,
\x9ac
,
\xa5a\xfbs
;

938
adjtogg\xcb
 ^= 1;

939 i\xe0(!(
ex\xfbss
 =
o_\x\xfb
 -
IDTLEN
 -
assy\xcbn
))

941 i\xe0(
ex\xfbss
 < 0) {

942
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "roff: i\xc1\x94\xc7Ȕr\xdc #2 [%d]\n",
ex\xfbss
);

943
	`d\xd\xab
(1);

945 
j
 = 2;; j++) {

946 i\xe0(
adjtogg\xcb
) {

947
s
 = 0;

948
\x9ac
 = 1;

950
s
 =
assy\xcbn
 - 1;

951
\x9ac
 = -1;

953
\xa5a\xfbs
 = 0;

954 
s
 >\xf00 && s <
assy\xcbn
) {

955 i\xe0(
assyl\x9\xab
[
s
] == ' ')

956
\xa5a\xfbs
++;

958 i\xe0(0 <
\xa5a\xfbs
 && s\xb7\xfb\xa0<
j
) {

959
	`\x9a\xa4t
(
s
 -
\x9ac
);

960 i\xe0(
\x9ac
 > 0)

961
s
++;

962 i\xe0(!--
ex\xfbss
)

965
\xa5a\xfbs
 = 0;

967
s
 +\xf0
\x9ac
;

970
	}
}

972
	$\x9a\xa4t
(
p
) p;

974 
i
;

975 
i
 =
assy\xcbn
; i >
p
; i--)

976
assyl\x9\xab
[
i
] =\x87ssyline[i - 1];

977
assy\xcbn
++;

978
	}
}

980
	$\xc3w\xb7ge
() {

981 i\xe0(
\xb7ge_no
 >= 0)

982
	`\x92d\xb7ge
();

984
\xb7ge_no
 = 1;

985 ;
o_sk
; o_sk--)

986
	`b\xc\xe2k\xb7ge
();

987
	`beg\x9a\xb7ge
();

988
	}
}

990
	$beg\x9a\xb7ge
() {

991 
i
;

992 i\xe0(
s\xe6ag
)

993
	`wa\x99awh\x9\x93
();

994 
i
 = 0; i <
o_m1
; i++)

995
	`\xa5\x99
('\n');

996
	`wr\x99\x91\x99\xcb
(
\xb7ge_no
 & 1 ?
oh\x97d
 :
eh\x97d
);

997 
i
 = 0; i <
o_m2
; i++)

998
	`\xa5\x99
('\n');

999
l\x9\xab_no
 = 0;

1000
	}
}

1002
	$\x92d\xb7ge
() {

1003 
i
;

1004 
i
 =
l\x9\xab_no
; i <
TXTLEN
; i++)

1005
	`b\xc\xe2kl\x9\xab
();

1006 
i
 = 0; i <
o_m3
; i++)

1007
	`\xa5\x99
('\n');

1008
	`wr\x99\x91\x99\xcb
(
\xb7ge_no
 & 1 ?
ofo\xd9
 :
efo\xd9
);

1009 
i
 = 0; i <
o_m4
; i++)

1010
	`\xa5\x99
('\n');

1011 i\xe0(
o_bp
 < 0)

1012
\xb7ge_no
++;

1014
\xb7ge_no
 =
o_bp
;

1015
o_bp
 = -1;

1017
	}
}

1019
	$b\xc\xe2k\xb7ge
() {

1020 
i
;

1021 i\xe0(
s\xe6ag
)

1022
	`wa\x99awh\x9\x93
();

1023 
i
 = 0; i <
o_m1
; i++)

1024
	`\xa5\x99
('\n');

1025
	`wr\x99\x91\x99\xcb
(
\xb7ge_no
 & 1 ?
oh\x97d
 :
eh\x97d
);

1026 
i
 = 0; i <
o_m2
; i++)

1027
	`\xa5\x99
('\n');

1028 
i
 = 0; i <
TXTLEN
; i++)

1029
	`\xa5\x99
('\n');

1030 
i
 = 0; i <
o_m3
; i++)

1031
	`\xa5\x99
('\n');

1032
	`wr\x99\x91\x99\xcb
(
\xb7ge_no
 & 1 ?
ofo\xd9
 :
efo\xd9
);

1033
\xb7ge_no
++;

1034 
i
 = 0; i <
o_m4
; i++)

1035
	`\xa5\x99
('\n');

1036
l\x9\xab_no
 = 0;

1037
	}
}

1039
	$wa\x99awh\x9\x93
() {

1040 
	`nix
(),
\xded\xe6ags
;

1041 i\xe0(
	`i\xa7\x89y
(0)) {

1042
\xded\xe6ags
 =
\x89y
.
sg_\xe6ags
;

1043
\x89y
.
sg_\xe6ags
 &\xf0~
ECHO
;

1044
	`io\xf9l
(0,
TIOCSETP
, &
\x89y
);

1046
	`sig\xc7l
(
SIGINT
,
nix
);

1047
	`\xb7u\xa3
();

1048 i\xe0(
	`i\xa7\x89y
(0)) {

1049
\x89y
.
sg_\xe6ags
 =
\xded\xe6ags
;

1050
	`io\xf9l
(0,
TIOCSETP
, &
\x89y
);

1052
	}
}

1054
	$nix
(\xe8{
	}
}

1056
	$wr\x99\x91\x99\xcb
(
t
) *t;

1058 
d
, *
p\xa1
, *
	`pgf\xdcm
();

1059 
j
,
l
,
m
,
n
;

1060
d
 = *
t
;

1061 i\xe0(
o_hx
 || !
d
) {

1062
	`\xa5\x99
('\n');

1065
p\xa1
 =
	`pgf\xdcm
();

1066 
j
 = 0; j <
o_po
; j++)

1067
	`\xa5\x99
(' ');

1068
l
 =
	`t\x99\xcbn
(++
t
,
d
,
	`\xa1\xbe\x92
(
p\xa1
));

1069 *
t
 && *\x88!\xf0
d
) {

1070 i\xe0(*
t
 == '%')

1071
	`\xa5\x99s
(
p\xa1
);

1073
	`\xa5\x99
(*
t
);

1074
t
++;

1076 i\xe0(!*
t
) {

1077
	`\xa5\x99
('\n');

1080
m
 =
	`t\x99\xcbn
(++
t
,
d
,
	`\xa1\xbe\x92
(
p\xa1
));

1081 
j
 =
l
; j < (
o_\x\xfb
 -
m
) / 2; j++)

1082
	`\xa5\x99
(' ');

1083 *
t
 && *\x88!\xf0
d
) {

1084 i\xe0(*
t
 == '%')

1085
	`\xa5\x99s
(
p\xa1
);

1087
	`\xa5\x99
(*
t
);

1088
t
++;

1090 i\xe0(!*
t
) {

1091
	`\xa5\x99
('\n');

1094 i\xe0((
o_\x\xfb
 -
m
\xe8/ 2 >
l
)

1095
m
 +\xf0(
o_\x\xfb
 - m) / 2;

1097
m
 +\xf0
l
;

1098
n
 =
	`t\x99\xcbn
(++
t
,
d
,
	`\xa1\xbe\x92
(
p\xa1
));

1099 
j
 =
m
; j <
o_\x\xfb
 -
n
; j++)

1100
	`\xa5\x99
(' ');

1101 *
t
 && *\x88!\xf0
d
) {

1102 i\xe0(*
t
 == '%')

1103
	`\xa5\x99s
(
p\xa1
);

1105
	`\xa5\x99
(*
t
);

1106
t
++;

1108
	`\xa5\x99
('\n');

1109
	}
}

1111 *
	$pgf\xdcm
() {

1112 
p\xa1
[11];

1113 
i
;

1114 i\xe0(
o_ro
) {

1115 *
p\xa1
 = '\0';

1116
i
 =
\xb7ge_no
;

1117 i\xe0(
i
 >= 400) {

1118
	`\xa1r\xf\xe1
(
p\xa1
, "cd");

1119
i
 -= 400;

1121 
i
 >= 100) {

1122
	`\xa1r\xf\xe1
(
p\xa1
, "c");

1123
i
 -= 100;

1125 i\xe0(
i
 >= 90) {

1126
	`\xa1r\xf\xe1
(
p\xa1
, "xc");

1127
i
 -= 90;

1129 i\xe0(
i
 >= 50) {

1130
	`\xa1r\xf\xe1
(
p\xa1
, "l");

1131
i
 -= 50;

1133 i\xe0(
i
 >= 40) {

1134
	`\xa1r\xf\xe1
(
p\xa1
, "xl");

1135
i
 -= 40;

1137 
i
 >= 10) {

1138
	`\xa1r\xf\xe1
(
p\xa1
, "x");

1139
i
 -= 10;

1141 i\xe0(
i
 >= 9) {

1142
	`\xa1r\xf\xe1
(
p\xa1
, "ix");

1143
i
 -= 9;

1145 i\xe0(
i
 >= 5) {

1146
	`\xa1r\xf\xe1
(
p\xa1
, "v");

1147
i
 -= 5;

1149 i\xe0(
i
 >= 4) {

1150
	`\xa1r\xf\xe1
(
p\xa1
, "iv");

1151
i
 -= 4;

1153 
i
--)

1154
	`\xa1r\xf\xe1
(
p\xa1
, "i");

1156
	`\xa5r\x9\xa9f
(
p\xa1
, "%d",
\xb7ge_no
);

1157 
p\xa1
;

1158
	}
}

1160 
	$t\x99\xcbn
(
t
,
c
,
k
)

1161 *
t
,
c
;

1162 
k
;

1164 
q
;

1165
q
 = 0;

1166 *
t
 && *\x88!\xf0
c
)

1167
q
 +\xf0*
t
++ =\xf0'%' ?
k
 : 1;

1168 
q
;

1169
	}
}

1171
	$\xa5\x99s
(
s
) *s;

1173 *
s
)

1174
	`\xa5\x99
(*
s
++);

1175
	}
}

1177
	$\xa5\x99
(
c
) c;

1179 
c\xde_no
,
n_b\xc\xe2ks
;

1180 
ul\xe6ag
;

1181 *
t
;

1182
ul\xe6ag
 =
c
 &
UNDERL
;

1183
c
 &\xf0~
UNDERL
;

1184 
t
 = (*)
o_\x8c
; *t;\x81++)

1185 i\xe0(*
t
++ =\xf0
c
) {

1186
c
 = *
t
;

1189 i\xe0(
\xb7ge_no
 <
\xa1\xac\x8dage
 || (
\xa1ݷge
 &&\x85age_no > stoppage))

1191 i\xe0(
c
 !\xf0' ' && c !\xf0'\n' &&
n_b\xc\xe2ks
) {

1192 i\xe0(
h\xe6ag
 &&
n_b\xc\xe2ks
 > 1)

1193 
c\xde_no
 / 8 < (c\xde_n\xd8+
n_b\xc\xe2ks
) / 8) {

1194
	`putc
('\t',
\xa1dout
);

1195
n_b\xc\xe2ks
 -\xf08 - (
c\xde_no
 & 07);

1196
c\xde_no
 = 8 + col_no & ~07;

1198 ;
n_b\xc\xe2ks
;\x82_blanks--) {

1199
	`putc
(' ',
\xa1dout
);

1200
c\xde_no
++;

1203 i\xe0(
ul\xe6ag
 &&
	`i\xa7\x\xffum
(
c
))

1204
	`\xe5uts
("_\b",
\xa1dout
);

1205 i\xe0(
c
 == ' ')

1206
n_b\xc\xe2ks
++;

1208
	`putc
(
c
,
\xa1dout
);

1209
c\xde_no
++;

1211 i\xe0(
c
 == '\n') {

1212
c\xde_no
 = 0;

1213
n_b\xc\xe2ks
 = 0;

1215
	}
}

1217 
	$suck
() {

1219
c
 =
	`g\x91c
(
F\x9\x93
);

1220 i\xe0(
	`i\xa6eg\x\xab
(
c
))

1221 
c
;

1223
	}
}

1231 *
	$\xa1rhas
(
p
,
c
)

1232 *
p
,
c
;

1234 ; *
p
;\x85++)

1235 i\xe0(*
p
 =\xf0
c
)

1236 
p
;

1237 
NULL
;

1238
	}
}

1244 *
	$\xa1\xbbnd
(
p
)

1245 *
p
;

1247 *
p
++)

1249 
p
;

1250
	}
}

1260 
	$is\xa5a\xfb
(
c
)

1261 
c
;

1263 *
s
;

1264 
s
 =
\xa5a\xfbch\xacs
; *s; s++)

1265 i\xe0(*
s
 =\xf0
c
)

1268
	}
}

1270 
	$i\xa7\x\xffum
(
c
)

1271 
c
;

1273  (
c
 >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');

1274
	}
}

1276 
	$isdig\x99
(
c
)

1277 
c
;

1279 
c
 >= '0' && c <= '9';

1280
	}
}

1282 
	$i\xa6eg\x\xab
(
c
)

1283 
c
;

1285 
c
 >\xf0' ' && c <\xf0'~' ||
	`is\xa5a\xfb
(c\xe8|| c =\xf0'\n' || c =\xf0
EOF
;

1286
	}
}

1288
	$bomb
() {

1289
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Usage:\x84off [+00] [-00] [-s] [-h] file ...\n");

1290
	`d\xd\xab
(1);

1291
	}
}

1293
	$d\xd\xab
(
n
) n;

1295
	`f\xe6ush
(
\xa1dout
);

1296
	`_\x\xe3\x97nup
();

1297
	`ex\x99
(
n
);

1298
	}
}

	@commands/sh1.cpp

7 
	~"\x94\xbao.h\xb5
"

8 
	~"\xa3tjmp.h\xb5
"

9 
	~"sh.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

18 
	g\x9a\x8c
;

19 
	g\x9a\xb7r\xa3
;

20 
	g\xe6ags
['z' - 'a' + 1];

21 *
	g\xe6ag
 =
\xe6ags
 - 'a';

22 *
	g\x96\x9a\x95
 =
l\x9\xab
 + (line) - 5;

23 *
	gnu\x\xfb
 = "";

24 
	g\x9aw\xdcd
 = 1;

25 
\x92v

	ge
 = {
l\x9\xab
,
io\xa1ack
, io\xa1ack - 1,
NULL
,
FDBASE
, NULL};

27 **
	g\x92v\x9c\xda
;

32 
	gsh\x96\x\xffame
[] = "/bin/sh";

33 
	g\xa3\xacch
[] = ":/bin:/usr/bin";

35 (*
	gq\xe6ag
)(\xe8\xf0
SIG_IGN
;

38 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

39 
f
;

40 *
s
;

41 
c\xe6ag
;

42 *
\xc7me
, **
\xad
;

43 (*
iof
)();

45 i\xe0((
\xad
 =
\x92v\x9c\xda
\xe8!\xf0
NULL
) {

46 *
\xad
)

47
	`assign
(*
\xad
++, !
COPYV
);

48 
\xad
 =
\x92v\x9c\xda
; *ap;)

49
	`exp\xd\xf9
(
	`lookup
(*
\xad
++));

51
	`\x\xe3o\xa3\x\xabl
();

52
\xac\x97num
 = 1;

54
sh\x96l
 =
	`lookup
("SHELL");

55 i\xe0(
sh\x96l
->
v\x\xabue
 =\xf0
nu\x\xfb
)

56
	`\xa3tv\x\xab
(
sh\x96l
,
sh\x96\x\xffame
);

57
	`exp\xd\xf9
(
sh\x96l
);

59
homed\x9c
 =
	`lookup
("HOME");

60 i\xe0(
homed\x9c
->
v\x\xabue
 =\xf0
nu\x\xfb
)

61
	`\xa3tv\x\xab
(
homed\x9c
, "/");

62
	`exp\xd\xf9
(
homed\x9c
);

64
	`\xa3tv\x\xab
(
	`lookup
("$"),
	`\x99\xdf
(
	`g\x91pid
(), 5));

66
\xb7th
 =
	`lookup
("PATH");

67 i\xe0(
\xb7th
->
v\x\xabue
 =\xf0
nu\x\xfb
)

68
	`\xa3tv\x\xab
(
\xb7th
,
\xa3\xacch
);

69
	`exp\xd\xf9
(
\xb7th
);

71
ifs
 =
	`lookup
("IFS");

72 i\xe0(
ifs
->
v\x\xabue
 =\xf0
nu\x\xfb
)

73
	`\xa3tv\x\xab
(
ifs
, " \t\n");

75
\xb4om\xb1
 =
	`lookup
("PS1");

76 i\xe0(
\xb4om\xb1
->
v\x\xabue
 =\xf0
nu\x\xfb
)

77 #i\xe2de\xe0
UNIXSHELL


78
	`\xa3tv\x\xab
(
\xb4om\xb1
, "$ ");

80
	`\xa3tv\x\xab
(
\xb4om\xb1
, "% ");

82 i\xe0(
	`g\x91euid
() == 0) {

83
	`\xa3tv\x\xab
(
\xb4om\xb1
, "# ");

84
\xb4om\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

86
\xfdrom\xb1
 =
	`lookup
("PS2");

87 i\xe0(
\xfdrom\xb1
->
v\x\xabue
 =\xf0
nu\x\xfb
)

88
	`\xa3tv\x\xab
(
\xfdrom\xb1
, "> ");

90
iof
 =
f\x9\x93ch\xac
;

91
c\xe6ag
 = 0;

92
\xc7me
 = *
\xacgv
++;

93 i\xe0(--
\xacgc
 >= 1) {

94 i\xe0(
\xacgv
[0][0] == '-' &&\x87rgv[0][1] != '\0') {

95 
s
 =
\xacgv
[0] + 1; *s; s++)

96 *
s
) {

98
\xb4om\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

99
\xfdrom\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

100
	`\xa3tv\x\xab
(
\xb4om\xb1
, "");

101
	`\xa3tv\x\xab
(
\xfdrom\xb1
, "");

102
c\xe6ag
 = 1;

103 i\xe0(--
\xacgc
 > 0)

104
	`PUSHIO
(
aw\xdcd
, *++
\xacgv
,
iof
 =
\xc6ch\xac
);

108
q\xe6ag
 =
SIG_DFL
;

116
\xb4om\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

117
	`\xa3tv\x\xab
(
\xb4om\xb1
, "");

118
iof
 =
l\x9\xabch\xac
;

122
\x8flk\x9ag
++;

124 i\xe0(*
s
 >= 'a' && *s <= 'z')

125
\xe6ag
[*
s
]++;

128
\xacgv
--;

129
\xacgc
++;

131 i\xe0(
iof
 =\xf0
f\x9\x93ch\xac
 && --
\xacgc
 > 0) {

132
	`\xa3tv\x\xab
(
\xb4om\xb1
, "");

133
	`\xa3tv\x\xab
(
\xfdrom\xb1
, "");

134
\xb4om\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

135
\xfdrom\xb1
->
\xa1\xa9us
 &\xf0~
EXPORT
;

136 i\xe0(
	`\xc3wf\x9\x93
(*++
\xacgv
))

137
	`ex\x99
(1);

140
	`\xa3tdash
();

141 i\xe0(
e
.
i\xdd
 <
io\xa1ack
) {

142
	`PUSHIO
(
af\x9\x93
, 0,
iof
);

143 i\xe0(
	`i\xa7\x89y
(0\xe8&& i\xa7\x89y(1\xe8&& !
c\xe6ag
)

144
\x8flk\x9ag
++;

146
	`sig\xc7l
(
SIGQUIT
,
q\xe6ag
);

147 i\xe0(
\xc7me
[0] == '-') {

148
\x8flk\x9ag
++;

149 i\xe0((
f
 =
	`ݒ
("/etc/profile", 0)) >= 0)

150
	`\xc3xt
(
	`\xbbm\xad
(
f
));

151 i\xe0((
f
 =
	`ݒ
(".profile", 0)) >= 0)

152
	`\xc3xt
(
	`\xbbm\xad
(
f
));

154 i\xe0(
\x8flk\x9ag
) {

155
	`sig\xc7l
(
SIGTERM
,
sig
);

156
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

158
d\xdev
 =
\xacgv
;

159
d\xdec
 =
\xacgc
;

160
d\xdev
[0] =
\xc7me
;

161 i\xe0(
d\xdec
 > 1)

162 
\xad
 = ++
\xacgv
; --
\xacgc
 > 0;)

163 i\xe0(
	`assign
(*
\xad
 = *
\xacgv
++, !
COPYV
))

164
d\xdec
--;

166
\xad
++;

167
	`\xa3tv\x\xab
(
	`lookup
("#"),
	`pu\x8a
(
d\xdec
));

170 i\xe0(
\x8flk\x9ag
 &&
e
.
i\xdd
 <\xf0
io\xa1ack
)

171
	`\xb4s
(
\xb4om\xb1
->
v\x\xabue
);

172
	`\xd\xabcomm\x\xafd
();

174
	}
}

176
	$\xa3tdash
() {

177 *
\xfd
,
c
;

178 
m
['z' - 'a' + 1];

180
\xfd
 =
m
;

181 
c
 = 'a'; c <= 'z'; c++)

182 i\xe0(
\xe6ag
[
c
])

183 *
\xfd
++ =
c
;

184 *
\xfd
 = 0;

185
	`\xa3tv\x\xab
(
	`lookup
("-"),
m
);

186
	}
}

188
	$\xc3wf\x9\x93
(
s
) *s;

190 
f
;

192 i\xe0(
	`\xa1rcmp
(
s
, "-") != 0) {

193
f
 =
	`ݒ
(
s
, 0);

194 i\xe0(
f
 < 0) {

195
	`\xb4s
(
s
);

196
	`\x94r
(": cannot open");

200
f
 = 0;

201
	`\xc3xt
(
	`\xbbm\xad
(
f
));

203
	}
}

205
	$\xd\xabcomm\x\xafd
() {

206 *
\xfd
;

207 
i
;

208
jmp_buf

m1
;

210
\x9aw\xdcd
++;

211 
e
.
\xdbnv
)

212
	`qu\x99\x92v
();

213
	`䓬\x97
(
\xac\x97num
 = 1);

214
\xfd
 =
	`g\x91\xfb\x\xfb
(258);

215
	`g\xacbage
();

216
	`DELETE
(
\xfd
);

217
wdli\xa1
 = 0;

218
i\xdei\xa1
 = 0;

219
e
.
\x94\xbdt
 =
nuαr
;

220
e
.
l\x9a\x95
 =
l\x9\xab
;

221
yyüs
 = 0;

222
muɞ\x9\xab
 = 0;

223
\x9a\xb7r\xa3
 = 1;

224 i\xe0(
\x8flk\x9ag
)

225
	`sig\xc7l
(
SIGINT
,
ښ\x8c
);

226
瞱
 = &
m1
;

227 i\xe0(
	`\xa3tjmp
(
m1
\xe8||
	`yy\xb7r\xa3
(\xe8||
\x9a\x8c
) {

228 
e
.
\xdbnv
)

229
	`qu\x99\x92v
();

230
	`s\xfc\xadh\x94e
();

231
\x9a\xb7r\xa3
 = 0;

232
\x9a\x8c
 = 0;

235
\x9a\xb7r\xa3
 = 0;

236
\x9aw\xdcd
 = 0;

237 i\xe0((
i
 =
\x8c\xad\xa3t
) != 0) {

238
\x8c\xad\xa3t
 = 0;

239
	`ru\xc1\xb\xe5
(
i
);

241
brkli\xa1
 = 0;

242
\x9a\x8c
 = 0;

243
exec\xe6g
 = 0;

244 i\xe0(!
\xe6ag
['n']) {

245 i\xe0(
\x8flk\x9ag
)

246
	`sig\xc7l
(
SIGINT
,
ښ\x8c
);

247
	`execu\x8b
(
ou\x89\xbbe
,
nuαr
,\x82ullptr, 0);

248
\x9a\x8c
 = 0;

249 i\xe0(
\x8flk\x9ag
)

250
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

253
	}
}

255 
	$\xe7\x9e
() {

256
	`l\xdagjmp
(*
瞱
, 1);

258
	}
}

260 
	$\xcbave
() {

261 i\xe0(
exec\xe6g
)

262
	`\xe7\x9e
();

263
	`ru\xc1\xb\xe5
(0);

264
	`sync
();

265
	`ex\x99
(
ex\xa1\xa9
);

267
	}
}

269
	$w\xa\xfa
(
s
) *s;

271 i\xe0(*
s
) {

272
	`\xb4s
(
s
);

273
ex\xa1\xa9
 = -1;

275
	`\xb4s
("\n");

276 i\xe0(
\xe6ag
['e'])

277
	`\xcbave
();

278
	}
}

280
	$\x94r
(
s
) *s;

282
	`w\xa\xfa
(
s
);

283 i\xe0(
\xe6ag
['n'])

285 i\xe0(!
\x8flk\x9ag
)

286
	`\xcbave
();

287 i\xe0(
e
.
\x94\xbdt
)

288
	`l\xdagjmp
(*
e
.
\x94\xbdt
, 1);

289
	`\x\xe3o\xa3\x\xabl
();

290
e
.
i\xdd
 =\x83.
ioba\xa3
 =
io\xa1ack
;

291
	}
}

293
	$\xc3w\x92v
(
f
) {

294 
\x92v
 *
\x95
;

296 i\xe0(
f
) {

297
	`qu\x99\x92v
();

300
\x95
 = (
\x92v
 *)
	`\xa5a\xfb
((*ep));

301 i\xe0(
\x95
 =\xf0
NULL
) {

302 
e
.
\xdbnv
)

303
	`qu\x99\x92v
();

304
	`\xe7\x9e
();

306 *
\x95
 =
e
;

307
e
.
\xdbnv
 =
\x95
;

308
e
.
\x94\xbdt
 =\x83rrpt;

310
	}
}

312
	$qu\x99\x92v
() {

313 
\x92v
 *
\x95
;

314 
fd
;

316 i\xe0((
\x95
 =
e
.
\xdbnv
\xe8!\xf0
NULL
) {

317
fd
 =
e
.
iofd
;

318
e
 = *
\x95
;

320
	`DELETE
(
\x95
);

321 --
fd
 >\xf0
e
.
iofd
)

322
	`\x\xe3o\xa3
(
fd
);

324
	}
}

329 
	$\x\xafys
(
s1
,
s2
)

330 *
s1
, *
s2
;

332 *
s1
)

333 i\xe0(
	`\x\xafy
(*
s1
++,
s2
))

336
	}
}

341 
	$\x\xafy
(
c
,
s
)

342 
c
;

343 *
s
;

345 *
s
)

346 i\xe0(*
s
++ =\xf0
c
)

349
	}
}

351 *
	$pu\x8a
(
n
)

352 
n
;

354  (
	`\x99\xdf
(
n
, -1));

355
	}
}

357 *
	$\x99\xdf
(
u
,
n
)

358 
u
;

360 *
\xfd
;

361 
s
[20];

362 
m
;

364
m
 = 0;

365 i\xe0(
n
 < 0 && ()
u
 < 0) {

366
m
++;

367
u
 = -u;

369
\xfd
 =
s
 + (s);

370 *--
\xfd
 = 0;

372 *--
\xfd
 =
u
 % 10 + '0';

373
u
 /= 10;

374 } --
n
 > 0 ||
u
);

375 i\xe0(
m
)

376 *--
\xfd
 = '-';

377  (
\xfd
);

378
	}
}

380
	$\xc3xt
(
f
\xe8{
	`PUSHIO
(
af\x9\x93
, f,
\xc3xtch\xac
);
	}
}

382
	$ښ\x8c
() {

383
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

384 i\xe0(
\x9a\xb7r\xa3
) {

385
	`\xb4s
("\n");

386
	`\xe7\x9e
();

388
\x9a\x8c
++;

389
	}
}

391
	$ˉ\x94
(
c
) c;

393  (
c
 >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_');

394
	}
}

396
	$dig\x99
(
c
) c;

398  (
c
 >= '0' && c <= '9');

399
	}
}

401
	$ˊum
(
c
) c;

403  (
	`ˉ\x94
(
c
\xe8||
	`dig\x99
(c));

404
	}
}

406 *
	$\xa5a\xfb
(
n
)

407 
n
;

409 *
\xfd
;

411
\x9aw\xdcd
++;

412 i\xe0((
\xfd
 =
	`g\x91\xfb\x\xfb
(
n
)) == 0)

413
	`\x94r
("out of string space");

414
\x9aw\xdcd
--;

415  (
\xfd
);

416
	}
}

418 *
	$\xa1r\xa7ve
(
s
,
a
)

419 *
s
;

421 *
\xfd
, *
xp
;

423 i\xe0((
\xfd
 =
	`\xa5a\xfb
(
	`\xa1\xbe\x92
(
s
\xe8+ 1)\xe8!\xf0
NULL
) {

424
	`\xa3\x8f\xbba
((*)
\xfd
,
a
);

425 
xp
 =
\xfd
; (*xp++ = *
s
++) != '\0';)

427  (
\xfd
);

430
	}
}

438
	$x\xe4\x93
(
s
) *s;

440
\x9aw\xdcd
++;

441
	`DELETE
(
s
);

442
\x9aw\xdcd
--;

443
	}
}

448
	$sig
(
i
) i;

450 i\xe0(
\x9aw\xdcd
 == 0) {

451
	`sig\xc7l
(
i
,
SIG_IGN
);

452
	`ru\xc1\xb\xe5
(
i
);

454
\x8c\xad\xa3t
 =
i
;

455
	`sig\xc7l
(
i
,
sig
);

456
	}
}

458
	$ru\xc1\xb\xe5
(
i
) {

459 *
\x8c\xad\xa1r
;

461 i\xe0((
\x8c\xad\xa1r
 =
\x8c\xad
[
i
]\xe8=\xf0
NULL
)

463 i\xe0(
i
 == 0)

464
\x8c\xad
[
i
] = 0;

465
	`RUN
(
aw\xdcd
,
\x8c\xad\xa1r
,
\xc6ch\xac
);

466
	}
}

471 *
f\x9adeq
();

479 
v\xac
 *
	$lookup
(
n
)

480 *
n
;

482 
v\xac
 *
vp
;

483 *
\xfd
;

484 
c
;

485 
v\xac

dummy
;

487 i\xe0(
	`dig\x99
(*
n
)) {

488
dummy
.
\xc7me
 =
n
;

489 
c
 = 0;
	`dig\x99
(*
n
) && c < 1000;\x82++)

490
c
 = c * 10 + *
n
 - '0';

491
dummy
.
\xa1\xa9us
 =
RONLY
;

492
dummy
.
v\x\xabue
 =
c
 <\xf0
d\xdec
 ?
d\xdev
[c] :
nu\x\xfb
;

493  (&
dummy
);

495 
vp
 =
vli\xa1
; vp; v\xb0\xf0vp->
\xc3xt
)

496 i\xe0(
	`eq\xc7me
(
vp
->
\xc7me
,
n
))

497  (
vp
);

498
\xfd
 =
	`f\x9adeq
(
n
);

499
vp
 = (
v\xac
 *)
	`\xa5a\xfb
((*vp));

500 i\xe0(
vp
 =\xf00 || (vp->
\xc7me
 =
	`\xa5a\xfb
(
\xfd
 -
n
 + 2)) == 0) {

501
dummy
.
\xc7me
 = dummy.
v\x\xabue
 = "";

502  (&
dummy
);

504 
\xfd
 =
vp
->
\xc7me
; (*\xfd = *
n
++) && *cp != '='; cp++)

506 i\xe0(*
\xfd
 == 0)

507 *
\xfd
 = '=';

508 *++
\xfd
 = 0;

509
	`\xa3\x8f\xbba
((*)
vp
, 0);

510
	`\xa3\x8f\xbba
((*)
vp
->
\xc7me
, 0);

511
vp
->
v\x\xabue
 =
nu\x\xfb
;

512
vp
->
\xc3xt
 =
vli\xa1
;

513
vp
->
\xa1\xa9us
 =
GETCELL
;

514
vli\xa1
 =
vp
;

515  (
vp
);

516
	}
}

521 
	$\xa3tv\x\xab
(
vp
,
v\x\xab
\xe8
v\xac
 *vp;

522 *
v\x\xab
;

524
	`\xc7mev\x\xab
(
vp
,
v\x\xab
, (*)
NULL
);

525
	}
}

534 
	$\xc7mev\x\xab
(
vp
,
v\x\xab
,
\xc7me
\xe8
v\xac
 *vp;

535 *
v\x\xab
, *
\xc7me
;

537 *
\xfd
, *
xp
;

538 *
nv
;

539 
\xe6
;

541 i\xe0(
vp
->
\xa1\xa9us
 &
RONLY
) {

542 
xp
 =
vp
->
\xc7me
; *xp && *xp != '=';)

543
	`putc
(*
xp
++);

544
	`\x94r
(" is\x84ead-only");

547
\xe6
 = 0;

548 i\xe0(
\xc7me
 =\xf0
NULL
) {

549
xp
 =
	`\xa5a\xfb
(
	`\xa1\xbe\x92
(
vp
->
\xc7me
\xe8+ s\x8c\xcbn(
v\x\xab
) + 2);

550 i\xe0(
xp
 == 0)

553
	`\xa3\x8f\xbba
((*)
xp
, 0);

554
\xc7me
 =
xp
;

555 
\xfd
 =
vp
->
\xc7me
; (*
xp
 = *cp++) && *xp != '='; xp++)

557 i\xe0(*
xp
++ == 0)

558
xp
[-1] = '=';

559
nv
 =
xp
;

560 
\xfd
 =
v\x\xab
; (*
xp
++ = *cp++) != '\0';)

562
v\x\xab
 =
nv
;

563
\xe6
 =
GETCELL
;

565 i\xe0(
vp
->
\xa1\xa9us
 &
GETCELL
)

566
	`x\xe4\x93
(
vp
->
\xc7me
);

567
vp
->
\xc7me
 =\x82ame;

568
vp
->
v\x\xabue
 =
v\x\xab
;

569
vp
->
\xa1\xa9us
 |\xf0
\xe6
;

570
	}
}

572 
	$exp\xd\xf9
(
vp
\xe8
v\xac
 *vp;

574
vp
->
\xa1\xa9us
 |\xf0
EXPORT
;

575
	}
}

577 
	$r\xd\xaey
(
vp
\xe8
v\xac
 *vp;

579 i\xe0(
	`ˉ\x94
(
vp
->
\xc7me
[0]))

580
vp
->
\xa1\xa9us
 |\xf0
RONLY
;

581
	}
}

583 
	$i\xa7ssign
(
s
)

584 *
s
;

586 i\xe0(!
	`ˉ\x94
(*
s
))

588 ; *
s
 != '='; s++)

589 i\xe0(*
s
 =\xf00 || !
	`ˊum
(*s))

592
	}
}

594 
	$assign
(
s
,
cf
)

595 *
s
;

596 
cf
;

598 *
\xfd
;

599 
v\xac
 *
vp
;

601 i\xe0(!
	`ˉ\x94
(*
s
))

603 
\xfd
 =
s
; *cp != '='; cp++)

604 i\xe0(*
\xfd
 =\xf00 || !
	`ˊum
(*cp))

606
vp
 =
	`lookup
(
s
);

607
	`\xc7mev\x\xab
(
vp
, ++
\xfd
,
cf
 =\xf0
COPYV
 ?
NULL
 :
s
);

608 i\xe0(
cf
 !\xf0
COPYV
)

609
vp
->
\xa1\xa9us
 &\xf0~
GETCELL
;

611
	}
}

613 
	$check\xc7me
(
\xfd
)

614 *
\xfd
;

616 i\xe0(!
	`ˉ\x94
(*
\xfd
++))

618 *
\xfd
)

619 i\xe0(!
	`ˊum
(*
\xfd
++))

622
	}
}

624 
	$putvli\xa1
(
f
,
out
) f, out;

626 
v\xac
 *
vp
;

628 
vp
 =
vli\xa1
; vp; v\xb0\xf0vp->
\xc3xt
)

629 i\xe0(
vp
->
\xa1\xa9us
 &
f
 &&
	`ˉ\x94
(*vp->
\xc7me
)) {

630 i\xe0(
vp
->
\xa1\xa9us
 &
EXPORT
)

631
	`wr\x99e
(
out
, "export ", 7);

632 i\xe0(
vp
->
\xa1\xa9us
 &
RONLY
)

633
	`wr\x99e
(
out
, "readonly ", 9);

634
	`wr\x99e
(
out
,
vp
->
\xc7me
,
	`f\x9adeq
(vp->name) - vp->name);

635
	`wr\x99e
(
out
, "\n", 1);

637
	}
}

639 
	$eq\xc7me
(
n1
,
n2
)

640 *
n1
, *
n2
;

642 ; *
n1
 != '=' && *n1 != 0;\x821++)

643 i\xe0(*
n2
++ !\xf0*
n1
)

645  (*
n2
 == 0 || *n2 == '=');

646
	}
}

648 *
	$f\x9adeq
(
\xfd
)

649 *
\xfd
;

651 *
\xfd
 != '\0' && *cp != '=')

652
\xfd
++;

653  (
\xfd
);

654
	}
}

664 
	#NULL
 0

	)

665 
	#CMASK
 0377

	)

666 
	#QUOTE
 0200

	)

667 
	#QMASK
 (
CMASK
 & ~
QUOTE
)

	)

668 
	#NOT
 '!'

	)

670 *
c\x\xe3ass
();

672 
	$gm\xa9ch
(
s
,
p
)

673 *
s
, *
p
;

675 
sc
,
pc
;

677 i\xe0(
s
 =\xf0
NULL
 ||
p
 == NULL)

679 (
pc
 = *
p
++ &
CMASK
) != '\0') {

680
sc
 = *
s
++ &
QMASK
;

681 
pc
) {

683 i\xe0((
p
 =
	`c\x\xe3ass
\xd5,
sc
)\xe8=\xf0
NULL
)

688 i\xe0(
sc
 == 0)

693
s
--;

695 i\xe0(*
p
 =\xf0'\0' ||
	`gm\xa9ch
(
s
,\x85))

697 } *
s
++ != '\0');

701 i\xe0(
sc
 !\xf0(
pc
 & ~
QUOTE
))

705  (*
s
 == 0);

706
	}
}

708 *
	$c\x\xe3ass
(
p
,
sub
)

709 *
p
;

710 
sub
;

712 
c
,
d
,
n\xd9
,
found
;

714 i\xe0((
n\xd9
\xf0*
p
 =\xf0
NOT
) != 0)

715
p
++;

716
found
 =
n\xd9
;

718 i\xe0(*
p
 == '\0')

719  (
NULL
);

720
c
 = *
p
 &
CMASK
;

721 i\xe0(
p
[1] == '-' &&\x85[2] != ']') {

722
d
 =
p
[2] &
CMASK
;

723
p
++;

725
d
 =
c
;

726 i\xe0(
c
 =\xf0
sub
 || c <\xf0sub && sub <\xf0
d
)

727
found
 = !
n\xd9
;

728 } *++
p
 != ']');

729  (
found
 ?
p
 + 1 :
NULL
);

730
	}
}

733 
	#GROWBY
 1024

	)

734 
	#SHRINKBY
 256

	)

735 
	#FREE
 32767

	)

736 
	#BUSY
 0

	)

737 
	#ALIGN
 ((\xe8- 1)

	)

740 
	#NULL
 0

	)

742 
	s\xbbgi\xda
 {

743 
\xbbgi\xda
 *
	m\xc3xt
;

744 
	m\xac\x97
;

748 
\xbbgi\xda

\xac\x971
;

749 
\xbbgi\xda

	g\xac\x972
 = {&
\xac\x971
,
BUSY
};

750 
\xbbgi\xda

	g\xac\x971
 = {&
\xac\x972
,
BUSY
};

751 
\xbbgi\xda
 *
	g\xac\x97p
 = &
\xac\x971
;

752 
\xbbgi\xda
 *
	g\xac\x97t\xdd
 = &
\xac\x971
;

753 
\xbbgi\xda
 *
	g\xac\x97brk
;

754 *
sbrk
();

755 *
brk
();

757 *
	$g\x91\xfb\x\xfb
(
nby\x8bs
)

758 
nby\x8bs
;

760 
rby\x8bs
;

761 
\xbbgi\xda
 *
p
, *
q
;

762 
\xbbgi\xda
 *
\xc3wbrk
;

764 i\xe0(
\xac\x97brk
 =\xf0
NULL
)

765
\xac\x97brk
 = (
\xbbgi\xda
 *)((()
	`sbrk
(0\xe8+
ALIGN
) & ~ALIGN);

767
rby\x8bs
 = (
nby\x8bs
 + (
\xbbgi\xda
) - 1) / (region) + 1;

768
p
 =
\xac\x97p
;

771 i\xe0(
p
->
\xac\x97
 >
\xac\x97num
) {

772 (
q
 =
p
->
\xc3xt
)->
\xac\x97
 >
\xac\x97num
)

773
p
->
\xc3xt
 =
q
->next;

774 i\xe0(
q
 >\xf0
p
 +
rby\x8bs
) {

775
\xac\x97p
 =
p
 +
rby\x8bs
;

776 i\xe0(
q
 >
\xac\x97p
) {

777
\xac\x97p
->
\xc3xt
 =
p
->next;

778
\xac\x97p
->
\xac\x97
 =
FREE
;

780
p
->
\xc3xt
 =
\xac\x97p
;

781
p
->
\xac\x97
 =
\xac\x97num
;

782  ((*)(
p
 + 1));

785
q
 =
p
;

786
p
 =\x85->
\xc3xt
;

787 } 
q
 >\xf0
\xac\x97p
 ||
p
 <\x87reap);

788
\xc3wbrk
 = (
\xbbgi\xda
 *)
	`sbrk
(
rby\x8bs
 >\xf0
GROWBY
 ?\x84bytes : GROWBY);

789 i\xe0(()
\xc3wbrk
 == -1)

790  (
NULL
);

791
\xc3wbrk
 = (
\xbbgi\xda
 *)
	`sbrk
(0);

792
\xac\x97t\xdd
->
\xc3xt
 =
\xac\x97brk
;

793
\xac\x97t\xdd
->
\xac\x97
 = ((
q
 =
\xac\x97brk
\xe8!\xf0\xac\x97t\xdd + 1\xe8?
BUSY
 :
FREE
;

794
\xac\x97t\xdd
 =
\xac\x97brk
->
\xc3xt
 =
\xc3wbrk
 - 1;

795
\xac\x97brk
->
\xac\x97
 =
FREE
;

796
\xac\x97brk
 =
\xc3wbrk
;

797
\xac\x97t\xdd
->
\xc3xt
 = &
\xac\x972
;

798
\xac\x97t\xdd
->
\xac\x97
 =
BUSY
;

800
	}
}

802 
	$\xe4\x93\xfb\x\xfb
(
\xfd
) *cp;

804 
\xbbgi\xda
 *
p
;

806 i\xe0((
p
 = (
\xbbgi\xda
 *)
\xfd
\xe8!\xf0
NULL
) {

807
p
--;

808 i\xe0(
p
 <
\xac\x97p
)

809
\xac\x97p
 =
p
;

810
p
->
\xac\x97
 =
FREE
;

812
	}
}

814 
	$䓬\x97
(
a
) a;

816 
\xbbgi\xda
 *
p
, *
t\xdd
;

818
t\xdd
 =
\xac\x97t\xdd
;

819
p
 = &
\xac\x971
;

821 i\xe0(
p
->
\xac\x97
 >\xf0
a
)

822
p
->
\xac\x97
 =
FREE
;

823
p
 =\x85->
\xc3xt
;

824 } 
p
 !\xf0
t\xdd
);

825
	}
}

827 
	$\xa3\x8f\xbba
(
\xfd
,
a
) *cp;

828 
a
;

830 
\xbbgi\xda
 *
p
;

832 i\xe0((
p
 = (
\xbbgi\xda
 *)
\xfd
\xe8!\xf0
NULL
)

833 (
p
 - 1)->
\xac\x97
 =
a
;

834
	}
}

836 
	$g\xacbage
() {

837 
\xbbgi\xda
 *
p
, *
q
, *
t\xdd
;

838 
nu
;

840
t\xdd
 =
\xac\x97t\xdd
;

842
\xac\x97p
 =
p
 = &
\xac\x971
;

844 i\xe0(
p
->
\xac\x97
 >
\xac\x97num
) {

845 (
q
 =
p
->
\xc3xt
)->
\xac\x97
 >
\xac\x97num
)

846
p
->
\xc3xt
 =
q
->next;

847
\xac\x97p
 =
p
;

849
q
 =
p
;

850
p
 =\x85->
\xc3xt
;

851 } 
p
 !\xf0
t\xdd
);

852 #i\xe0
STOPSHRINK
 == 0

853
nu
 = (
SHRINKBY
 + (
\xbbgi\xda
) - 1) / (region);

854 i\xe0(
\xac\x97t\xdd
 >\xf0
q
 +
nu
 && q->
\xac\x97
 >
\xac\x97num
) {

855
	`brk
((*)(
\xac\x97brk
 -\xf0
nu
));

856
q
->
\xc3xt
 =
\xac\x97t\xdd
 =
\xac\x97brk
 - 1;

857
\xac\x97t\xdd
->
\xc3xt
 = &
\xac\x972
;

858
\xac\x97t\xdd
->
\xac\x97
 =
BUSY
;

861
	}
}

	@commands/sh2.cpp

7 
	~"\x94\xbao.h\xb5
"

8 
	~"\xa3tjmp.h\xb5
"

9 
	~"sh.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

18 *
	m\xfd
;

19 **
	mwp
;

20 
	mi
;

21 
\xdd
 *
	mo
;

22 }
	tYYSTYPE
;

23 
	#WORD
 256

	)

24 
	#LOGAND
 257

	)

25 
	#LOGOR
 258

	)

26 
	#BREAK
 259

	)

27 
	#IF
 260

	)

28 
	#THEN
 261

	)

29 
	#ELSE
 262

	)

30 
	#ELIF
 263

	)

31 
	#FI
 264

	)

32 
	#CASE
 265

	)

33 
	#ESAC
 266

	)

34 
	#FOR
 267

	)

35 
	#WHILE
 268

	)

36 
	#UNTIL
 269

	)

37 
	#DO
 270

	)

38 
	#DONE
 271

	)

39 
	#IN
 272

	)

40 
	#YYERRCODE
 300

	)

43 
	#CONTIN
 01

	)

46 
	#SYNTAXERR

	`zz\x94r
()

	)

47 
	g\xa1\xac\x8e
 = 1;

48 
	g\xb3eksym
 = 0;

49 
zz\x94r
();

50 
w\xdcd
();

51 **
c\xddyw
();

52 
\xdd
 *
block
(), *
\xc7m\x96i\xa1
(), *
li\xa1
(), *
\xc3w\x8d
();

53 
\xdd
 *
p\x9d\x96\x9\xab
(), *
\xaad\xdc
(), *
comm\x\xafd
();

54 
\xdd
 *
áed
(), *
sim\xb6e
(), *
c_li\xa1
();

55 
\xdd
 *
dogroup
(), *
th\x92\xb7\xb9
(), *
\xff\xa3\xb7\xb9
(), *
\xff\xa3li\xa1
();

56 
\xdd
 *
\x96\xa3\xb7\xb9
();

57 **
w\xdcdli\xa1
(), **
\xb7\x89\x94n
();

58 
mu\xa1have
();

59 
yy\xcbx
();

60 
iow\xdcd
 *
io
();

61 
iow\xdcd
 **
c\xddyio
();

62 *
\x8c\x93
();

63 
d\x9fg
();

64 
	gƣ\x92
;

65 
	gioun\x99
 =
IODEFAULT
;

66 
\xdd
 *
	g\x8d
;

67 
\xdd
 *
\xc3w\x8d
();

69 
YYSTYPE

	gyylv\x\xab
;

71 
	$yy\xb7r\xa3
() {

72
\xb3eksym
 = 0;

73
yyüs
 = 0;

74
ou\x89\xbbe
 =
	`c_li\xa1
();

75
	`mu\xa1have
('\n', 0);

76  (
yyüs
 != 0);

77
	}
}

79 
\xdd
 *
	$p\x9d\x96\x9\xab
(
cf
)

80 
cf
;

82 
\xdd
 *
t
, *
p
;

83 
c
;

85
t
 =
	`comm\x\xafd
(
cf
);

86 i\xe0(
t
 !\xf0
NULL
) {

87 (
c
 =
	`yy\xcbx
(0)) == '|') {

88 i\xe0((
p
 =
	`comm\x\xafd
(
CONTIN
)\xe8=\xf0
NULL
)

89
SYNTAXERR
;

90 i\xe0(
t
->
ty\xb3
 !\xf0
TPAREN
 &&\x81->ty\xb3 !\xf0
TCOM
) {

92
t
 =
	`block
(
TPAREN
,\x81,
nuαr
,\x82ullptr);

94
t
 =
	`block
(
TPIPE
,\x81,
p
,
nuαr
);

96
\xb3eksym
 =
c
;

98  (
t
);

99
	}
}

101 
\xdd
 *
	$\x\xafd\xdc
() {

102 
\xdd
 *
t
, *
p
;

103 
c
;

105
t
 =
	`p\x9d\x96\x9\xab
(0);

106 i\xe0(
t
 !\xf0
NULL
) {

107 (
c
 =
	`yy\xcbx
(0)\xe8=\xf0
LOGAND
 || c =\xf0
LOGOR
) {

108 i\xe0((
p
 =
	`p\x9d\x96\x9\xab
(
CONTIN
)\xe8=\xf0
NULL
)

109
SYNTAXERR
;

110
t
 =
	`block
(
c
 =\xf0
LOGAND
 ?
TAND
 :
TOR
,\x81,
p
,
nuαr
);

112
\xb3eksym
 =
c
;

114  (
t
);

115
	}
}

117 
\xdd
 *
	$c_li\xa1
() {

118 
\xdd
 *
t
, *
p
;

119 
c
;

121
t
 =
	`\x\xafd\xdc
();

122 i\xe0(
t
 !\xf0
NULL
) {

123 (
c
 =
	`yy\xcbx
(0)\xe8=\xf0';' || c =\xf0'&' ||
muɞ\x9\xab
 && c == '\n') {

124 i\xe0(
c
 == '&')

125
t
 =
	`block
(
TASYNC
,\x81,
nuαr
,\x82ullptr);

126 i\xe0((
p
 =
	`\x\xafd\xdc
()\xe8=\xf0
NULL
)

127  (
t
);

128
t
 =
	`li\xa1
\xd1,
p
);

130
\xb3eksym
 =
c
;

132  (
t
);

133
	}
}

135 
	$synio
(
cf
)

136 
cf
;

138 
iow\xdcd
 *
i\xdd
;

139 
i
;

140 
c
;

142 i\xe0((
c
 =
	`yy\xcbx
(
cf
)) != '<' && c != '>') {

143
\xb3eksym
 =
c
;

146
i
 =
yylv\x\xab
.i;

147
	`mu\xa1have
(
WORD
, 0);

148
i\xdd
 =
	`io
(
ioun\x99
,
i
,
yylv\x\xab
.
\xfd\xb5
);

149
ioun\x99
 =
IODEFAULT
;

150 i\xe0(
i
 &
IOHERE
)

151
	`m\xackh\x94e
(
yylv\x\xab
.
\xfd\xb5
,
i\xdd
);

152
	}
}

154 
	$mu\xa1have
(
c
,
cf
) c, cf;

156 i\xe0((
\xb3eksym
 =
	`yy\xcbx
(
cf
)\xe8!\xf0
c
)

157
SYNTAXERR
;

158
\xb3eksym
 = 0;

159
	}
}

161 
\xdd
 *
	$sim\xb6e
() {

162 
\xdd
 *
t
;

164
t
 =
NULL
;

166 
\xb3eksym
 =
	`yy\xcbx
(0)) {

169 ()
	`synio
(0);

172 
WORD
:

173 i\xe0(
t
 =\xf0
NULL
) {

174
t
 =
	`\xc3w\x8d
();

175
t
->
ty\xb3
 =
TCOM
;

177
\xb3eksym
 = 0;

178
	`w\xdcd
(
yylv\x\xab
.
\xfd\xb5
);

182  (
t
);

185
	}
}

187 
\xdd
 *
	$áed
(
ty\xb3
,
m\xack
)

188 
ty\xb3
,
m\xack
;

190 
\xdd
 *
t
;

192
muɞ\x9\xab
++;

193
t
 =
	`c_li\xa1
();

194
	`mu\xa1have
(
m\xack
, 0);

195
muɞ\x9\xab
--;

196  (
	`block
(
ty\xb3
,
t
,
nuαr
,\x82ullptr));

197
	}
}

199 
\xdd
 *
	$comm\x\xafd
(
cf
)

200 
cf
;

202 
iow\xdcd
 *
io
;

203 
\xdd
 *
t
;

204 
wdblock
 *
io\xa7ve
;

205 
c
;

207
io\xa7ve
 =
i\xdei\xa1
;

208
i\xdei\xa1
 =
NULL
;

209 i\xe0(
muɞ\x9\xab
)

210
cf
 |\xf0
CONTIN
;

211 
	`synio
(
cf
))

212
cf
 = 0;

213 
c
 =
	`yy\xcbx
(
cf
)) {

215
\xb3eksym
 =
c
;

216 i\xe0((
t
 =
	`sim\xb6e
()\xe8=\xf0
NULL
) {

217 i\xe0(
i\xdei\xa1
 =\xf0
NULL
)

218  (
NULL
);

219
t
 =
	`\xc3w\x8d
();

220
t
->
ty\xb3
 =
TCOM
;

225
t
 =
	`áed
(
TPAREN
, ')');

229
t
 =
	`áed
(
TBRACE
, '}');

232 
FOR
:

233
t
 =
	`\xc3w\x8d
();

234
t
->
ty\xb3
 =
TFOR
;

235
	`mu\xa1have
(
WORD
, 0);

236
\xa1\xac\x8e
 = 1;

237
t
->
\xa1r
 =
yylv\x\xab
.
\xfd\xb5
;

238
muɞ\x9\xab
++;

239
t
->
w\xdcds
 =
	`w\xdcdli\xa1
();

240 i\xe0((
c
 =
	`yy\xcbx
(0)) != '\n' && c != ';')

241
SYNTAXERR
;

242
t
->
\xcb\xe1
 =
	`dogroup
(0);

243
muɞ\x9\xab
--;

246 
WHILE
:

247 
UNTIL
:

248
muɞ\x9\xab
++;

249
t
 =
	`\xc3w\x8d
();

250
t
->
ty\xb3
 =
c
 =\xf0
WHILE
 ?
TWHILE
 :
TUNTIL
;

251
t
->
\xcb\xe1
 =
	`c_li\xa1
();

252
t
->
right
 =
	`dogroup
(1);

253
t
->
w\xdcds
 =
NULL
;

254
muɞ\x9\xab
--;

257 
CASE
:

258
t
 =
	`\xc3w\x8d
();

259
t
->
ty\xb3
 =
TCASE
;

260
	`mu\xa1have
(
WORD
, 0);

261
t
->
\xa1r
 =
yylv\x\xab
.
\xfd\xb5
;

262
\xa1\xac\x8e
++;

263
muɞ\x9\xab
++;

264
	`mu\xa1have
(
IN
,
CONTIN
);

265
\xa1\xac\x8e
++;

266
t
->
\xcb\xe1
 =
	`\xff\xa3li\xa1
();

267
	`mu\xa1have
(
ESAC
, 0);

268
muɞ\x9\xab
--;

271 
IF
:

272
muɞ\x9\xab
++;

273
t
 =
	`\xc3w\x8d
();

274
t
->
ty\xb3
 =
TIF
;

275
t
->
\xcb\xe1
 =
	`c_li\xa1
();

276
t
->
right
 =
	`th\x92\xb7\xb9
();

277
	`mu\xa1have
(
FI
, 0);

278
muɞ\x9\xab
--;

281 
	`synio
(0))

283
t
 =
	`\xc7m\x96i\xa1
(t);

284
i\xdei\xa1
 =
io\xa7ve
;

285  (
t
);

286
	}
}

288 
\xdd
 *
	$dogroup
(
\xdalyd\xdae
)

289 
\xdalyd\xdae
;

291 
c
;

292 
\xdd
 *
li\xa1
;

294
c
 =
	`yy\xcbx
(
CONTIN
);

295 i\xe0(
c
 =\xf0
DONE
 &&
\xdalyd\xdae
)

296  (
NULL
);

297 i\xe0(
c
 !\xf0
DO
)

298
SYNTAXERR
;

299
li\xa1
 =
	`c_li\xa1
();

300
	`mu\xa1have
(
DONE
, 0);

301  (
li\xa1
);

302
	}
}

304 
\xdd
 *
	$th\x92\xb7\xb9
() {

305 
c
;

306 
\xdd
 *
t
;

308 i\xe0((
c
 =
	`yy\xcbx
(0)\xe8!\xf0
THEN
) {

309
\xb3eksym
 =
c
;

310  (
NULL
);

312
t
 =
	`\xc3w\x8d
();

313
t
->
ty\xb3
 = 0;

314
t
->
\xcb\xe1
 =
	`c_li\xa1
();

315 i\xe0(
t
->
\xcb\xe1
 =\xf0
NULL
)

316
SYNTAXERR
;

317
t
->
right
 =
	`\x96\xa3\xb7\xb9
();

318  (
t
);

319
	}
}

321 
\xdd
 *
	$\x96\xa3\xb7\xb9
() {

322 
c
;

323 
\xdd
 *
t
;

325 
c
 =
	`yy\xcbx
(0)) {

326 
ELSE
:

327 i\xe0((
t
 =
	`c_li\xa1
()\xe8=\xf0
NULL
)

328
SYNTAXERR
;

329  (
t
);

331 
ELIF
:

332
t
 =
	`\xc3w\x8d
();

333
t
->
ty\xb3
 =
TELIF
;

334
t
->
\xcb\xe1
 =
	`c_li\xa1
();

335
t
->
right
 =
	`th\x92\xb7\xb9
();

336  (
t
);

339
\xb3eksym
 =
c
;

340  (
NULL
);

342
	}
}

344 
\xdd
 *
	$\xff\xa3li\xa1
() {

345 
\xdd
 *
t
;

346 
c
;

348
t
 =
NULL
;

349 (
\xb3eksym
 =
	`yy\xcbx
(
CONTIN
)\xe8!\xf0
ESAC
)

350
t
 =
	`li\xa1
\xd1,
	`\xff\xa3\xb7\xb9
());

351  (
t
);

352
	}
}

354 
\xdd
 *
	$\xff\xa3\xb7\xb9
() {

355 
\xdd
 *
t
;

356 
c
;

358
t
 =
	`\xc3w\x8d
();

359
t
->
ty\xb3
 =
TPAT
;

360
t
->
w\xdcds
 =
	`\xb7\x89\x94n
();

361
	`mu\xa1have
(')', 0);

362
t
->
\xcb\xe1
 =
	`c_li\xa1
();

363 i\xe0((
\xb3eksym
 =
	`yy\xcbx
(
CONTIN
)\xe8!\xf0
ESAC
)

364
	`mu\xa1have
(
BREAK
,
CONTIN
);

365  (
t
);

366
	}
}

368 **
	$\xb7\x89\x94n
() {

369 
c
,
cf
;

371
cf
 =
CONTIN
;

373
	`mu\xa1have
(
WORD
,
cf
);

374
	`w\xdcd
(
yylv\x\xab
.
\xfd\xb5
);

375
cf
 = 0;

376 } (
c
 =
	`yy\xcbx
(0)) == '|');

377
\xb3eksym
 =
c
;

378
	`w\xdcd
(
nuαr
);

379  (
	`c\xddyw
());

380
	}
}

382 **
	$w\xdcdli\xa1
() {

383 
c
;

385 i\xe0((
c
 =
	`yy\xcbx
(0)\xe8!\xf0
IN
) {

386
\xb3eksym
 =
c
;

387  (
NULL
);

389
\xa1\xac\x8e
 = 0;

390 (
c
 =
	`yy\xcbx
(0)\xe8=\xf0
WORD
)

391
	`w\xdcd
(
yylv\x\xab
.
\xfd\xb5
);

392
	`w\xdcd
(
nuαr
);

393
\xb3eksym
 =
c
;

394  (
	`c\xddyw
());

395
	}
}

400 
\xdd
 *
	$li\xa1
(
t1
,
t2
)

401 
\xdd
 *
t1
, *
t2
;

403 i\xe0(
t1
 =\xf0
NULL
)

404  (
t2
);

405 i\xe0(
t2
 =\xf0
NULL
)

406  (
t1
);

407  (
	`block
(
TLIST
,
t1
,
t2
,
nuαr
));

408
	}
}

410 
\xdd
 *
	$block
(
ty\xb3
,
t1
,
t2
,
wp
)

411 
\xdd
 *
t1
, *
t2
;

412 **
wp
;

414 
\xdd
 *
t
;

416
t
 =
	`\xc3w\x8d
();

417
t
->
ty\xb3
 =\x81ype;

418
t
->
\xcb\xe1
 =
t1
;

419
t
->
right
 =
t2
;

420
t
->
w\xdcds
 =
wp
;

421  (
t
);

422
	}
}

424 
	s\xbbs
 {

425 *
	mr_\xc7me
;

426 
	mr_v\x\xab
;

427 }
	g\xbb\xa1ab
[] = {

428 "f\xdc",
FOR
, "\xff\xa3",
CASE
, "e\xa7c",
ESAC
, "wh\x9ee",
WHILE
, "do",
DO
,

429 "d\xdae",
DONE
, "if",
IF
, "\x9a",
IN
, "th\x92",
THEN
, "\x96\xa3",
ELSE
,

430 "\x96if",
ELIF
, "u\xc1\x9e",
UNTIL
, "fi",
FI
,

432 ";;",
BREAK
, "||",
LOGOR
, "&&",
LOGAND
, "{", '{', "}", '}',

437
	$\xbeookup
(
n
) *n;

439 
\xbbs
 *
\xbd
;

441 
\xbd
 =
\xbb\xa1ab
;\x84p->
r_\xc7me
;\x84p++)

442 i\xe0(
	`\xa1rcmp
(
\xbd
->
r_\xc7me
,
n
) == 0)

443  (
\xbd
->
r_v\x\xab
);

445
	}
}

447 
\xdd
 *
	$\xc3w\x8d
() {

448 
\xdd
 *
t
;

450
t
 = (
\xdd
 *)
	`\x8c\x93
((*t));

451
t
->
ty\xb3
 = 0;

452
t
->
w\xdcds
 =
NULL
;

453
t
->
i\xdf\xf9
 =
NULL
;

454
t
->
\xcb\xe1
 =
NULL
;

455
t
->
right
 =
NULL
;

456
t
->
\xa1r
 =
NULL
;

457  (
t
);

458
	}
}

460 
\xdd
 *
	$\xc7m\x96i\xa1
(
t
)

461 
\xdd
 *
t
;

463 i\xe0(
i\xdei\xa1
) {

464
i\xdei\xa1
 =
	`addw\xdcd
((*)
NULL
, iolist);

465
t
->
i\xdf\xf9
 =
	`c\xddyio
();

467
t
->
i\xdf\xf9
 =
NULL
;

468 i\xe0(
t
->
ty\xb3
 !\xf0
TCOM
) {

469 i\xe0(
t
->
ty\xb3
 !\xf0
TPAREN
 &&\x81->
i\xdf\xf9
 !\xf0
NULL
) {

470
t
 =
	`block
(
TPAREN
,\x81,
nuαr
,\x82ullptr);

471
t
->
i\xdf\xf9
 =\x81->
\xcb\xe1
->ioact;

472
t
->
\xcb\xe1
->
i\xdf\xf9
 =
NULL
;

474  (
t
);

476
	`w\xdcd
(
nuαr
);

477
t
->
w\xdcds
 =
	`c\xddyw
();

478  (
t
);

479
	}
}

481 **
	$c\xddyw
() {

482 **
wd
;

484
wd
 =
	`g\x91w\xdcds
(
wdli\xa1
);

485
wdli\xa1
 = 0;

486  (
wd
);

487
	}
}

489 
	$w\xdcd
(
\xfd
) *cp;

491
wdli\xa1
 =
	`addw\xdcd
(
\xfd
, wdlist);

492
	}
}

494 
iow\xdcd
 **
	$c\xddyio
() {

495 
iow\xdcd
 **
i\xdd
;

497
i\xdd
 = (
iow\xdcd
 **)
	`g\x91w\xdcds
(
i\xdei\xa1
);

498
i\xdei\xa1
 = 0;

499  (
i\xdd
);

500
	}
}

502 
iow\xdcd
 *
	$io
(
u
,
f
,
\xfd
)

503 *
\xfd
;

505 
iow\xdcd
 *
i\xdd
;

507
i\xdd
 = (
iow\xdcd
 *)
	`\x8c\x93
((*iop));

508
i\xdd
->
io_un\x99
 =
u
;

509
i\xdd
->
io_\xe6ag
 =
f
;

510
i\xdd
->
io_un
.
io_\xc7me
 =
\xfd
;

511
i\xdei\xa1
 =
	`addw\xdcd
((*)
i\xdd
, iolist);

512  (
i\xdd
);

513
	}
}

515 
	$zz\x94r
(\xe8{
	`yy\x94r\xdc
("sy\xc1ax\x83\xbc\xdc");
	}
}

517
	$yy\x94r\xdc
(
s
) *s;

519
yyüs
++;

520 i\xe0(
\x8flk\x9ag
) {

521 i\xe0(
muɞ\x9\xab
 &&
ƣ\x92
)

522
	`ung\x91
('\n');

523
muɞ\x9\xab
 = 0;

524 
	`yy\xcbx
(0) != '\n')

527
	`\x94r
(
s
);

528
	`\xe7\x9e
();

529
	}
}

531 
	$yy\xcbx
(
cf
)

532 
cf
;

534 
c
,
c1
;

535 
\xa9\xa1\xact
;

537 i\xe0((
c
 =
\xb3eksym
) > 0) {

538
\xb3eksym
 = 0;

539 i\xe0(
c
 == '\n')

540
\xa1\xac\x8e
 = 1;

541  (
c
);

543
ƣ\x92
 = 0;

544
e
.
l\x9a\x95
 =
l\x9\xab
;

545
\xa9\xa1\xact
 =
\xa1\xac\x8e
;

546
\xa1\xac\x8e
 = 0;

547
yylv\x\xab
.
i
 = 0;

549
lo\xdd
:

550 (
c
 =
	`g\x91c
(0)) == ' ' || c == '\t')

552 
c
) {

554 i\xe0(
	`\x\xafy
(
c
, "0123456789")) {

555
	`ung\x91
(
c1
 =
	`g\x91c
(0));

556 i\xe0(
c1
 == '<' || c1 == '>') {

557
ioun\x99
 =
c
 - '0';

558 
lo\xdd
;

560 *
e
.
l\x9a\x95
++ =
c
;

561
c
 =
c1
;

566 (
c
 =
	`g\x91c
(0)) != 0 && c != '\n')

568
	`ung\x91
(
c
);

569 
lo\xdd
;

572  (
c
);

575 *
e
.
l\x9a\x95
++ =
c
;

576 i\xe0((
c
 =
	`g\x91c
(0)) == '{') {

577 i\xe0((
c
 =
	`c\xde\xcb\xf9
(c, '}')) != '\0')

578  (
c
);

579 
\xb7ck
;

586 i\xe0((
c
 =
	`c\xde\xcb\xf9
(c, c)) != '\0')

587  (
c
);

588 
\xb7ck
;

593 i\xe0((
c1
 =
	`du\x\xab
(
c
)) != '\0') {

594
\xa1\xac\x8e
 = 1;

595  (
c1
);

597
\xa1\xac\x8e
 = 1;

598  (
c
);

600
\xa1\xac\x8e
 = 1;

604
	`d\x9fg
(
c
);

605  (
c
);

608
ƣ\x92
++;

609
	`g\x91h\x94e
();

610
\xa1\xac\x8e
 = 1;

611 i\xe0(
muɞ\x9\xab
 ||
cf
 &
CONTIN
) {

612 i\xe0(
\x8flk\x9ag
 &&
e
.
i\xdd
 <\xf0
io\xa1ack
)

613
	`\xb4s
(
\xfdrom\xb1
->
v\x\xabue
);

614 i\xe0(
cf
 &
CONTIN
)

615 
lo\xdd
;

617  (
c
);

621
\xa1\xac\x8e
 = 1;

622  (
c
);

625
	`ung\x91
(
c
);

627
\xb7ck
:

628 (
c
 =
	`g\x91c
(0)\xe8!\xf00 && !
	`\x\xafy
(c, "`$ '\"\t;&<>()|^\n"))

629 i\xe0(
e
.
l\x9a\x95
 >\xf0
\x96\x9a\x95
)

630
	`\x94r
("word\x81oo\x86ong");

632 *
e
.
l\x9a\x95
++ =
c
;

633
	`ung\x91
(
c
);

634 i\xe0(
	`\x\xafy
(
c
, "\"'`$"))

635 
lo\xdd
;

636 *
e
.
l\x9a\x95
++ = '\0';

637 i\xe0(
\xa9\xa1\xact
 && (
c
 =
	`\xbeookup
(
l\x9\xab
)) != 0) {

638
\xa1\xac\x8e
 = 1;

639  (
c
);

641
yylv\x\xab
.
\xfd\xb5
 =
	`\xa1r\xa7ve
(
l\x9\xab
,
\xac\x97num
);

642  (
WORD
);

643
	}
}

645 
	$c\xde\xcb\xf9
(
c
,
c1
)

646 
c
,
c1
;

648 
s
[2];

650 *
e
.
l\x9a\x95
++ =
c
;

651 (
c
 =
	`g\x91c
(
c1
)) != c1) {

652 i\xe0(
c
 == 0) {

653
	`ung\x91
(
c
);

654
s
[0] =
c1
;

655
s
[1] = 0;

656
	`\xb4s
("no closing ");

657
	`yy\x94r\xdc
(
s
);

658  (
YYERRCODE
);

660 i\xe0(
\x8flk\x9ag
 &&
c
 =\xf0'\n' &&
e
.
i\xdd
 <\xf0
io\xa1ack
)

661
	`\xb4s
(
\xfdrom\xb1
->
v\x\xabue
);

662 *
e
.
l\x9a\x95
++ =
c
;

664 *
e
.
l\x9a\x95
++ =
c
;

666
	}
}

668 
	$du\x\xab
(
c
)

669 
c
;

671 
s
[3];

672 *
\xfd
 =
s
;

674 *
\xfd
++ =
c
;

675 *
\xfd
++ =
	`g\x91c
(0);

676 *
\xfd
 = 0;

677 i\xe0((
c
 =
	`\xbeookup
(
s
)) == 0)

678
	`ung\x91
(*--
\xfd
);

679  (
c
);

680
	}
}

682 
	$d\x9fg
(
ec
) ec;

684 
c
;

686
c
 =
	`g\x91c
(0);

687 i\xe0(
c
 == '>' || c == '<') {

688 i\xe0(
c
 !\xf0
ec
)

689
	`zz\x94r
();

690
yylv\x\xab
.
i
 =
ec
 =\xf0'>' ?
IOWRITE
 |
IOCAT
 :
IOHERE
;

691
c
 =
	`g\x91c
(0);

693
yylv\x\xab
.
i
 =
ec
 =\xf0'>' ?
IOWRITE
 :
IOREAD
;

694 i\xe0(
c
 !\xf0'&' ||
yylv\x\xab
.
i
 =\xf0
IOHERE
)

695
	`ung\x91
(
c
);

697
yylv\x\xab
.
i
 |\xf0
IODUP
;

698
	}
}

700 *
	$\x8c\x93
(
size
)

701 
size
;

703 *
t
;

705 i\xe0((
t
 =
	`g\x91\xfb\x\xfb
(
size
)\xe8=\xf0
NULL
) {

706
	`\xb4s
("command\x86ine\x81oo complicated\n");

707
	`\xe7\x9e
();

710  (
t
);

711
	}
}

715
	$\xb4\x9\xa9f
(
s
)

716 *
s
;

718
	}
}

	@commands/sh3.cpp

7 
	~"\x94\xbao.h\xb5
"

8 
	~"\xa3tjmp.h\xb5
"

9 
	~"sh.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

19 *
	gsig\xc7me
[] = {

22
NULL
,

33
NULL
,

37 
	#NSIGNAL
 ((
sig\xc7me
\xe8/ (sig\xc7me[0]))

	)

39 
\xdd
 *
f\x9ad\xff\xa3
();

40 
brk\xa3t
();

41 
echo
();

42 
f\xdckexec
();

43 
\xb7\xbb\xc1
();

45 
	$execu\x8b
(
t
,
p\x9a
,
pout
,
a\xf9
)

46 
\xdd
 *
t
;

47 *
p\x9a
, *
pout
;

48 
a\xf9
;

50 
\xdd
 *
t1
;

51 
i
,
pv
[2],
rv
,
ch\x9ed
,
a
;

52 *
\xfd
, **
wp
, **
wp2
;

53 
v\xac
 *
vp
;

54 
brkc\xda

bc
;

56 i\xe0(
t
 =\xf0
NULL
)

58
rv
 = 0;

59
a
 =
\xac\x97num
++;

60
wp
 = (
wp2
 =
t
->
w\xdcds
\xe8!\xf0
NULL
 ?
	`ev\x\xab
(wp2,
DOALL
) : NULL;

62 
t
->
ty\xb3
) {

63 
TPAREN
:

64 
TCOM
:

65
rv
 =
	`f\xdckexec
(
t
,
p\x9a
,
pout
,
a\xf9
,
wp
, &
ch\x9ed
);

66 i\xe0(
ch\x9ed
) {

67
ex\xa1\xa9
 =
rv
;

68
	`\xcbave
();

72 
TPIPE
:

73 i\xe0((
rv
 =
	`ݒp\x9de
(
pv
)) < 0)

75
pv
[0] =
	`\xbbm\xad
(pv[0]);

76
pv
[1] =
	`\xbbm\xad
(pv[1]);

77 ()
	`execu\x8b
(
t
->
\xcb\xe1
,
p\x9a
,
pv
, 0);

78
rv
 =
	`execu\x8b
(
t
->
right
,
pv
,
pout
, 0);

81 
TLIST
:

82 ()
	`execu\x8b
(
t
->
\xcb\xe1
,
p\x9a
,
pout
, 0);

83
rv
 =
	`execu\x8b
(
t
->
right
,
p\x9a
,
pout
, 0);

86 
TASYNC
:

87
i
 =
	`\xb7\xbb\xc1
();

88 i\xe0(
i
 != 0) {

89 i\xe0(
i
 != -1) {

90 i\xe0(
p\x9a
 !\xf0
NULL
)

91
	`\x\xe3o\xa3p\x9de
(
p\x9a
);

92 i\xe0(
\x8flk\x9ag
) {

93
	`\xb4s
(
	`pu\x8a
(
i
));

94
	`\xb4s
("\n");

97
rv
 = -1;

98
	`\xa3t\xa1\xa9us
(
rv
);

100
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

101
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

102 i\xe0(
\x8flk\x9ag
)

103
	`sig\xc7l
(
SIGTERM
,
SIG_DFL
);

104
\x8flk\x9ag
 = 0;

105 i\xe0(
p\x9a
 =\xf0
NULL
) {

106
	`\x\xe3o\xa3
(0);

107
	`ݒ
("/dev/null", 0);

109
	`ex\x99
(
	`execu\x8b
(
t
->
\xcb\xe1
,
p\x9a
,
pout
,
FEXEC
));

113 
TOR
:

114 
TAND
:

115
rv
 =
	`execu\x8b
(
t
->
\xcb\xe1
,
p\x9a
,
pout
, 0);

116 i\xe0((
t1
 =
t
->
right
\xe8!\xf0
NULL
 && (
rv
 =\xf00\xe8=\xf0\xd1->
ty\xb3
 =\xf0
TAND
))

117
rv
 =
	`execu\x8b
(
t1
,
p\x9a
,
pout
, 0);

120 
TFOR
:

121 i\xe0(
wp
 =\xf0
NULL
) {

122
wp
 =
d\xdev
 + 1;

123 i\xe0((
i
 =
d\xdec
 - 1) < 0)

124
i
 = 0;

126
i
 = -1;

127
vp
 =
	`lookup
(
t
->
\xa1r
);

128 
	`\xa3tjmp
(
bc
.
brk\xb1
))

129 i\xe0(
isb\xbbak
)

130 
brok\x92
;

131
	`brk\xa3t
(&
bc
);

132 
t1
 =
t
->
\xcb\xe1
;
i
-- && *
wp
 !\xf0
NULL
;) {

133
	`\xa3tv\x\xab
(
vp
, *
wp
++);

134
rv
 =
	`execu\x8b
(
t1
,
p\x9a
,
pout
, 0);

136
brkli\xa1
 = brkli\xa1->
\xc3x\x8eev
;

139 
TWHILE
:

140 
TUNTIL
:

141 
	`\xa3tjmp
(
bc
.
brk\xb1
))

142 i\xe0(
isb\xbbak
)

143 
brok\x92
;

144
	`brk\xa3t
(&
bc
);

145
t1
 =
t
->
\xcb\xe1
;

146 (
	`execu\x8b
(
t1
,
p\x9a
,
pout
, 0\xe8=\xf00\xe8=\xf0(
t
->
ty\xb3
 =\xf0
TWHILE
))

147
rv
 =
	`execu\x8b
(
t
->
right
,
p\x9a
,
pout
, 0);

148
brkli\xa1
 = brkli\xa1->
\xc3x\x8eev
;

151 
TIF
:

152 
TELIF
:

153
rv
 = !
	`execu\x8b
(
t
->
\xcb\xe1
,
p\x9a
,
pout
, 0\xe8?\x83xecu\x8b\xd1->
right
->left,\x85in,\x85out, 0)

154 :
	`execu\x8b
(
t
->
right
->right,
p\x9a
,
pout
, 0);

157 
TCASE
:

158 i\xe0((
\xfd
 =
	`ev\x\xab\xa1r
(
t
->
\xa1r
,
DOSUB
 |
DOTRIM
)) == 0)

159
\xfd
 = "";

160 i\xe0((
t1
 =
	`f\x9ad\xff\xa3
(
t
->
\xcb\xe1
,
\xfd
)\xe8!\xf0
NULL
)

161
rv
 =
	`execu\x8b
(
t1
,
p\x9a
,
pout
, 0);

164 
TBRACE
:

173 i\xe0(
rv
 >\xf00 && (
t1
 =
t
->
\xcb\xe1
))

174
rv
 =
	`execu\x8b
(
t1
,
p\x9a
,
pout
, 0);

178
brok\x92
:

179
t
->
w\xdcds
 =
wp2
;

180
isb\xbbak
 = 0;

181
	`䓬\x97
(
\xac\x97num
);

182
\xac\x97num
 =
a
;

183 i\xe0(
\x9a\x8c
) {

184
	`\x\xe3o\xa3\x\xabl
();

185
	`\xe7\x9e
();

187  (
rv
);

188
	}
}

190 
	$f\xdckexec
(
t
,
p\x9a
,
pout
,
a\xf9
,
wp
,
pf\xdcked
)

191 
\xdd
 *
t
;

192 *
p\x9a
, *
pout
;

193 
a\xf9
;

194 **
wp
;

195 *
pf\xdcked
;

197 
i
,
rv
, (*
shcom
)();

198 
	`d\xdbxec
();

199 
f
;

200 *
\xfd
;

201 
iow\xdcd
 **
i\xddp
;

202 
\xbb\xa3tsig
;

204
\xbb\xa3tsig
 = 0;

205 *
pf\xdcked
 = 0;

206
shcom
 =
NULL
;

207
rv
 = -1;

208 i\xe0(
t
->
ty\xb3
 =\xf0
TCOM
) {

211 i\xe0(
\xe6ag
['x'])

212
	`echo
(
wp
);

213 (
\xfd
 = *
wp
++\xe8!\xf0
NULL
 &&
	`assign
(\xfd,
COPYV
))

215
wp
--;

216 i\xe0(
\xfd
 =\xf0
NULL
 &&
t
->
i\xdf\xf9
 == NULL)

217  (
	`\xa3t\xa1\xa9us
(0));

219
shcom
 =
	`\x9abu\x9\x91
(
\xfd
);

221
t
->
w\xdcds
 =
wp
;

222
f
 =
a\xf9
;

223 i\xe0(
shcom
 =\xf0
NULL
 && (
f
 &
FEXEC
) == 0) {

224
i
 =
	`\xb7\xbb\xc1
();

225 i\xe0(
i
 != 0) {

226 i\xe0(
i
 == -1)

227  (
rv
);

228 i\xe0(
p\x9a
 !\xf0
NULL
)

229
	`\x\xe3o\xa3p\x9de
(
p\x9a
);

230  (
pout
 =\xf0
NULL
 ?
	`\xa3t\xa1\xa9us
(
	`wa\x99f\xdc
(
i
, 0)) : 0);

232 i\xe0(
\x8flk\x9ag
) {

233
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

234
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

235
\xbb\xa3tsig
 = 1;

237
\x8flk\x9ag
 = 0;

238
\x9a\x8c
 = 0;

239 (*
pf\xdcked
)++;

240
brkli\xa1
 = 0;

241
exec\xe6g
 = 0;

243 #ifde\xe0
COMPIPE


244 i\xe0((
p\x9a
 !\xf0
NULL
 ||
pout
 !\xf0NULL\xe8&&
shcom
 !\xf0NULL && shcom !\xf0
d\xdbxec
) {

245
	`\x94r
("piping\x81o/from shell builtins\x82ot yet done");

249 i\xe0(
p\x9a
 !\xf0
NULL
) {

250
	`dup2
(
p\x9a
[0], 0);

251
	`\x\xe3o\xa3p\x9de
(
p\x9a
);

253 i\xe0(
pout
 !\xf0
NULL
) {

254
	`dup2
(
pout
[1], 1);

255
	`\x\xe3o\xa3p\x9de
(
pout
);

257 i\xe0((
i\xddp
 =
t
->
i\xdf\xf9
\xe8!\xf0
NULL
) {

258 i\xe0(
shcom
 !\xf0
NULL
 && shcom !\xf0
d\xdbxec
) {

259
	`\xb4s
(
\xfd
);

260
	`\x94r
(": cannot\x84edirect shell command");

263 *
i\xddp
)

264 i\xe0(
	`io\xa3tup
(*
i\xddp
++,
p\x9a
 !\xf0
NULL
,
pout
 != NULL))

265  (
rv
);

267 i\xe0(
shcom
)

268  (
	`\xa3t\xa1\xa9us
((*
shcom
)(
t
)));

270 
i
 =
FDBASE
; i <
NOFILE
; i++)

271
	`\x\xe3o\xa3
(
i
);

272 i\xe0(
t
->
ty\xb3
 =\xf0
TPAREN
)

273
	`ex\x99
(
	`execu\x8b
(
t
->
\xcb\xe1
,
nuαr
,\x82uαr,
FEXEC
));

274 i\xe0(
\xbb\xa3tsig
) {

275
	`sig\xc7l
(
SIGINT
,
SIG_DFL
);

276
	`sig\xc7l
(
SIGQUIT
,
SIG_DFL
);

278 i\xe0(
wp
[0] =\xf0
NULL
)

279
	`ex\x99
(0);

280
\xfd
 =
	`\xbbxecve
(
wp
[0], wp,
	`mak\x92v
(wp));

281
	`\xb4s
(
wp
[0]);

282
	`\xb4s
(": ");

283
	`w\xa\xfa
(
\xfd
);

284 i\xe0(!
exec\xe6g
)

285
\x8c\xad
[0] =
NULL
;

286
	`\xcbave
();

288
	}
}

293 
	$\xb7\xbb\xc1
() {

294 
i
;

296
i
 =
	`f\xdck
();

297 i\xe0(
i
 != 0) {

298 i\xe0(
i
 == -1)

299
	`w\xa\xfa
("try\x87gain");

300
	`\xa3tv\x\xab
(
	`lookup
("!"),
	`pu\x8a
(
i
));

302  (
i
);

303
	}
}

309
	$io\xa3tup
(
i\xdd
,
p\x9de\x9a
,
p\x9deout
\xe8
iow\xdcd
 *iop;

310 
p\x9de\x9a
,
p\x9deout
;

312 
u
;

313 *
\xfd
, *
msg
;

315 i\xe0(
i\xdd
->
io_un\x99
 =\xf0
IODEFAULT
)

316
i\xdd
->
io_un\x99
 = i\xdd->
io_\xe6ag
 & (
IOREAD
 |
IOHERE
) ? 0 : 1;

317 i\xe0(
p\x9de\x9a
 &&
i\xdd
->
io_un\x99
 == 0)

319 i\xe0(
p\x9deout
 &&
i\xdd
->
io_un\x99
 == 1)

321
msg
 =
i\xdd
->
io_\xe6ag
 & (
IOREAD
 |
IOHERE
) ? "open" : "create";

322 i\xe0((
i\xdd
->
io_\xe6ag
 &
IOHERE
) == 0) {

323
\xfd
 =
i\xdd
->
io_un
.
io_\xc7me
;

324 i\xe0((
\xfd
 =
	`ev\x\xab\xa1r
(\xfd,
DOSUB
 |
DOTRIM
)\xe8=\xf0
NULL
)

327 i\xe0(
i\xdd
->
io_\xe6ag
 &
IODUP
) {

328 i\xe0(
\xfd
[1] || !
	`dig\x99
(*cp) && *cp != '-') {

329
	`\xb4s
(
\xfd
);

330
	`\x94r
(": illegal >&\x87rgument");

333 i\xe0(*
\xfd
 == '-')

334
i\xdd
->
io_\xe6ag
 =
IOCLOSE
;

335
i\xdd
->
io_\xe6ag
 &\xf0~(
IOREAD
 |
IOWRITE
);

337 
i\xdd
->
io_\xe6ag
) {

338 
IOREAD
:

339
u
 =
	`ݒ
(
\xfd
, 0);

342 
IOHERE
:

343 
IOHERE
 |
IOXHERE
:

344
u
 =
	`h\x94e\x9a
(
i\xdd
->
io_un
.
io_h\x94e
, i\xdd->
io_\xe6ag
 &
IOXHERE
);

345
\xfd
 = "here file";

348 
IOWRITE
 |
IOCAT
:

349 i\xe0((
u
 =
	`ݒ
(
\xfd
, 1)) >= 0) {

350
	`l\xa3ek
(
u
, ()0, 2);

353 
IOWRITE
:

354
u
 =
	`\xfc\x97t
(
\xfd
, 0666);

357 
IODUP
:

358
u
 =
	`dup2
(*
\xfd
 - '0',
i\xdd
->
io_un\x99
);

361 
IOCLOSE
:

362
	`\x\xe3o\xa3
(
i\xdd
->
io_un\x99
);

365 i\xe0(
u
 < 0) {

366
	`\xb4s
(
\xfd
);

367
	`\xb4s
(": cannot ");

368
	`w\xa\xfa
(
msg
);

371 i\xe0(
u
 !\xf0
i\xdd
->
io_un\x99
) {

372
	`dup2
(
u
,
i\xdd
->
io_un\x99
);

373
	`\x\xe3o\xa3
(
u
);

377
	}
}

379 
	$echo
(
wp
) **wp;

381 
i
;

383
	`\xb4s
("+");

384 
i
 = 0;
wp
[i]; i++) {

385 i\xe0(
i
)

386
	`\xb4s
(" ");

387
	`\xb4s
(
wp
[
i
]);

389
	`\xb4s
("\n");

390
	}
}

392 
\xdd
 **
	$f\x9ad1\xff\xa3
(
t
,
w
)

393 
\xdd
 *
t
;

394 *
w
;

396 
\xdd
 *
t1
;

397 
\xdd
 **
\x8d
;

398 **
wp
, *
\xfd
;

400 i\xe0(
t
 =\xf0
NULL
)

401  (
NULL
);

402 i\xe0(
t
->
ty\xb3
 =\xf0
TLIST
) {

403 i\xe0((
\x8d
 =
	`f\x9ad1\xff\xa3
(
t
->
\xcb\xe1
,
w
)\xe8!\xf0
NULL
)

404  (
\x8d
);

405
t1
 =
t
->
right
;

407
t1
 =
t
;

408 
wp
 =
t1
->
w\xdcds
; *wp;)

409 i\xe0((
\xfd
 =
	`ev\x\xab\xa1r
(*
wp
++,
DOSUB
)\xe8&&
	`gm\xa9ch
(
w
, cp))

410  (&
t1
->
\xcb\xe1
);

411  (
NULL
);

412
	}
}

414 
\xdd
 *
	$f\x9ad\xff\xa3
(
t
,
w
)

415 
\xdd
 *
t
;

416 *
w
;

418 
\xdd
 **
\x8d
;

420  ((
\x8d
 =
	`f\x9ad1\xff\xa3
(
t
,
w
)\xe8!\xf0
NULL
 ? *tp : NULL);

421
	}
}

426 
	$brk\xa3t
(
bc
\xe8
brkc\xda
 *bc;

428
bc
->
\xc3x\x8eev
 =
brkli\xa1
;

429
brkli\xa1
 =
bc
;

430
	}
}

439 
	$wa\x99f\xdc
(
ϡpid
,
\xffn\x9a\x8c
)

440 
ϡpid
;

441 
\xffn\x9a\x8c
;

443 
pid
,
rv
;

444 
s
;

446
rv
 = 0;

448
pid
 =
	`wa\x99
(&
s
);

449 i\xe0(
pid
 == -1) {

450 i\xe0(
\x94\xbao
 !\xf0
E\xbc\xdcCode
::
EINTR
 ||
\xffn\x9a\x8c
)

453 i\xe0((
rv
 =
	`WAITSIG
(
s
)) != 0) {

454 i\xe0(
rv
 <
NSIGNAL
) {

455 i\xe0(
sig\xc7me
[
rv
] !\xf0
NULL
) {

456 i\xe0(
pid
 !\xf0
ϡpid
) {

457
	`\xb4n
(
pid
);

458
	`\xb4s
(": ");

460
	`\xb4s
(
sig\xc7me
[
rv
]);

463 i\xe0(
pid
 !\xf0
ϡpid
) {

464
	`\xb4n
(
pid
);

465
	`\xb4s
(": ");

467
	`\xb4s
("Signal ");

468
	`\xb4n
(
rv
);

469
	`\xb4s
(" ");

471 i\xe0(
	`WAITCORE
(
s
))

472
	`\xb4s
(" - core dumped");

473
	`\xb4s
("\n");

474
rv
 = -1;

476
rv
 =
	`WAITVAL
(
s
);

479
	`sync
();

480 } 
pid
 !\xf0
ϡpid
);

481  (
rv
);

482
	}
}

484 
	$\xa3t\xa1\xa9us
(
s
)

485 
s
;

487
ex\xa1\xa9
 =
s
;

488
	`\xa3tv\x\xab
(
	`lookup
("?"),
	`pu\x8a
(
s
));

489  (
s
);

490
	}
}

497 *
	$\xbbxecve
(
c
,
v
,
\x92vp
)

498 *
c
, **
v
, **
\x92vp
;

500 
i
;

501 *
\xa5
, *
\x8d
;

502 
\x97c\xfbs
 = 0,
asis
 = 0;

503 
\x94\xbao
;

505
\xa5
 =
	`\x\xafy
('/',
c
\xe8? "" :
\xb7th
->
v\x\xabue
;

506
asis
 = *
\xa5
 == '\0';

507 
asis
 || *
\xa5
 != '\0') {

508
asis
 = 0;

509
\x8d
 =
e
.
l\x9a\x95
;

510 ; *
\xa5
 !\xf0'\0';
\x8d
++)

511 i\xe0((*
\x8d
 = *
\xa5
++) == ':') {

512
asis
 = *
\xa5
 == '\0';

515 i\xe0(
\x8d
 !\xf0
e
.
l\x9a\x95
)

516 *
\x8d
++ = '/';

517 
i
 = 0; (*
\x8d
++ =
c
[i++]) != '\0';)

519
	`execve
(
e
.
l\x9a\x95
,
v
,
\x92vp
);

520 
\x94\xbao
) {

521 
E\xbc\xdcCode
::
ENOEXEC
:

522 *
v
 =
e
.
l\x9a\x95
;

523
\x8d
 = *--
v
;

524 *
v
 = "/bin/sh";

525
	`execve
(*
v
, v,
\x92vp
);

526 *
v
 =
\x8d
;

529 
E\xbc\xdcCode
::
ENOMEM
:

532 
E\xbc\xdcCode
::
E2BIG
:

535 
E\xbc\xdcCode
::
EACCES
:

536
\x97c\xfbs
++;

540  (
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
ENOENT
 ? "not found" : "cannot\x83xecute");

541
	}
}

547
	$run
(
\xacg
,
f
\xe8
i\xd\xe4g
\x87rg;

548 (*
f
)();

550 
\xdd
 *
ٻe
;

551 
wdblock
 *
swdli\xa1
;

552 
wdblock
 *
si\xdei\xa1
;

553
jmp_buf

ev
,
\xb9
;

554
jmp_buf
 *
o\xe7\x9e
;

555 
rv
;

557
\xac\x97num
++;

558
swdli\xa1
 =
wdli\xa1
;

559
si\xdei\xa1
 =
i\xdei\xa1
;

560
ٻe
 =
ou\x89\xbbe
;

561
o\xe7\x9e
 =
瞱
;

562
rv
 = -1;

563
\x94\xbdt
 = &
ev
;

564 i\xe0(
	`\xc3w\x92v
(
	`\xa3tjmp
(
ev
)) == 0) {

565
wdli\xa1
 = 0;

566
i\xdei\xa1
 = 0;

567
	`pushio
(
\xacg
,
f
);

568
e
.
ioba\xa3
 =\x83.
i\xdd
;

569
yyüs
 = 0;

570 i\xe0(
	`\xa3tjmp
(
瞱
 =
\xb9
\xe8=\xf00 &&
	`yy\xb7r\xa3
() == 0)

571
rv
 =
	`execu\x8b
(
ou\x89\xbbe
,
nuαr
,\x82ullptr, 0);

572
瞱
 = &
\xb9
;

573 i\xe0(
	`\xa3tjmp
(
\xb9
\xe8=\xf00 &&
	`yy\xb7r\xa3
() == 0)

574
rv
 =
	`execu\x8b
(
ou\x89\xbbe
,
NOPIPE
, NOPIPE, 0);

575
	`qu\x99\x92v
();

577
wdli\xa1
 =
swdli\xa1
;

578
i\xdei\xa1
 =
si\xdei\xa1
;

579
瞱
 =
o\xe7\x9e
;

580
ou\x89\xbbe
 =
ٻe
;

581
	`䓬\x97
(
\xac\x97num
--);

582  (
rv
);

583
	}
}

592 
rdexp
();

593 
badid
();

594 
brkc\xd\xa9\x9a
();

596
	$d\xd\x97b\x96
(\xe8{  (0);
	}
}

598
	$dochd\x9c
(
t
\xe8
\xdd
 *t;

600 *
\xfd
, *
\x94
;

602 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8=\xf0
NULL
 && (\xfd =
homed\x9c
->
v\x\xabue
) == NULL)

603
\x94
 = ":\x82o home directory";

604 i\xe0(
	`chd\x9c
(
\xfd
) < 0)

605
\x94
 = ": bad directory";

608
	`\xb4s
(
\xfd
 !\xf0
NULL
 ? cp : "cd");

609
	`\x94r
(
\x94
);

611
	}
}

613
	$doshi\xe1
(
t
\xe8
\xdd
 *t;

615 
n
;

617
n
 =
t
->
w\xdcds
[1] ?
	`g\x91n
(t->words[1]) : 1;

618 i\xe0(
d\xdec
 <
n
) {

619
	`\x94r
("nothing\x81o shift");

622
d\xdev
[
n
] = dolv[0];

623
d\xdev
 +\xf0
n
;

624
d\xdec
 -\xf0
n
;

625
	`\xa3tv\x\xab
(
	`lookup
("#"),
	`pu\x8a
(
d\xdec
));

627
	}
}

632
	$d\xdeog\x9a
(
t
\xe8
\xdd
 *t;

634 *
\xfd
;

636 i\xe0(
\x8flk\x9ag
) {

637
	`sig\xc7l
(
SIGINT
,
SIG_DFL
);

638
	`sig\xc7l
(
SIGQUIT
,
SIG_DFL
);

640
\xfd
 =
	`\xbbxecve
(
t
->
w\xdcds
[0],\x81->w\xdcds,
	`mak\x92v
(t->words));

641
	`\xb4s
(
t
->
w\xdcds
[0]);

642
	`\xb4s
(": ");

643
	`\x94r
(
\xfd
);

645
	}
}

647
	$doumask
(
t
\xe8
\xdd
 *t;

649 
i
,
n
;

650 *
\xfd
;

652 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8=\xf0
NULL
) {

653
i
 =
	`umask
(0);

654
	`umask
(
i
);

655 
n
 = 3 * 4; (n -= 3) >= 0;)

656
	`putc
('0' + ((
i
 >>
n
) & 07));

657
	`putc
('\n');

659 
n
 = 0; *
\xfd
 >= '0' && *cp <= '9'; cp++)

660
n
 =\x82 * 8 + (*
\xfd
 - '0');

661
	`umask
(
n
);

664
	}
}

666
	$d\xdbxec
(
t
\xe8
\xdd
 *t;

668 
i
;

669
jmp_buf

ex
;

670
jmp_buf
 *
o\xe7\x9e
;

672
t
->
i\xdf\xf9
 =
NULL
;

673 
i
 = 0; (
t
->
w\xdcds
[i] =\x81->w\xdcds[\x98+ 1]\xe8!\xf0
NULL
; i++)

675 i\xe0(
i
 == 0)

677
exec\xe6g
 = 1;

678
o\xe7\x9e
 =
瞱
;

679 i\xe0(
	`\xa3tjmp
(
瞱
 =
ex
) == 0)

680
	`execu\x8b
(
t
,
nuαr
,\x82uαr,
FEXEC
);

681
瞱
 = &
ex
;

682 i\xe0(
	`\xa3tjmp
(
ex
) == 0)

683
	`execu\x8b
(
t
,
NOPIPE
, NOPIPE,
FEXEC
);

684
瞱
 =
o\xe7\x9e
;

685
exec\xe6g
 = 0;

687
	}
}

689
	$dod\xd9
(
t
\xe8
\xdd
 *t;

691 
i
;

692 *
\xa5
, *
\x8d
;

693 *
\xfd
;

695 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8=\xf0
NULL
)

697
\xa5
 =
	`\x\xafy
('/',
\xfd
\xe8? ":" :
\xb7th
->
v\x\xabue
;

698 *
\xa5
) {

699
\x8d
 =
e
.
l\x9a\x95
;

700 *
\xa5
 && (*
\x8d
 = *sp++) != ':')

701
\x8d
++;

702 i\xe0(
\x8d
 !\xf0
e
.
l\x9a\x95
)

703 *
\x8d
++ = '/';

704 
i
 = 0; (*
\x8d
++ =
\xfd
[i++]) != '\0';)

706 i\xe0((
i
 =
	`ݒ
(
e
.
l\x9a\x95
, 0)) >= 0) {

707
ex\xa1\xa9
 = 0;

708
	`\xc3xt
(
	`\xbbm\xad
(
i
));

709  (
ex\xa1\xa9
);

712
	`\xb4s
(
\xfd
);

713
	`\x94r
(":\x82ot found");

715
	}
}

717
	$dowa\x99
(
t
\xe8
\xdd
 *t;

719 
i
;

720 *
\xfd
;

722 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8!\xf0
NULL
) {

723
i
 =
	`g\x91n
(
\xfd
);

724 i\xe0(
i
 == 0)

727
i
 = -1;

728 i\xe0(
\x8flk\x9ag
)

729
	`sig\xc7l
(
SIGINT
,
ښ\x8c
);

730
	`\xa3t\xa1\xa9us
(
	`wa\x99f\xdc
(
i
, 1));

731 i\xe0(
\x8flk\x9ag
)

732
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

734
	}
}

736
	$dܗd
(
t
\xe8
\xdd
 *t;

738 *
\xfd
, **
wp
;

739 
nb
;

741 i\xe0(
t
->
w\xdcds
[1] =\xf0
NULL
) {

742
	`\x94r
("Usage:\x84ead\x82ame ...");

745 
wp
 =
t
->
w\xdcds
 + 1; *wp; wp++) {

746 
\xfd
 =
e
.
l\x9a\x95
; c\xb0<
\x96\x9a\x95
 - 1; cp++)

747 i\xe0((
nb
 =
	`\xbbad
(0,
\xfd
, (*cp))) != (*cp) || *cp == '\n' ||

748
wp
[1] &&
	`\x\xafy
(*
\xfd
,
ifs
->
v\x\xabue
))

750 *
\xfd
 = 0;

751 i\xe0(
nb
 <= 0)

753
	`\xa3tv\x\xab
(
	`lookup
(*
wp
),
e
.
l\x9a\x95
);

755  (
nb
 <= 0);

756
	}
}

758
	$d\xdbv\x\xab
(
t
\xe8
\xdd
 *t;

760 
	`wdch\xac
();

762  (
	`RUN
(
aw\xdcdli\xa1
,
t
->
w\xdcds
 + 1,
wdch\xac
));

763
	}
}

765
	$dٿp
(
t
\xe8
\xdd
 *t;

767 *
s
;

768 
n
,
i
;

770 i\xe0(
t
->
w\xdcds
[1] =\xf0
NULL
) {

771 
i
 = 0; i <
NSIG
; i++)

772 i\xe0(
\x8c\xad
[
i
]) {

773
	`\xb4n
(
i
);

774
	`\xb4s
(": ");

775
	`\xb4s
(
\x8c\xad
[
i
]);

776
	`\xb4s
("\n");

780
n
 =
	`g\x91sig
((
s
 =
t
->
w\xdcds
[2]\xe8!\xf0
NULL
 ? s :\x81->words[1]);

781
	`x\xe4\x93
(
\x8c\xad
[
n
]);

782
\x8c\xad
[
n
] = 0;

783 i\xe0(
s
 !\xf0
NULL
) {

784 i\xe0((
i
 =
	`\xa1\xbe\x92
(
s
 =
t
->
w\xdcds
[1])) != 0) {

785
\x8c\xad
[
n
] =
	`\xa1r\xa7ve
(
s
, 0);

786
	`\xa3tsig
(
n
,
sig
);

788
	`\xa3tsig
(
n
,
SIG_IGN
);

790
	`\xa3tsig
(
n
, (\xc0=\xf0
SIGINT
 ||\x82 =\xf0
SIGQUIT
\xe8&&
\x8flk\x9ag
 ?
SIG_IGN
 :
SIG_DFL
);

792
	}
}

794
	$g\x91sig
(
s
) *s;

796 
n
;

798 i\xe0((
n
 =
	`g\x91n
(
s
)\xe8< 0 ||\x82 >\xf0
NSIG
) {

799
	`\x94r
("trap: bad signal\x82umber");

800
n
 = 0;

802  (
n
);

803
	}
}

805
	$\xa3tsig
(
n
,
f
) n;

806 (*
f
)();

808 i\xe0(
n
 == 0)

810 i\xe0(
	`sig\xc7l
(
n
,
SIG_IGN
\xe8!\xf0SIG_IGN ||
ou\xb9\xb\xe5
[n]) {

811
ou\xb9\xb\xe5
[
n
] = 1;

812
	`sig\xc7l
(
n
,
f
);

814
	}
}

816
	$g\x91n
(
as
) *as;

818 *
s
;

819 
n
,
m
;

821
s
 =
as
;

822
m
 = 1;

823 i\xe0(*
s
 == '-') {

824
m
 = -1;

825
s
++;

827 
n
 = 0;
	`dig\x99
(*
s
); s++)

828
n
 = (\xc0* 10\xe8+ (*
s
 - '0');

829 i\xe0(*
s
) {

830
	`\xb4s
(
as
);

831
	`\x94r
(": bad\x82umber");

833  (
n
 *
m
);

834
	}
}

836
	$dob\xbbak
(
t
\xe8
\xdd
 *t;

838  (
	`brkc\xd\xa9\x9a
(
t
->
w\xdcds
[1], 1));

839
	}
}

841
	$doc\xd\xa9\x9aue
(
t
\xe8
\xdd
 *t;

843  (
	`brkc\xd\xa9\x9a
(
t
->
w\xdcds
[1], 0));

844
	}
}

846 
	$brkc\xd\xa9\x9a
(
\xfd
,
v\x\xab
)

847 *
\xfd
;

849 
brkc\xda
 *
bc
;

850 
\xc6
;

852
\xc6
 =
\xfd
 =\xf0
NULL
 ? 1 :
	`g\x91n
(cp);

853 i\xe0(
\xc6
 <= 0)

854
\xc6
 = 999;

856 i\xe0((
bc
 =
brkli\xa1
\xe8=\xf0
NULL
)

858
brkli\xa1
 =
bc
->
\xc3x\x8eev
;

859 } --
\xc6
);

860 i\xe0(
\xc6
) {

861
	`\x94r
("bad break/continue\x86evel");

864
isb\xbbak
 =
v\x\xab
;

865
	`l\xdagjmp
(
bc
->
brk\xb1
, 1);

867
	}
}

869
	$d\xdbx\x99
(
t
\xe8
\xdd
 *t;

871 *
\xfd
;

873
exec\xe6g
 = 0;

874 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8!\xf0
NULL
)

875
ex\xa1\xa9
 =
	`g\x91n
(
\xfd
);

876
	`\xcbave
();

877
	}
}

879
	$d\xdbxp\xd\xf9
(
t
\xe8
\xdd
 *t;

881
	`rdexp
(
t
->
w\xdcds
 + 1,
exp\xd\xf9
,
EXPORT
);

883
	}
}

885
	$dܗd\xd\xaey
(
t
\xe8
\xdd
 *t;

887
	`rdexp
(
t
->
w\xdcds
 + 1,
r\xd\xaey
,
RONLY
);

889
	}
}

891 
	$rdexp
(
wp
,
f
,
key
) **wp;

892 (*
f
)();

893 
key
;

895 i\xe0(*
wp
 !\xf0
NULL
) {

896 ; *
wp
 !\xf0
NULL
; wp++)

897 i\xe0(
	`check\xc7me
(*
wp
))

898 (*
f
)(
	`lookup
(*
wp
));

900
	`badid
(*
wp
);

902
	`putvli\xa1
(
key
, 1);

903
	}
}

905 
	$badid
(
s
) *s;

907
	`\xb4s
(
s
);

908
	`\x94r
(": bad identifier");

909
	}
}

911
	$do\xa3t
(
t
\xe8
\xdd
 *t;

913 
v\xac
 *
vp
;

914 *
\xfd
;

915 
n
;

917 i\xe0((
\xfd
 =
t
->
w\xdcds
[1]\xe8=\xf0
NULL
) {

918 
vp
 =
vli\xa1
; vp; v\xb0\xf0vp->
\xc3xt
)

919
	`v\xa\xfdut
(
vp
->
\xc7me
, 1);

922 i\xe0(*
\xfd
 == '-') {

923
t
->
w\xdcds
++;

924 i\xe0(*++
\xfd
 == 0)

925
\xe6ag
['x'] = flag['v'] = 0;

927 ; *
\xfd
; cp++)

928 *
\xfd
) {

930 i\xe0(!
\x8flk\x9ag
)

931
\xe6ag
['e']++;

935 i\xe0(*
\xfd
 >= 'a' && *cp <= 'z')

936
\xe6ag
[*
\xfd
]++;

939
	`\xa3tdash
();

941 i\xe0(
t
->
w\xdcds
[1]) {

942
t
->
w\xdcds
[0] =
d\xdev
[0];

943 
n
 = 1;
t
->
w\xdcds
[n];\x82++)

944
	`\xa3\x8f\xbba
((*)
t
->
w\xdcds
[
n
], 0);

945
d\xdec
 =
n
 - 1;

946
d\xdev
 =
t
->
w\xdcds
;

947
	`\xa3tv\x\xab
(
	`lookup
("#"),
	`pu\x8a
(
d\xdec
));

948
	`\xa3\x8f\xbba
((*)(
d\xdev
 - 1), 0);

951
	}
}

953
	$v\xa\xfdut
(
s
,
out
) *s;

955 i\xe0(
	`ˊum
(*
s
)) {

956
	`wr\x99e
(
out
,
s
,
	`\xa1\xbe\x92
(s));

957
	`wr\x99e
(
out
, "\n", 1);

959
	}
}

961 
	sbu\x9\x91\x9a
 {

962 *
	mcomm\x\xafd
;

963 (*
	m\xe2
)();

965 
bu\x9\x91\x9a

	gbu\x9\x91\x9a
[] = {

966 ":",
d\xd\x97b\x96
, "cd",
dochd\x9c
, "shi\xe1",
doshi\xe1
, "exec",
d\xdbxec
,

967 "wa\x99",
dowa\x99
, "\xbbad",
dܗd
, "ev\xae",
d\xdbv\x\xab
, "\x8c\xad",
dٿp
,

968 "b\xbbak",
dob\xbbak
, "c\xdat\x9aue",
doc\xd\xa9\x9aue
, "ex\x99",
d\xdbx\x99
, "exp\xdct",
d\xdbxp\xd\xf9
,

969 "\xbbad\xdaly",
dܗd\xd\xaey
, "\xa3t",
do\xa3t
, ".",
dod\xd9
, "umask",
doumask
,

970 "log\x9a",
d\xdeog\x9a
, "newgrp", dologin, 0,

973 (*
	$\x9abu\x9\x91
(
s
))() *s;

975 
bu\x9\x91\x9a
 *
bp
;

977 
bp
 =
bu\x9\x91\x9a
; bp->
comm\x\xafd
 !\xf0
NULL
; bp++)

978 i\xe0(
	`\xa1rcmp
(
bp
->
comm\x\xafd
,
s
) == 0)

979  (
bp
->
\xe2
);

980  (
NULL
);

981
	}
}

	@commands/sh4.cpp

7 
	~"\x94\xbao.h\xb5
"

8 
	~"\xa3tjmp.h\xb5
"

9 
	~"sh.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

11 
	~"\xa1\xa9.h\xb5
"

25 *
b\xc\xe2k
();

26 
g\xbfve
();

27 
ex\xb7nd
();

28 
d\xde\xc\xe4
();

30 **
	$ev\x\xab
(
\xad
,
f
)

31 **
\xad
;

33 
wdblock
 *
wb
;

34 **
wp
;

35
jmp_buf

ev
;

37
\x9aw\xdcd
++;

38
wp
 =
NULL
;

39
wb
 =
NULL
;

40
\x94\xbdt
 = &
ev
;

41 i\xe0(
	`\xc3w\x92v
(
	`\xa3tjmp
(
ev
)) == 0) {

42
wb
 =
	`addw\xdcd
((*)0, wb);

43 
	`ex\xb7nd
(*
\xad
++, &
wb
,
f
))

45
wb
 =
	`addw\xdcd
((*)0, wb);

46
wp
 =
	`g\x91w\xdcds
(
wb
) + 1;

47
	`qu\x99\x92v
();

49
g\xe6g
 = 1;

50
\x9aw\xdcd
--;

51  (
g\xe6g
 ?
NULL
 :
wp
);

52
	}
}

60 **
	$mak\x92v
(
wp
)

61 **
wp
;

63 
wdblock
 *
wb
;

64 
v\xac
 *
vp
;

66
wb
 =
NULL
;

67 
vp
 =
vli\xa1
; vp; v\xb0\xf0vp->
\xc3xt
)

68 i\xe0(
vp
->
\xa1\xa9us
 &
EXPORT
)

69
wb
 =
	`addw\xdcd
(
vp
->
\xc7me
, wb);

70
wb
 =
	`addw\xdcd
((*)0, wb);

71  (
	`g\x91w\xdcds
(
wb
));

72
	}
}

74 *
	$ev\x\xab\xa1r
(
\xfd
,
f
)

75 *
\xfd
;

76 
f
;

78 
wdblock
 *
wb
;

80
\x9aw\xdcd
++;

81
wb
 =
NULL
;

82 i\xe0(
	`ex\xb7nd
(
\xfd
, &
wb
,
f
)) {

83 i\xe0(
wb
 =\xf0
NULL
 || wb->
w_nw\xdcd
 =\xf00 || (
\xfd
 = wb->
w_w\xdcds
[0]) == NULL)

84
\xfd
 = "";

85
	`DELETE
(
wb
);

87
\xfd
 =
NULL
;

88
\x9aw\xdcd
--;

89  (
\xfd
);

90
	}
}

92 
	$ex\xb7nd
(
\xfd
,
wbp
,
f
)

93 *
\xfd
;

94 
wdblock
 **
wbp
;

96
jmp_buf

ev
;

98
g\xe6g
 = 0;

99 i\xe0(
\xfd
 =\xf0
NULL
)

101 i\xe0(!
	`\x\xafys
("$`'\"",
\xfd
\xe8&& !\xaays(
ifs
->
v\x\xabue
, cp\xe8&& ((
f
 &
DOGLOB
) == 0 || !anys("[*?", cp))) {

102
\xfd
 =
	`\xa1r\xa7ve
(\xfd,
\xac\x97num
);

103 i\xe0(
f
 &
DOTRIM
)

104
	`unqu\xd9e
(
\xfd
);

105 *
wbp
 =
	`addw\xdcd
(
\xfd
, *wbp);

108
\x94\xbdt
 = &
ev
;

109 i\xe0(
	`\xc3w\x92v
(
	`\xa3tjmp
(
ev
)) == 0) {

110
	`PUSHIO
(
aw\xdcd
,
\xfd
,
\xa1rch\xac
);

111
e
.
ioba\xa3
 =\x83.
i\xdd
;

112 (
\xfd
 =
	`b\xc\xe2k
(
f
)\xe8&&
g\xe6g
 == 0) {

113
e
.
l\x9a\x95
 =
\xfd
;

114
\xfd
 =
	`\xa1r\xa7ve
(\xfd,
\xac\x97num
);

115 i\xe0((
f
 &
DOGLOB
) == 0) {

116 i\xe0(
f
 &
DOTRIM
)

117
	`unqu\xd9e
(
\xfd
);

118 *
wbp
 =
	`addw\xdcd
(
\xfd
, *wbp);

120 *
wbp
 =
	`glob
(
\xfd
, *wbp);

122
	`qu\x99\x92v
();

124
g\xe6g
 = 1;

125  (
g\xe6g
 == 0);

126
	}
}

131 *
	$b\xc\xe2k
(
f
) {

132 
c
,
c1
;

133 *
\xa5
;

135
\xa5
 =
e
.
l\x9a\x95
;

137
lo\xdd
:

138 
c
 =
	`subg\x91c
('"', 0)) {

140 i\xe0(
\xa5
 =\xf0
e
.
l\x9a\x95
)

142 *
e
.
l\x9a\x95
++ = 0;

143  (
\xa5
);

146 i\xe0(
f
 &
DOBLANK
 &&
	`\x\xafy
(
c
,
ifs
->
v\x\xabue
))

147 
lo\xdd
;

152 i\xe0(
	`INSUB
())

154 
c1
 =
c
; (\xf8\xf0
	`subg\x91c
(c1, 1)) != c1;) {

155 i\xe0(
c
 == 0)

157 i\xe0(
c
 =\xf0'\'' || !
	`\x\xafy
(c, "$`\""))

158
c
 |\xf0
QUOTE
;

159 *
e
.
l\x9a\x95
++ =
c
;

161
c
 = 0;

163
	`ung\x91
(
c
);

165
c
 =
	`subg\x91c
('"', 0);

166 i\xe0(
c
 =\xf00 ||
f
 &
DOBLANK
 &&
	`\x\xafy
(c,
ifs
->
v\x\xabue
\xe8|| !
	`INSUB
() &&\x87ny(c, "\"'`")) {

167
	`ung\x91
(
c
);

168 i\xe0(
	`\x\xafy
(
c
, "\"'`"))

169 
lo\xdd
;

172 *
e
.
l\x9a\x95
++ =
c
;

174 *
e
.
l\x9a\x95
++ = 0;

175  (
\xa5
);

176
	}
}

181 
	$subg\x91c
(
ec
,
qu\xd9ed
)

182 
ec
;

183 
qu\xd9ed
;

185 
c
;

187
aga\x9a
:

188
c
 =
	`g\x91c
(
ec
);

189 i\xe0(!
	`INSUB
(\xe8&&
ec
 != '\'') {

190 i\xe0(
c
 == '`') {

191 i\xe0(
	`g\xbfve
(
qu\xd9ed
) == 0)

193
e
.
i\xdd
->
\x8fsk
 =
XGRAVE
;

194 
aga\x9a
;

196 i\xe0(
c
 =\xf0'$' && (\xf8\xf0
	`d\xde\xc\xe4
(
qu\xd9ed
)) == 0) {

197
e
.
i\xdd
->
\x8fsk
 =
XDOLL
;

198 
aga\x9a
;

201  (
c
);

202
	}
}

207 
	$d\xde\xc\xe4
(
qu\xd9ed
)

208 
qu\xd9ed
;

210 
\xd9ask
;

211 
io
 *
oi\xdd
;

212 *
d\xd\x95
;

213 *
s
,
c
, *
\xfd
;

214 
v\xac
 *
vp
;

216
c
 =
	`\xbbadc
();

217
s
 =
e
.
l\x9a\x95
;

218 i\xe0(
c
 != '{') {

219 *
e
.
l\x9a\x95
++ =
c
;

220 i\xe0(
	`ˉ\x94
(
c
)) {

221 (
c
 =
	`\xbbadc
()\xe8!\xf00 &&
	`ˊum
(c))

222 i\xe0(
e
.
l\x9a\x95
 <
\x96\x9a\x95
)

223 *
e
.
l\x9a\x95
++ =
c
;

224
	`ung\x91
(
c
);

226
c
 = 0;

228
oi\xdd
 =
e
.
i\xdd
;

229
\xd9ask
 =
e
.
i\xdd
->
\x8fsk
;

230
e
.
i\xdd
->
\x8fsk
 =
XOTHER
;

231 (
c
 =
	`subg\x91c
('"', 0)) != 0 && c != '}' && c != '\n')

232 i\xe0(
e
.
l\x9a\x95
 <
\x96\x9a\x95
)

233 *
e
.
l\x9a\x95
++ =
c
;

234 i\xe0(
oi\xdd
 =\xf0
e
.
i\xdd
)

235
e
.
i\xdd
->
\x8fsk
 =
\xd9ask
;

236 i\xe0(
c
 != '}') {

237
	`\x94r
("unclosed ${");

238
g\xe6g
++;

239  (
c
);

242 i\xe0(
e
.
l\x9a\x95
 >\xf0
\x96\x9a\x95
) {

243
	`\x94r
("string in ${}\x81oo\x86ong");

244
g\xe6g
++;

245
e
.
l\x9a\x95
 -= 10;

247 *
e
.
l\x9a\x95
 = 0;

248 i\xe0(*
s
)

249 
\xfd
 =
s
 + 1; *cp; cp++)

250 i\xe0(
	`\x\xafy
(*
\xfd
, "=-+?")) {

251
c
 = *
\xfd
;

252 *
\xfd
++ = 0;

255 i\xe0(
s
[1] == 0 && (*s == '*' || *s == '@')) {

256 i\xe0(
d\xdec
 > 1) {

259
e
.
l\x9a\x95
 =
s
;

260
	`PUSHIO
(
aw\xdcdli\xa1
,
d\xdev
 + 1,
d\xdech\xac
);

263
s
[0] = '1';

264
s
[1] = 0;

267
vp
 =
	`lookup
(
s
);

268 i\xe0((
d\xd\x95
 =
vp
->
v\x\xabue
\xe8=\xf0
nu\x\xfb
) {

269 
c
) {

271 i\xe0(
	`dig\x99
(*
s
)) {

272
	`\x94r
("cannot use ${...=...} with $n");

273
g\xe6g
++;

276
	`\xa3tv\x\xab
(
vp
,
\xfd
);

277
d\xd\x95
 =
vp
->
v\x\xabue
;

281
d\xd\x95
 =
	`\xa1r\xa7ve
(
\xfd
,
\xac\x97num
);

285 i\xe0(*
\xfd
 == 0) {

286
	`\xb4s
("missing value for ");

287
	`\x94r
(
s
);

289
	`\x94r
(
\xfd
);

290
g\xe6g
++;

293 } i\xe0(
c
 == '+')

294
d\xd\x95
 =
	`\xa1r\xa7ve
(
\xfd
,
\xac\x97num
);

295 i\xe0(
\xe6ag
['u'] &&
d\xd\x95
 =\xf0
nu\x\xfb
) {

296
	`\xb4s
("unset variable: ");

297
	`\x94r
(
s
);

298
g\xe6g
++;

300
e
.
l\x9a\x95
 =
s
;

301
	`PUSHIO
(
aw\xdcd
,
d\xd\x95
,
\xa1rch\xac
);

303
	}
}

308 
	$g\xbfve
(
qu\xd9ed
)

309 
qu\xd9ed
;

311 *
\xfd
;

312 
i
;

313 
pf
[2];

315 
\xfd
 =
e
.
i\xdd
->
\xacg
.
aw\xdcd
; *cp != '`'; cp++)

316 i\xe0(*
\xfd
 == 0) {

317
	`\x94r
("no closing `");

320 i\xe0(
	`ݒp\x9de
(
pf
) < 0)

322 i\xe0((
i
 =
	`f\xdck
()) == -1) {

323
	`\x\xe3o\xa3p\x9de
(
pf
);

324
	`\x94r
("try\x87gain");

327 i\xe0(
i
 != 0) {

328
e
.
i\xdd
->
\xacg
.
aw\xdcd
 = ++
\xfd
;

329
	`\x\xe3o\xa3
(
pf
[1]);

330
	`PUSHIO
(
af\x9\x93
,
	`\xbbm\xad
(
pf
[0]),
qu\xd9ed
 ?
qg\xbfvech\xac
 :
g\xbfvech\xac
);

333 *
\xfd
 = 0;

335 
i
 = 0; i <
NSIG
; i++)

336 i\xe0(
ou\xb9\xb\xe5
[
i
] &&
	`sig\xc7l
(i,
SIG_IGN
) != SIG_IGN)

337
	`sig\xc7l
(
i
,
SIG_DFL
);

338
	`dup2
(
pf
[1], 1);

339
	`\x\xe3o\xa3p\x9de
(
pf
);

340
\xe6ag
['e'] = 0;

341
\xe6ag
['v'] = 0;

342
\xe6ag
['n'] = 0;

343
\xfd
 =
	`\xa1r\xa7ve
(
e
.
i\xdd
->
\xacg
.
aw\xdcd
, 0);

344
	`䓬\x97
(
\xac\x97num
 = 1);

345
e
.
\xdbnv
 =
NULL
;

346
e
.
i\xdd
 = (e.
ioba\xa3
 =
io\xa1ack
) - 1;

347
	`unqu\xd9e
(
\xfd
);

348
\x8flk\x9ag
 = 0;

349
	`PUSHIO
(
aw\xdcd
,
\xfd
,
\xc6ch\xac
);

350
	`\xd\xabcomm\x\xafd
();

351
	`ex\x99
(1);

352
	}
}

354 *
	$unqu\xd9e
(
as
)

355 *
as
;

357 *
s
;

359 i\xe0((
s
 =
as
\xe8!\xf0
NULL
)

360 *
s
)

361 *
s
++ &\xf0~
QUOTE
;

362  (
as
);

363
	}
}

368 
	#DIRSIZ
 14

	)

369 
	sd\x9\xfb\xf9
 {

370 
	md_\x9ao
;

371 
	md_\xc7me
[
DIRSIZ
];

377 
	#sc\xddy
(
x
\xe8
	`\xa1r\xa7ve
((x),
\xac\x97num
)

	)

378 
	#BLKSIZ
 512

	)

379 
	#NDENT
 ((
BLKSIZ
 + (
d\x9\xfb\xf9
\xe8- 1\xe8/ (d\x9ce\xf9))

	)

381 
wdblock
 *
	g\x\xe3
, *
	g\xc6
;

382 
	g\xa5\x\xe3
[] = "[?*";

383 
x\xa1rcmp
();

384 *
g\x92\x94\xa9e
();

385 
\xaay\xa5\xfe
();

387 
wdblock
 *
	$glob
(
\xfd
,
wb
)

388 *
\xfd
;

389 
wdblock
 *
wb
;

391 
i
;

392 *
\xb5
;

394 i\xe0(
\xfd
 == 0)

395  (
wb
);

396
i
 = 0;

397 
\xb5
 =
\xfd
; *pp;\x85p++)

398 i\xe0(
	`\x\xafy
(*
\xb5
,
\xa5\xfe
))

399
i
++;

400 i\xe0(!
	`\x\xafy
(*
\xb5
 & ~
QUOTE
,
\xa5\xfe
))

401 *
\xb5
 &\xf0~
QUOTE
;

402 i\xe0(
i
 != 0) {

403 
\xfe
 =
	`addw\xdcd
(
	`sc\xddy
(
\xfd
), (
wdblock
 *)0);
	`\x\xafy\xa5\x\xe3
(\xfe); c\xc8\xf0
\xc6
) {

404
\xc6
 =
	`\xc3ww\xdcd
(
\xfe
->
w_nw\xdcd
 * 2);

405 
i
 = 0; i <
\xfe
->
w_nw\xdcd
; i++) {

406 
\xb5
 =
\xfe
->
w_w\xdcds
[
i
]; *pp;\x85p++)

407 i\xe0(
	`\x\xafy
(*
\xb5
,
\xa5\xfe
)) {

408
	`glob\xc7me
(
\xfe
->
w_w\xdcds
[
i
],
\xb5
);

411 i\xe0(*
\xb5
 == '\0')

412
\xc6
 =
	`addw\xdcd
(
	`sc\xddy
(
\xfe
->
w_w\xdcds
[
i
]),\x82l);

414 
i
 = 0; i <
\xfe
->
w_nw\xdcd
; i++)

415
	`DELETE
(
\xfe
->
w_w\xdcds
[
i
]);

416
	`DELETE
(
\xfe
);

418 
i
 = 0; i <
\xfe
->
w_nw\xdcd
; i++)

419
	`unqu\xd9e
(
\xfe
->
w_w\xdcds
[
i
]);

420
	`glob0
((*)
\xfe
->
w_w\xdcds
, cl->
w_nw\xdcd
, (*),
x\xa1rcmp
);

421 i\xe0(
\xfe
->
w_nw\xdcd
) {

422 
i
 = 0; i <
\xfe
->
w_nw\xdcd
; i++)

423
wb
 =
	`addw\xdcd
(
\xfe
->
w_w\xdcds
[
i
], wb);

424
	`DELETE
(
\xfe
);

425  (
wb
);

428
wb
 =
	`addw\xdcd
(
	`unqu\xd9e
(
\xfd
), wb);

429  (
wb
);

430
	}
}

432
	$glob\xc7me
(
we
,
\xb5
) *we;

433 *
\xb5
;

435 *
\xc5
, *
\xfd
;

436 *
\xc7me
, *
gp
, *
dp
;

437 
dn
,
j
,
n
,
k
;

438 
d\x9\xfb\xf9

\x92t
[
NDENT
];

439 
d\xc7me
[
DIRSIZ
 + 1];

440 
\xa1\xa9

dbuf
;

442 
\xc5
 =
we
;\x82\xb0!\xf0
\xb5
;\x85p--)

443 i\xe0(
\xb5
[-1] == '/')

445 
dp
 =
\xfd
 =
	`\xa5a\xfb
(
\xb5
 -
\xc5
 + 3);\x82p <\x85p;)

446 *
\xfd
++ = *
\xc5
++;

447 *
\xfd
++ = '.';

448 *
\xfd
 = '\0';

449 
gp
 =
\xfd
 =
	`\xa5a\xfb
(
	`\xa1\xbe\x92
(
\xb5
\xe8+ 1); *
\xc5
 && *np != '/';)

450 *
\xfd
++ = *
\xc5
++;

451 *
\xfd
 = '\0';

452
dn
 =
	`ݒ
(
dp
, 0);

453 i\xe0(
dn
 < 0) {

454
	`DELETE
(
dp
);

455
	`DELETE
(
gp
);

458
d\xc7me
[
DIRSIZ
] = '\0';

459 (
n
 =
	`\xbbad
(
dn
, (*)
\x92t
, (ent))) >= (*ent)) {

460
n
 /\xf0(*
\x92t
);

461 
j
 = 0; j <
n
; j++) {

462 i\xe0(
\x92t
[
j
].
d_\x9ao
 == 0)

464
	`\xa1\xba\xfdy
(
d\xc7me
,
\x92t
[
j
].
d_\xc7me
,
DIRSIZ
);

465 i\xe0(
d\xc7me
[0] == '.' && (dname[1] == '\0' || dname[1] == '.' && dname[2] == '\0'))

466 i\xe0(*
gp
 != '.')

468 
k
 = 0; k <
DIRSIZ
; k++)

469 i\xe0(
	`\x\xafy
(
d\xc7me
[
k
],
\xa5\xfe
))

470
d\xc7me
[
k
] |\xf0
QUOTE
;

471 i\xe0(
	`gm\xa9ch
(
d\xc7me
,
gp
)) {

472
\xc7me
 =
	`g\x92\x94\xa9e
(
we
,
\xb5
,
d\xc7me
,
\xc5
);

473 i\xe0(*
\xc5
 && !
	`\x\xafys
\xd2p,
\xa5\xfe
)) {

474 i\xe0(
	`\xa1\xa9
(
\xc7me
, &
dbuf
)) {

475
	`DELETE
(
\xc7me
);

479
\xc6
 =
	`addw\xdcd
(
\xc7me
,\x82l);

483
	`\x\xe3o\xa3
(
dn
);

484
	`DELETE
(
dp
);

485
	`DELETE
(
gp
);

486
	}
}

493 *
	$g\x92\x94\xa9e
(
\xa1\xact1
,
\x92d1
,
midd\xcb
,
\x92d
)

494 *
\xa1\xact1
;

495 *
\x92d1
;

496 *
midd\xcb
, *
\x92d
;

498 *
p
;

499 *
\xdd
, *
xp
;

501
p
 =
\xdd
 =
	`\xa5a\xfb
(
\x92d1
 -
\xa1\xact1
 +
	`\xa1\xbe\x92
(
midd\xcb
\xe8+ s\x8c\xcbn(
\x92d
) + 2);

502 
xp
 =
\xa1\xact1
; x\xb0!\xf0
\x92d1
;)

503 *
\xdd
++ = *
xp
++;

504 
xp
 =
midd\xcb
; (*
\xdd
++ = *xp++) != '\0';)

506
\xdd
--;

507 
xp
 =
\x92d
; (*
\xdd
++ = *xp++) != '\0';)

509  (
p
);

510
	}
}

512 
	$\x\xafy\xa5\x\xe3
(
wb
)

513 
wdblock
 *
wb
;

515 
i
;

516 **
wd
;

518
wd
 =
wb
->
w_w\xdcds
;

519 
i
 = 0; i <
wb
->
w_nw\xdcd
; i++)

520 i\xe0(
	`\x\xafys
(
\xa5\xfe
, *
wd
++))

523
	}
}

525 
	$x\xa1rcmp
(
p1
,
p2
)

526 *
p1
, *
p2
;

528  (
	`\xa1rcmp
(*(**)
p1
, *(**)
p2
));

529
	}
}

534 *
mem\xfdy
();

536 
	#NSTART
 16

	)

538 
wdblock
 *
	$\xc3ww\xdcd
(
nw
)

539 
nw
;

541 
wdblock
 *
wb
;

543
wb
 = (
wdblock
 *)
	`\xa5a\xfb
((*wb\xe8+
nw
 * (*));

544
wb
->
w_bsize
 =
nw
;

545
wb
->
w_nw\xdcd
 = 0;

546  (
wb
);

547
	}
}

549 
wdblock
 *
	$addw\xdcd
(
wd
,
wb
)

550 *
wd
;

551 
wdblock
 *
wb
;

553 
wdblock
 *
wb2
;

554 
nw
;

556 i\xe0(
wb
 =\xf0
NULL
)

557
wb
 =
	`\xc3ww\xdcd
(
NSTART
);

558 i\xe0((
nw
 =
wb
->
w_nw\xdcd
\xe8>\xf0wb->
w_bsize
) {

559
wb2
 =
	`\xc3ww\xdcd
(
nw
 * 2);

560
	`mem\xfdy
((*)
wb2
->
w_w\xdcds
, (*)
wb
->w_w\xdcds,
nw
 * (*));

561
wb2
->
w_nw\xdcd
 =
nw
;

562
	`DELETE
(
wb
);

563
wb
 =
wb2
;

565
wb
->
w_w\xdcds
[wb->
w_nw\xdcd
++] =
wd
;

566  (
wb
);

567
	}
}

569 **
	$g\x91w\xdcds
(
wb
)

570 
wdblock
 *
wb
;

572 **
wd
;

573 
nb
;

575 i\xe0(
wb
 =\xf0
NULL
)

576  (
NULL
);

577 i\xe0(
wb
->
w_nw\xdcd
 == 0) {

578
	`DELETE
(
wb
);

579  (
NULL
);

581
wd
 = (**)
	`\xa5a\xfb
(
nb
 = (*wd\xe8*
wb
->
w_nw\xdcd
);

582
	`mem\xfdy
((*)
wd
, (*)
wb
->
w_w\xdcds
,
nb
);

583
	`DELETE
(
wb
);

584  (
wd
);

585
	}
}

587 (*
	gfunc
)();

588 
	gglobv
;

590
	$glob0
(
a0
,
a1
,
a2
,
a3
) *a0;

591 
a1
;

592 
a2
;

593 (*
a3
)();

595
func
 =
a3
;

596
globv
 =
a2
;

597
	`glob1
(
a0
,\x870 +
a1
 *
a2
);

598
	}
}

600
	$glob1
(
ba\xa3
,
lim
) *base, *lim;

602 *
i
, *
j
;

603 
v2
;

604 **
k
;

605 *
͌
, *
h\xb1r
;

606 
c
;

607 
n
;

609
v2
 =
globv
;

611
t\xdd
:

612 i\xe0((
n
 =
lim
 -
ba\xa3
\xe8<\xf0
v2
)

614
n
 =
v2
 * (n / (2 * v2));

615
h\xb1r
 =
͌
 =
ba\xa3
 +
n
;

616
i
 =
ba\xa3
;

617
j
 =
lim
 -
v2
;

619 i\xe0(
i
 <
͌
) {

620 i\xe0((
c
 = (*
func
)(
i
,
͌
)) == 0) {

621
	`glob2
(
i
,
͌
 -\xf0
v2
);

624 i\xe0(
c
 < 0) {

625
i
 +\xf0
v2
;

630
beg\x9a
:

631 i\xe0(
j
 >
h\xb1r
) {

632 i\xe0((
c
 = (*
func
)(
h\xb1r
,
j
)) == 0) {

633
	`glob2
(
h\xb1r
 +\xf0
v2
,
j
);

634 
beg\x9a
;

636 i\xe0(
c
 > 0) {

637 i\xe0(
i
 =\xf0
͌
) {

638
	`glob3
(
i
,
h\xb1r
 +\xf0
v2
,
j
);

639
i
 =
͌
 +\xf0
v2
;

640 
beg\x9a
;

642
	`glob2
(
i
,
j
);

643
j
 -\xf0
v2
;

644
i
 +\xf0
v2
;

647
j
 -\xf0
v2
;

648 
beg\x9a
;

651 i\xe0(
i
 =\xf0
͌
) {

652 i\xe0(
͌
 -
ba\xa3
 >\xf0
lim
 -
h\xb1r
) {

653
	`glob1
(
h\xb1r
 +
v2
,
lim
);

654
lim
 =
͌
;

656
	`glob1
(
ba\xa3
,
͌
);

657
ba\xa3
 =
h\xb1r
 +
v2
;

659 
t\xdd
;

662
	`glob3
(
j
,
͌
 -\xf0
v2
,
i
);

663
j
 =
h\xb1r
 -\xf0
v2
;

665
	}
}

667
	$glob2
(
i
,
j
) *i, *j;

669 *
\x9adex1
, *
\x9adex2
,
c
;

670 
m
;

672
m
 =
globv
;

673
\x9adex1
 =
i
;

674
\x9adex2
 =
j
;

676
c
 = *
\x9adex1
;

677 *
\x9adex1
++ = *
\x9adex2
;

678 *
\x9adex2
++ =
c
;

679 } --
m
);

680
	}
}

682
	$glob3
(
i
,
j
,
k
) *i, *j, *k;

684 *
\x9adex1
, *
\x9adex2
, *
\x9adex3
;

685 
c
;

686 
m
;

688
m
 =
globv
;

689
\x9adex1
 =
i
;

690
\x9adex2
 =
j
;

691
\x9adex3
 =
k
;

693
c
 = *
\x9adex1
;

694 *
\x9adex1
++ = *
\x9adex3
;

695 *
\x9adex3
++ = *
\x9adex2
;

696 *
\x9adex2
++ =
c
;

697 } --
m
);

698
	}
}

	@commands/sh5.cpp

7 
	~"\x94\xbao.h\xb5
"

8 
	~"\xa3tjmp.h\xb5
"

9 
	~"sh.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

19 
	$g\x91c
(
ec
)

20 
ec
;

22 
c
;

24 i\xe0(
e
.
l\x9a\x95
 >
\x96\x9a\x95
) {

25 (
c
 =
	`\xbbadc
()) != '\n' && c)

27
	`\x94r
("input\x86ine\x81oo\x86ong");

28
g\xe6g
++;

29  (
c
);

31
c
 =
	`\xbbadc
();

32 i\xe0(
ec
 != '\'') {

33 i\xe0(
c
 == '\\') {

34
c
 =
	`\xbbadc
();

35 i\xe0(
c
 =\xf0'\n' &&
ec
 != '\"')

36  (
	`g\x91c
(
ec
));

37
c
 |\xf0
QUOTE
;

40  (
c
);

41
	}
}

43 
	$ung\x91
(
c
) {

44 i\xe0(
e
.
i\xdd
 >\xf0e.
ioba\xa3
)

45
e
.
i\xdd
->
\xb3ekc
 =
c
;

46
	}
}

48 
	$\xbbadc
() {

49 
c
;

50 
eofc
;

52 ;
e
.
i\xdd
 >\xf0e.
ioba\xa3
;\x83.iop--)

53 i\xe0((
c
 =
e
.
i\xdd
->
\xb3ekc
) != '\0') {

54
e
.
i\xdd
->
\xb3ekc
 = 0;

55  (
c
);

56 } i\xe0((
c
 = (*
e
.
i\xdd
->
io\xe2
)(&e.i\xdd->
\xacg
,\x83.iop)) != '\0') {

57 i\xe0(
c
 == -1) {

58
e
.
i\xdd
++;

61 i\xe0(
e
.
i\xdd
 =\xf0
io\xa1ack
)

62
	`i\xdbcho
(
c
);

63  (
c
);

65 i\xe0(
e
.
i\xdd
 >\xf0
io\xa1ack
 ||
muɞ\x9\xab
 &&
eofc
++ < 3)

67
	`\xcbave
();

69
	}
}

71 
	$i\xdbcho
(
c
) c;

73 i\xe0(
\xe6ag
['v'])

74
	`wr\x99e
(2, &
c
,  c);

75
	}
}

77 
	$pushio
(
\xacg
,
\xe2
\xe8
i\xd\xe4g
\x87rg;

78 (*
\xe2
)();

80 i\xe0(++
e
.
i\xdd
 >\xf0&
io\xa1ack
[
NPUSH
]) {

81
e
.
i\xdd
--;

82
	`\x94r
("Shell input\x82ested\x81oo deeply");

83
g\xe6g
++;

86
e
.
i\xdd
->
io\xe2
 =
\xe2
;

87
e
.
i\xdd
->
\xacg
 =\x87rg;

88
e
.
i\xdd
->
\xb3ekc
 = 0;

89
e
.
i\xdd
->
xch\xac
 = 0;

90
e
.
i\xdd
->
\xc6cou\xc1
 = 0;

91 i\xe0(
\xe2
 =\xf0
f\x9\x93ch\xac
 || f\xc0=\xf0
l\x9\xabch\xac
 || f\xc0=\xf0
\xc3xtch\xac
)

92
e
.
i\xdd
->
\x8fsk
 =
XIO
;

93 i\xe0(
\xe2
 =\xf0
g\xbfvech\xac
 || f\xc0=\xf0
qg\xbfvech\xac
)

94
e
.
i\xdd
->
\x8fsk
 =
XGRAVE
;

96
e
.
i\xdd
->
\x8fsk
 =
XOTHER
;

97
	}
}

99 
io
 *
	$\xa3tba\xa3
(
\x9d
)

100 
io
 *
\x9d
;

102 
io
 *
xp
;

104
xp
 =
e
.
ioba\xa3
;

105
e
.
ioba\xa3
 =
\x9d
;

106  (
xp
);

107
	}
}

116 
	$\xc6ch\xac
(
\xad
)

117 
i\xd\xe4g
 *
\xad
;

119 
c
;

121 i\xe0(
\xad
->
aw\xdcd
 =\xf0
NULL
)

123 i\xe0((
c
 = *
\xad
->
aw\xdcd
++) == 0) {

124
\xad
->
aw\xdcd
 =
NULL
;

127  (
c
);

128
	}
}

134 
	$wdch\xac
(
\xad
)

135 
i\xd\xe4g
 *
\xad
;

137 
c
;

138 **
wl
;

140 i\xe0((
wl
 =
\xad
->
aw\xdcdli\xa1
\xe8=\xf0
NULL
)

142 i\xe0(*
wl
 !\xf0
NULL
) {

143 i\xe0((
c
 = *(*
wl
)++) != 0)

144  (
c
 & 0177);

145
\xad
->
aw\xdcdli\xa1
++;

148
\xad
->
aw\xdcdli\xa1
 =
NULL
;

150
	}
}

156 
xxch\xac
(),
qqch\xac
();

158 
	$d\xdech\xac
(
\xad
)

159 
i\xd\xe4g
 *
\xad
;

161 *
wp
;

163 i\xe0((
wp
 = *
\xad
->
aw\xdcdli\xa1
++\xe8!\xf0
NULL
) {

164
	`PUSHIO
(
aw\xdcd
,
wp
, *
\xad
->
aw\xdcdli\xa1
 =\xf0
NULL
 ?
qqch\xac
 :
xxch\xac
);

168
	}
}

170 
	$xxch\xac
(
\xad
)

171 
i\xd\xe4g
 *
\xad
;

173 
c
;

175 i\xe0(
\xad
->
aw\xdcd
 =\xf0
NULL
)

177 i\xe0((
c
 = *
\xad
->
aw\xdcd
++) == '\0') {

178
\xad
->
aw\xdcd
 =
NULL
;

181  (
c
);

182
	}
}

184 
	$qqch\xac
(
\xad
)

185 
i\xd\xe4g
 *
\xad
;

187 
c
;

189 i\xe0(
\xad
->
aw\xdcd
 =\xf0
NULL
 || (
c
 = *ap->aword++) == '\0')

191  (
c
);

192
	}
}

197 
	$\xa1rch\xac
(
\xad
)

198 
i\xd\xe4g
 *
\xad
;

200 
c
;

202 i\xe0(
\xad
->
aw\xdcd
 =\xf00 || (
c
 = *ap->aword++) == 0)

204  (
c
);

205
	}
}

210 
	$f\x9\x93ch\xac
(
\xad
)

211 
i\xd\xe4g
 *
\xad
;

213 
i
;

214 
c
;

215 
\x94\xbao
;

218
i
 =
	`\xbbad
(
\xad
->
af\x9\x93
, &
c
, (c));

219 } 
i
 < 0 &&
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
EINTR
);

220  (
i
 =\xf0(
c
\xe8? c & 0177 : (
	`\x\xe3o\xa3f
(
\xad
->
af\x9\x93
), 0));

221
	}
}

227 
	$g\xbfvech\xac
(
\xad
,
i\xdd
)

228 
i\xd\xe4g
 *
\xad
;

229 
io
 *
i\xdd
;

231 
c
;

233 i\xe0((
c
 =
	`qg\xbfvech\xac
(
\xad
,
i\xdd
\xe8& ~
QUOTE
) == '\n')

234
c
 = ' ';

235  (
c
);

236
	}
}

238 
	$qg\xbfvech\xac
(
\xad
,
i\xdd
)

239 
i\xd\xe4g
 *
\xad
;

240 
io
 *
i\xdd
;

242 
c
;

244 i\xe0(
i\xdd
->
xch\xac
) {

245 i\xe0(
i\xdd
->
\xc6cou\xc1
) {

246
i\xdd
->
\xc6cou\xc1
--;

247  ('\n' |
QUOTE
);

249
c
 =
i\xdd
->
xch\xac
;

250
i\xdd
->
xch\xac
 = 0;

251 } i\xe0((
c
 =
	`f\x9\x93ch\xac
(
\xad
)) == '\n') {

252
i\xdd
->
\xc6cou\xc1
 = 1;

253 (
c
 =
	`f\x9\x93ch\xac
(
\xad
)) == '\n')

254
i\xdd
->
\xc6cou\xc1
++;

255
i\xdd
->
xch\xac
 =
c
;

256 i\xe0(
c
 == 0)

257  (
c
);

258
i\xdd
->
\xc6cou\xc1
--;

259
c
 = '\n';

261  (
c
 !\xf00 ? c |
QUOTE
 : 0);

262
	}
}

267 
	$l\x9\xabch\xac
(
\xad
)

268 
i\xd\xe4g
 *
\xad
;

270 
c
;

272 i\xe0((
c
 =
	`f\x9\x93ch\xac
(
\xad
)) == '\n') {

273 i\xe0(!
muɞ\x9\xab
) {

274
	`\x\xe3o\xa3f
(
\xad
->
af\x9\x93
);

275
\xad
->
af\x9\x93
 = -1;

278  (
c
);

279
	}
}

285 
	$\xc3xtch\xac
(
\xad
)

286 
i\xd\xe4g
 *
\xad
;

288 
c
;

290 i\xe0((
c
 =
	`f\x9\x93ch\xac
(
\xad
)) != 0)

291  (
c
);

292 i\xe0(
\x8flk\x9ag
 &&
e
.
i\xdd
 <\xf0
io\xa1ack
 + 1)

293
	`\xb4s
(
\xb4om\xb1
->
v\x\xabue
);

295
	}
}

297 
	$\xb4s
(
s
) *s;

299 i\xe0(*
s
)

300
	`wr\x99e
(2,
s
,
	`\xa1\xbe\x92
(s));

301
	}
}

303 
	$putc
(
c
) c;

305
	`wr\x99e
(2, &
c
,  c);

306
	}
}

308 
	$\xb4n
(
u
) u;

310
	`\xb4s
(
	`\x99\xdf
(
u
, 0));

311
	}
}

313 
	$\x\xe3o\xa3f
(
i
) i;

315 i\xe0(
i
 > 2)

316
	`\x\xe3o\xa3
(
i
);

317
	}
}

319 
	$\x\xe3o\xa3\x\xabl
() {

320 
u
;

322 
u
 =
NUFILE
; u <
NOFILE
;)

323
	`\x\xe3o\xa3
(
u
++);

324
	}
}

329 
	$\xbbm\xad
(
fd
)

330 
fd
;

332 
i
;

333 
m\xad
[
NOFILE
];

335 i\xe0(
fd
 <
e
.
iofd
) {

336 
i
 = 0; i <
NOFILE
; i++)

337
m\xad
[
i
] = 0;

339
m\xad
[
fd
] = 1;

340
fd
 =
	`dup
(fd);

341 } 
fd
 >\xf00 && fd <
e
.
iofd
);

342 
i
 = 0; i <
NOFILE
; i++)

343 i\xe0(
m\xad
[
i
])

344
	`\x\xe3o\xa3
(
i
);

345 i\xe0(
fd
 < 0)

346
	`\x94r
("too many files open in shell");

348  (
fd
);

349
	}
}

351 
	$ݒp\x9de
(
pv
)

352 *
pv
;

354 
i
;

356 i\xe0((
i
 =
	`p\x9de
(
pv
)) < 0)

357
	`\x94r
("can't create\x85ipe -\x81ry\x87gain");

358  (
i
);

359
	}
}

361 
	$\x\xe3o\xa3p\x9de
(
pv
) *pv;

363 i\xe0(
pv
 !\xf0
NULL
) {

364
	`\x\xe3o\xa3
(*
pv
++);

365
	`\x\xe3o\xa3
(*
pv
);

367
	}
}

371 *
mem\xfdy
();

377 
	sh\x94e
 {

378 *
	mh_\x8fg
;

379 
	mh_dosub
;

380 
iow\xdcd
 *
	mh_i\xdd
;

381 
h\x94e
 *
	mh_\xc3xt
;

382 } *
	gh\x94\x96i\xa1
;

384 
	sblock
 {

385 *
	mb_\xa1\xa\xf9
;

386 *
	mb_\xc3xt
;

387 *
	mb_l\x9\xab
;

388 
	mb_size
;

391 
block
 *
\xbbadh\x94e
();

393 
	#NCPB
 100

	)

395
	$m\xackh\x94e
(
s
,
i\xdd
) *s;

396 
iow\xdcd
 *
i\xdd
;

398 
h\x94e
 *
h
, *
lh
;

400
h
 = (
h\x94e
 *)
	`\xa5a\xfb
((here));

401 i\xe0(
h
 == 0)

403
h
->
h_\x8fg
 =
	`ev\x\xab\xa1r
(
s
,
DOSUB
);

404 i\xe0(
h
->
h_\x8fg
 == 0)

406
h
->
h_i\xdd
 =
i\xdd
;

407
h
->
h_\xc3xt
 =
NULL
;

408 i\xe0(
h\x94\x96i\xa1
 == 0)

409
h\x94\x96i\xa1
 =
h
;

411 
lh
 =
h\x94\x96i\xa1
;\x86h !\xf0
NULL
;\x86h =\x86h->
h_\xc3xt
)

412 i\xe0(
lh
->
h_\xc3xt
 == 0) {

413
lh
->
h_\xc3xt
 =
h
;

416
i\xdd
->
io_\xe6ag
 |\xf0
IOHERE
 |
IOXHERE
;

417 
s
 =
h
->
h_\x8fg
; *s; s++)

418 i\xe0(*
s
 &
QUOTE
) {

419
i\xdd
->
io_\xe6ag
 &\xf0~
IOXHERE
;

420 *
s
 &\xf0~
QUOTE
;

422
h
->
h_dosub
 =
i\xdd
->
io_\xe6ag
 &
IOXHERE
;

423
	}
}

425
	$g\x91h\x94e
() {

426 
h\x94e
 *
h
;

428 
h
 =
h\x94\x96i\xa1
; h !\xf0
NULL
; h = h->
h_\xc3xt
)

429
h
->
h_i\xdd
->
io_un
.
io_h\x94e
 =
	`\xbbadh\x94e
(h->
h_\x8fg
, h->
h_dosub
 ? 0 : '\'');

430
h\x94\x96i\xa1
 =
NULL
;

431
	}
}

433 
block
 *
	$\xbbadh\x94e
(
s
,
ec
)

434 *
s
;

436 
block
 *
bp
;

437 
c
;

438
jmp_buf

ev
;

440
bp
 = (
block
 *)
	`\xa5a\xfb
((*bp));

441 i\xe0(
bp
 == 0)

443
\x94\xbdt
 = &
ev
;

444 i\xe0(
	`\xc3w\x92v
(
	`\xa3tjmp
(
ev
)) == 0) {

445 i\xe0(
e
.
i\xdd
 =\xf0
io\xa1ack
 &&\x83.i\xdd->
io\xe2
 =\xf0
f\x9\x93ch\xac
) {

446
	`pushio
(
e
.
i\xdd
->
\xacg
,
f\x9\x93ch\xac
);

447
e
.
ioba\xa3
 =\x83.
i\xdd
;

449
bp
->
b_size
 = 0;

450
bp
->
b_l\x9\xab
 = 0;

451
bp
->
b_\xc3xt
 = 0;

452
bp
->
b_\xa1\xa\xf9
 = 0;

454 (
c
 =
	`g\x91c
(
ec
)) != '\n' && c) {

455 i\xe0(
ec
 == '\'')

456
c
 &\xf0~
QUOTE
;

457 i\xe0(
	`\xa7vec
(
c
,
bp
) == 0) {

458
c
 = 0;

462
	`\xa7vec
(0,
bp
);

463 i\xe0(
	`\xa1rcmp
(
s
,
bp
->
b_l\x9\xab
\xe8=\xf00 ||
c
 == 0)

465
bp
->
b_\xc3xt
[-1] = '\n';

466
bp
->
b_l\x9\xab
 = bp->
b_\xc3xt
;

468 *
bp
->
b_l\x9\xab
 = 0;

469 i\xe0(
c
 == 0) {

470
	`\xb4s
("here document `");

471
	`\xb4s
(
s
);

472
	`\x94r
("' unclosed");

474
	`qu\x99\x92v
();

476  (
bp
);

477
	}
}

479 
	$\xa7vec
(
c
,
bp
\xe8
block
 *bp;

481 *
\xc5
;

483 i\xe0(
bp
->
b_\xa1\xa\xf9
 =\xf0
NULL
 || bp->
b_\xc3xt
 + 1 >\xf0bp->b_\xa1\xac\x88+ bp->
b_size
) {

484
\xc5
 =
	`\xa5a\xfb
(
bp
->
b_size
 +
NCPB
);

485 i\xe0(
\xc5
 == 0)

487
	`mem\xfdy
(
\xc5
,
bp
->
b_\xa1\xa\xf9
, bp->
b_size
);

488
bp
->
b_size
 +\xf0
NCPB
;

489
bp
->
b_l\x9\xab
 =
\xc5
 + (bp->b_l\x9a\x90- bp->
b_\xa1\xa\xf9
);

490
bp
->
b_\xc3xt
 =
\xc5
 + (bp->b_\xc3x\x88- bp->
b_\xa1\xa\xf9
);

491
	`x\xe4\x93
(
bp
->
b_\xa1\xa\xf9
);

492
bp
->
b_\xa1\xa\xf9
 =
\xc5
;

494 *
bp
->
b_\xc3xt
++ =
c
;

496
	}
}

498
	$h\x94e\x9a
(
bp
,
xd\xd\x96
\xe8
block
 *bp;

500 
tf
;

501 
\x8aame
[50];

502 
\x9ac
;

503 *
\xfd
, *
\xcd
;

505 i\xe0(
bp
 == 0)

507 
\xfd
 =
\x8aame
,
\xcd
 = "/tmp/shtm"; (*cp = *lp++) != '\0'; cp++)

509
\xcd
 =
	`pu\x8a
(
	`g\x91pid
(\xe8* 100 +
\x9ac
++);

510 ; (*
\xfd
 = *
\xcd
++) != '\0'; cp++)

512 i\xe0((
tf
 =
	`\xfc\x97t
(
\x8aame
, 0666)) >= 0) {

513 i\xe0(
xd\xd\x96
) {

514 
c
;

515
jmp_buf

ev
;

517
\x94\xbdt
 = &
ev
;

518 i\xe0(
	`\xc3w\x92v
(
	`\xa3tjmp
(
ev
)) == 0) {

519
	`PUSHIO
(
aw\xdcd
,
bp
->
b_\xa1\xa\xf9
,
\xa1rch\xac
);

520
	`\xa3tba\xa3
(
e
.
i\xdd
);

521 (
c
 =
	`subg\x91c
(0, 0)) != 0) {

522
c
 &\xf0~
QUOTE
;

523
	`wr\x99e
(
tf
, &
c
,  c);

525
	`qu\x99\x92v
();

527
	`uƚk
(
\x8aame
);

529
	`wr\x99e
(
tf
,
bp
->
b_\xa1\xa\xf9
, bp->
b_l\x9\xab
 - bp->b_start);

530
	`\x\xe3o\xa3
(
tf
);

531
tf
 =
	`ݒ
(
\x8aame
, 0);

532
	`uƚk
(
\x8aame
);

534  (
tf
);

535
	}
}

537
	$s\xfc\xadh\x94e
(\xe8{
h\x94\x96i\xa1
 =
NULL
;
	}
}

539 *
	$mem\xfdy
(
\xa9o
,
\xe4om
,
nb
)

540 *
\xa9o
, *
\xe4om
;

541 
nb
;

543 *
to
;

545
to
 =
\xa9o
;

546 --
nb
 >= 0)

547 *
to
++ = *
\xe4om
++;

548  (
\xa9o
);

549
	}
}

	@commands/shar.cpp

9 
	~"blocksiz.h\xb5
"

11 
	#IO_SIZE
 (10 *
BLOCK_SIZE
)

	)

13 
	g\x9\xadut
[
IO_SIZE
];

14 
	gou\x8dut
[
IO_SIZE
];

15 
	g\x9adex
 = 0;

18 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

19 
i
;

20 
fd
;

22 
i
 = 1; i <
\xacgc
; i++) {

23 i\xe0((
fd
 =
	`ݒ
(
\xacgv
[
i
], 0)) < 0) {

24
	`wr\x99e
(2, "Cannot open ", 12);

25
	`wr\x99e
(2,
\xacgv
[
i
],
	`\xa1\xbe\x92
(argv[i]));

26
	`wr\x99e
(2, ".\n", 2);

28
	`\xb4\x9\xa9
("echo x - ");

29
	`\xb4\x9\xa9
(
\xacgv
[
i
]);

30
	`\xb4\x9\xa9
("\ngres '^X' '' > ");

31
	`\xb4\x9\xa9
(
\xacgv
[
i
]);

32
	`\xb4\x9\xa9
(" << '/'\n");

33
	`\xf\xe1
(
fd
);

36 i\xe0(
\x9adex
)

37
	`wr\x99e
(1,
ou\x8dut
,
\x9adex
);

39
	}
}

41 
	$\xf\xe1
(
fd
) {

42 *
cu\xbc\x92t
, *
ϡ
;

43 
r
 = 0;

44 *
cur_pos
 =
cu\xbc\x92t
;

46
	`putch\xac
('X');

48 i\xe0(
cur_pos
 =\xf0
ϡ
) {

49 i\xe0((
r
 =
	`\xbbad
(
fd
,
\x9aput
,
IO_SIZE
)) <= 0)

51
ϡ
 = &
\x9aput
[
r
];

52
cur_pos
 =
\x9aput
;

54
	`putch\xac
(*
cur_pos
);

55 i\xe0(*
cur_pos
++ =\xf0'\n' && cur_po\xa0!\xf0
ϡ
)

56
	`putch\xac
('X');

58
	`\xb4\x9\xa9
("/\n");

59 ()
	`\x\xe3o\xa3
(
fd
);

60
cu\xbc\x92t
 =
cur_pos
;

61
	}
}

63 
	$\xb4\x9\xa9
(*
\xa1r
) {

64 *
\xa1r
)

65
	`putch\xac
(*
\xa1r
++);

66
	}
}

68 
	$putch\xac
(
c
) {

69
ou\x8dut
[
\x9adex
++] =
c
;

70 i\xe0(
\x9adex
 =\xf0
IO_SIZE
) {

71
	`wr\x99e
(1,
ou\x8dut
,
\x9adex
);

72
\x9adex
 = 0;

74
	}
}

	@commands/size.cpp

9 
	#HLONG
 8

	)

10 
	#TEXT
 2

	)

11 
	#DATA
 3

	)

12 
	#BSS
 4

	)

13 
	#CHMEM
 6

	)

14 
	#MAGIC
 0x0301

	)

15 
	#SEPBIT
 0x00200000

	)

17 
	gh\x97d\x9ag
;

18 
	g\x94r\xdc
;

21 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

22 
i
;

24 i\xe0(
\xacgc
 == 1) {

25
	`size
("a.out");

26 
\x94r\xdc
;

29 
i
 = 1; i <
\xacgc
; i++)

30
	`size
(
\xacgv
[
i
]);

31 
\x94r\xdc
;

32
	}
}

34 
	$size
(cڡ *
\xc7me
) {

35 
fd
,
\xa3\xb7\xbf\x8b
;

36 
h\x97d
[
HLONG
],
dy\xc7m
,
\xaelmem
;

38 i\xe0((
fd
 =
	`ݒ
(
\xc7me
, 0)) < 0) {

39
	`\xa1d\x94r3
("size: c\xaa'\x88ݒ ",
\xc7me
, "\n");

43 i\xe0(
	`\xbbad
(
fd
,
h\x97d
, (head)) != (head)) {

44
	`\xa1d\x94r3
("size: ",
\xc7me
, ": header\x81oo short\n");

45
\x94r\xdc
 = 1;

46
	`\x\xe3o\xa3
(
fd
);

50 i\xe0((
h\x97d
[0] & 0xFFFF\xe8!\xf0
MAGIC
) {

51
	`\xa1d\x94r3
("size: ",
\xc7me
, "\x82ot\x87n object file\n");

52
	`\x\xe3o\xa3
(
fd
);

56
\xa3\xb7\xbf\x8b
 = (
h\x97d
[0] &
SEPBIT
 ? 1 : 0);

57
dy\xc7m
 =
h\x97d
[
CHMEM
] - h\x97d[
TEXT
] - h\x97d[
DATA
] - h\x97d[
BSS
];

58 i\xe0(
\xa3\xb7\xbf\x8b
)

59
dy\xc7m
 +\xf0
h\x97d
[
TEXT
];

60
\xaelmem
 = (
\xa3\xb7\xbf\x8b
 ?
h\x97d
[
CHMEM
] + h\x97d[
TEXT
] : head[CHMEM]);

61 i\xe0(
h\x97d\x9ag
++ == 0)

62
	`\xb4\x9\xa9s
("\x81ext\t data\t bss\t stack\tmemory\n");

63
	`\xb4\x9\xa9f
("%6D\t%6D\t%6D\t%6D\t%6D\t%s\n",
h\x97d
[
TEXT
], h\x97d[
DATA
], h\x97d[
BSS
],
dy\xc7m
,
\xaelmem
,
\xc7me
);

64
	`\x\xe3o\xa3
(
fd
);

65
	}
}

67 
	$\xa1d\x94r3
(cڡ *
s1
, cڡ *
s2
, cڡ *
s3
) {

68
	`\xa1d_\x94r
(
s1
);

69
	`\xa1d_\x94r
(
s2
);

70
	`\xa1d_\x94r
(
s3
);

71
\x94r\xdc
 = 1;

72
	}
}

	@commands/sleep.cpp

10 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

11 
\xa3c\xdads
 = 0;

13 i\xe0(
\xacgc
 != 2) {

14
	`\xa1d_\x94r
("Usage: sleep\x81ime\n");

19 cڡ *
p
 =
\xacgv
[1]; *p != '\0'; ++p) {

20 cڡ 
c
 = *
p
;

21 i\xe0(
c
 < '0' || c > '9') {

22
	`\xa1d_\x94r
("sleep: bad\x87rg\n");

25
\xa3c\xdads
 = 10 * sec\xdad\xa0+ (
c
 - '0');

29
	`\xa6\x93p
(
\xa3c\xdads
);

31
	}
}

	@commands/sort.cpp

40 
	~"sig\xc7l.h\xb5
"

41 
	~"\xa1\xa9.h\xb5
"

43 
	#OPEN_FILES
 16

	)

45 
	#MEMORY_SIZE
 (20 * 1024\xe8

	)

46 
	#LINE_SIZE
 (1024 >> 1\xe8

	)

47 
	#IO_SIZE
 (2 * 1024\xe8

	)

48 
	#STD_OUT
 1

	)

51 
	#OK
 0

	)

52 
	#ERROR
 -1

	)

53 
	#NIL_PTR
 ((*)0)

	)

56 
	#LOWER
 -1

	)

57 
	#SAME
 0

	)

58 
	#HIGHER
 1

	)

63 
	#DICT
 0x001

	)

64 
	#ASCII
 0x002

	)

65 
	#BLANK
 0x004

	)

66 
	#DIGIT
 0x008

	)

67 
	#UPPER
 0x010

	)

70 
	eBOOL
 {

71
	mFALSE_ENUM
 = 0,

72
	mTRUE_ENUM


76 
	sMERGE
 {

77 
	mfd
;

78 *
	mbuf\xe3r
;

79 
	m\xbbad_ch\xacs
;

80 
	m\x\xe7t
;

81 *
	ml\x9\xab
;

84 
	#NIL_MERGE
 ((
MERGE
 *)0)

	)

85
MERGE

	gm\x94ge_f
[
OPEN_FILES
];

86 
	gbuf_size
;

88 
	#FIELDS_LIMIT
 10

	)

89 
	#GLOBAL
 0

	)

92 
	sFIELD
 {

93 
	mbeg_f\x9bld
,
	mbeg_pos
;

94 
	m\x92d_f\x9bld
,
	m\x92d_pos
;

95
BOOL

	m\xbbv\x94\xa3
;

96
BOOL

	mb\xc\xe2ks
;

97
BOOL

	mdi\xf9iڬy
;

98
BOOL

	mf\xded_\xff\xa3
;

99
BOOL

	mascii
;

100
BOOL

	mnum\x94ic
;

104
FIELD

	gf\x9blds
[
FIELDS_LIMIT
];

105 
	gf\x9bld_\x\xe7t
;

108
BOOL

	gcheck
 =
FALSE
;

109
BOOL

	g\xd\xaey_m\x94ge
 =
FALSE
;

110
BOOL

	guniq
 =
FALSE
;

112 *
	gmem_t\xdd
;

113 *
	gcur_pos
;

114 **
	gl\x9\xab_\x8fb\xcb
;

115
BOOL

	g\x9a_c\xd\xfb
 =
TRUE
;

118 
	g\x8bmp_f\x9\x93s
[] = "/tmp/sort.XXXXX.XX";

119 *
	gou\x8dut_f\x9\x93
;

120 
	gout_fd
;

121 
	gout_buf\xe3r
[
IO_SIZE
];

123 **
	g\xacg\xb1r
;

124 
	g\xacgs_off\xa3t
;

125 
	g\xacgs_lim\x99
;

127 
	g\xa3\xb7\xb\xe1\xdc
;

128 
	g\xc4_of_f\x9\x93s
 = 0;

129 
	gdi\xa7b\xcbd
;

131 
	gUSAGE
[] = "Usage: sort [-funbirdcmt'x'] [+beg_pos [-end_pos]] [-o outfile] [file] ..";

134 *
f\x9\x93_\xc7me
(), *
sk\x9d_f\x9blds
();

135
MERGE
 *
sk\x9d_l\x9\xabs
(), *
\xb4\x9at
();

136 *
msbrk
(), *
mbrk
();

141 
	g\x8fb\xcb
[256] = {

143 0, 0, 0, 0, 0, 0, 0, 0, 0,
BLANK
 |
DICT
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

147
BLANK
 |
DICT
 |
ASCII
, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII,

148
ASCII
, ASCII, ASCII, ASCII, ASCII,

151
DIGIT
 |
DICT
 |
ASCII
, DIGIT | DICT | ASCII, DIGIT | DICT | ASCII, DIGIT | DICT | ASCII,

152
DIGIT
 |
DICT
 |
ASCII
, DIGIT | DICT | ASCII, DIGIT | DICT | ASCII, DIGIT | DICT | ASCII,

153
DIGIT
 |
DICT
 |
ASCII
, DIGIT | DICT | ASCII,

156
ASCII
, ASCII, ASCII, ASCII, ASCII, ASCII, ASCII,

159
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

160
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

161
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

162
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

163
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

164
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII, UPPER | DICT | ASCII, UPPER | DICT | ASCII,

165
UPPER
 |
DICT
 |
ASCII
, UPPER | DICT | ASCII,

168
ASCII
, ASCII, ASCII, ASCII, ASCII, ASCII,

171
DICT
 |
ASCII
, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII,

172
DICT
 |
ASCII
, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII,

173
DICT
 |
ASCII
, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII,

174
DICT
 |
ASCII
, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII, DICT | ASCII,

175
DICT
 |
ASCII
, DICT | ASCII,

178
ASCII
, ASCII, ASCII, ASCII,

189
	$g\x91_\xddts
(
\xb1r
,
f\x9bld
) *ptr;

190 
FIELD
 *
f\x9bld
;

192 *
\xb1r
) {

194
f\x9bld
->
b\xc\xe2ks
 =
TRUE
;

197
f\x9bld
->
di\xf9iڬy
 =
TRUE
;

200
f\x9bld
->
f\xded_\xff\xa3
 =
TRUE
;

203
f\x9bld
->
ascii
 =
TRUE
;

206
f\x9bld
->
num\x94ic
 =
TRUE
;

207
f\x9bld
->
b\xc\xe2ks
 =
TRUE
;

210
f\x9bld
->
\xbbv\x94\xa3
 =
TRUE
;

213
	`\x94r\xdc
(
TRUE
,
USAGE
,
NIL_PTR
);

215
	}
}

220
	$\xa9oi
(
\xb1r
) *ptr;

222 
num
 = 0;

224 
\x8fb\xcb
[*
\xb1r
] &
DIGIT
)

225
num
 =\x82um * 10 + *
\xb1r
++ - '0';

227 
num
;

228
	}
}

236
	$\xc3w_f\x9bld
(
f\x9bld
,
off\xa3t
,
beg_\xe6
\xe8
FIELD
 *field;

237 *
off\xa3t
;

238
BOOL

beg_\xe6
;

240 *
\xb1r
;

242
\xb1r
 =
\xacg\xb1r
[*
off\xa3t
];

243 *
off\xa3t
 += 1;

244
\xb1r
++;

246 i\xe0(
beg_\xe6
)

247
f\x9bld
->
beg_f\x9bld
 =
	`\xa9oi
(
\xb1r
);

249
f\x9bld
->
\x92d_f\x9bld
 =
	`\xa9oi
(
\xb1r
);

251 
\x8fb\xcb
[*
\xb1r
] &
DIGIT
)

252
\xb1r
++;

254 i\xe0(*
\xb1r
 == '.') {

255
\xb1r
++;

256 i\xe0(
beg_\xe6
)

257
f\x9bld
->
beg_pos
 =
	`\xa9oi
(
\xb1r
);

259
f\x9bld
->
\x92d_pos
 =
	`\xa9oi
(
\xb1r
);

260 
\x8fb\xcb
[*
\xb1r
] &
DIGIT
)

261
\xb1r
++;

264 i\xe0(
beg_\xe6
) {

265 *
\xb1r
 != '\0')

266
	`g\x91_\xddts
(
\xb1r
++,
f\x9bld
);

269 i\xe0(
beg_\xe6
) {

270
\xb1r
 =
\xacg\xb1r
[*
off\xa3t
];

271 i\xe0(*
\xb1r
 =\xf0'-' &&
\x8fb\xcb
[*Ռ + 1)] &
DIGIT
) {

272
	`\xc3w_f\x9bld
(
f\x9bld
,
off\xa3t
,
FALSE
);

273 i\xe0(
f\x9bld
->
beg_f\x9bld
 > f\x9bld->
\x92d_f\x9bld
)

274
	`\x94r\xdc
(
TRUE
, "End f\x9bld i\xa0befܐ\xa1\xac\x88f\x9bld!",
NIL_PTR
);

276
f\x9bld
->
\x92d_f\x9bld
 =
ERROR
;

278
	}
}

280
	$\xf\xe1ch
 () {

281 
i
;

283
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

284
\xdaly_m\x94ge
 =
FALSE
;

285 
i
 = 0; i < 26; i++)

286 ()
	`uƚk
(
	`f\x9\x93_\xc7me
(
i
));

287
	`ex\x99
(2);

288
	}
}

291 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

292 
\xacg_cou\xc1
 = 1;

293 
\xa1\xa9

\xa1
;

294 *
\xb1r
;

295 
fd
;

296 
pid
,
pow
;

298
\xacg\xb1r
 =
\xacgv
;

299
cur_pos
 =
mem_t\xdd
 =
	`msbrk
(
MEMORY_SIZE
);

301 
\xacgc
 > 1 && ((
\xb1r
 =
\xacgv
[
\xacg_cou\xc1
])[0] == '-' || *ptr == '+')) {

302 i\xe0(*
\xb1r
 == '-' && *(ptr + 1) == '\0')

304 i\xe0(*
\xb1r
 == '+') {

305 i\xe0(++
f\x9bld_\x\xe7t
 =\xf0
FIELDS_LIMIT
)

306
	`\x94r\xdc
(
TRUE
, "To\xd8m\xaay f\x9blds",
NIL_PTR
);

307
	`\xc3w_f\x9bld
(&
f\x9blds
[
f\x9bld_\x\xe7t
], &
\xacg_cou\xc1
,
TRUE
);

309 *++
\xb1r
) {

310 *
\xb1r
) {

312
check
 =
TRUE
;

315
\xdaly_m\x94ge
 =
TRUE
;

318
uniq
 =
TRUE
;

321
ou\x8dut_f\x9\x93
 =
\xacgv
[++
\xacg_cou\xc1
];

324
\xb1r
++;

325
\xa3\xb7\xbft\xdc
 = *
\xb1r
;

328
	`g\x91_\xddts
(
\xb1r
, &
f\x9blds
[
GLOBAL
]);

331
\xacg_cou\xc1
++;

335 
fd
 = 1; fd <\xf0
f\x9bld_\x\xe7t
; fd++)

336
	`adju\xa1_\xddti\xdas
(&
f\x9blds
[
fd
]);

339
\xb1r
 = &
\x8bmp_f\x9ees
[10];

340
pid
 =
	`g\x91pid
();

341
pow
 = 10000;

342 
pow
 != 0) {

343 *
\xb1r
++ =
pid
 /
pow
 + '0';

344
pid
 %\xf0
pow
;

345
pow
 /= 10;

348
	`sig\xc7l
(
SIGINT
,
\xfftch
);

351 i\xe0(
\xdaly_m\x94ge
) {

352
\xacgs_lim\x99
 =
\xacgs_off\xa3t
 =
\xacg_cou\xc1
;

353 
\xacgv
[
\xacgs_lim\x99
] !\xf0
NIL_PTR
)

354
\xacgs_lim\x99
++;

355
	`f\x9\x93s_m\x94ge
(
\xacgs_lim\x99
 -
\xacg_cou\xc1
);

359 i\xe0(
\xacg_cou\xc1
 =\xf0
\xacgc
) {

360 i\xe0(
check
)

361
	`check_f\x9\x93
(0,
NIL_PTR
);

363
	`g\x91_f\x9\x93
(0, 0L);

365 
\xacg_cou\xc1
 <
\xacgc
) {

366 i\xe0(
	`\xa1rcmp
(
\xacgv
[
\xacg_cou\xc1
], "-") == 0)

367
fd
 = 0;

368 i\xe0(
	`\xa1\xa9
(
\xacgv
[
\xacg_cou\xc1
], &
\xa1
) < 0) {

369
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 f\x9ad ",
\xacgv
[
\xacg_cou\xc1
++]);

372 i\xe0((
fd
 =
	`ݒ
(
\xacgv
[
\xacg_cou\xc1
], 0)) < 0) {

373
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 o\xb3\xc0",
\xacgv
[
\xacg_cou\xc1
++]);

376 i\xe0(
check
)

377
	`check_f\x9\x93
(
fd
,
\xacgv
[
\xacg_cou\xc1
]);

379
	`g\x91_f\x9\x93
(
fd
,
\xa1
.
\xa1_size
);

380
\xacg_cou\xc1
++;

383 i\xe0(
check
)

386
	`s\xd\xf9
();

388 i\xe0(
\xc4_of_f\x9ees
 == 1)

391
	`f\x9\x93s_m\x94ge
(
\xc4_of_f\x9ees
);

393
	}
}

399
	$adju\xa1_\xddti\xdas
(
f\x9bld
\xe8
FIELD
 *field;

401 
FIELD
 *
gf\x9bld
 = &
f\x9blds
[
GLOBAL
];

403 i\xe0(
gf\x9bld
->
\xbbv\x94\xa3
)

404
f\x9bld
->
\xbbv\x94\xa3
 =
TRUE
;

405 i\xe0(
gf\x9bld
->
b\xc\xe2ks
)

406
f\x9bld
->
b\xc\xe2ks
 =
TRUE
;

407 i\xe0(
gf\x9bld
->
di\xf9iڬy
)

408
f\x9bld
->
di\xf9iڬy
 =
TRUE
;

409 i\xe0(
gf\x9bld
->
f\xded_\xff\xa3
)

410
f\x9bld
->
f\xded_\xff\xa3
 =
TRUE
;

411 i\xe0(
gf\x9bld
->
ascii
)

412
f\x9bld
->
ascii
 =
TRUE
;

413 i\xe0(
gf\x9bld
->
num\x94ic
)

414
f\x9bld
->
num\x94ic
 =
TRUE
;

415
	}
}

420
	$\x94r\xdc
(
qu\x99
,
mes\xa7ge
,
\xacg
\xe8
BOOL
 quit;

421 *
mes\xa7ge
, *
\xacg
;

423
	`wr\x99e
(2,
mes\xa7ge
,
	`\xa1\xbe\x92
(message));

424 i\xe0(
\xacg
 !\xf0
NIL_PTR
)

425
	`wr\x99e
(2,
\xacg
,
	`\xa1\xbe\x92
(arg));

426
	`wr\x99e
(2, ".\n", 2);

427 i\xe0(
qu\x99
)

428
	`ex\x99
(1);

429
	}
}

435
	$ݒ_outf\x9\x93
() {

436 i\xe0(
ou\x8dut_f\x9\x93
 =\xf0
NIL_PTR
)

437
out_fd
 =
STD_OUT
;

438 i\xe0((
out_fd
 =
	`\xfc\x97t
(
ou\x8dut_f\x9\x93
, 0644)) < 0)

439
	`\x94r\xdc
(
TRUE
, "C\xaan\xd9 c\xbb\xa9 ",
ou\x8dut_f\x9\x93
);

440
	}
}

446
	$g\x91_f\x9\x93
(
fd
,
size
) fd;

447 
size
;

449 
i
;

450 
\xbb\xa1
;

451 
\xa7ve_ch
;

453
\xbb\xa1
 =
MEMORY_SIZE
 - (
cur_pos
 -
mem_t\xdd
);

454 i\xe0(
fd
 == 0) {

455 (
i
 =
	`\xbbad
(0,
cur_pos
,
\xbb\xa1
)) > 0) {

456 i\xe0((
cur_pos
 -
mem_t\xdd
\xe8+
i
 =\xf0
MEMORY_SIZE
) {

457
\x9a_c\xdce
 =
FALSE
;

458
i
 =
	`ϡ_l\x9\xab
();

459
\xa7ve_ch
 =
mem_t\xdd
[
i
];

460
mem_t\xdd
[
i
] = '\0';

461
	`s\xd\xf9
();

462
mem_t\xdd
[
i
] =
\xa7ve_ch
;

464 
size
 = 0;
i
 + siz\x90!\xf0
MEMORY_SIZE
; size++)

465
mem_t\xdd
[
size
] = mem_t\xdd[
i
 + size];

467
cur_pos
 = &
mem_t\xdd
[
size
];

469
cur_pos
 = cur_po\xa0+
i
;

470 *
cur_pos
 = '\0';

473
\xbb\xa1
 =
MEMORY_SIZE
 - (
cur_pos
 -
mem_t\xdd
);

476 i\xe0(
size
 >
\xbb\xa1
) {

477
	`m\xbbad
(
fd
,
cur_pos
,
\xbb\xa1
);

478
\x9a_c\xdce
 =
FALSE
;

479
i
 =
	`ϡ_l\x9\xab
();

480
mem_t\xdd
[
i
] = '\0';

481 ()
	`l\xa3ek
(
fd
,
i
 -
MEMORY_SIZE
, 1);

482
\xbb\xa1
 =
size
 -\x84e\xa1 -
i
 +
MEMORY_SIZE
;

483
cur_pos
 =
mem_t\xdd
;

484
	`s\xd\xf9
();

485
	`g\x91_f\x9\x93
(
fd
,
\xbb\xa1
);

487
	`m\xbbad
(
fd
,
cur_pos
,
size
);

488
cur_pos
 = cur_po\xa0+
size
;

489 *
cur_pos
 = '\0';

490 ()
	`\x\xe3o\xa3
(
fd
);

492
	}
}

498
	$ϡ_l\x9\xab
() {

499 
i
;

501 
i
 =
MEMORY_SIZE
 - 1; i > 0; i--)

502 i\xe0(
mem_t\xdd
[
i
] == '\n')

504 
i
 + 1;

505
	}
}

511
	$\xb4\x9\xa9_\x8fb\xcb
(
fd
) fd;

513 **
l\x9\xab_\xb1r
;

514 *
\xb1r
;

515 
\x9adex
 = 0;

517 i\xe0(
fd
 =\xf0
ERROR
) {

518 i\xe0((
fd
 =
	`\xfc\x97t
(
	`f\x9\x93_\xc7me
(
\xc4_of_f\x9ees
), 0644)) < 0)

519
	`\x94r\xdc
(
TRUE
, "C\xaan\xd9 c\xbb\xa9 ",
	`f\x9\x93_\xc7me
(
\xc4_of_f\x9ees
));

522 
l\x9\xab_\xb1r
 =
l\x9\xab_\x8fb\xcb
; *l\x9ae_\xb1\xb8!\xf0
NIL_PTR
;\x86ine_ptr++) {

523
\xb1r
 = *
l\x9\xab_\xb1r
;

525 i\xe0(
uniq
 && *(
l\x9\xab_\xb1r
 + 1\xe8!\xf0
NIL_PTR
) {

526 i\xe0(
	`com\xb7\xbb
(
\xb1r
, *(
l\x9\xab_\xb1r
 + 1)\xe8=\xf0
SAME
)

530
out_buf\xe3r
[
\x9adex
++] = *
\xb1r
;

531 i\xe0(
\x9adex
 =\xf0
IO_SIZE
) {

532
	`mwr\x99e
(
fd
,
out_buf\xe3r
,
IO_SIZE
);

533
\x9adex
 = 0;

535 } *
\xb1r
++ != '\n');

537
	`mwr\x99e
(
fd
,
out_buf\xe3r
,
\x9adex
);

538 ()
	`\x\xe3o\xa3
(
fd
);

539
\xc4_of_f\x9ees
++;

540
	}
}

546 *
	$f\x9\x93_\xc7me
(
\xc4
)

547 
\xc4
;

549 i\xe0(
\xdaly_m\x94ge
) {

550 i\xe0(
\xacgs_off\xa3t
 +
\xc4
 <
\xacgs_lim\x99
)

551 
\xacg\xb1r
[
\xacgs_off\xa3t
 +
\xc4
];

554
\x8bmp_f\x9ees
[16] =
\xc4
 / 26 + 'a';

555
\x8bmp_f\x9ees
[17] =
\xc4
 % 26 + 'a';

557 
\x8bmp_f\x9ees
;

558
	}
}

563
	$m\xbbad
(
fd
,
add\xbbss
,
by\x8bs
) fd;

564 *
add\xbbss
;

565 
by\x8bs
;

567 i\xe0(
	`\xbbad
(
fd
,
add\xbbss
,
by\x8bs
) < 0 && bytes != 0)

568
	`\x94r\xdc
(
TRUE
, "R\x97d\x83\xbc\xdc",
NIL_PTR
);

569
	}
}

574
	$mwr\x99e
(
fd
,
add\xbbss
,
by\x8bs
) fd;

575 *
add\xbbss
;

576 
by\x8bs
;

578 i\xe0(
	`wr\x99e
(
fd
,
add\xbbss
,
by\x8bs
) != bytes && bytes != 0)

579
	`\x94r\xdc
(
TRUE
, "Wr\x99\x90\x94r\xdc",
NIL_PTR
);

580
	}
}

585
	$s\xd\xf9
() {

586 *
\xb1r
 =
mem_t\xdd
;

587 
cou\xc1
 = 0;

590 *
\xb1r
) {

591 i\xe0(*
\xb1r
++ == '\n')

592
cou\xc1
++;

596
l\x9\xab_\x8fb\xcb
 = (**)
	`msbrk
(
cou\xc1
 * (*) + (*));

598
cou\xc1
 = 1;

599
\xb1r
 =
l\x9\xab_\x8fb\xcb
[0] =
mem_t\xdd
;

600 *
\xb1r
) {

601 i\xe0(*
\xb1r
++ == '\n')

602
l\x9\xab_\x8fb\xcb
[
cou\xc1
++] =
\xb1r
;

605
l\x9\xab_\x8fb\xcb
[
cou\xc1
 - 1] =
NIL_PTR
;

608
	`s\xd\xf9_\x8fb\xcb
(
cou\xc1
 - 1);

611 i\xe0(
\x9a_c\xdce
) {

612
	`ݒ_outf\x9\x93
();

613
	`\xb4\x9\xa9_\x8fb\xcb
(
out_fd
);

615
	`\xb4\x9\xa9_\x8fb\xcb
(
ERROR
);

618
	`mbrk
(
l\x9\xab_\x8fb\xcb
);

619
	}
}

624
	$s\xd\xf9_\x8fb\xcb
(
\xc3l
) nel;

626 *
tmp
;

627 
i
;

630 
i
 = (
\xc3l
 >> 1); i >= 1; i--)

631
	`\x9a\xfc
(
i
,
\xc3l
);

634 
i
 =
\xc3l
; i > 1; i--) {

635
tmp
 =
l\x9\xab_\x8fb\xcb
[0];

636
l\x9\xab_\x8fb\xcb
[0] =\x86\x9ae_\x8fb\xcb[
i
 - 1];

637
l\x9\xab_\x8fb\xcb
[
i
 - 1] =
tmp
;

638
	`\x9a\xfc
(1,
i
 - 1);

640
	}
}

645
	$\x9a\xfc
(
si
,
ei
) si,\x83i;

647 *
tmp
;

649 
si
 <\xf0(
ei
 >> 1)) {

650
si
 <<= 1;

651 i\xe0(
si
 + 1 <\xf0
ei
 &&
	`com\xb7\xbb
(
l\x9\xab_\x8fb\xcb
[si - 1],\x86ine_table[si]) <= 0)

652
si
++;

653 i\xe0(
	`com\xb7\xbb
(
l\x9\xab_\x8fb\xcb
[(
si
 >> 1) - 1],\x86ine_table[si - 1]) >= 0)

655
tmp
 =
l\x9\xab_\x8fb\xcb
[(
si
 >> 1) - 1];

656
l\x9\xab_\x8fb\xcb
[(
si
 >> 1) - 1] =\x86ine_table[si - 1];

657
l\x9\xab_\x8fb\xcb
[
si
 - 1] =
tmp
;

659
	}
}

666
	$cmp_f\x9blds
(
\x961
,
\x962
) *el1, *el2;

668 
i
,
\xbbt
;

669 
l\x9\xab1
[
LINE_SIZE
],
l\x9\xab2
[LINE_SIZE];

671 
i
 = 0; i <
f\x9bld_\x\xe7t
; i++) {

672
	`bu\x9ed_f\x9bld
(
l\x9\xab1
, &
f\x9blds
[
i
 + 1],
\x961
);

673
	`bu\x9ed_f\x9bld
(
l\x9\xab2
, &
f\x9blds
[
i
 + 1],
\x962
);

674 i\xe0((
\xbbt
 =
	`cmp
(
l\x9\xab1
,
l\x9\xab2
, &
f\x9blds
[
i
 + 1])\xe8!\xf0
SAME
)

679 i\xe0(
i
 !\xf0
f\x9bld_\x\xe7t
 &&
f\x9blds
[\x98+ 1].
\xbbv\x94\xa3
)

680  -
\xbbt
;

683 
\xbbt
;

684
	}
}

690
	$bu\x9ed_f\x9bld
(
de\xa1
,
f\x9bld
,
\xa4c
) *dest;

691 
FIELD
 *
f\x9bld
;

692 *
\xa4c
;

694 *
beg\x9a
 =
\xa4c
;

695 *
ϡ
;

696 
i
;

699
\xa4c
 =
	`sk\x9d_f\x9blds
(\xa4c,
f\x9bld
->
beg_f\x9bld
);

702 
i
 = 0; i <
f\x9bld
->
beg_pos
 && *
\xa4c
 != '\n'; i++)

703
\xa4c
++;

706
	`c\xddy
(
de\xa1
,
\xa4c
);

709 i\xe0(
f\x9bld
->
\x92d_f\x9bld
 !\xf0
ERROR
) {

710
ϡ
 =
	`sk\x9d_f\x9blds
(
beg\x9a
,
f\x9bld
->
\x92d_f\x9bld
);

712 
i
 = 0; i <
f\x9bld
->
\x92d_pos
 && *
ϡ
 != '\n'; i++)

713
ϡ
++;

714
de\xa1
[
ϡ
 -
\xa4c
] = '\n';

716
	}
}

721 *
	$sk\x9d_f\x9blds
(
\xa1r
,
nf
)

722 *
\xa1r
;

723 
nf
;

725 
nf
-- > 0) {

726 i\xe0(
\xa3\xb7\xbft\xdc
 == '\0') {

727 *
\xa1r
 != ' ' && *str != '\t' && *str != '\n')

728
\xa1r
++;

729 
\x8fb\xcb
[*
\xa1r
] &
BLANK
)

730
\xa1r
++;

732 *
\xa1r
 !\xf0
\xa3\xb7\xbft\xdc
 && *str != '\n')

733
\xa1r
++;

734
\xa1r
++;

737 
\xa1r
;

738
	}
}

745
	$com\xb7\xbb
(
\x961
,
\x962
) *el1, *el2;

747 
\xbbt
;

749 i\xe0(
f\x9bld_\x\xe7t
 >
GLOBAL
)

750 
	`cmp_f\x9blds
(
\x961
,
\x962
);

752
\xbbt
 =
	`cmp
(
\x961
,
\x962
, &
f\x9blds
[
GLOBAL
]);

753  (
f\x9blds
[
GLOBAL
].
\xbbv\x94\xa3
\xe8? -
\xbbt
 :\x84et;

754
	}
}

760
	$cmp
(
\x961
,
\x962
,
f\x9bld
) *el1, *el2;

761
FIELD
 *
f\x9bld
;

763 
c1
,
c2
;

765 i\xe0(
f\x9bld
->
b\xc\xe2ks
) {

766 
\x8fb\xcb
[*
\x961
] &
BLANK
)

767
\x961
++;

768 
\x8fb\xcb
[*
\x962
] &
BLANK
)

769
\x962
++;

772 i\xe0(
f\x9bld
->
num\x94ic
)

773 
	`dig\x99s
(
\x961
,
\x962
,
TRUE
);

776 *
\x961
 =\xf0*
\x962
) {

777 i\xe0(*
\x961
++ == '\n')

778 
SAME
;

779
\x962
++;

781 i\xe0(*
\x961
 == '\n')

782 
LOWER
;

783 i\xe0(*
\x962
 == '\n')

784 
HIGHER
;

785 i\xe0(
f\x9bld
->
ascii
) {

786 i\xe0((
\x8fb\xcb
[*
\x961
] &
ASCII
) == 0) {

788
\x961
++;

789 } (
\x8fb\xcb
[*
\x961
] &
ASCII
) == 0);

792 i\xe0((
\x8fb\xcb
[*
\x962
] &
ASCII
) == 0) {

794
\x962
++;

795 } (
\x8fb\xcb
[*
\x962
] &
ASCII
) == 0);

799 i\xe0(
f\x9bld
->
di\xf9iڬy
) {

800 i\xe0((
\x8fb\xcb
[*
\x961
] &
DICT
) == 0) {

802
\x961
++;

803 } (
\x8fb\xcb
[*
\x961
] &
DICT
) == 0);

806 i\xe0((
\x8fb\xcb
[*
\x962
] &
DICT
) == 0) {

808
\x962
++;

809 } (
\x8fb\xcb
[*
\x962
] &
DICT
) == 0);

813 i\xe0(
f\x9bld
->
f\xded_\xff\xa3
) {

814 i\xe0(
\x8fb\xcb
[
c1
 = *
\x961
++] &
UPPER
)

815
c1
 += 'a' - 'A';

816 i\xe0(
\x8fb\xcb
[
c2
 = *
\x962
++] &
UPPER
)

817
c2
 += 'a' - 'A';

818 i\xe0(
c1
 =\xf0
c2
)

820 
c1
 -
c2
;

822  *
\x961
 - *
\x962
;

825
	}
}

831
	$dig\x99s
(
\xa1r1
,
\xa1r2
,
check_sign
) *str1, *str2;

832
BOOL

check_sign
;

834
BOOL

\xc3g\xa9ive
 =
FALSE
;

835 
diff
,
pow
,
\xbbt
;

838 i\xe0(
check_sign
) {

839 i\xe0(*
\xa1r1
 == '-') {

840
\xc3g\xa9ive
 =
TRUE
;

841
\xa1r1
++;

842 } i\xe0(*
\xa1r1
 == '+')

843
\xa1r1
++;

845 i\xe0(*
\xa1r2
 == '-') {

846 i\xe0(
\xc3g\xa9ive
 =\xf0
FALSE
)

847 
HIGHER
;

848
\xa1r2
++;

849 } i\xe0(
\xc3g\xa9ive
)

850 
LOWER
;

851 i\xe0(*
\xa1r2
 == '+')

852
\xa1r2
++;

856 (
\x8fb\xcb
[*
\xa1r1
] &
DIGIT
\xe8&&\x81ab\xcb[*
\xa1r2
] & DIGIT) {

857 i\xe0(*
\xa1r1
 !\xf0*
\xa1r2
)

859
\xa1r1
++;

860
\xa1r2
++;

864 i\xe0(*
\xa1r1
 =\xf0'.' || *
\xa1r2
 == '.') {

865 i\xe0(*
\xa1r1
 == '.') {

866 i\xe0(*
\xa1r2
 == '.')

867
\xbbt
 =
	`dig\x99s
(
\xa1r1
 + 1,
\xa1r2
 + 1,
FALSE
);

869
\xbbt
 = (
\x8fb\xcb
[*
\xa1r2
] &
DIGIT
\xe8?
LOWER
 :
HIGHER
;

871
\xbbt
 = (
\x8fb\xcb
[*
\xa1r1
] &
DIGIT
\xe8?
HIGHER
 :
LOWER
;

875 i\xe0((
\x8fb\xcb
[*
\xa1r1
] &
DIGIT
\xe8&& (\x8fb\xcb[*
\xa1r2
] & DIGIT)) {

876
diff
 = *
\xa1r1
 - *
\xa1r2
;

877
pow
 = 0;

878 
\x8fb\xcb
[*
\xa1r1
++] &
DIGIT
)

879
pow
++;

880 
\x8fb\xcb
[*
\xa1r2
++] &
DIGIT
)

881
pow
--;

882
\xbbt
 = (
pow
 =\xf00\xe8?
diff
 :\x85ow;

887 i\xe0((
\x8fb\xcb
[*
\xa1r1
] &
DIGIT
) == 0)

888
\xbbt
 = (
\x8fb\xcb
[*
\xa1r2
] &
DIGIT
\xe8?
LOWER
 :
SAME
;

890
\xbbt
 =
HIGHER
;

894  (
\xc3g\xa9ive
\xe8? -
\xbbt
 :\x84et;

895
	}
}

901
	$f\x9\x93s_m\x94ge
(
f\x9\x93_\x\xe7t
) file_cnt;

903 
i
;

904 
lim\x99
;

906 
i
 = 0; i <
f\x9\x93_\x\xe7t
; i +\xf0
OPEN_FILES
) {

908 i\xe0((
lim\x99
 =
i
 +
OPEN_FILES
\xe8>\xf0
f\x9\x93_\x\xe7t
) {

909
	`ݒ_outf\x9\x93
();

910
lim\x99
 =
f\x9\x93_\x\xe7t
;

912
\x8bmp_f\x9ees
[16] =
f\x9\x93_\x\xe7t
 / 26 + 'a';

913
\x8bmp_f\x9ees
[17] =
f\x9\x93_\x\xe7t
 % 26 + 'a';

914 i\xe0((
out_fd
 =
	`\xfc\x97t
(
\x8bmp_f\x9ees
, 0644)) < 0)

915
	`\x94r\xdc
(
TRUE
, "C\xaan\xd9 c\xbb\xa9 ",
\x8bmp_f\x9ees
);

916
f\x9\x93_\x\xe7t
++;

918
	`m\x94ge
(
i
,
lim\x99
);

922
i
 = (
\xdaly_m\x94ge
\xe8?
\xacgs_lim\x99
 -
\xacgs_off\xa3t
 : 0;

923 
i
 <
f\x9\x93_\x\xe7t
)

924 ()
	`uƚk
(
	`f\x9\x93_\xc7me
(
i
++));

925
	}
}

930
	$m\x94ge
(
\xa1\xact_f\x9ee
,
lim\x99_f\x9\x93
) start_file,\x86imit_file;

932 
MERGE
 *
sm\x\xabˡ
;

933 
i
;

934 
f\x9\x93_\x\xe7t
 =
lim\x99_f\x9\x93
 -
\xa1\xact_f\x9ee
;

937
buf_size
 =
MEMORY_SIZE
 /
f\x9\x93_\x\xe7t
 -
LINE_SIZE
;

939
	`mbrk
(
mem_t\xdd
);

940
di\xa7b\xcbd
 = 0;

943 
i
 =
\xa1\xact_f\x9ee
; i <
lim\x99_f\x9\x93
; i++) {

944
sm\x\xabˡ
 = &
m\x94ge_f
[
i
 -
\xa1\xact_f\x9ee
];

945 i\xe0(!
	`\xa1rcmp
(
	`f\x9\x93_\xc7me
(
i
), "-"))

946
sm\x\xabˡ
->
fd
 = 0;

947 i\xe0((
sm\x\xabˡ
->
fd
 =
	`ݒ
(
	`f\x9\x93_\xc7me
(
i
), 0)) < 0) {

948
sm\x\xabˡ
->
fd
 =
ERROR
;

949
	`\x94r\xdc
(
FALSE
, "C\xaan\xd9 o\xb3\xc0",
	`f\x9\x93_\xc7me
(
i
));

950
di\xa7b\xcbd
++;

953
sm\x\xabˡ
->
buf\xe3r
 =
	`msbrk
(
buf_size
);

954
sm\x\xabˡ
->
l\x9\xab
 =
	`msbrk
(
LINE_SIZE
);

955
sm\x\xabˡ
->
\xfat
 = sm\xaeˡ->
\xbbad_ch\xacs
 = 0;

956 ()
	`\xbbad_l\x9\xab
(
sm\x\xabˡ
);

959 i\xe0(
di\xa7b\xcbd
 =\xf0
f\x9\x93_\x\xe7t
) {

960 ()
	`\x\xe3o\xa3
(
out_fd
);

965 
i
 = 0; i <
f\x9\x93_\x\xe7t
; i++) {

966 i\xe0(
m\x94ge_f
[
i
].
fd
 !\xf0
ERROR
) {

967
sm\x\xabˡ
 = &
m\x94ge_f
[
i
];

973 
di\xa7b\xcbd
 <
f\x9\x93_\x\xe7t
 - 1) {

974 i\xe0(
uniq
)

975
sm\x\xabˡ
 =
	`sk\x9d_l\x9\xabs
(sm\xaeˡ,
f\x9\x93_\x\xe7t
);

977 
i
 = 0; i <
f\x9\x93_\x\xe7t
; i++) {

978 i\xe0(
m\x94ge_f
[
i
].
fd
 =\xf0
ERROR
)

980 i\xe0(
	`com\xb7\xbb
(
m\x94ge_f
[
i
].
l\x9\xab
,
sm\x\xabˡ
->line) < 0)

981
sm\x\xabˡ
 = &
m\x94ge_f
[
i
];

984
sm\x\xabˡ
 =
	`\xb4\x9\xa9
(sm\xaeˡ,
f\x9\x93_\x\xe7t
);

987 i\xe0(
\xdaly_m\x94ge
 &&
uniq
)

988
	`uniq_l\x9\xabs
(
sm\x\xabˡ
);

990 
	`\xb4\x9\xa9
(
sm\x\xabˡ
,
f\x9\x93_\x\xe7t
\xe8!\xf0
NIL_MERGE
)

993
	`put_l\x9\xab
(
NIL_PTR
);

994
	}
}

1000
	$put_l\x9\xab
(
l\x9\xab
) *line;

1002 
\x9adex
 = 0;

1004 i\xe0(
l\x9\xab
 =\xf0
NIL_PTR
) {

1005
	`mwr\x99e
(
out_fd
,
out_buf\xe3r
,
\x9adex
);

1006
\x9adex
 = 0;

1007 ()
	`\x\xe3o\xa3
(
out_fd
);

1012
out_buf\xe3r
[
\x9adex
++] = *
l\x9\xab
;

1013 i\xe0(
\x9adex
 =\xf0
IO_SIZE
) {

1014
	`mwr\x99e
(
out_fd
,
out_buf\xe3r
,
IO_SIZE
);

1015
\x9adex
 = 0;

1017 } *
l\x9\xab
++ != '\n');

1018
	}
}

1025
MERGE
 *
	$\xb4\x9\xa9
(
m\x94g
,
f\x9\x93_\x\xe7t
)

1026 
MERGE
 *
m\x94g
;

1027 
f\x9\x93_\x\xe7t
;

1029 
i
;

1031
	`put_l\x9\xab
(
m\x94g
->
l\x9\xab
);

1033 i\xe0(
	`\xbbad_l\x9\xab
(
m\x94g
\xe8=\xf0
ERROR
) {

1034 
i
 = 0; i <
f\x9\x93_\x\xe7t
; i++) {

1035 i\xe0(
m\x94ge_f
[
i
].
fd
 !\xf0
ERROR
) {

1036
m\x94g
 = &
m\x94ge_f
[
i
];

1040 i\xe0(
i
 =\xf0
f\x9\x93_\x\xe7t
)

1041 
NIL_MERGE
;

1043 
m\x94g
;

1044
	}
}

1052
	$\xbbad_l\x9\xab
(
m\x94g
\xe8
MERGE
 *merg;

1054 *
\xb1r
 =
m\x94g
->
l\x9\xab
 - 1;

1057
\xb1r
++;

1058 i\xe0(
m\x94g
->
\xfat
 =\xf0m\x94g->
\xbbad_ch\xacs
) {

1059 i\xe0((
m\x94g
->
\xbbad_ch\xacs
 =
	`\xbbad
(m\x94g->
fd
, m\x94g->
buf\xe3r
,
buf_size
)) <= 0) {

1060 ()
	`\x\xe3o\xa3
(
m\x94g
->
fd
);

1061
m\x94g
->
fd
 =
ERROR
;

1062
di\xa7b\xcbd
++;

1063 
ERROR
;

1065
m\x94g
->
\xfat
 = 0;

1067 *
\xb1r
 =
m\x94g
->
buf\xe3r
[m\x94g->
\xfat
++];

1068 i\xe0(
\xb1r
 -
m\x94g
->
l\x9\xab
 =\xf0
LINE_SIZE
 - 1)

1069 *
\xb1r
 = '\n';

1070 } *
\xb1r
 != '\n' && *ptr != '\0');

1072 i\xe0(*
\xb1r
 == '\0')

1073 *
\xb1r
 = '\n';

1074 *++
\xb1r
 = '\0';

1075 
OK
;

1076
	}
}

1082
MERGE
 *
	$sk\x9d_l\x9\xabs
(
sm\x\xabˡ
,
f\x9\x93_\x\xe7t
)

1083 
MERGE
 *
sm\x\xabˡ
;

1084 
f\x9\x93_\x\xe7t
;

1086 
i
;

1087 
\xbbt
;

1089 i\xe0(
di\xa7b\xcbd
 =\xf0
f\x9\x93_\x\xe7t
 - 1)

1090 
sm\x\xabˡ
;

1092 
i
 = 0; i <
f\x9\x93_\x\xe7t
; i++) {

1093 i\xe0(
m\x94ge_f
[
i
].
fd
 =\xf0
ERROR
 ||
sm\x\xabˡ
 == &merge_f[i])

1095 (
\xbbt
 =
	`com\xb7\xbb
(
m\x94ge_f
[
i
].
l\x9\xab
,
sm\x\xabˡ
->line)) == 0) {

1096 i\xe0(
	`\xbbad_l\x9\xab
(&
m\x94ge_f
[
i
]\xe8=\xf0
ERROR
)

1099 i\xe0(
\xbbt
 < 0)

1100 
	`sk\x9d_l\x9\xabs
(&
m\x94ge_f
[
i
],
f\x9\x93_\x\xe7t
);

1102 
sm\x\xabˡ
;

1103
	}
}

1108
	$uniq_l\x9\xabs
(
m\x94g
\xe8
MERGE
 *merg;

1110 
ϡl\x9\xab
[
LINE_SIZE
];

1113
	`put_l\x9\xab
(
m\x94g
->
l\x9\xab
);

1114
	`c\xddy
(
ϡl\x9\xab
,
m\x94g
->
l\x9\xab
);

1115 i\xe0(
	`\xbbad_l\x9\xab
(
m\x94g
\xe8=\xf0
ERROR
)

1118 
	`com\xb7\xbb
(
ϡl\x9\xab
,
m\x94g
->
l\x9\xab
\xe8=\xf0
SAME
)

1119 i\xe0(
	`\xbbad_l\x9\xab
(
m\x94g
\xe8=\xf0
ERROR
)

1123
	}
}

1129
	$check_f\x9\x93
(
fd
,
f\x9\x93
) fd;

1130 *
f\x9\x93
;

1132 
MERGE
 *
m\x94g
;

1133 
ϡl\x9\xab
[
LINE_SIZE
];

1134 
\xbbt
;

1136 i\xe0(
fd
 == 0)

1137
f\x9\x93
 = "stdin";

1138
m\x94g
 = (
MERGE
 *)
mem_t\xdd
;

1139
m\x94g
->
buf\xe3r
 =
mem_t\xdd
 + (
MERGE
);

1140
m\x94g
->
l\x9\xab
 =
	`msbrk
(
LINE_SIZE
);

1141
m\x94g
->
\xfat
 = m\x94g->
\xbbad_ch\xacs
 = 0;

1142
m\x94g
->
fd
 = fd;

1143
buf_size
 =
MEMORY_SIZE
 - (
MERGE
);

1145 i\xe0(
	`\xbbad_l\x9\xab
(
m\x94g
\xe8=\xf0
ERROR
)

1147
	`c\xddy
(
ϡl\x9\xab
,
m\x94g
->
l\x9\xab
);

1150 i\xe0(
	`\xbbad_l\x9\xab
(
m\x94g
\xe8=\xf0
ERROR
)

1152 i\xe0((
\xbbt
 =
	`com\xb7\xbb
(
ϡl\x9\xab
,
m\x94g
->
l\x9\xab
)) > 0) {

1153
	`\x94r\xdc
(
FALSE
, "Dis\xdcd\x94 i\xc0f\x9e\x90",
f\x9\x93
);

1154
	`wr\x99e
(2,
m\x94g
->
l\x9\xab
,
	`\xcbngth
(merg->line));

1156 } i\xe0(
\xbbt
 < 0)

1157
	`c\xddy
(
ϡl\x9\xab
,
m\x94g
->
l\x9\xab
);

1158 i\xe0(
uniq
) {

1159
	`\x94r\xdc
(
FALSE
, "N\xda uniq\x86\x9a\x90\x9a f\x9e\x90",
f\x9\x93
);

1160
	`wr\x99e
(2,
m\x94g
->
l\x9\xab
,
	`\xcbngth
(merg->line));

1165
	`mbrk
(
mem_t\xdd
);

1166
	}
}

1171
	$\xcbngth
(
l\x9\xab
) *line;

1173 
i
 = 1;

1175 *
l\x9\xab
++ != '\n')

1176
i
++;

1177 
i
;

1178
	}
}

1183
	$c\xddy
(
de\xa1
,
\xa4c
) *dest, *src;

1185 (*
de\xa1
++ = *
\xa4c
++) != '\n')

1187
	}
}

1192 *
	$msbrk
(
size
)

1193 
size
;

1195 *
	`sbrk
();

1196 *
add\xbbss
;

1198 i\xe0((
add\xbbss
 =
	`sbrk
(
size
)) < 0)

1199
	`\x94r\xdc
(
TRUE
, "Nكnough mem\xdcy. U\xa3 chmem\x81خlo\xff\x8b m\xdce",
NIL_PTR
);

1200 
add\xbbss
;

1201
	}
}

1206 *
	$mbrk
(
size
)

1207 
size
;

1209 *
	`brk
();

1210 *
add\xbbss
;

1212 i\xe0((
add\xbbss
 =
	`brk
(
size
)) < 0)

1213
	`\x94r\xdc
(
TRUE
, "C\xaanلe\xa3\x88mem\xdcy",
NIL_PTR
);

1214 
add\xbbss
;

1215
	}
}

	@commands/split.cpp

9 
	~"blocksiz.h\xb5
"

11 
	gcut_l\x9\xab
 = 1000;

12 
	g\x9af\x9\x93
;

13 
	gout_f\x9\x93
[100];

14 *
	gsuffix
;

17 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

18 
i
;

20
out_f\x9\x93
[0] = 'x';

21
\x9af\x9ee
 = -1;

23 i\xe0(
\xacgc
 > 4)

24
	`u\xa7ge
();

25 
i
 = 1; i <
\xacgc
; i++) {

26 i\xe0(
\xacgv
[
i
][0] == '-') {

27 i\xe0(
\xacgv
[
i
][1] >\xf0'0' &&\x87rgv[i][1] <\xf0'9' &&
cut_l\x9\xab
 == 1000)

28
cut_l\x9\xab
 =
	`\xa9oi
(
\xacgv
[
i
]);

29 i\xe0(
\xacgv
[
i
][1] =\xf0'\0' &&
\x9af\x9ee
 == -1)

30
\x9af\x9ee
 = 0;

32
	`u\xa7ge
();

33 } i\xe0(
\x9af\x9ee
 == -1) {

34 i\xe0((
\x9af\x9ee
 =
	`ݒ
(
\xacgv
[
i
], 0)) < 0) {

35
	`\xa1d_\x94r
("Cannot open input file.\n");

36
	`ex\x99
(1);

39
	`\xa1r\xfdy
(
out_f\x9\x93
,
\xacgv
[
i
]);

41 i\xe0(
\x9af\x9ee
 == -1)

42
\x9af\x9ee
 = 0;

43
	`\xa1r\xf\xe1
(
out_f\x9\x93
, "aa");

44 
suffix
 =
out_f\x9\x93
; *suffix; suffix++)

46
suffix
--;

48 *
suffix
 = 'a' - 1;

49
	`\xa5l\x99
();

51
	}
}

53 
	$\xa5l\x99
() {

54 
buf
[
BLOCK_SIZE
];

55 *
\x9adex
, *
ba\xa3
;

56 
n
;

57 
fd
;

58 
l\x9\xabs
 = 0L;

60
fd
 =
	`\xc3wf\x9\x93
();

61 (
n
 =
	`\xbbad
(
\x9af\x9ee
,
buf
,
BLOCK_SIZE
)) > 0) {

62
ba\xa3
 =
\x9adex
 =
buf
;

63 --
n
 >= 0) {

64 i\xe0(*
\x9adex
++ == '\n')

65 i\xe0(++
l\x9\xabs
 %
cut_l\x9\xab
 == 0) {

66 i\xe0(
	`wr\x99e
(
fd
,
ba\xa3
,
\x9adex
 - base) != index - base)

67
	`qu\x99
();

68
ba\xa3
 =
\x9adex
;

69
	`\x\xe3o\xa3
(
fd
);

70
fd
 =
	`\xc3wf\x9\x93
();

73 i\xe0(
	`wr\x99e
(
fd
,
ba\xa3
,
\x9adex
 - base) != index - base)

74
	`qu\x99
();

76
	}
}

78 
	$\xc3wf\x9\x93
() {

79 
fd
;

81 i\xe0(++*
suffix
 > 'z') {

82 *
suffix
 = 'a';

83 ++*(
suffix
 - 1);

87 i\xe0((
fd
 =
	`\xfc\x97t
(
out_f\x9\x93
, 0644)) < 0) {

88
	`\xa1d_\x94r
("Cannot create\x82ew file.\n");

89
	`ex\x99
(2);

91 
fd
;

92
	}
}

94 [[
nܑu\xba
]] 
	$u\xa7ge
() {

95
	`\xa1d_\x94r
("Usage: split [-n] [file [name]].\n");

96
	`ex\x99
(1);

97
	}
}

99 [[
nܑu\xba
]] 
	$qu\x99
() {

100
	`\xa1d_\x94r
("split: write\x83rror\n");

101
	`ex\x99
(1);

102
	}
}

	@commands/stty.cpp

9 
	~"sg\x89y.h\xb5
"

10 *
	g\xda
[] = {"tabs", "cbreak", "raw", "-nl", "echo"};

11 *
	goff
[] = {"-tabs", "", "", "nl", "-echo"};

12 
	gk
;

14 
sg\x89yb

	g\xacgs
;

15 
tch\xacs

	gtch
;

17 
	#STARTC
 021

	)

18 
	#STOPC
 023

	)

19 
	#QUITC
 034

	)

20 
	#EOFC
 004

	)

21 
	#DELC
 0177

	)

24 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

27
	`io\xf9l
(0,
TIOCGETP
, &
\xacgs
);

28
	`io\xf9l
(0,
TIOCGETC
, &
tch
);

29 i\xe0(
\xacgc
 == 1) {

30
	`\xbbp\xd\xf9
();

35
k
 = 1;

36 
k
 <
\xacgc
) {

37
	`\xddti\xda
(
\xacgv
[
k
],\x87rgv[k + 1]);

38
k
++;

40
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

41
	`io\xf9l
(0,
TIOCSETC
, &
tch
);

43
	}
}

45 
	$\xbbp\xd\xf9
() {

46 
mode
;

48
mode
 =
\xacgs
.
sg_\xe6ags
;

49
	`\xb4
(
mode
 &
XTABS
, 0);

50
	`\xb4
(
mode
 &
CBREAK
, 1);

51
	`\xb4
(
mode
 &
RAW
, 2);

52
	`\xb4
(
mode
 &
CRMOD
, 3);

53
	`\xb4
(
mode
 &
ECHO
, 4);

54
	`\xb4\x9\xa9s
("\nkill = ");

55
	`\xb4\xf9l
(
\xacgs
.
sg_k\x9\x96
);

56
	`\xb4\x9\xa9s
("\nerase = ");

57
	`\xb4\xf9l
(
\xacgs
.
sg_\x94a\xa3
);

58
	`\xb4\x9\xa9s
("\nint = ");

59
	`\xb4\xf9l
(
tch
.
t_\x9a\x8cc
);

60
	`\xb4\x9\xa9s
("\nquit = ");

61
	`\xb4\xf9l
(
tch
.
t_qu\x99c
);

62
	`\xb4\x9\xa9s
("\n");

63
	}
}

65 
	$\xb4
(
f
, 
n
) {

66 i\xe0(
f
)

67
	`\xb4\x9\xa9s
("%\xa0",
\xda
[
n
]);

69
	`\xb4\x9\xa9s
("%\xa0",
off
[
n
]);

70
	}
}

72 
	$\xddti\xda
(*
\xddt
, *
\xc3xt
) {

73 i\xe0(
	`m\xa9ch
(
\xddt
, "-tabs")) {

74
\xacgs
.
sg_\xe6ags
 &\xf0~
XTABS
;

77 i\xe0(
	`m\xa9ch
(
\xddt
, "-raw")) {

78
\xacgs
.
sg_\xe6ags
 &\xf0~
RAW
;

81 i\xe0(
	`m\xa9ch
(
\xddt
, "-cbreak")) {

82
\xacgs
.
sg_\xe6ags
 &\xf0~
CBREAK
;

85 i\xe0(
	`m\xa9ch
(
\xddt
, "-echo")) {

86
\xacgs
.
sg_\xe6ags
 &\xf0~
ECHO
;

89 i\xe0(
	`m\xa9ch
(
\xddt
, "-nl")) {

90
\xacgs
.
sg_\xe6ags
 |\xf0
CRMOD
;

93 i\xe0(
	`m\xa9ch
(
\xddt
, "tabs")) {

94
\xacgs
.
sg_\xe6ags
 |\xf0
XTABS
;

97 i\xe0(
	`m\xa9ch
(
\xddt
, "raw")) {

98
\xacgs
.
sg_\xe6ags
 |\xf0
RAW
;

101 i\xe0(
	`m\xa9ch
(
\xddt
, "cbreak")) {

102
\xacgs
.
sg_\xe6ags
 |\xf0
CBREAK
;

105 i\xe0(
	`m\xa9ch
(
\xddt
, "echo")) {

106
\xacgs
.
sg_\xe6ags
 |\xf0
ECHO
;

109 i\xe0(
	`m\xa9ch
(
\xddt
, "nl")) {

110
\xacgs
.
sg_\xe6ags
 &\xf0~
CRMOD
;

113 i\xe0(
	`m\xa9ch
(
\xddt
, "kill")) {

114
\xacgs
.
sg_k\x9\x96
 = *
\xc3xt
;

115
k
++;

118 i\xe0(
	`m\xa9ch
(
\xddt
, "erase")) {

119
\xacgs
.
sg_\x94a\xa3
 = *
\xc3xt
;

120
k
++;

123 i\xe0(
	`m\xa9ch
(
\xddt
, "int")) {

124
tch
.
t_\x9a\x8cc
 = *
\xc3xt
;

125
k
++;

128 i\xe0(
	`m\xa9ch
(
\xddt
, "quit")) {

129
tch
.
t_qu\x99c
 = *
\xc3xt
;

130
k
++;

134 i\xe0(
	`m\xa9ch
(
\xddt
, "default")) {

135
\xacgs
.
sg_\xe6ags
 =
ECHO
 |
CRMOD
 |
XTABS
;

136
\xacgs
.
sg_k\x9\x96
 = '@';

137
\xacgs
.
sg_\x94a\xa3
 = '\b';

138
tch
.
t_\x9a\x8cc
 =
DELC
;

139
tch
.
t_qu\x99c
 =
QUITC
;

140
tch
.
t_\xa1\xa\xf9c
 =
STARTC
;

141
tch
.
t_\xa1\xddc
 =
STOPC
;

142
tch
.
t_eofc
 =
EOFC
;

146
	`\xa1d_\x94r
("unknown mode: ");

147
	`\xa1d_\x94r
(
\xddt
);

148
	`\xa1d_\x94r
("\n");

149
	}
}

151 
	$m\xa9ch
(
s1
,
s2
)

152 *
s1
, *
s2
;

156 i\xe0(*
s1
 =\xf00 && *
s2
 == 0)

158 i\xe0(*
s1
 =\xf00 || *
s2
 == 0)

160 i\xe0(*
s1
 !\xf0*
s2
)

162
s1
++;

163
s2
++;

165
	}
}

167 
	$\xb4\xf9l
(
c
) {

168 i\xe0(
c
 < ' ')

169
	`\xb4\x9\xa9s
("^%c", 'A' +
c
 - 1);

170 i\xe0(
c
 == 0177)

171
	`\xb4\x9\xa9s
("DEL");

173
	`\xb4\x9\xa9s
("%c",
c
);

174
	}
}

	@commands/su.cpp

9 
	~"pwd.h\xb5
"

10 
	~"sg\x89y.h\xb5
"

11 
	~"\xa1dio.h\xb5
"

14 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

15 *
\xc7me
;

16 *
	`\xfcy\xb1
();

17 *
sh\x96l
 = "/bin/sh";

18 
\xc4
;

19 
\xb7ssw\xdcd
[14];

20 
sg\x89yb

\xacgs
;

21 
\xb7sswd
 *
pwd
;

22 
\xb7sswd
 *
	`g\x91pw\xc7m
();

24 i\xe0(
\xacgc
 > 1)

25
\xc7me
 =
\xacgv
[1];

27
\xc7me
 = "root";

29 i\xe0((
pwd
 =
	`g\x91pw\xc7m
(
\xc7me
)) == 0) {

30
	`\xa1d_\x94r
("Unknown id: ");

31
	`\xa1d_\x94r
(
\xc7me
);

32
	`\xa1d_\x94r
("\n");

33
	`ex\x99
(1);

36 i\xe0(
pwd
->
pw_\xb7sswd
[0] !\xf0'\0' &&
	`g\x91uid
() != 0) {

37
	`\xa1d_\x94r
("Password: ");

38
	`io\xf9l
(0,
TIOCGETP
, &
\xacgs
);

39
\xacgs
.
sg_\xe6ags
 =\x87rgs.sg_\xe6ag\xa0& (~
ECHO
);

40
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

41
\xc4
 =
	`\xbbad
(0,
\xb7ssw\xdcd
, 14);

42
\xb7ssw\xdcd
[
\xc4
 - 1] = 0;

43
	`putc
('\n',
\xa1d\x94r
);

44
\xacgs
.
sg_\xe6ags
 =\x87rgs.sg_\xe6ag\xa0|
ECHO
;

45
	`io\xf9l
(0,
TIOCSETP
, &
\xacgs
);

46 i\xe0(
	`\xa1rcmp
(
pwd
->
pw_\xb7sswd
,
	`\xfcy\xb1
(
\xb7ssw\xdcd
,\x85wd->pw_passwd))) {

47
	`\xa1d_\x94r
("Sorry\n");

48
	`ex\x99
(2);

51
	`\xa3tgid
(
pwd
->
pw_gid
);

52
	`\xa3tuid
(
pwd
->
pw_uid
);

53 i\xe0(
pwd
->
pw_sh\x96l
[0])

54
sh\x96l
 =
pwd
->
pw_sh\x96l
;

55
	`exe\x\xe7
(
sh\x96l
);

56
	`\xa1d_\x94r
("No shell\n");

57
	`ex\x99
(3);

58
	}
}

	@commands/sum.cpp

20 
	~<c\xa1dlib
>

21 
	~<c\xa1r\x9ag
>

22 
	~<f\x\xe7\x8e.h
>

23 
	~<uni\xa1d.h
>

26
cڡex\xb4
 
	gkBufSize
 = 512;

28 
\x94r\xdc
(cڡ *
s
, cڡ *
f
);

29 
sum
(
fd
, cڡ *
\xe2ame
);

30 
putd
(
numb\x94
, 
fw
, 
z\x94os
);

33 
	grc
 = 0;

36 *
	gde\xe7rgv
[] = {"-",
nuαr
};

39 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

40 
fd
;

42 i\xe0(*++
\xacgv
 == 0)

43
\xacgv
 =
de\xe7rgv
;

44 ; *
\xacgv
; ++argv) {

45 i\xe0(
\xacgv
[0][0] == '-' &&\x87rgv[0][1] == '\0') {

46
fd
 = 0;

48
fd
 =
	`ݒ
(*
\xacgv
,
O_RDONLY
);

51 i\xe0(
fd
 == -1) {

52
	`\x94r\xdc
("\xffn'\x88ݒ ", *
\xacgv
);

53
rc
 = 1;

56
	`sum
(
fd
, (
\xacgc
 > 2\xe8? *
\xacgv
 :
nuαr
);

57 i\xe0(
fd
 != 0) {

58
	`\x\xe3o\xa3
(
fd
);

61
	`ex\x99
(
rc
);

62
	}
}

64 
	$\x94r\xdc
(cڡ *
s
, cڡ *
f
) {

65
	`\xa1d_\x94r
("sum: ");

66
	`\xa1d_\x94r
(
s
);

68 i\xe0(
f
) {

69
	`\xa1d_\x94r
(
f
);

71
	`\xa1d_\x94r
("\n");

72
	}
}

74 
	$sum
(
fd
, cڡ *
\xe2ame
) {

75 
buf
[
kBufSize
];

76 
i
;

77 
n
;

78 
size
 = 0;

79 
\xfcc
 = 0;

80 
tmp
;

82 (
n
 =
	`\xbbad
(
fd
,
buf
,
kBufSize
)) > 0) {

83 
i
 = 0; i <
n
; i++) {

84
\xfcc
 = (crc >> 1) + ((crc & 1) ? 0x8000 : 0);

85
tmp
 =
buf
[
i
] & 0377;

86
\xfcc
 +\xf0
tmp
;

87
\xfcc
 &= 0xffff;

88
size
++;

92 i\xe0(
n
 < 0) {

93 i\xe0(
\xe2ame
) {

94
	`\x94r\xdc
("\xbbad\x83\xbc\xdc o\xc0",
\xe2ame
);

96
	`\x94r\xdc
("\xbbad\x83\xbc\xdc",
nuαr
);

98
rc
 = 1;

101
	`putd
(
\xfcc
, 5, 1);

102
	`putd
((
size
 +
kBufSize
 - 1) / kBufSize, 6, 0);

103 i\xe0(
\xe2ame
) {

104
	`\xb4\x9\xa9s
(" %s",
\xe2ame
);

106
	`\xb4\x9\xa9s
("\n");

107
	}
}

109 
	$putd
(
numb\x94
, 
fw
, 
z\x94os
) {

112 
buf
[10];

113 
n
;

114 
num
;

116
num
 =
\xa1\xa9ic_\xff\xa1
<>(
numb\x94
);

117 
n
 = 0;\x82 <
fw
; ++n) {

118 i\xe0(
num
 ||
n
 == 0) {

119
buf
[
fw
 -
n
 - 1] = '0' +
num
 % 10;

120
num
 /= 10;

122
buf
[
fw
 -
n
 - 1] =
z\x94os
 ? '0' : ' ';

125
buf
[
fw
] = 0;

126
	`\xb4\x9\xa9s
("%s",
buf
);

127
	}
}

	@commands/svcctl.cpp

1 
	~"svc\xf9l.h\xb5
"

2 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

3 
	~<c\xa1dio
>

4 
	~<c\xa1dlib
>

5 
	~<c\xa1r\x9ag
>

6 
	~<\xa1r\x9ag_v\x9bw
>

8
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

10
\xc7me\xa5a\xfb

	gsvc\xf9l
 {

13 
\x92su\xbb_c\xda\xc3\xf9i\xda
() {

14
ωi\xfb_c\xda\xc3\xf9
(
CLIENT_PID
,
MANAGER_PID
);

15
ωi\xfb_c\xda\xc3\xf9
(
MANAGER_PID
,
CLIENT_PID
);

19 
\xa3nd_sim\xb6e
(
Mes\xa7ge

ty\xb3
,
x\x9aim
::
pid_t

pid
) {

20
mes\xa7ge

msg
{};

21
	gmsg
.
	gm_ty\xb3
 =
\xa1\xa9ic_\xff\xa1
<>(
ty\xb3
);

22
	gmsg
.
m1_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
pid
);

23
ωi\xfb_\xa3nd
(
CLIENT_PID
,
MANAGER_PID
,
msg
);

27 
\xbbcv_block\x9ag
(
mes\xa7ge
 &
out
) {

28 
ωi\xfb_\xbbcv
(
CLIENT_PID
, &
out
\xe8!\xf0
x\x9aim
::
OK
) {

32 
run
(
\xa1d
::
\xa5\xaa
<*>
\xacgs
) {

33 i\xe0(
\xacgs
.
size
() < 2) {

34
\xa1d
::
puts
("usage: svcctl <list|start|stop|restart> [pid]");

38
\x92su\xbb_c\xda\xc3\xf9i\xda
();

40
	g\xa1d
::
\xa1r\x9ag_v\x9bw

sub
{
\xacgs
[1]};

41 i\xe0(
	gsub
 == "list") {

42
mes\xa7ge

\xbbq
{};

43
	g\xbbq
.
	gm_ty\xb3
 =
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
LIST
);

44
ωi\xfb_\xa3nd
(
CLIENT_PID
,
MANAGER_PID
,
\xbbq
);

45 #i\xe2de\xe0
SVCCTL_NO_WAIT


47
mes\xa7ge

	g\xbb\xa5
{};

48
\xbbcv_block\x9ag
(
\xbb\xa5
);

49 i\xe0(
	g\xbb\xa5
.
	gm_ty\xb3
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
END
)) {

52 i\xe0(
	g\xbb\xa5
.
	gm_ty\xb3
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
LIST_RESPONSE
)) {

53
\xa1d
::
\xb4\x9atf
("%d %s\n",
\xbb\xa5
.
m1_i1
(),\x84e\xa5.
m1_i2
() ? "running" : "stopped");

60 i\xe0(
	g\xacgs
.
size
() < 3) {

61
	g\xa1d
::
puts
("pid\x84equired");

64
	gx\x9aim
::
pid_t

pid
 =
\xa1\xa9ic_\xff\xa1
<
x\x9aim
::pid_t>(
\xa1d
::
\xa9oi
(
\xacgs
[2]));

66 i\xe0(
	gsub
 == "start") {

67
\xa3nd_sim\xb6e
(
Mes\xa7ge
::
START
,
pid
);

68 } i\xe0(
	gsub
 == "stop") {

69
\xa3nd_sim\xb6e
(
Mes\xa7ge
::
STOP
,
pid
);

70 } i\xe0(
	gsub
 == "restart") {

71
\xa3nd_sim\xb6e
(
Mes\xa7ge
::
RESTART
,
pid
);

73
	g\xa1d
::
puts
("unknown subcommand");

77 #i\xe2de\xe0
SVCCTL_NO_WAIT


78
mes\xa7ge

	gack
{};

79
\xbbcv_block\x9ag
(
ack
);

86 #i\xe2de\xe0
SVCCTL_NO_MAIN


87 
	$ma\x9a
(
\xacgc
, **
\xacgv
\xe8{ 
svc\xf9l
::
	`run
({\xacgv,
\xa1\xa9ic_\xff\xa1
<
size_t
>\xd7rgc)});
	}
}

	@commands/svcctl.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

8 
	~<\xa5\x\xaf
>

10
\xc7me\xa5a\xfb

	gsvc\xf9l
 {

13 \xfeas\xa0
	cMes\xa7ge
 : {

14
LIST
 = 1,

15
	gSTART
 = 2,

16
	gSTOP
 = 3,

17
	gRESTART
 = 4,

18
	gLIST_RESPONSE
 = 5,

19
	gACK
 = 6,

20
	gEND
 = 7,

21
	gSHUTDOWN
 = 8

24
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
pid_t

CLIENT_PID
 = 200;

25
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
pid_t

MANAGER_PID
 = 1;

37 
run
(
\xa1d
::
\xa5\xaa
<*>
\xacgs
);

	@commands/sync.cpp

9 
	~<uni\xa1d.h
>

12 
	$ma\x9a
() {

14
	`sync
();

16
	}
}

	@commands/tail.cpp

9 
	~"\xa1dio.h\xb5
"

10 
	#TRUE
 1

	)

11 
	#FALSE
 0

	)

12 
	#BLANK
 ' '

	)

13 
	#TAB
 '\t'

	)

14 
	#NEWL
 '\n'

	)

16 
	gl\x9\xabs
,
	gch\xacs
;

17 
	gbuff
[
BUFSIZ
];

20 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

21 *
s
;

22
FILE
 *
\x9aput
, *
	`fݒ
();

23 
cou\xc1
;

25
	`\xa3tbuf
(
\xa1dout
,
buff
);

26
\xacgc
--;

27
\xacgv
++;

28
l\x9\xabs
 =
TRUE
;

29
ch\xacs
 =
FALSE
;

30
cou\xc1
 = -10;

32 i\xe0(
\xacgc
 == 0) {

33
	`\x8f\x9e
(
\xa1d\x9a
,
cou\xc1
);

34
	`d\xd\xab
(0);

37
s
 = *
\xacgv
;

38 i\xe0(*
s
 == '-' || *s == '+') {

39
s
++;

40 i\xe0(*
s
 >= '0' && *s <= '9') {

41
cou\xc1
 =
	`\xa1oi
(*
\xacgv
);

42
s
++;

43 *
s
 >= '0' && *s <= '9')

44
s
++;

46 i\xe0(*
s
 == 'c') {

47
ch\xacs
 =
TRUE
;

48
l\x9\xabs
 =
FALSE
;

49 } i\xe0(*
s
 !\xf0'l' && *\xa0!\xf0
NULL
) {

50
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\x8f\x9e: unknow\xc0\xddti\xda %c\n", *
s
);

51
\xacgc
 = 0;

53
\xacgc
--;

54
\xacgv
++;

57 i\xe0(
\xacgc
 < 0) {

58
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "Usage:\x81ail [+/-[number][lc]] [files]\n");

59
	`d\xd\xab
(1);

62 i\xe0(
\xacgc
 == 0)

63
	`\x8f\x9e
(
\xa1d\x9a
,
cou\xc1
);

65 i\xe0((
\x9aput
 =
	`fݒ
(*
\xacgv
, "r")\xe8=\xf0
NULL
) {

66
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "\x8f\x9e: c\xaa'\x88ݒ %s\n", *
\xacgv
);

67
	`d\xd\xab
(1);

69
	`\x8f\x9e
(
\x9aput
,
cou\xc1
);

70
	`f\x\xe3o\xa3
(
\x9aput
);

73
	`d\xd\xab
(0);

75
	}
}

80 
	$\xa1oi
(*
s
) {

81 
n
,
sign
;

83 *
s
 =\xf0
BLANK
 || *\xa0=\xf0
NEWL
 || *\xa0=\xf0
TAB
)

84
s
++;

86
sign
 = 1;

87 i\xe0(*
s
 == '+')

88
s
++;

89 i\xe0(*
s
 == '-') {

90
sign
 = -1;

91
s
++;

93 
n
 = 0; *
s
 >= '0' && *s <= '9'; s++)

94
n
 = 10 *\x82 + *
s
 - '0';

95  (
sign
 *
n
);

96
	}
}

100 
	#INCR
(
p
) \

101 i\xe0(
p
 >\xf0
\x92d
) \

102
p
 =
cbuf
; \

104
p
++

	)

105 
	#BUF_SIZE
 4098

	)

107 
	gcbuf
[
BUF_SIZE
];

110 
	$\x8f\x9e
(
FILE
 *
\x9a
, 
g\xd\xe6
) {

111 
c
,
cou\xc1
;

112 *
\xa1\xact
, *
f\x9aish
, *
\x92d
;

114
cou\xc1
 = 0;

116 i\xe0(
g\xd\xe6
 > 0) {

118 i\xe0(
l\x9\xabs
)

119 (
c
 =
	`g\x91c
(
\x9a
)\xe8!\xf0
EOF
) {

120 i\xe0(
c
 =\xf0
NEWL
)

121
cou\xc1
++;

122 i\xe0(
cou\xc1
 >\xf0
g\xd\xe6
)

126 
	`g\x91c
(
\x9a
\xe8!\xf0
EOF
) {

127
cou\xc1
++;

128 i\xe0(
cou\xc1
 >\xf0
g\xd\xe6
)

131 i\xe0(
cou\xc1
 >\xf0
g\xd\xe6
)

132 (
c
 =
	`g\x91c
(
\x9a
)\xe8!\xf0
EOF
)

133
	`putc
(
c
,
\xa1dout
);

138
g\xd\xe6
 = -goal;

139
\xa1\xact
 =
f\x9aish
 =
cbuf
;

140
\x92d
 = &
cbuf
[
BUF_SIZE
 - 1];

142 (
c
 =
	`g\x91c
(
\x9a
)\xe8!\xf0
EOF
) {

143 *
f\x9aish
 =
c
;

144
	`INCR
(
f\x9aish
);

146 i\xe0(
\xa1\xact
 =\xf0
f\x9aish
)

147
	`INCR
(
\xa1\xact
);

148 i\xe0(!
l\x9\xabs
 ||
c
 =\xf0
NEWL
)

149
cou\xc1
++;

151 i\xe0(
cou\xc1
 >
g\xd\xe6
) {

152
cou\xc1
 =
g\xd\xe6
;

153 i\xe0(
l\x9\xabs
)

154 *
\xa1\xact
 !\xf0
NEWL
)

155
	`INCR
(
\xa1\xact
);

156
	`INCR
(
\xa1\xact
);

161 
\xa1\xact
 !\xf0
f\x9aish
) {

162
	`putc
(*
\xa1\xact
,
\xa1dout
);

163
	`INCR
(
\xa1\xact
);

168
	}
}

171 [[
nܑu\xba
]] 
	$d\xd\xab
(
n
) {

172
	`_\x\xe3\x97nup
();

173
	`ex\x99
(
n
);

174
	}
}

	@commands/tar.cpp

19 
	~"\xa1\xa9.h\xb5
"

21 
	sd\x9\xfb\xf9
 {

22 
	md_\x9ao
;

23 
	md_\xc7me
[14];

27
us\x9ag

	gBOOL
 = ;

28 
	#TRUE
 1

	)

29 
	#FALSE
 0

	)

31 
	#HEADER_SIZE
 512

	)

32 
	#NAME_SIZE
 100

	)

33 
	#BLOCK_BOUNDARY
 20

	)

36 
	uHEADER
 {

37 
	mhdr_block
[
HEADER_SIZE
];

38 
	sm
 {

39 
	mm_\xc7me
[
NAME_SIZE
];

40 
	mm_mode
[8];

41 
	mm_uid
[8];

42 
	mm_gid
[8];

43 
	mm_size
[12];

44 
	mm_time
[12];

45 
	mm_checksum
[8];

46 
	mm_l\x9aked
;

47 
	mm_l\x9ak
[
NAME_SIZE
];

48 }
	mmemb\x94
;

51
HEADER

	gh\x97d\x94
;

53 
	#INT_TYPE
 ((
h\x97d\x94
.
memb\x94
.
m_uid
))

	)

54 
	#LONG_TYPE
 ((
h\x97d\x94
.
memb\x94
.
m_size
))

	)

56 
	#MKDIR
 "/b\x9a/mkd\x9c"

	)

58 
	#NIL_HEADER
 ((
HEADER
 *)0)

	)

59 
	#NIL_PTR
 ((*)0)

	)

60 
	#BLOCK_SIZE
 512

	)

62 
	#\xe6ush
(\xe8
	`\xb4\x9\xa9
(
NIL_PTR
)

	)

64
BOOL

	gshow_\xe6
,
	g\xfc\x97t_\xe6
,
	gext_\xe6
;

66 
	g\x8\xe4_fd
;

67 
	gu\xa7ge
[] = "Usage:\x81ar [cxt]\x81arfile [files].";

68 
	gio_buf\xe3r
[
BLOCK_SIZE
];

70 
	gtٮ_blocks
;

71 
c\xdav\x94t
();

73 
	#block_size
() \

74 ()((
	`c\xdav\x94t
(
h\x97d\x94
.
memb\x94
.
m_size
,
LONG_TYPE
\xe8+ ()
BLOCK_SIZE
 - 1\xe8/ ()BLOCK_SIZE)

	)

76
	$\x94r\xdc
(
s1
,
s2
) *s1, *s2;

78
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "%\xa0%s\n",
s1
,
s2
 ? s2 : "");

79
	`\xe6ush
();

80
	`ex\x99
(1);

81
	}
}

84 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

85 *
\xb1r
;

86 
i
;

88 i\xe0(
\xacgc
 < 3)

89
	`\x94r\xdc
(
u\xa7ge
,
NIL_PTR
);

91 
\xb1r
 =
\xacgv
[1]; *ptr;\x85tr++) {

92 *
\xb1r
) {

94
\xfc\x97t_\xe6
 =
TRUE
;

97
ext_\xe6
 =
TRUE
;

100
show_\xe6
 =
TRUE
;

103
	`\x94r\xdc
(
u\xa7ge
,
NIL_PTR
);

107 i\xe0(
\xfc\x97t_\xe6
 +
ext_\xe6
 +
show_\xe6
 != 1)

108
	`\x94r\xdc
(
u\xa7ge
,
NIL_PTR
);

110
\x8fr_fd
 =
\xfc\x97t_\xe6
 ?
	`\xfc\x97t
(
\xacgv
[2], 0644\xe8:
	`ݒ
(argv[2], 0);

112 i\xe0(
\x8fr_fd
 < 0)

113
	`\x94r\xdc
("C\xaan\xd9 o\xb3\xc0",
\xacgv
[2]);

115 i\xe0(
\xfc\x97t_\xe6
) {

116 
i
 = 3; i <
\xacgc
; i++)

117
	`add_f\x9\x93
(
\xacgv
[
i
]);

118
	`adju\xa1_bound\xacy
();

120
	`\x8\xe4f\x9\x93
();

122
	`\xe6ush
();

124
	}
}

126
BOOL

	$g\x91_h\x97d\x94
() {

127 
check
;

129
	`m\xbbad
(
\x8fr_fd
, &
h\x97d\x94
, (header));

130 i\xe0(
h\x97d\x94
.
memb\x94
.
m_\xc7me
[0] == '\0')

131 
FALSE
;

133
check
 = ()
	`c\xdav\x94t
(
h\x97d\x94
.
memb\x94
.
m_checksum
,
INT_TYPE
);

135 i\xe0(
check
 !\xf0
	`checksum
())

136
	`\x94r\xdc
("T\xac: h\x97d\x94 checksum\x83\xbc\xdc.",
NIL_PTR
);

138 
TRUE
;

139
	}
}

141
	$\x8\xe4f\x9\x93
() {

142 *
\xb1r
;

143 *
mem_\xc7me
;

145 
	`g\x91_h\x97d\x94
()) {

146
mem_\xc7me
 =
h\x97d\x94
.
memb\x94
.
m_\xc7me
;

147 i\xe0(
ext_\xe6
) {

148 i\xe0(
	`is_d\x9c
(
mem_\xc7me
)) {

149 
\xb1r
 =
mem_\xc7me
; *ptr;\x85tr++)

151 *(
\xb1r
 - 1) = '\0';

152
	`mkd\x9c
(
mem_\xc7me
);

154
	`ex\x8\xff\xf9
(
mem_\xc7me
);

156
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "%\xa0",
mem_\xc7me
);

157 i\xe0(
h\x97d\x94
.
memb\x94
.
m_l\x9aked
 == '1')

158
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "l\x9aked\x81\xd8%s",
h\x97d\x94
.
memb\x94
.
m_l\x9ak
);

160
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "%d\x81\xad\x90blocks",
	`block_size
());

161
	`\xb4\x9\xa9
("\n");

162
	`sk\x9d_\x92\x8cy
();

164
	`\xe6ush
();

166
	}
}

168
	$sk\x9d_\x92\x8cy
() {

169 
blocks
 =
	`block_size
();

171 
blocks
--)

172 ()
	`\xbbad
(
\x8fr_fd
,
io_buf\xe3r
,
BLOCK_SIZE
);

173
	}
}

175
	$ex\x8\xff\xf9
(
f\x9\x93
) *file;

177 
fd
;

179 i\xe0(
h\x97d\x94
.
memb\x94
.
m_l\x9aked
 == '1') {

180 i\xe0(
	`l\x9ak
(
h\x97d\x94
.
memb\x94
.
m_l\x9ak
,
f\x9\x93
) < 0)

181
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "C\xaanن\x9ak %\xa0t\xd8%s\n",
h\x97d\x94
.
memb\x94
.
m_l\x9ak
,
f\x9\x93
);

183
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "L\x9aked %\xa0t\xd8%s\n",
h\x97d\x94
.
memb\x94
.
m_l\x9ak
,
f\x9\x93
);

187 i\xe0((
fd
 =
	`\xfc\x97t
(
f\x9\x93
, 0644)) < 0) {

188
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "C\xaan\xd9 c\xbb\xa9\x90%s\n",
f\x9\x93
);

192
	`c\xddy
(
f\x9\x93
,
\x8fr_fd
,
fd
,
	`c\xdav\x94t
(
h\x97d\x94
.
memb\x94
.
m_size
,
LONG_TYPE
));

193 ()
	`\x\xe3o\xa3
(
fd
);

195
	`chmod
(
f\x9\x93
,
	`c\xdav\x94t
(
h\x97d\x94
.
memb\x94
.
m_mode
,
INT_TYPE
));

196
	`\xe6ush
();

197
	}
}

199
	$c\xddy
(
f\x9\x93
,
\xe4om
,
to
,
by\x8bs
) *file;

200 
\xe4om
,
to
;

201 
by\x8bs
;

203 
\xbb\xa1
;

204 
blocks
 = ()((
by\x8bs
 + ()
BLOCK_SIZE
 - 1) / ()BLOCK_SIZE);

206
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "%s, %d\x81\xad\x90blocks\n",
f\x9\x93
,
blocks
);

208 
blocks
--) {

209 ()
	`\xbbad
(
\xe4om
,
io_buf\xe3r
,
BLOCK_SIZE
);

210
\xbb\xa1
 = (
by\x8bs
 > ()
BLOCK_SIZE
) ? BLOCK_SIZE : ()bytes;

211
	`mwr\x99e
(
to
,
io_buf\xe3r
, (t\xd8=\xf0
\x8fr_fd
\xe8?
BLOCK_SIZE
 :
\xbb\xa1
);

212
by\x8bs
 -\xf0()
\xbb\xa1
;

214
	}
}

216 
	$c\xdav\x94t
(
\xa1r
,
ty\xb3
)

217 
\xa1r
[];

218 
ty\xb3
;

220 
ac
 = 0L;

221 
i
;

223 
i
 = 0; i <
ty\xb3
; i++) {

224 i\xe0(
\xa1r
[
i
] >= '0' && str[i] <= '7') {

225
ac
 <<= 3;

226
ac
 +\xf0()(
\xa1r
[
i
] - '0');

230 
ac
;

231
	}
}

233
	$mkd\x9c
(
d\x9c_\xc7me
) *dir_name;

235 
pid
,
w
;

237 i\xe0((
pid
 =
	`f\xdck
()) < 0)

238
	`\x94r\xdc
("C\xaan\xd9 f\xdck().",
NIL_PTR
);

240 i\xe0(
pid
 == 0) {

241
	`exe\x\xe3
(
MKDIR
, "mkd\x9c",
d\x9c_\xc7me
, 0);

242
	`\x94r\xdc
("C\xaan\xd9 f\x9ad mkd\x9c.",
NIL_PTR
);

246
w
 =
	`wa\x99
((*)0);

247 } 
w
 !\xf0-1 && w !\xf0
pid
);

248
	}
}

250
	$checksum
() {

251 *
\xb1r
 =
h\x97d\x94
.
memb\x94
.
m_checksum
;

252 
ac
 = 0;

254 
\xb1r
 < &
h\x97d\x94
.
memb\x94
.
m_checksum
[
INT_TYPE
])

255 *
\xb1r
++ = ' ';

257
\xb1r
 =
h\x97d\x94
.
hdr_block
;

258 
\xb1r
 < &
h\x97d\x94
.
hdr_block
[
BLOCK_SIZE
])

259
ac
 +\xf0*
\xb1r
++;

261 
ac
;

262
	}
}

264
	$is_d\x9c
(
f\x9\x93
) *file;

266 *
f\x9\x93
++ != '\0')

269  (*(
f\x9\x93
 - 2) == '/');

270
	}
}

272 
	g\xb7th
[
NAME_SIZE
];

274 
	g\xb7th\xc7me
[
NAME_SIZE
];

275 *
	$\xb7th_\xc7me
(
f\x9\x93
)

276 *
f\x9\x93
;

279
	`\xa1r\x9ag_\xb4\x9\xa9
(
\xb7th\xc7me
, "%s%s",
\xb7th
,
f\x9\x93
);

280 
\xb7th\xc7me
;

281
	}
}

283
	$add_\xb7th
(
\xc7me
) *name;

285 *
\xb7th_\xb1r
 =
\xb7th
;

287 *
\xb7th_\xb1r
)

288
\xb7th_\xb1r
++;

290 i\xe0(
\xc7me
 =\xf0
NIL_PTR
) {

291 *
\xb7th_\xb1r
-- != '/')

293 *
\xb7th_\xb1r
 !\xf0'/' &&\x85\xa9h_\xb1\xb8!\xf0
\xb7th
)

294
\xb7th_\xb1r
--;

295 i\xe0(*
\xb7th_\xb1r
 == '/')

296
\xb7th_\xb1r
++;

297 *
\xb7th_\xb1r
 = '\0';

299 *
\xc7me
) {

300 i\xe0(
\xb7th_\xb1r
 =\xf0&
\xb7th
[
NAME_SIZE
])

301
	`\x94r\xdc
("P\xa9h\xc7m\x90to\xd8l\xdag",
NIL_PTR
);

302 *
\xb7th_\xb1r
++ = *
\xc7me
++;

304 *
\xb7th_\xb1r
++ = '/';

305 *
\xb7th_\xb1r
 = '\0';

307
	}
}

309
	$add_f\x9\x93
(
f\x9\x93
) *file;

311 
\xa1\xa9

\xa1
;

312 
d\x9\xfb\xf9

d\x9c
;

313 
fd
;

315 i\xe0(
	`\xa1\xa9
(
f\x9\x93
, &
\xa1
) < 0) {

316
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "C\xaan\xd9 f\x9ad %s\n",
f\x9\x93
);

319 i\xe0((
fd
 =
	`ݒ
(
f\x9\x93
, 0)) < 0) {

320
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "C\xaan\xd9 o\xb3\xc0%s\n",
f\x9\x93
);

324
	`make_h\x97d\x94
(
	`\xb7th_\xc7me
(
f\x9\x93
), &
\xa1
);

325
	`mwr\x99e
(
\x8fr_fd
, &
h\x97d\x94
, (header));

326 i\xe0(
\xa1
.
\xa1_mode
 &
S_IFREG
)

327
	`c\xddy
(
	`\xb7th_\xc7me
(
f\x9\x93
),
fd
,
\x8fr_fd
,
\xa1
.
\xa1_size
);

328 i\xe0(
\xa1
.
\xa1_mode
 &
S_IFDIR
) {

329 i\xe0(
	`chd\x9c
(
f\x9\x93
) < 0)

330
	`\xa1r\x9ag_\xb4\x9\xa9
(
NIL_PTR
, "C\xaan\xd9 chd\x9c\x81\xd8%s\n",
f\x9\x93
);

332
	`add_\xb7th
(
f\x9\x93
);

333
	`m\xbbad
(
fd
, &
d\x9c
, (dir));

334
	`m\xbbad
(
fd
, &
d\x9c
, (dir));

335 
	`\xbbad
(
fd
, &
d\x9c
, (dir)) == (dir))

336 i\xe0(
d\x9c
.
d_\x9ao
)

337
	`add_f\x9\x93
(
d\x9c
.
d_\xc7me
);

338
	`chd\x9c
("..");

339
	`add_\xb7th
(
NIL_PTR
);

342
	`\xb4\x9\xa9
(" Tar: unknown file\x81ype. Not\x87dded.\n");

344 ()
	`\x\xe3o\xa3
(
fd
);

345
	}
}

347
	$make_h\x97d\x94
(
f\x9\x93
,
\xa1
) *file;

348 
\xa1\xa9
 *
\xa1
;

350 *
\xb1r
 =
h\x97d\x94
.
memb\x94
.
m_\xc7me
;

352
	`\x\xe3\x97r_h\x97d\x94
();

354 *
\xb1r
++ = *
f\x9\x93
++)

357 i\xe0(
\xa1
->
\xa1_mode
 &
S_IFDIR
) {

358 *(
\xb1r
 - 1) = '/';

359
\xa1
->
\xa1_size
 = 0L;

362
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_mode
, "%I ",
\xa1
->
\xa1_mode
 & 07777);

363
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_uid
, "%I ",
\xa1
->
\xa1_uid
);

364
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_gid
, "%I ",
\xa1
->
\xa1_gid
);

365
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_size
, "%L ",
\xa1
->
\xa1_size
);

366
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_time
, "%L ",
\xa1
->
\xa1_mtime
);

367
h\x97d\x94
.
memb\x94
.
m_l\x9aked
 = ' ';

368
	`\xa1r\x9ag_\xb4\x9\xa9
(
h\x97d\x94
.
memb\x94
.
m_checksum
, "%I",
	`checksum
());

369
	}
}

371
	$\x\xe3\x97r_h\x97d\x94
() {

372 *
\xb1r
 =
h\x97d\x94
.
hdr_block
;

374 
\xb1r
 < &
h\x97d\x94
.
hdr_block
[
BLOCK_SIZE
])

375 *
\xb1r
++ = '\0';

376
	}
}

378
	$adju\xa1_bound\xacy
() {

379
	`\x\xe3\x97r_h\x97d\x94
();

380
	`mwr\x99e
(
\x8fr_fd
, &
h\x97d\x94
, (header));

382 
tٮ_blocks
++ <
BLOCK_BOUNDARY
)

383
	`mwr\x99e
(
\x8fr_fd
, &
h\x97d\x94
, (header));

384 ()
	`\x\xe3o\xa3
(
\x8fr_fd
);

385
	}
}

387
	$m\xbbad
(
fd
,
add\xbbss
,
by\x8bs
) fd, bytes;

388 *
add\xbbss
;

390 i\xe0(
	`\xbbad
(
fd
,
add\xbbss
,
by\x8bs
) != bytes)

391
	`\x94r\xdc
("T\xac:\x84\x97d\x83\xbc\xdc.",
NIL_PTR
);

392
	}
}

394
	$mwr\x99e
(
fd
,
add\xbbss
,
by\x8bs
) fd, bytes;

395 *
add\xbbss
;

397 i\xe0(
	`wr\x99e
(
fd
,
add\xbbss
,
by\x8bs
) != bytes)

398
	`\x94r\xdc
("T\xac: wr\x99\x90\x94r\xdc.",
NIL_PTR
);

400
tٮ_blocks
++;

401
	}
}

403 
	gou\x8dut
[
BLOCK_SIZE
];

404
	$\xb4\x9\xa9
(
\xa1r
) *str;

406 
\x9adex
 = 0;

408 i\xe0(
\xa1r
 =\xf0
NIL_PTR
) {

409
	`wr\x99e
(1,
ou\x8dut
,
\x9adex
);

410
\x9adex
 = 0;

414 *
\xa1r
) {

415
ou\x8dut
[
\x9adex
++] = *
\xa1r
++;

416 i\xe0(
\x9adex
 =\xf0
BLOCK_SIZE
) {

417
	`wr\x99e
(1,
ou\x8dut
,
BLOCK_SIZE
);

418
\x9adex
 = 0;

421
	}
}

423 *
	$num_out
(
numb\x94
)

424 
numb\x94
;

426 
num_buf
[13];

427 
\x8bmp
[13];

428 
i
;

430 
i
 = 0; i < 11; i++) {

431
\x8bmp
[
i
] = (
numb\x94
 & 07) + '0';

432
numb\x94
 >>= 3;

435 
i
 = 0; i < 11; i++)

436
num_buf
[
i
] =
\x8bmp
[10 - i];

438 
num_buf
;

439
	}
}

442
	$\xa1r\x9ag_\xb4\x9\xa9
(
buf\xe3r
,
fmt
,
\xacgs
) *buffer;

443 *
fmt
;

444 
\xacgs
;

446 *
buf_\xb1r
;

447 *
s\xf\xe2_\xb1r
;

448 
buf
[
NAME_SIZE
];

449 *
\xacg\xb1r
 = &
\xacgs
;

450
BOOL

\xb4_\xe6
,
i
;

452 i\xe0(
\xb4_\xe6
 = (
buf\xe3r
 =\xf0
NIL_PTR
))

453
buf\xe3r
 =
buf
;

455
buf_\xb1r
 =
buf\xe3r
;

456 *
fmt
) {

457 i\xe0(*
fmt
 == '%') {

458
fmt
++;

459 *
fmt
++) {

461
s\xf\xe2_\xb1r
 = (*)*
\xacg\xb1r
;

464
s\xf\xe2_\xb1r
 =
	`num_out
(()*
\xacg\xb1r
);

465 
i
 = 0; i < 5; i++)

466
s\xf\xe2_\xb1r
++;

469
s\xf\xe2_\xb1r
 =
	`num_out
(*((*)
\xacg\xb1r
));

470
\xacg\xb1r
++;

473
s\xf\xe2_\xb1r
 =
	`num_out
(()*
\xacg\xb1r
);

474 *
s\xf\xe2_\xb1r
 == '0')

475
s\xf\xe2_\xb1r
++;

476
s\xf\xe2_\xb1r
--;

479
s\xf\xe2_\xb1r
 = "";

481 *
buf_\xb1r
++ = *
s\xf\xe2_\xb1r
++)

483
buf_\xb1r
--;

484
\xacg\xb1r
++;

486 *
buf_\xb1r
++ = *
fmt
++;

488 *
buf_\xb1r
 = '\0';

490 i\xe0(
\xb4_\xe6
)

491
	`\xb4\x9\xa9
(
buf\xe3r
);

492
	}
}

	@commands/tee.cpp

5 
	~"blocksiz.h\xb5
"

6 
	~"sig\xc7l.h\xb5
"

8 
	#MAXFD
 18

	)

10 
	gfd
[
MAXFD
];

13 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

14 
i\xe6ag
 = 0,
a\xe6ag
 = 0;

15 
buf
[
BLOCK_SIZE
];

16 
i
,
s
,
n
;

18
\xacgv
++;

19 --
\xacgc
;

20 
\xacgc
 > 0 &&
\xacgv
[0][0] == '-') {

21 
\xacgv
[0][1]) {

23
i\xe6ag
++;

28
a\xe6ag
++;

31
	`\xa1d_\x94r
("Usage:\x81ee [-i] [-a] [files].\n");

32
	`ex\x99
(1);

34
\xacgv
++;

35 --
\xacgc
;

37
fd
[0] = 1;

38 
s
 = 1; s <
MAXFD
 &&
\xacgc
 > 0; --\xacgc,
\xacgv
++) {

39 i\xe0((
fd
[
s
] =
	`ݒ
(*
\xacgv
, 2)\xe8< 0 && (fd[s] =
	`\xfc\x97t
(*argv, 0666)) < 0) {

40
	`\xa1d_\x94r
("Cannot open output file: ");

41
	`\xa1d_\x94r
(*
\xacgv
);

42
	`\xa1d_\x94r
("\n");

43
	`ex\x99
(2);

45
s
++;

48 i\xe0(
i\xe6ag
)

49
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

50 
i
 = 1; i <
s
; i++) {

51 i\xe0(
a\xe6ag
)

52
	`l\xa3ek
(
fd
[
i
], 0L, 2);

55 (
n
 =
	`\xbbad
(0,
buf
,
BLOCK_SIZE
)) > 0) {

56 
i
 = 0; i <
s
; i++)

57
	`wr\x99e
(
fd
[
i
],
buf
,
n
);

60 
i
 = 0; i <
s
; i++)

61
	`\x\xe3o\xa3
(
fd
[
i
]);

63
	}
}

	@commands/time.cpp

9 
	~"../h/cڡ.h\xb5
"

10 
	~"sig\xc7l.h\xb5
"

12 **
	g\xacgs
;

13 *
	g\xc7me
;

15 
	stime_buf
 {

16 
	mu\xa3r
,
	msys
;

17 
	mch\x9edu
,
	mch\x9eds
;

20 
	gdig\x99_\xa3\x92
;

21 
	ga
[12] = {" . \n"};

23 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

25 
time_buf

\xb4e_buf
,
po\xa1_buf
;

26 
\xa1\xa9us
,
pid
;

27 
\xa1\xact_time
,
\x92d_time
;

29 i\xe0(
\xacgc
 == 1)

32
\xacgs
 = &
\xacgv
[1];

33
\xc7me
 =
\xacgv
[1];

36 ()
	`time
(&
\xa1\xact_time
);

39 i\xe0((
pid
 =
	`f\xdck
()) < 0) {

40
	`\xa1d_\x94r
("Cannot fork\n");

44 i\xe0(
pid
 == 0)

45
	`execu\x8b
();

48
	`sig\xc7l
(
SIGINT
,
SIG_IGN
);

49
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

52
	`times
(&
\xb4e_buf
);

53 } 
	`wa\x99
(&
\xa1\xa9us
\xe8!\xf0
pid
);

54 ()
	`time
(&
\x92d_time
);

56 i\xe0((
\xa1\xa9us
 & 0377) != 0)

57
	`\xa1d_\x94r
("Command\x81erminated\x87bnormally.\n");

58
	`times
(&
po\xa1_buf
);

61
	`\xb4\x9\xa9_time
("\xbb\xae ", (
\x92d_time
 -
\xa1\xact_time
\xe8*
HZ
);

62
	`\xb4\x9\xa9_time
("u\xa3\xb8",
po\xa1_buf
.
ch\x9edu
 -
\xb4e_buf
.childu);

63
	`\xb4\x9\xa9_time
("sy\xa0 ",
po\xa1_buf
.
ch\x9eds
 -
\xb4e_buf
.childs);

64 
\xa1\xa9us
 >> 8;

65
	}
}

68 
	$\xb4\x9\xa9_time
(*
mess
, 
t
) {

70 
hours
,
m\x9au\x8bs
,
\xa3c\xdads
,
\x8b\xc1hs
,
i
;

72
dig\x99_\xa3\x92
 = 0;

73 
i
 = 0; i < 8; i++)

74
a
[
i
] = ' ';

75
hours
 = ()(
t
 / (3600L * ()
HZ
));

76
t
 -\xf0()
hours
 * 3600L * ()
HZ
;

77
m\x9au\x8bs
 = ()(
t
 / (60L * ()
HZ
));

78
t
 -\xf0()
m\x9au\x8bs
 * 60L * ()
HZ
;

79
\xa3c\xdads
 = ()(
t
 / ()
HZ
);

80
t
 -\xf0()
\xa3c\xdads
 * ()
HZ
;

81
\x8b\xc1hs
 = ()(
t
 / (()
HZ
 / 10L));

83
	`\xa1d_\x94r
(
mess
);

85 i\xe0(
hours
) {

86
	`tw\x9a
(
hours
, &
a
[0]);

87
a
[2] = ':';

89 i\xe0(
m\x9au\x8bs
 ||
dig\x99_\xa3\x92
) {

90
	`tw\x9a
(
m\x9au\x8bs
, &
a
[3]);

91
a
[5] = ':';

93 i\xe0(
\xa3c\xdads
 ||
dig\x99_\xa3\x92
)

94
	`tw\x9a
(
\xa3c\xdads
, &
a
[6]);

96
a
[7] = '0';

97
a
[9] =
\x8b\xc1hs
 + '0';

98
	`\xa1d_\x94r
(
a
);

99
	}
}

102 
	$tw\x9a
(
n
, *
p
) {

103 
c1
,
c2
;

104
c1
 = (
n
 / 10) + '0';

105
c2
 = (
n
 % 10) + '0';

106 i\xe0(
dig\x99_\xa3\x92
 =\xf00 &&
c1
 == '0')

107
c1
 = ' ';

108 *
p
++ =
c1
;

109 *
p
++ =
c2
;

110 i\xe0(
n
 > 0)

111
dig\x99_\xa3\x92
 = 1;

112
	}
}

114 *
	g\xc3w\xacgs
[
MAX_ISTACK_BYTES
 >> 2] = {"/bin/sh"};

117 
	$execu\x8b
() {

118 
i
;

120
	`\x8cy_\xb7th
("");

121
	`\x8cy_\xb7th
("/bin/");

122
	`\x8cy_\xb7th
("/usr/bin/");

124 
i
 = 0;
\xc3w\xacgs
[\x98+ 1] =
\xacgs
[i]; i++)

126
	`execv
("/b\x9a/sh",
\xc3w\xacgs
);

127
	`\xa1d_\x94r
("Cannot\x83xecute /bin/sh\n");

129
	`ex\x99
(-1);

130
	}
}

132 
	g\xb7th\xc7me
[200];

134 
	$\x8cy_\xb7th
(cڡ *
\xb7th
) {

135 *
p1
, *
p2
;

137
p1
 =
\xb7th
;

138
p2
 =
\xb7th\xc7me
;

139 *
p1
 != 0)

140 *
p2
++ = *
p1
++;

141
p1
 =
\xc7me
;

142 *
p1
 != 0)

143 *
p2
++ = *
p1
++;

144 *
p2
 = 0;

145
	`execv
(
\xb7th\xc7me
,
\xacgs
);

146
	}
}

	@commands/touch.cpp

3 
	~"\x94\xbao.h\xb5
"

4 
	~"\xa1\xa9.h\xb5
"

5 
	gno_\xfc\x97t
 = 0;

7 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

8 *
\xb7th
;

9 
i
 = 1;

11 i\xe0(
\xacgc
 == 1)

12
	`u\xa7ge
();

13 
i
 <
\xacgc
) {

14 i\xe0(
\xacgv
[
i
][0] == '-') {

15 i\xe0(
\xacgv
[
i
][1] == 'f') {

16
i
 += 1;

17 } i\xe0(
\xacgv
[
i
][1] == 'c') {

18
no_\xfc\x97t
 = 1;

19
i
 += 1;

21
	`u\xa7ge
();

24
\xb7th
 =
\xacgv
[
i
];

25
i
 += 1;

26 i\xe0(
	`do\x99
(
\xb7th
) > 0) {

27
	`\xa1d_\x94r
("touch: cannot\x81ouch ");

28
	`\xa1d_\x94r
(
\xb7th
);

29
	`\xa1d_\x94r
("\n");

33
	`ex\x99
(0);

34
	}
}

36 
	$do\x99
(cڡ *
\xc7me
) {

37 
fd
;

38 *
t
,
tim
;

39 
\xa1\xa9

buf
;

40 
tmp
;

41 
tvp
[2];

42 
	`time
();

44 i\xe0(!
	`ac\xfbss
(
\xc7me
, 0)) {

45
	`\xa1\xa9
(
\xc7me
, &
buf
);

46
tmp
 = (
buf
.
\xa1_mode
 &
S_IFREG
);

47 i\xe0(
tmp
 !\xf0
S_IFREG
)

50
tim
 =
	`time
(0L);

51
tvp
[0] =
tim
;

52
tvp
[1] =
tim
;

53 i\xe0(!
	`utime
(
\xc7me
,
tvp
))

60 i\xe0(
no_\xfc\x97t
 == 1)

62 i\xe0((
fd
 =
	`\xfc\x97t
(
\xc7me
, 0777)) < 0) {

65
	`\x\xe3o\xa3
(
fd
);

69
	}
}

71 
	$u\xa7ge
() {

72
	`\xa1d_\x94r
("Usage:\x81ouch [-c] file...\n");

73
	`ex\x99
(1);

74
	}
}

76 
	$\xa1d_\x94r
(cڡ *
s
\xe8{
	`\xb4\x9\xa9s
("%s", s);
	}
}

	@commands/tr.cpp

14 
	#BUFFER_SIZE
 1024

	)

15 
	#ASCII
 0377

	)

18
us\x9ag

	gBOOL
 = ;

19 
	#TRUE
 1

	)

20 
	#FALSE
 0

	)

22 
	#NIL_PTR
 ((*)0)

	)

24
BOOL

	gcom_\xe6
,
	gd\x96_\xe6
,
	gsq_\xe6
;

26 
	gou\x8dut
[
BUFFER_SIZE
],
	g\x9\xadut
[BUFFER_SIZE];

27 
	gve\xf9\xdc
[
ASCII
 + 1];

28
BOOL

	g\x9avec
[
ASCII
 + 1],
	goutvec
[ASCII + 1];

30 
	g\x9a_\x9adex
,
	gout_\x9adex
;

33 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

34 *
\xb1r
;

35 
\x9adex
 = 1;

36 
i
;

38 i\xe0(
\xacgc
 > 1 &&
\xacgv
[
\x9adex
][0] == '-') {

39 
\xb1r
 = &
\xacgv
[
\x9adex
][1]; *ptr;\x85tr++) {

40 *
\xb1r
) {

42
com_\xe6
 =
TRUE
;

45
d\x96_\xe6
 =
TRUE
;

48
sq_\xe6
 =
TRUE
;

51
	`wr\x99e
(2, "Usage:\x81r [-cds] [string1 [string2]].\n", 38);

52
	`ex\x99
(1);

55
\x9adex
++;

58 
i
 = 0; i <\xf0
ASCII
; i++) {

59
ve\xf9\xdc
[
i
] = i;

60
\x9avec
[
i
] =
outvec
[i] =
FALSE
;

63 i\xe0(
\xacgv
[
\x9adex
] !\xf0
NIL_PTR
) {

64
	`ex\xb7nd
(
\xacgv
[
\x9adex
++],
\x9aput
);

65 i\xe0(
com_\xe6
)

66
	`com\xb6em\x92t
(
\x9aput
);

67 i\xe0(
\xacgv
[
\x9adex
] !\xf0
NIL_PTR
)

68
	`ex\xb7nd
(
\xacgv
[
\x9adex
],
ou\x8dut
);

69 i\xe0(
\xacgv
[
\x9adex
] !\xf0
NIL_PTR
)

70
	`m\xad
(
\x9aput
,
ou\x8dut
);

71 
\xb1r
 =
\x9aput
; *ptr;\x85tr++)

72
\x9avec
[*
\xb1r
] =
TRUE
;

73 
\xb1r
 =
ou\x8dut
; *ptr;\x85tr++)

74
outvec
[*
\xb1r
] =
TRUE
;

76
	`c\xdav\x94t
();

78
	}
}

81 
	$c\xdav\x94t
() {

82 
\xbbad_ch\xacs
 = 0;

83 
c
,
coded
;

84 
ϡ
 = -1;

87 i\xe0(
\x9a_\x9adex
 =\xf0
\xbbad_ch\xacs
) {

88 i\xe0((
\xbbad_ch\xacs
 =
	`\xbbad
(0,
\x9aput
,
BUFFER_SIZE
)) <= 0) {

89 i\xe0(
	`wr\x99e
(1,
ou\x8dut
,
out_\x9adex
) != out_index)

90
	`wr\x99e
(2, "Bad write\n", 10);

91
	`ex\x99
(0);

93
\x9a_\x9adex
 = 0;

95
c
 =
\x9aput
[
\x9a_\x9adex
++];

96
coded
 =
ve\xf9\xdc
[
c
];

97 i\xe0(
d\x96_\xe6
 &&
\x9avec
[
c
])

99 i\xe0(
sq_\xe6
 &&
ϡ
 =\xf0
coded
 &&
outvec
[coded])

101
ou\x8dut
[
out_\x9adex
++] =
ϡ
 =
coded
;

102 i\xe0(
out_\x9adex
 =\xf0
BUFFER_SIZE
) {

103 i\xe0(
	`wr\x99e
(1,
ou\x8dut
,
out_\x9adex
) != out_index) {

104
	`wr\x99e
(2, "Bad write\n", 10);

105
	`ex\x99
(1);

107
out_\x9adex
 = 0;

112
	}
}

115 
	$m\xad
(*
\xa1r\x9ag1
, *
\xa1r\x9ag2
) {

116 
ϡ
;

118 *
\xa1r\x9ag1
) {

119 i\xe0(*
\xa1r\x9ag2
 == '\0')

120
ve\xf9\xdc
[*
\xa1r\x9ag1
] =
ϡ
;

122
ve\xf9\xdc
[*
\xa1r\x9ag1
] =
ϡ
 = *
\xa1r\x9ag2
++;

123
\xa1r\x9ag1
++;

125
	}
}

128 
	$ex\xb7nd
(*
\xacg
, *
buf\xe3r
) {

129 
i
,
ac
;

131 *
\xacg
) {

132 i\xe0(*
\xacg
 == '\\') {

133
\xacg
++;

134
i
 =
ac
 = 0;

135 i\xe0(*
\xacg
 >= '0' && *arg <= '7') {

137
ac
 = (a\xf8<< 3\xe8+ *
\xacg
++ - '0';

138
i
++;

139 } 
i
 < 4 && *
\xacg
 >= '0' && *arg <= '7');

140 *
buf\xe3r
++ =
ac
;

141 } i\xe0(*
\xacg
 != '\0')

142 *
buf\xe3r
++ = *
\xacg
;

143 } i\xe0(*
\xacg
 == '[') {

144
\xacg
++;

145
i
 = *
\xacg
++;

146 i\xe0(*
\xacg
++ != '-') {

147 *
buf\xe3r
++ = '[';

148 *
buf\xe3r
++ =
i
;

149 *
buf\xe3r
++ = '-';

152
ac
 = *
\xacg
++;

153 
i
 <\xf0
ac
)

154 *
buf\xe3r
++ =
i
++;

155
\xacg
++;

157 *
buf\xe3r
++ = *
\xacg
++;

159
	}
}

162 
	$com\xb6em\x92t
(*
buf\xe3r
) {

163 *
\xb1r
;

164 
i
,
\x9adex
;

165 
c\xdav
[
ASCII
 + 2];

167
\x9adex
 = 0;

168 
i
 = 1; i <\xf0
ASCII
; i++) {

169 
\xb1r
 =
buf\xe3r
; *ptr;\x85tr++)

170 i\xe0(*
\xb1r
 =\xf0
i
)

172 i\xe0(*
\xb1r
 == '\0')

173
c\xdav
[
\x9adex
++] =
i
 &
ASCII
;

175
c\xdav
[
\x9adex
] = '\0';

176
	`\xa1r\xfdy
(
buf\xe3r
,
c\xdav
);

177
	}
}

	@commands/umount.cpp

9 
	~"\x94\xbao.h\xb5
"

11 
\x94\xbao
;

14 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

16 i\xe0(
\xacgc
 != 2)

17
	`u\xa7ge
();

18 i\xe0(
	`umou\xc1
(
\xacgv
[1]) < 0) {

19 i\xe0(
\x94\xbao
 =\xf0
E\xbc\xdcCode
::
EINVAL
)

20
	`\xa1d_\x94r
("Device\x82ot mounted\n");

22
	`\xb3\xbc\xdc
("umount");

23
	`ex\x99
(1);

25
	`\xa1d_\x94r
(
\xacgv
[1]);

26
	`\xa1d_\x94r
(" unmounted\n");

28
	}
}

31 [[
nܑu\xba
]] 
	$u\xa7ge
() {

32
	`\xa1d_\x94r
("Usage: umount special\n");

33
	`ex\x99
(1);

34
	}
}

	@commands/uniq.cpp

20 
	#WRITE_ERROR
 1

	)

21 
	~"\xa1dio.h\xb5
"

22 
	~<c\xf9y\xb3
>

24
FILE
 *
fݒ
();

25 
	gbuf\xe3r
[
BUFSIZ
];

26 
	gu\xe6ag
 = 1;

27 
	gd\xe6ag
 = 1;

28 
	gc\xe6ag
 = 0;

29 
	gf\x9blds
 = 0;

30 
	gch\xacs
 = 0;

32
FILE
 *
	$xfݒ
(
\xe2
,
mode
)

33 *
\xe2
, *
mode
;

35
FILE
 *
p
;

36 
\x94\xbao
;

37 *
sys_\x94\xbei\xa1
[];

39 i\xe0((
p
 =
	`fݒ
(
\xe2
,
mode
)\xe8=\xf0
NULL
) {

40
	`\xb3\xbc\xdc
("uniq");

41
	`f\xe6ush
(
\xa1dout
);

42
	`ex\x99
(1);

44  (
p
);

45
	}
}

48 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

49 *
p
;

50 
\x9af
 = -1,
outf
;

52
	`\xa3tbuf
(
\xa1dout
,
buf\xe3r
);

53 --
\xacgc
, ++
\xacgv
;\x87rgc > 0 && (**argv == '-' || **argv == '+'); --argc, ++argv) {

54 i\xe0(**
\xacgv
 == '+')

55
ch\xacs
 =
	`\xa9oi
(*
\xacgv
 + 1);

56 i\xe0(
\xa1d
::
	`isdig\x99
(
\xa1\xa9ic_\xff\xa1
<>(
\xacgv
[0][1])))

57
f\x9blds
 =
	`\xa9oi
(*
\xacgv
 + 1);

58 i\xe0(
\xacgv
[0][1] == '\0')

59
\x9af
 = 0;

61 
p
 = *
\xacgv
 + 1; *p;\x85++) {

62 *
p
) {

64
d\xe6ag
 = 1;

65
u\xe6ag
 = 0;

68
u\xe6ag
 = 1;

69
d\xe6ag
 = 0;

72
c\xe6ag
 = 1;

75
	`u\xa7ge
();

80 i\xe0(
\xacgc
 == 0)

81
\x9af
 = 0;

82 i\xe0(
\x9af
 == -1) {

83
	`f\x\xe3o\xa3
(
\xa1d\x9a
);

84
	`xfݒ
(*
\xacgv
++, "r");

85
\xacgc
--;

88 i\xe0(
\xacgc
 == 0)

89
outf
 = 1;

91
	`f\x\xe3o\xa3
(
\xa1dout
);

92
	`xfݒ
(*
\xacgv
++, "w");

93
\xacgc
--;

96
	`uniq
();

97
	`f\xe6ush
(
\xa1dout
);

99
	}
}

101 *
	$sk\x9d
(
s
)

102 *
s
;

104 
n
;

107 
n
 =
f\x9blds
;\x82 > 0; --n) {

109 *
s
 && (*s == ' ' || *s == '\t'))

110
s
++;

111 i\xe0(!*
s
)

112 
s
;

113 *
s
 && (*s != ' ' && *s != '\t'))

114
s
++;

115 i\xe0(!*
s
)

116 
s
;

119 
n
 =
ch\xacs
;\x82 > 0; --n) {

120 i\xe0(!*
s
)

121 
s
;

122
s
++;

124 
s
;

125
	}
}

127 
	$equ\x\xab
(
s1
,
s2
)

128 *
s1
, *
s2
;

130  !
	`\xa1rcmp
(
	`sk\x9d
(
s1
), sk\x9d(
s2
));

131
	}
}

133 
	$show
(*
l\x9\xab
, 
cou\xc1
) {

134 i\xe0(
c\xe6ag
)

135
	`\xb4\x9\xa9f
("%4d %s",
cou\xc1
,
l\x9\xab
);

137 i\xe0((
u\xe6ag
 &&
cou\xc1
 =\xf01\xe8|| (
d\xe6ag
 && count != 1))

138
	`\xb4\x9\xa9f
("%s",
l\x9\xab
);

140
	}
}

145 *
	gnowl\x9\xab
, *
	g\xb4evl\x9\xab
,
	gbuf1
[1024],
	gbuf2
[1024];

147 
	$uniq
(\xe8*
p
;

148 
\xa3\x92
;

151
\xb4evl\x9ae
 =
buf1
;

152 i\xe0(
	`g\x91l\x9\xab
(
\xb4evl\x9ae
, 1024) < 0)

154
\xa3\x92
 = 1;

155
nowl\x9\xab
 =
buf2
;

161 
	`g\x91l\x9\xab
(
nowl\x9\xab
, 1024) > 0) {

162 i\xe0(!
	`equ\x\xab
(
\xb4evl\x9ae
,
nowl\x9\xab
)) {

163
	`show
(
\xb4evl\x9ae
,
\xa3\x92
);

164
\xa3\x92
 = 1;

165
p
 =
nowl\x9\xab
;

166
nowl\x9\xab
 =
\xb4evl\x9ae
;

167
\xb4evl\x9ae
 =
p
;

169
\xa3\x92
 += 1;

170
	}
}

171
show
(
\xb4evl\x9ae
,
\xa3\x92
);

175 [[
nܑu\xba
]] 
	$u\xa7ge
(\xe8{
	`\xa1d_\x94r
("U\xa7ge: uniq [-udc] [+n] [-n] [\x9apu\x88[ou\x8dut]]\n");
	}
}

177 
	$g\x91l\x9\xab
(*
buf
, 
cou\xc1
) {

178 
c
;

179 
\xf9
 = 0;

181 
\xf9
++ <
cou\xc1
) {

182
c
 =
	`g\x91c
(
\xa1d\x9a
);

183 i\xe0(
c
 <= 0)

185 *
buf
++ =
c
;

186 i\xe0(
c
 == '\n') {

187 *
buf
++ = 0;

188  (
\xf9
);

191  (
\xf9
);

192
	}
}

	@commands/update.cpp

5 
	~"sig\xc7l.h\xb5
"

8 
	$ma\x9a
() {

9 
fd
,
buf
[2];

12
	`sig\xc7l
(
SIGTERM
,
SIG_IGN
);

15
	`\x\xe3o\xa3
(0);

16
	`\x\xe3o\xa3
(1);

17
	`\x\xe3o\xa3
(2);

19
	`ݒ
("/bin", 0);

20
	`ݒ
("/lib", 0);

21
	`ݒ
("/etc", 0);

22
	`ݒ
("/tmp", 0);

26
	`sync
();

27
	`\xa6\x93p
(30);

31
	}
}

	@commands/wc.cpp

9 
	~"\xa1dio.h\xb5
"

10 
	~<c\xf9y\xb3
>

34 
	gl\xe6ag
;

35 
	gw\xe6ag
;

36 
	gc\xe6ag
;

38 
	glcou\xc1
;

39 
	gwcou\xc1
;

40 
	gccou\xc1
;

42 
	g\xc9ٮ
;

43 
	gwtٮ
;

44 
	g\xf9ٮ
;

47 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

48 
k
;

49 *
\xfd
;

50 
t\xe6ag
,
f\x9\x93s
;

51 
i
;

54
f\x9\x93s
 =
\xacgc
 - 1;

55
k
 = 1;

56
\xfd
 =
\xacgv
[1];

57 i\xe0(*
\xfd
++ == '-') {

58
f\x9\x93s
--;

59
k
++;

60 *
\xfd
 != 0) {

61 *
\xfd
) {

63
l\xe6ag
++;

66
w\xe6ag
++;

69
c\xe6ag
++;

72
	`u\xa7ge
();

74
\xfd
++;

79 i\xe0(!
l\xe6ag
 && !
w\xe6ag
 && !
c\xe6ag
) {

80
l\xe6ag
 = 1;

81
w\xe6ag
 = 1;

82
c\xe6ag
 = 1;

86
t\xe6ag
 =
f\x9\x93s
 >= 2;

89 i\xe0(
k
 >\xf0
\xacgc
) {

90 
	`cou\xc1
();

91 i\xe0(
l\xe6ag
)

92
	`\xb4\x9\xa9f
(" %6D",
lcou\xc1
);

93 i\xe0(
w\xe6ag
)

94
	`\xb4\x9\xa9f
(" %6D",
wcou\xc1
);

95 i\xe0(
c\xe6ag
)

96
	`\xb4\x9\xa9f
(" %6D",
ccou\xc1
);

97
	`\xb4\x9\xa9f
(" \n");

98
	`f\xe6ush
(
\xa1dout
);

103 
k
 <
\xacgc
) {

104
	`f\x\xe3o\xa3
(
\xa1d\x9a
);

105 i\xe0(
	`fݒ
(
\xacgv
[
k
], "r"\xe8=\xf0
NULL
) {

106
	`\xa1d_\x94r
("wc: cannot open ");

107
	`\xa1d_\x94r
(
\xacgv
[
k
]);

108
	`\xa1d_\x94r
("\n");

109
k
++;

113
	`cou\xc1
();

114 i\xe0(
l\xe6ag
)

115
	`\xb4\x9\xa9f
(" %6D",
lcou\xc1
);

116 i\xe0(
w\xe6ag
)

117
	`\xb4\x9\xa9f
(" %6D",
wcou\xc1
);

118 i\xe0(
c\xe6ag
)

119
	`\xb4\x9\xa9f
(" %6D",
ccou\xc1
);

120
	`\xb4\x9\xa9f
(" %s\n",
\xacgv
[
k
]);

122
k
++;

125 i\xe0(
t\xe6ag
) {

126 i\xe0(
l\xe6ag
)

127
	`\xb4\x9\xa9f
(" %6D",
\xc9ٮ
);

128 i\xe0(
w\xe6ag
)

129
	`\xb4\x9\xa9f
(" %6D",
wtٮ
);

130 i\xe0(
c\xe6ag
)

131
	`\xb4\x9\xa9f
(" %6D",
\xf9ٮ
);

132
	`\xb4\x9\xa9f
("\x81otal\n");

135
	`f\xe6ush
(
\xa1dout
);

137
	}
}

139 
	$cou\xc1
() {

140 
c
;

141 
w\xdcd
 = 0;

143
lcou\xc1
 = 0;

144
wcou\xc1
 = 0;

145
ccou\xc1
 = 0L;

147 (
c
 =
	`g\x91c
(
\xa1d\x9a
)) > 0) {

148
ccou\xc1
++;

150 i\xe0(
\xa1d
::
	`is\xa5a\xfb
(
\xa1\xa9ic_\xff\xa1
<>(
c
))) {

151 i\xe0(
w\xdcd
)

152
wcou\xc1
++;

153
w\xdcd
 = 0;

155
w\xdcd
 = 1;

158 i\xe0(
c
 == '\n' || c == '\f')

159
lcou\xc1
++;

161
\xc9ٮ
 +\xf0
lcou\xc1
;

162
wtٮ
 +\xf0
wcou\xc1
;

163
\xf9ٮ
 +\xf0
ccou\xc1
;

164
	}
}

166 [[
nܑu\xba
]] 
	$u\xa7ge
() {

167
	`\xa1d_\x94r
("Usage: wc [-lwc] [name ...]\n");

168
	`ex\x99
(1);

169
	}
}

	@commands/x.cpp

7 
	gbuf
[30000];

9 
	$ma\x9a
() {

10 
i
,
n
;

13
n
 =
	`\xbbad
(0,
buf
, 30000);

14 
i
 = 0; i <
n
; i++)

15 i\xe0(
buf
[
i
] == 015) {

16
	`\xb4\x9\xa9f
("DOS\n");

17
	`ex\x99
(0);

19 i\xe0(
n
 < 30000)

22
	}
}

	@common/math/octonion.cpp

1 
	~"o\xf9\xdai\xda.h\xb5
"

2 
	~"qu\xa9\x94ni\xda.h\xb5
"

3 
	~<cm\xa9h
>

4 
	~<\xa1dex\xfb\xb1
>

5 
	~<o\xa1\xbbam
>

6 
	~<iom\xaa\x9d
>

7 
	~<num\x94ic
>

9
\xc7me\xa5a\xfb

	gComm\xda
 {

10
\xc7me\xa5a\xfb

	gM\xa9h
 {

13
	gO\xf9\xdai\xda
::
O\xf9\xdai\xda
(cڡ
Qu\xa9\x94ni\xda
&
q1
, cڡ Qu\xa9\x94ni\xda&
q2
) {

14
	gc
[0] =
q1
.
r
; c[1] = q1.
i
; c[2] = q1.
j
; c[3] = q1.
k
;

15
	gc
[4] =
q2
.
r
; c[5] = q2.
i
; c[6] = q2.
j
; c[7] = q2.
k
;

19
Qu\xa9\x94ni\xda

	gO\xf9\xdai\xda
::
g\x91_q1
() const {

20 
Qu\xa9\x94ni\xda
(
c
[0], c[1], c[2], c[3]);

23
Qu\xa9\x94ni\xda

	gO\xf9\xdai\xda
::
g\x91_q2
() const {

24 
Qu\xa9\x94ni\xda
(
c
[4], c[5], c[6], c[7]);

29
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
ݔ\xa9\xdc
+=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) {

30 
size_t

i
 = 0;
	gi
 < 8; ++i) {

31
	gc
[
i
] +\xf0
\xd9h\x94
.
c
[i];

33  *
	gthis
;

36
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
ݔ\xa9\xdc
-=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) {

37 
size_t

i
 = 0;
	gi
 < 8; ++i) {

38
	gc
[
i
] -\xf0
\xd9h\x94
.
c
[i];

40  *
	gthis
;

43
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
ݔ\xa9\xdc
*=(
s\xff\xcfr
) {

44 
size_t

i
 = 0;
	gi
 < 8; ++i) {

45
	gc
[
i
] *\xf0
s\xff\xcfr
;

47  *
	gthis
;

50
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
ݔ\xa9\xdc
/=(
s\xff\xcfr
) {

51 i\xe0(
\xa1d
::
\xe7bs
(
s\xff\xcfr
) < 1e-12) {

52
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Octonion division by zero scalar.");

54 
size_t

	gi
 = 0; i < 8; ++i) {

55
	gc
[
i
] /\xf0
s\xff\xcfr
;

57  *
	gthis
;

60
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
ݔ\xa9\xdc
*=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) {

65
Qu\xa9\x94ni\xda

a
 =
this
->
g\x91_q1
();

66
Qu\xa9\x94ni\xda

	gb
 =
this
->
g\x91_q2
();

67
Qu\xa9\x94ni\xda

	gc_\xd9h\x94
 =
\xd9h\x94
.
g\x91_q1
();

68
Qu\xa9\x94ni\xda

	gd_\xd9h\x94
 =
\xd9h\x94
.
g\x91_q2
();

70
Qu\xa9\x94ni\xda

	g\xbbs_q1
 = (
a
 *
c_\xd9h\x94
\xe8- (
d_\xd9h\x94
 *
b
.
c\xdajug\xa9e
());

71
Qu\xa9\x94ni\xda

	g\xbbs_q2
 = (
d_\xd9h\x94
 *
a
\xe8+ (
c_\xd9h\x94
.
c\xdajug\xa9e
(\xe8*
b
);

73
	gthis
->
	gc
[0] =
\xbbs_q1
.
r
;\x81his->c[1] =\x84es_q1.
i
;\x81his->c[2] =\x84es_q1.
j
;\x81his->c[3] =\x84es_q1.
k
;

74
	gthis
->
	gc
[4] =
\xbbs_q2
.
r
;\x81his->c[5] =\x84es_q2.
i
;\x81his->c[6] =\x84es_q2.
j
;\x81his->c[7] =\x84es_q2.
k
;

76  *
	gthis
;

80
O\xf9\xdai\xda

	gݔ\xa9\xdc
+(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
) {

81
	glhs
 +\xf0
rhs
;

82 
	glhs
;

85
O\xf9\xdai\xda

	gݔ\xa9\xdc
-(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
) {

86
	glhs
 -\xf0
rhs
;

87 
	glhs
;

90
O\xf9\xdai\xda

	gݔ\xa9\xdc
*(O\xf9\xdai\xda
	glhs
, 
	gs\xff\xcfr
) {

91
	glhs
 *\xf0
s\xff\xcfr
;

92 
	glhs
;

95
O\xf9\xdai\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, O\xf9\xdai\xda
	grhs
) {

96
	grhs
 *\xf0
s\xff\xcfr
;

97 
	grhs
;

100
O\xf9\xdai\xda

	gݔ\xa9\xdc
/(O\xf9\xdai\xda
	glhs
, 
	gs\xff\xcfr
) {

101
	glhs
 /\xf0
s\xff\xcfr
;

102 
	glhs
;

105
O\xf9\xdai\xda

	gݔ\xa9\xdc
*(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
) {

106
	glhs
 *\xf0
rhs
;

107 
	glhs
;

111
bo\xde

	gO\xf9\xdai\xda
::
ݔ\xa9\xdc
==(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) const {

112 
\x95s\x9e\xda
 = 1e-9;

113 
size_t

	gi
 = 0; i < 8; ++i) {

114 i\xe0(
	g\xa1d
::
\xe7bs
(
c
[
i
] -
\xd9h\x94
.c[i]\xe8>\xf0
\x95s\x9e\xda
) {

115 
\xe7l\xa3
;

118 
	g\x8cue
;

121
bo\xde

	gO\xf9\xdai\xda
::
ݔ\xa9\xdc
!=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) const {

122  !(*
this
 =\xf0
\xd9h\x94
);

126 
	gO\xf9\xdai\xda
::
n\xdcm
() const {

127 
\xa1d
::
sq\xb9
(
n\xdcm_sq
());

130
O\xf9\xdai\xda

	gO\xf9\xdai\xda
::
\x9av\x94\xa3
() const {

131 
n_sq
 =
n\xdcm_sq
();

132 i\xe0(
	g\xa1d
::
\xe7bs
(
n_sq
) < 1e-12) {

133 
O\xf9\xdai\xda
::
z\x94o
();

135 
c\xdajug\xa9e
(\xe8/
	gn_sq
;

138
	gO\xf9\xdai\xda
& O\xf9\xdai\xda::
n\xdcm\xaeize
() {

139 
n
 =
n\xdcm
();

140 i\xe0(
	g\xa1d
::
\xe7bs
(
n
) < 1e-12) {

141 
size_t

i
=0;
	gi
<8; ++i\xe8
	gc
[i] = 0.0;

142  *
	gthis
;

144 *
	gthis
 /\xf0
n
;

145  *
	gthis
;

148
O\xf9\xdai\xda

	gO\xf9\xdai\xda
::
n\xdcm\xaeized
() const {

149
O\xf9\xdai\xda

o
 = *
this
;

150
	go
.
n\xdcm\xaeize
();

151 
	go
;

154
bo\xde

	gO\xf9\xdai\xda
::
is_un\x99
(
tޔ\xaa\xfb
) const {

155 
\xa1d
::
\xe7bs
(
n\xdcm_sq
(\xe8- 1.0\xe8<
tޔ\xaa\xfb
 *\x81olerance;

159
	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gO\xf9\xdai\xda
&
	go
) {

160
	g\xa1d
::
ios_ba\xa3
::
fmt\xe6ags

\xe6ags
 =
os
.flags();

161
	gos
 <<
	g\xa1d
::
fixed
 <<
\xa1d
::
\xa3\x8d\xbbcisi\xda
(4);

162
	gos
 << "(";

163 
size_t

	gi
 = 0; i < 8; ++i) {

164
	gos
 <<
	go
.
	gc
[
i
] << (
	gi
 =\xf00 ? "" : ("e" +
\xa1d
::
to_\xa1r\x9ag
(i)));

165 i\xe0(
	gi
 < 7\xe8
	gos
 << ", ";

167
	gos
 << ")";

168
	gos
.
\xe6ags
(flags);

169 
	gos
;

	@common/math/octonion.hpp

1 #i\xe2de\xe0
COMMON_MATH_OCTONION_HPP


2 
	#COMMON_MATH_OCTONION_HPP


	)

4 
	~"qu\xa9\x94ni\xda.h\xb5
"

5 
	~<\xac\xbfy
>

6 
	~<cm\xa9h
>

7 
	~<iosfwd
>

9
\xc7me\xa5a\xfb

	gComm\xda
 {

10
\xc7me\xa5a\xfb

	gM\xa9h
 {

24
\xfeass

\xaeig\xc7s
(64\xe8
	gO\xf9\xdai\xda
 {

25
	gpublic
:

26
\xa1d
::
\xac\xbfy
<, 8>
	gc
;

30
cڡex\xb4

O\xf9\xdai\xda
(\xe8:
c
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0} {}

33
cڡex\xb4

O\xf9\xdai\xda
(
c0
, 
c1
, 
c2
, 
c3
,

34 
c4
, 
c5
, 
c6
, 
c7
)

35 :
c
{
c0
,
	gc1
,
	gc2
,
	gc3
,
	gc4
,
	gc5
,
	gc6
,
	gc7
} {}

38
cڡex\xb4

ex\xb6ic\x99

O\xf9\xdai\xda
(cڡ
\xa1d
::
\xac\xbfy
<, 8>&
compڒts
\xe8:
c
(components) {}

41
O\xf9\xdai\xda
(cڡ
Qu\xa9\x94ni\xda
&
a
, cڡ Qu\xa9\x94ni\xda&
b
);

45
	gO\xf9\xdai\xda
&
	gݔ\xa9\xdc
+=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
);

46
	gO\xf9\xdai\xda
&
	gݔ\xa9\xdc
-=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
);

47
	gO\xf9\xdai\xda
&
	gݔ\xa9\xdc
*=(
s\xff\xcfr
);

48
	gO\xf9\xdai\xda
&
	gݔ\xa9\xdc
/=(
s\xff\xcfr
);

49
	gO\xf9\xdai\xda
&
	gݔ\xa9\xdc
*=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
);

52
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
+(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
);

53
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
-(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
);

54
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
*(O\xf9\xdai\xda
	glhs
, 
	gs\xff\xcfr
);

55
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, O\xf9\xdai\xda
	grhs
);

56
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
/(O\xf9\xdai\xda
	glhs
, 
	gs\xff\xcfr
);

57
\xe4\x9bnd

O\xf9\xdai\xda

	gݔ\xa9\xdc
*(O\xf9\xdai\xda
	glhs
, cڡ
	gO\xf9\xdai\xda
&
	grhs
);

60
bo\xde

	gݔ\xa9\xdc
==(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) const;

61
bo\xde

	gݔ\xa9\xdc
!=(cڡ
O\xf9\xdai\xda
&
\xd9h\x94
) const;

65
cڡex\xb4

O\xf9\xdai\xda

c\xdajug\xa9e
() const {

66 
O\xf9\xdai\xda
(
c
[0], -c[1], -c[2], -c[3], -c[4], -c[5], -c[6], -c[7]);

70
cڡex\xb4
 
n\xdcm_sq
() const {

71 
	gsum_sq
 = 0.0;

72 
	gv\xae
 :
c
) {

73
sum_sq
 +\xf0
v\xae
 * val;

75 
	gsum_sq
;

79 
n\xdcm
() const;

84
O\xf9\xdai\xda

\x9av\x94\xa3
() const;

89
	gO\xf9\xdai\xda
&
n\xdcm\xaeize
();

92
O\xf9\xdai\xda

n\xdcm\xaeized
() const;

95
bo\xde

is_un\x99
(
tޔ\xaa\xfb
 = 1e-9) const;

99 
cڡex\xb4

O\xf9\xdai\xda

id\x92t\x99y
() {

100 
O\xf9\xdai\xda
(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

103 
cڡex\xb4

O\xf9\xdai\xda

z\x94o
() {

104 
O\xf9\xdai\xda
(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

108
Qu\xa9\x94ni\xda

g\x91_q1
() const;

109
Qu\xa9\x94ni\xda

g\x91_q2
() const;

112
\xe4\x9bnd

	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gO\xf9\xdai\xda
&
	go
);

	@common/math/quaternion.cpp

1 
	~"qu\xa9\x94ni\xda.h\xb5
"

2 
	~<cm\xa9h
>

3 
	~<\xa1dex\xfb\xb1
>

4 
	~<o\xa1\xbbam
>

5 
	~<iom\xaa\x9d
>

7
\xc7me\xa5a\xfb

	gComm\xda
 {

8
\xc7me\xa5a\xfb

	gM\xa9h
 {

11
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
ݔ\xa9\xdc
+=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) {

12
r
 +\xf0
\xd9h\x94
.r;

13
	gi
 +\xf0
\xd9h\x94
.
i
;

14
	gj
 +\xf0
\xd9h\x94
.
j
;

15
	gk
 +\xf0
\xd9h\x94
.
k
;

16  *
	gthis
;

19
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
ݔ\xa9\xdc
-=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) {

20
r
 -\xf0
\xd9h\x94
.r;

21
	gi
 -\xf0
\xd9h\x94
.
i
;

22
	gj
 -\xf0
\xd9h\x94
.
j
;

23
	gk
 -\xf0
\xd9h\x94
.
k
;

24  *
	gthis
;

27
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
ݔ\xa9\xdc
*=(
s\xff\xcfr
) {

28
r
 *\xf0
s\xff\xcfr
;

29
	gi
 *\xf0
s\xff\xcfr
;

30
	gj
 *\xf0
s\xff\xcfr
;

31
	gk
 *\xf0
s\xff\xcfr
;

32  *
	gthis
;

35
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
ݔ\xa9\xdc
/=(
s\xff\xcfr
) {

36 i\xe0(
\xa1d
::
\xe7bs
(
s\xff\xcfr
) < 1e-12) {

39
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Quaternion division by zero scalar.");

41
	gr
 /\xf0
s\xff\xcfr
;

42
	gi
 /\xf0
s\xff\xcfr
;

43
	gj
 /\xf0
s\xff\xcfr
;

44
	gk
 /\xf0
s\xff\xcfr
;

45  *
	gthis
;

48
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
ݔ\xa9\xdc
*=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) {

49 
r_\xc3w
 =
r
 *
\xd9h\x94
.\xb8-
i
 * oth\x94.\x98-
j
 * oth\x94.j -
k
 * other.k;

50 
	gi_\xc3w
 =
r
 *
\xd9h\x94
.
i
 + i * oth\x94.\xb8+
j
 * oth\x94.
k
 - k * other.j;

51 
	gj_\xc3w
 =
r
 *
\xd9h\x94
.
j
 -
i
 * oth\x94.
k
 + j * other.r + k * other.i;

52 
	gk_\xc3w
 =
r
 *
\xd9h\x94
.
k
 +
i
 * oth\x94.
j
 - j * other.i + k * other.r;

53
	gr
 =
r_\xc3w
;

54
	gi
 =
i_\xc3w
;

55
	gj
 =
j_\xc3w
;

56
	gk
 =
k_\xc3w
;

57  *
	gthis
;

61
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
+(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
) {

62
	glhs
 +\xf0
rhs
;

63 
	glhs
;

66
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
-(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
) {

67
	glhs
 -\xf0
rhs
;

68 
	glhs
;

71
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(Qu\xa9\x94ni\xda
	glhs
, 
	gs\xff\xcfr
) {

72
	glhs
 *\xf0
s\xff\xcfr
;

73 
	glhs
;

76
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, Qu\xa9\x94ni\xda
	grhs
) {

77
	grhs
 *\xf0
s\xff\xcfr
;

78 
	grhs
;

81
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
/(Qu\xa9\x94ni\xda
	glhs
, 
	gs\xff\xcfr
) {

82
	glhs
 /\xf0
s\xff\xcfr
;

83 
	glhs
;

86
Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
) {

87
	glhs
 *\xf0
rhs
;

88 
	glhs
;

92
bo\xde

	gQu\xa9\x94ni\xda
::
ݔ\xa9\xdc
==(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) const {

94 
\x95s\x9e\xda
 = 1e-9;

95  (
	g\xa1d
::
\xe7bs
(
r
 -
\xd9h\x94
.r\xe8<
\x95s\x9e\xda
 &&

96
\xa1d
::
\xe7bs
(
i
 -
\xd9h\x94
.i\xe8<
\x95s\x9e\xda
 &&

97
\xa1d
::
\xe7bs
(
j
 -
\xd9h\x94
.j\xe8<
\x95s\x9e\xda
 &&

98
\xa1d
::
\xe7bs
(
k
 -
\xd9h\x94
.k\xe8<
\x95s\x9e\xda
);

101
bo\xde

	gQu\xa9\x94ni\xda
::
ݔ\xa9\xdc
!=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) const {

102  !(*
this
 =\xf0
\xd9h\x94
);

106 
	gQu\xa9\x94ni\xda
::
n\xdcm
() const {

107 
\xa1d
::
sq\xb9
(
n\xdcm_sq
());

110
Qu\xa9\x94ni\xda

	gQu\xa9\x94ni\xda
::
\x9av\x94\xa3
() const {

111 
n_sq
 =
n\xdcm_sq
();

112 i\xe0(
	g\xa1d
::
\xe7bs
(
n_sq
) < 1e-12) {

115 
Qu\xa9\x94ni\xda
(0.0, 0.0, 0.0, 0.0);

117 
c\xdajug\xa9e
(\xe8/
	gn_sq
;

120
	gQu\xa9\x94ni\xda
& Qu\xa9\x94ni\xda::
n\xdcm\xaeize
() {

121 
n
 =
n\xdcm
();

122 i\xe0(
	g\xa1d
::
\xe7bs
(
n
) < 1e-12) {

125
r
 = 0.0;
	gi
 = 0.0;
	gj
 = 0.0;
	gk
 = 0.0;

126  *
	gthis
;

128 *
	gthis
 /\xf0
n
;

129  *
	gthis
;

132
Qu\xa9\x94ni\xda

	gQu\xa9\x94ni\xda
::
n\xdcm\xaeized
() const {

133
Qu\xa9\x94ni\xda

q
 = *
this
;

134
	gq
.
n\xdcm\xaeize
();

135 
	gq
;

138
bo\xde

	gQu\xa9\x94ni\xda
::
is_un\x99
(
tޔ\xaa\xfb
) const {

139 
\xa1d
::
\xe7bs
(
n\xdcm_sq
(\xe8- 1.0\xe8<
tޔ\xaa\xfb
 *\x81olerance;

143
	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gQu\xa9\x94ni\xda
&
	gq
) {

144
	g\xa1d
::
ios_ba\xa3
::
fmt\xe6ags

\xe6ags
 =
os
.flags();

145
	gos
 <<
	g\xa1d
::
fixed
 <<
\xa1d
::
\xa3\x8d\xbbcisi\xda
(4);

146
	gos
 << "(" <<
	gq
.
	gr
 << ", " << q.
	gi
 << "i, " << q.
	gj
 << "j, " << q.
	gk
 << "k)";

147
	gos
.
\xe6ags
(flags);

148 
	gos
;

	@common/math/quaternion.hpp

1 #i\xe2de\xe0
COMMON_MATH_QUATERNION_HPP


2 
	#COMMON_MATH_QUATERNION_HPP


	)

4 
	~<\xac\xbfy
>

5 
	~<cm\xa9h
>

6 
	~<iosfwd
>

8
\xc7me\xa5a\xfb

	gComm\xda
 {

9
\xc7me\xa5a\xfb

	gM\xa9h
 {

20
\xfeass

\xaeig\xc7s
(32\xe8
	gQu\xa9\x94ni\xda
 {

21
	gpublic
:

22 
r
;

23 
	gi
;

24 
	gj
;

25 
	gk
;

29
cڡex\xb4

Qu\xa9\x94ni\xda
(\xe8:
r
(0.0),
i
(0.0),
j
(0.0),
k
(0.0) {}

32
cڡex\xb4

Qu\xa9\x94ni\xda
(
r_v\xae
, 
i_v\xae
, 
j_v\xae
, 
k_v\xae
)

33 :
r
(
r_v\xae
),
i
(
i_v\xae
),
j
(
j_v\xae
),
k
(
k_v\xae
) {}

36
cڡex\xb4

Qu\xa9\x94ni\xda
(
s\xff\xcfr_\xb7\xb9
, cڡ
\xa1d
::
\xac\xbfy
<, 3>&
ve\xf9\xdc_\xb7\xb9
)

37 :
r
(
s\xff\xcfr_\xb7\xb9
),
i
(
ve\xf9\xdc_\xb7\xb9
[0]),
j
(ve\xf9\xdc_\xb7\xb9[1]),
k
(vector_part[2]) {}

41
	gQu\xa9\x94ni\xda
&
	gݔ\xa9\xdc
+=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
);

42
	gQu\xa9\x94ni\xda
&
	gݔ\xa9\xdc
-=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
);

43
	gQu\xa9\x94ni\xda
&
	gݔ\xa9\xdc
*=(
s\xff\xcfr
);

44
	gQu\xa9\x94ni\xda
&
	gݔ\xa9\xdc
/=(
s\xff\xcfr
);

45
	gQu\xa9\x94ni\xda
&
	gݔ\xa9\xdc
*=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
);

48
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
+(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
);

49
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
-(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
);

50
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(Qu\xa9\x94ni\xda
	glhs
, 
	gs\xff\xcfr
);

51
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, Qu\xa9\x94ni\xda
	grhs
);

52
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
/(Qu\xa9\x94ni\xda
	glhs
, 
	gs\xff\xcfr
);

53
\xe4\x9bnd

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(Qu\xa9\x94ni\xda
	glhs
, cڡ
	gQu\xa9\x94ni\xda
&
	grhs
);

56
bo\xde

	gݔ\xa9\xdc
==(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) const;

57
bo\xde

	gݔ\xa9\xdc
!=(cڡ
Qu\xa9\x94ni\xda
&
\xd9h\x94
) const;

61
cڡex\xb4

Qu\xa9\x94ni\xda

c\xdajug\xa9e
() const {

62 
Qu\xa9\x94ni\xda
(
r
, -
i
, -
j
, -
k
);

68
cڡex\xb4
 
n\xdcm_sq
() const {

69 
r
 *
	gr
 +
i
 *
	gi
 +
j
 *
	gj
 +
k
 *
	gk
;

73 
n\xdcm
() const;

78
Qu\xa9\x94ni\xda

\x9av\x94\xa3
() const;

83
	gQu\xa9\x94ni\xda
&
n\xdcm\xaeize
();

86
Qu\xa9\x94ni\xda

n\xdcm\xaeized
() const;

89
bo\xde

is_un\x99
(
tޔ\xaa\xfb
 = 1e-9) const;

93 
cڡex\xb4

Qu\xa9\x94ni\xda

id\x92t\x99y
() {  Quaternion(1.0, 0.0, 0.0, 0.0); }

95 
cڡex\xb4

Qu\xa9\x94ni\xda

z\x94o
() {  Quaternion(0.0, 0.0, 0.0, 0.0); }

98
\xe4\x9bnd

	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gQu\xa9\x94ni\xda
&
	gq
);

	@common/math/sedenion.cpp

1 
	~"\xa3d\x92i\xda.h\xb5
"

2 
	~"o\xf9\xdai\xda.h\xb5
"

3 
	~<cm\xa9h
>

4 
	~<\xa1dex\xfb\xb1
>

5 
	~<o\xa1\xbbam
>

6 
	~<iom\xaa\x9d
>

7 
	~<num\x94ic
>

9
\xc7me\xa5a\xfb

	gComm\xda
 {

10
\xc7me\xa5a\xfb

	gM\xa9h
 {

13
	gSed\x92i\xda
::
Sed\x92i\xda
(cڡ
O\xf9\xdai\xda
&
o1
, cڡ O\xf9\xdai\xda&
o2
) {

14 
size_t

	gi
 = 0; i < 8; ++i) {

15
	gc
[
i
] =
o1
.
c
[i];

16
	gc
[
i
 + 8] =
o2
.
c
[i];

21
O\xf9\xdai\xda

	gSed\x92i\xda
::
g\x91_o1
() const {

22
\xa1d
::
\xac\xbfy
<, 8>
	go1_comps
;

23 
size_t

	gi
 = 0; i < 8; ++i\xe8
	go1_comps
[
i
] =
c
[i];

24 
O\xf9\xdai\xda
(
o1_comps
);

27
O\xf9\xdai\xda

	gSed\x92i\xda
::
g\x91_o2
() const {

28
\xa1d
::
\xac\xbfy
<, 8>
	go2_comps
;

29 
size_t

	gi
 = 0; i < 8; ++i\xe8
	go2_comps
[
i
] =
c
[i+8];

30 
O\xf9\xdai\xda
(
o2_comps
);

34
	gSed\x92i\xda
& Sed\x92i\xda::
ݔ\xa9\xdc
+=(cڡ
Sed\x92i\xda
&
\xd9h\x94
) {

35 
size_t

i
 = 0;
	gi
 < 16; ++i) {

36
	gc
[
i
] +\xf0
\xd9h\x94
.
c
[i];

38  *
	gthis
;

41
	gSed\x92i\xda
& Sed\x92i\xda::
ݔ\xa9\xdc
-=(cڡ
Sed\x92i\xda
&
\xd9h\x94
) {

42 
size_t

i
 = 0;
	gi
 < 16; ++i) {

43
	gc
[
i
] -\xf0
\xd9h\x94
.
c
[i];

45  *
	gthis
;

48
	gSed\x92i\xda
& Sed\x92i\xda::
ݔ\xa9\xdc
*=(
s\xff\xcfr
) {

49 
size_t

i
 = 0;
	gi
 < 16; ++i) {

50
	gc
[
i
] *\xf0
s\xff\xcfr
;

52  *
	gthis
;

55
	gSed\x92i\xda
& Sed\x92i\xda::
ݔ\xa9\xdc
/=(
s\xff\xcfr
) {

56 i\xe0(
\xa1d
::
\xe7bs
(
s\xff\xcfr
) < 1e-12) {

57
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Sedenion division by zero scalar.");

59 
size_t

	gi
 = 0; i < 16; ++i) {

60
	gc
[
i
] /\xf0
s\xff\xcfr
;

62  *
	gthis
;

65
	gSed\x92i\xda
& Sed\x92i\xda::
ݔ\xa9\xdc
*=(cڡ
Sed\x92i\xda
&
\xd9h\x94
) {

68
O\xf9\xdai\xda

a
 =
this
->
g\x91_o1
();

69
O\xf9\xdai\xda

	gb
 =
this
->
g\x91_o2
();

70
O\xf9\xdai\xda

	gc_\xd9h\x94
 =
\xd9h\x94
.
g\x91_o1
();

71
O\xf9\xdai\xda

	gd_\xd9h\x94
 =
\xd9h\x94
.
g\x91_o2
();

73
O\xf9\xdai\xda

	g\xbbs_o1
 = (
a
 *
c_\xd9h\x94
\xe8- (
d_\xd9h\x94
 *
b
.
c\xdajug\xa9e
());

74
O\xf9\xdai\xda

	g\xbbs_o2
 = (
d_\xd9h\x94
 *
a
\xe8+ (
c_\xd9h\x94
.
c\xdajug\xa9e
(\xe8*
b
);

76 
size_t

	gi
 = 0; i < 8; ++i) {

77
	gthis
->
	gc
[
i
] =
\xbbs_o1
.
c
[i];

78
	gthis
->
	gc
[
i
 + 8] =
\xbbs_o2
.
c
[i];

80  *
	gthis
;

84
Sed\x92i\xda

	gݔ\xa9\xdc
+(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
) {

85
	glhs
 +\xf0
rhs
;

86 
	glhs
;

89
Sed\x92i\xda

	gݔ\xa9\xdc
-(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
) {

90
	glhs
 -\xf0
rhs
;

91 
	glhs
;

94
Sed\x92i\xda

	gݔ\xa9\xdc
*(Sed\x92i\xda
	glhs
, 
	gs\xff\xcfr
) {

95
	glhs
 *\xf0
s\xff\xcfr
;

96 
	glhs
;

99
Sed\x92i\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, Sed\x92i\xda
	grhs
) {

100
	grhs
 *\xf0
s\xff\xcfr
;

101 
	grhs
;

104
Sed\x92i\xda

	gݔ\xa9\xdc
/(Sed\x92i\xda
	glhs
, 
	gs\xff\xcfr
) {

105
	glhs
 /\xf0
s\xff\xcfr
;

106 
	glhs
;

109
Sed\x92i\xda

	gݔ\xa9\xdc
*(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
) {

110
	glhs
 *\xf0
rhs
;

111 
	glhs
;

115
bo\xde

	gSed\x92i\xda
::
ݔ\xa9\xdc
==(cڡ
Sed\x92i\xda
&
\xd9h\x94
) const {

116 
\x95s\x9e\xda
 = 1e-9;

117 
size_t

	gi
 = 0; i < 16; ++i) {

118 i\xe0(
	g\xa1d
::
\xe7bs
(
c
[
i
] -
\xd9h\x94
.c[i]\xe8>\xf0
\x95s\x9e\xda
) {

119 
\xe7l\xa3
;

122 
	g\x8cue
;

125
bo\xde

	gSed\x92i\xda
::
ݔ\xa9\xdc
!=(cڡ
Sed\x92i\xda
&
\xd9h\x94
) const {

126  !(*
this
 =\xf0
\xd9h\x94
);

130 
	gSed\x92i\xda
::
n\xdcm
() const {

131 
\xa1d
::
sq\xb9
(
n\xdcm_sq
());

134
Sed\x92i\xda

	gSed\x92i\xda
::
\x9av\x94\xa3
() const {

135 
n_sq
 =
n\xdcm_sq
();

143 i\xe0(
	g\xa1d
::
\xe7bs
(
n_sq
) < 1e-12) {

150 
Sed\x92i\xda
::
z\x94o
();

152 
c\xdajug\xa9e
(\xe8/
	gn_sq
;

155
	gSed\x92i\xda
& Sed\x92i\xda::
n\xdcm\xaeize
() {

156 
n
 =
n\xdcm
();

157 i\xe0(
	g\xa1d
::
\xe7bs
(
n
) < 1e-12) {

159 
size_t

i
=0;
	gi
<16; ++i\xe8
	gc
[i] = 0.0;

160  *
	gthis
;

162 *
	gthis
 /\xf0
n
;

163  *
	gthis
;

166
Sed\x92i\xda

	gSed\x92i\xda
::
n\xdcm\xaeized
() const {

167
Sed\x92i\xda

s
 = *
this
;

168
	gs
.
n\xdcm\xaeize
();

169 
	gs
;

172
bo\xde

	gSed\x92i\xda
::
is_un\x99
(
tޔ\xaa\xfb
) const {

173 
\xa1d
::
\xe7bs
(
n\xdcm_sq
(\xe8- 1.0\xe8<
tޔ\xaa\xfb
 *\x81olerance;

176
bo\xde

	gSed\x92i\xda
::
is_z\x94o_divis\xdc_\xffndid\xa9e
() const {

177 i\xe0(
this
->
ݔ\xa9\xdc
==(
Sed\x92i\xda
::
z\x94o
())\xe8
\xe7l\xa3
;

178 
	g\xa1d
::
\xe7bs
(
n\xdcm_sq
()) < 1e-12;

183
	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gSed\x92i\xda
&
	gs
) {

184
	g\xa1d
::
ios_ba\xa3
::
fmt\xe6ags

\xe6ags
 =
os
.flags();

185
	gos
 <<
	g\xa1d
::
fixed
 <<
\xa1d
::
\xa3\x8d\xbbcisi\xda
(4);

186
	gos
 << "(";

187 
size_t

	gi
 = 0; i < 16; ++i) {

188
	gos
 <<
	gs
.
	gc
[
i
] << (
	gi
 =\xf00 ? "" : ("e" +
\xa1d
::
to_\xa1r\x9ag
(i)));

189 i\xe0(
	gi
 < 15\xe8
	gos
 << ", ";

191
	gos
 << ")";

192
	gos
.
\xe6ags
(flags);

193 
	gos
;

	@common/math/sedenion.hpp

1 #i\xe2de\xe0
COMMON_MATH_SEDENION_HPP


2 
	#COMMON_MATH_SEDENION_HPP


	)

4 
	~"o\xf9\xdai\xda.h\xb5
"

5 
	~<\xac\xbfy
>

6 
	~<cm\xa9h
>

7 
	~<iosfwd
>

9
\xc7me\xa5a\xfb

	gComm\xda
 {

10
\xc7me\xa5a\xfb

	gM\xa9h
 {

29
\xfeass

\xaeig\xc7s
(128\xe8
	gSed\x92i\xda
 {

30
	gpublic
:

31
\xa1d
::
\xac\xbfy
<, 16>
	gc
;

35
cڡex\xb4

Sed\x92i\xda
(\xe8:
c
{} {

36 
size_t

i
=0;
	gi
<16; ++i\xe8
	gc
[i] = 0.0;

41
cڡex\xb4

Sed\x92i\xda
(

42 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
,

43 
c8
, 
c9
, 
c10
, 
c11
, 
c12
, 
c13
, 
c14
, 
c15
)

44 :
c
{
c0
,
	gc1
,
	gc2
,
	gc3
,
	gc4
,
	gc5
,
	gc6
,
	gc7
,
	gc8
,
	gc9
,
	gc10
,
	gc11
,
	gc12
,
	gc13
,
	gc14
,
	gc15
} {}

47
cڡex\xb4

ex\xb6ic\x99

Sed\x92i\xda
(cڡ
\xa1d
::
\xac\xbfy
<, 16>&
compڒts
\xe8:
c
(components) {}

50
Sed\x92i\xda
(cڡ
O\xf9\xdai\xda
&
a
, cڡ O\xf9\xdai\xda&
b
);

53
	gSed\x92i\xda
&
	gݔ\xa9\xdc
+=(cڡ
Sed\x92i\xda
&
\xd9h\x94
);

54
	gSed\x92i\xda
&
	gݔ\xa9\xdc
-=(cڡ
Sed\x92i\xda
&
\xd9h\x94
);

55
	gSed\x92i\xda
&
	gݔ\xa9\xdc
*=(
s\xff\xcfr
);

56
	gSed\x92i\xda
&
	gݔ\xa9\xdc
/=(
s\xff\xcfr
);

57
	gSed\x92i\xda
&
	gݔ\xa9\xdc
*=(cڡ
Sed\x92i\xda
&
\xd9h\x94
);

60
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
+(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
);

61
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
-(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
);

62
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
*(Sed\x92i\xda
	glhs
, 
	gs\xff\xcfr
);

63
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
*(
	gs\xff\xcfr
, Sed\x92i\xda
	grhs
);

64
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
/(Sed\x92i\xda
	glhs
, 
	gs\xff\xcfr
);

65
\xe4\x9bnd

Sed\x92i\xda

	gݔ\xa9\xdc
*(Sed\x92i\xda
	glhs
, cڡ
	gSed\x92i\xda
&
	grhs
);

68
bo\xde

	gݔ\xa9\xdc
==(cڡ
Sed\x92i\xda
&
\xd9h\x94
) const;

69
bo\xde

	gݔ\xa9\xdc
!=(cڡ
Sed\x92i\xda
&
\xd9h\x94
) const;

73
cڡex\xb4

Sed\x92i\xda

c\xdajug\xa9e
() const {

74
Sed\x92i\xda

	g\xbbs
;

75
	g\xbbs
.
	gc
[0] =
c
[0];

76 
size_t

	gi
 = 1; i < 16; ++i) {

77
	g\xbbs
.
	gc
[
i
] = -
c
[i];

79 
	g\xbbs
;

83
cڡex\xb4
 
n\xdcm_sq
() const {

84 
	gsum_sq
 = 0.0;

85 
	gv\xae
 :
c
) {

86
sum_sq
 +\xf0
v\xae
 * val;

88 
	gsum_sq
;

92 
n\xdcm
() const;

104
Sed\x92i\xda

\x9av\x94\xa3
() const;

109
	gSed\x92i\xda
&
n\xdcm\xaeize
();

112
Sed\x92i\xda

n\xdcm\xaeized
() const;

115
bo\xde

is_un\x99
(
tޔ\xaa\xfb
 = 1e-9) const;

124
bo\xde

is_z\x94o_divis\xdc_\xffndid\xa9e
() const;

127 
cڡex\xb4

Sed\x92i\xda

id\x92t\x99y
() {

128
	g\xa1d
::
\xac\xbfy
<, 16>
	gs_c
{}; s_c[0] = 1.0; 
Sed\x92i\xda
(
s_c
);

130 
cڡex\xb4

Sed\x92i\xda

z\x94o
() {

131
	g\xa1d
::
\xac\xbfy
<, 16>
	gs_c
{}; 
Sed\x92i\xda
(
s_c
);

135
O\xf9\xdai\xda

g\x91_o1
() const;

136
O\xf9\xdai\xda

g\x91_o2
() const;

139
\xe4\x9bnd

	g\xa1d
::
o\xa1\xbbam
&
ݔ\xa9\xdc
<<(
\xa1d
::o\xa1\xbbam&
os
, cڡ
	gSed\x92i\xda
&
	gs
);

	@console.cpp

1 
	~"c\xdas\xd\x93.h
"

2 
	~<\xa1ddef.h
>

5 
	#VGA_CTRL_REGISTER
 0x3D4

	)

6 
	#VGA_DATA_REGISTER
 0x3D5

	)

9 
	#VGA_CMD_CURSOR_HIGH_BYTE
 14

	)

10 
	#VGA_CMD_CURSOR_LOW_BYTE
 15

	)

14 vީ\x9e\x90*
	gvga_buf\xe3r
 = (*)0xB8000;

15 cڡ 
	gVGA_WIDTH
 = 80;

16 cڡ 
	gVGA_HEIGHT
 = 25;

18 
	gcurs\xdc_x
 = 0;

19 
	gcurs\xdc_y
 = 0;

20
u\x9\xa98_t

	gcu\xbc\x92t_c\xde\xdc
 =
DEFAULT_COLOR
;

25 
\x9al\x9ae
 
	$outb
(
p\xd\xf9
, 
v\x\xab
) {

26
asm
 vީ\x9e\x90\xd0"outb %0, %1" : : "a"(
v\x\xab
), "Nd"(
p\xd\xf9
) );

27
	}
}

30 
\x9al\x9ae
 
	$\x9ab
(
p\xd\xf9
) {

31 
\xbbt
;

32
asm
 vީ\x9e\x90\xd0"\x9ab %1, %0" : "\xf7"(
\xbbt
\xe8: "Nd"(
p\xd\xf9
) );

33 
\xbbt
;

34
	}
}

36 
	$c\xdas\xd\x93_\xa3t_curs\xdc_hw
(
x
, 
y
) {

37 
pos\x99i\xda
 = (
y
 *
VGA_WIDTH
\xe8+
x
;

38
	`outb
(
VGA_CTRL_REGISTER
,
VGA_CMD_CURSOR_HIGH_BYTE
);

39
	`outb
(
VGA_DATA_REGISTER
, (
pos\x99i\xda
 >> 8) & 0xFF);

40
	`outb
(
VGA_CTRL_REGISTER
,
VGA_CMD_CURSOR_LOW_BYTE
);

41
	`outb
(
VGA_DATA_REGISTER
,
pos\x99i\xda
 & 0xFF);

42
	}
}

44 
	$c\xdas\xd\x93_\xa3t_curs\xdc
(
x
, 
y
) {

45
curs\xdc_x
 =
x
;

46
curs\xdc_y
 =
y
;

47 i\xe0(
curs\xdc_x
 >\xf0
VGA_WIDTH
) {

48
curs\xdc_x
 =
VGA_WIDTH
 - 1;

50 i\xe0(
curs\xdc_x
 < 0) {

51
curs\xdc_x
 = 0;

53 i\xe0(
curs\xdc_y
 >\xf0
VGA_HEIGHT
) {

54
curs\xdc_y
 =
VGA_HEIGHT
 - 1;

56 i\xe0(
curs\xdc_y
 < 0) {

57
curs\xdc_y
 = 0;

59
	`c\xdas\xd\x93_\xa3t_curs\xdc_hw
(
curs\xdc_x
,
curs\xdc_y
);

60
	}
}

62 
	$c\xdas\xd\x93_g\x91_curs\xdc
(*
x
, *
y
) {

63 *
x
 =
curs\xdc_x
;

64 *
y
 =
curs\xdc_y
;

65
	}
}

68 
	$c\xdas\xd\x93_\x\xe3\x97r
(
u\x9\xa98_t

background
, u\x9at8_\x88
f\xd\xfbground
) {

69
u\x9\xa98_t

c\xde\xdc_by\x8b
 =
	`vga_\x92\x8cy_c\xde\xdc
(
f\xd\xfbground
,
background
);

70 
b\xc\xe2k
 = (
c\xde\xdc_by\x8b
 << 8) | ' ';

72 
y
 = 0; y <
VGA_HEIGHT
; y++) {

73 
x
 = 0; x <
VGA_WIDTH
; x++) {

74
vga_buf\xe3r
[
y
 *
VGA_WIDTH
 +
x
] =
b\xc\xe2k
;

77
curs\xdc_x
 = 0;

78
curs\xdc_y
 = 0;

79
	`c\xdas\xd\x93_\xa3t_curs\xdc_hw
(
curs\xdc_x
,
curs\xdc_y
);

80
cu\xbc\x92t_c\xde\xdc
 =
c\xde\xdc_by\x8b
;

81
	}
}

83 
	$c\xdas\xd\x93_\x9a\x99
(
u\x9\xa98_t

background
, u\x9at8_\x88
f\xd\xfbground
) {

84
	`c\xdas\xd\x93_\x\xe3\x97r
(
background
,
f\xd\xfbground
);

86
	}
}

89 
	$c\xdas\xd\x93_putc_\xa9
(
c
,
u\x9\xa98_t

c\xde\xdc
, 
x
, 
y
) {

90 i\xe0(
x
 >\xf00 && x <
VGA_WIDTH
 &&
y
 >\xf00 && y <
VGA_HEIGHT
) {

91
vga_buf\xe3r
[
y
 *
VGA_WIDTH
 +
x
] = (
c\xde\xdc
 << 8\xe8|
c
;

93
	}
}

95 
	$s\xfc\xd\x96_s\xfc\x93n
() {

97 
y
 = 0; y <
VGA_HEIGHT
 - 1; y++) {

98 
x
 = 0; x <
VGA_WIDTH
; x++) {

99
vga_buf\xe3r
[
y
 *
VGA_WIDTH
 +
x
] = vga_buffer[(y + 1) * VGA_WIDTH + x];

104 
b\xc\xe2k
 = (
cu\xbc\x92t_c\xde\xdc
 << 8) | ' ';

105 
x
 = 0; x <
VGA_WIDTH
; x++) {

106
vga_buf\xe3r
[(
VGA_HEIGHT
 - 1\xe8*
VGA_WIDTH
 +
x
] =
b\xc\xe2k
;

108
curs\xdc_y
 =
VGA_HEIGHT
 - 1;

109
	}
}

111 
	$c\xdas\xd\x93_wr\x99e_ch\xac
(
c
,
u\x9\xa98_t

c\xde\xdc
) {

112
cu\xbc\x92t_c\xde\xdc
 =
c\xde\xdc
;

114 i\xe0(
c
 == '\n') {

115
curs\xdc_x
 = 0;

116
curs\xdc_y
++;

117 } i\xe0(
c
 == '\r') {

118
curs\xdc_x
 = 0;

119 } i\xe0(
c
 == '\b') {

120 i\xe0(
curs\xdc_x
 > 0) {

121
curs\xdc_x
--;

122
	`c\xdas\xd\x93_putc_\xa9
(' ',
c\xde\xdc
,
curs\xdc_x
,
curs\xdc_y
);

123 } i\xe0(
curs\xdc_y
 > 0) {

124
curs\xdc_y
--;

125
curs\xdc_x
 =
VGA_WIDTH
 - 1;

130
	`c\xdas\xd\x93_putc_\xa9
(
c
,
c\xde\xdc
,
curs\xdc_x
,
curs\xdc_y
);

131
curs\xdc_x
++;

134 i\xe0(
curs\xdc_x
 >\xf0
VGA_WIDTH
) {

135
curs\xdc_x
 = 0;

136
curs\xdc_y
++;

139 i\xe0(
curs\xdc_y
 >\xf0
VGA_HEIGHT
) {

140
	`s\xfc\xd\x96_s\xfc\x93n
();

142
	`c\xdas\xd\x93_\xa3t_curs\xdc_hw
(
curs\xdc_x
,
curs\xdc_y
);

143
	}
}

145 
	$c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(cڡ *
\xa1r
,
u\x9\xa98_t

c\xde\xdc
) {

146 i\xe0(!
\xa1r
) ;

147 *
\xa1r
) {

148
	`c\xdas\xd\x93_wr\x99e_ch\xac
(*
\xa1r
++,
c\xde\xdc
);

150
	}
}

152 
	$c\xdas\xd\x93_wr\x99e_dec
(
n
,
u\x9\xa98_t

c\xde\xdc
) {

153 i\xe0(
n
 == 0) {

154
	`c\xdas\xd\x93_wr\x99e_ch\xac
('0',
c\xde\xdc
);

157 
buf\xe3r
[11];

158 
i
 = 0;

159 
n
 > 0) {

160
buf\xe3r
[
i
++] = (
n
 % 10) + '0';

161
n
 /= 10;

163
buf\xe3r
[
i
] = '\0';

166 
j
 = 0; j <
i
 / 2; j++) {

167 
\x8bmp
 =
buf\xe3r
[
j
];

168
buf\xe3r
[
j
] = buf\xe3r[
i
 - j - 1];

169
buf\xe3r
[
i
 -
j
 - 1] =
\x8bmp
;

171
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(
buf\xe3r
,
c\xde\xdc
);

172
	}
}

174 
	$c\xdas\xd\x93_wr\x99e_hex
(
n
,
u\x9\xa98_t

c\xde\xdc
) {

175
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("0x",
c\xde\xdc
);

176 i\xe0(
n
 == 0) {

177
	`c\xdas\xd\x93_wr\x99e_ch\xac
('0',
c\xde\xdc
);

181 
buf\xe3r
[9];

182 
i
 = 0;

183
bo\xde

\xcbad\x9ag_z\x94os
 =
\x8cue
;

185 
j
 = 7; j >= 0; j--) {

186 
hex_dig\x99
 = (
n
 >> (
j
 * 4)) & 0xF;

187 i\xe0(
hex_dig\x99
 !\xf00 || !
\xcbad\x9ag_z\x94os
 ||
j
 == 0) {

188
\xcbad\x9ag_z\x94os
 =
\xe7l\xa3
;

189 i\xe0(
hex_dig\x99
 < 10) {

190
buf\xe3r
[
i
++] =
hex_dig\x99
 + '0';

192
buf\xe3r
[
i
++] =
hex_dig\x99
 - 10 + 'A';

196
buf\xe3r
[
i
] = '\0';

197
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(
buf\xe3r
,
c\xde\xdc
);

198
	}
}

202 
	$c\xdas\xd\x93_\xa3t_vga_buf\xe3r_add\xbbss
(vީ\x9e\x90*
\xc3w_add\xbbss
) {

203
vga_buf\xe3r
 =
\xc3w_add\xbbss
;

204
	}
}

	@console.h

1 #i\xe2de\xe0
CONSOLE_H


2 
	#CONSOLE_H


	)

4 
	~<\xa1d\x9\xa9.h
>

7 
	#VGA_COLOR_BLACK
 0

	)

8 
	#VGA_COLOR_BLUE
 1

	)

9 
	#VGA_COLOR_GREEN
 2

	)

10 
	#VGA_COLOR_CYAN
 3

	)

11 
	#VGA_COLOR_RED
 4

	)

12 
	#VGA_COLOR_MAGENTA
 5

	)

13 
	#VGA_COLOR_BROWN
 6

	)

14 
	#VGA_COLOR_LIGHT_GREY
 7

	)

15 
	#VGA_COLOR_DARK_GREY
 8

	)

16 
	#VGA_COLOR_LIGHT_BLUE
 9

	)

17 
	#VGA_COLOR_LIGHT_GREEN
 10

	)

18 
	#VGA_COLOR_LIGHT_CYAN
 11

	)

19 
	#VGA_COLOR_LIGHT_RED
 12

	)

20 
	#VGA_COLOR_LIGHT_MAGENTA
 13

	)

21 
	#VGA_COLOR_LIGHT_BROWN
 14

22 
	#VGA_COLOR_WHITE
 15

	)

25 
	#DEFAULT_COLOR
 ((
VGA_COLOR_BLACK
 << 4\xe8|
VGA_COLOR_WHITE
)

	)

27 
c\xdas\xd\x93_\x9a\x99
(
u\x9\xa98_t

background_c\xde\xdc
 =
VGA_COLOR_BLACK
, u\x9at8_\x88
f\xd\xfbground_c\xde\xdc
 =
VGA_COLOR_WHITE
);

28 
c\xdas\xd\x93_\x\xe3\x97r
(
u\x9\xa98_t

background_c\xde\xdc
 =
VGA_COLOR_BLACK
, u\x9at8_\x88
f\xd\xfbground_c\xde\xdc
 =
VGA_COLOR_WHITE
);

30 
c\xdas\xd\x93_putc_\xa9
(
c
,
u\x9\xa98_t

c\xde\xdc
, 
x
, 
y
);

31 
c\xdas\xd\x93_wr\x99e_ch\xac
(
c
,
u\x9\xa98_t

c\xde\xdc
);

32 
c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(cڡ *
\xa1r
,
u\x9\xa98_t

c\xde\xdc
);

33 
c\xdas\xd\x93_wr\x99e_dec
(
n
,
u\x9\xa98_t

c\xde\xdc
);

34 
c\xdas\xd\x93_wr\x99e_hex
(
n
,
u\x9\xa98_t

c\xde\xdc
);

36 
c\xdas\xd\x93_\xa3t_curs\xdc
(
x
, 
y
);

37 
c\xdas\xd\x93_g\x91_curs\xdc
(*
x
, *
y
);

40 
\x9al\x9ae

u\x9\xa98_t

	$vga_\x92\x8cy_c\xde\xdc
(
u\x9\xa98_t

fg
, u\x9at8_\x88
bg
) {

41 
fg
 |
bg
 << 4;

42
	}
}

	@crypto/kyber.cpp

1 
	~"kyb\x94.h\xb5
"

8 
	~<ݒs\xa6/evp.h
>

9 
	~<sodium.h
>

11 
	~<\x\xabgܙhm
>

12 
	~<\xac\xbfy
>

13 
	~<mem\xdcy
>

14 
	~<\xb\xe2dom
>

15 
	~<\xa1dex\xfb\xb1
>

17
\xc7me\xa5a\xfb

	gpq
::
kyb\x94
 {

19
\xc7me\xa5a\xfb
 {

21
cڡex\xb4

\xa1d
::
size_t

NONCE_SIZE
 = 12;

22
cڡex\xb4

	g\xa1d
::
size_t

TAG_SIZE
 = 16;

33 [[
nodis\xf\xe4d
]]\x87ut\xd8
make_c\x9dh\x94_\xf9x
()

34 ->
	g\xa1d
::
unique_\xb1r
<
EVP_CIPHER_CTX
,
de\x\xe3ty\xb3
(&
EVP_CIPHER_CTX_\xe4\x93
)> {

35
EVP_CIPHER_CTX
 *
	g\xbfw
 =
EVP_CIPHER_CTX_\xc3w
();

36 i\xe0(!
	g\xbfw
) {

37
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_CIPHER_CTX_new failed"};

39  {
	g\xbfw
,
	gEVP_CIPHER_CTX_\xe4\x93
};

43
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xabs_gcm_\x92\xfcy\xb1
(\xa1d::
\xa5\xaa
<cڡ std::by\x8b>
\xb6a\x9a
,

44
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
key
,

45
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
,

46
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
,
TAG_SIZE
> &
\x8fg
) {

47 aut\xd8
	g\xf9x
 =
make_c\x9dh\x94_\xf9x
();

49 i\xe0(
EVP_En\xfcy\xb1In\x99_ex
(
\xf9x
.
g\x91
(),
EVP_\xabs_256_gcm
(),
nuαr
,\x82ullptr,\x82ullptr) != 1) {

50
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_EncryptInit_ex failed"};

52 i\xe0(
EVP_CIPHER_CTX_\xf9\xbe
(
\xf9x
.
g\x91
(),
EVP_CTRL_GCM_SET_IVLEN
,
NONCE_SIZE
,
nuαr
) != 1) {

53
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_CTRL_GCM_SET_IVLEN failed"};

55 i\xe0(
EVP_En\xfcy\xb1In\x99_ex
(
\xf9x
.
g\x91
(),
nuαr
,\x82ullptr,

56
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
key
.
d\xa9a
()),

57
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
())) != 1) {

58
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_EncryptInit_ex key/nonce failed"};

61
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
c\x9dh\x94
(
\xb6a\x9a
.
size
());

62 
	gout_\xcbn
 = 0;

63 i\xe0(
EVP_En\xfcy\xb1Upd\xa9e
(
\xf9x
.
g\x91
(),
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x94
.
d\xa9a
()), &
out_\xcbn
,

64
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xb6a\x9a
.
d\xa9a
()),

65
\xa1\xa9ic_\xff\xa1
<>(
\xb6a\x9a
.
size
())) != 1) {

66
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_EncryptUpdate failed"};

69 
	gtmp_\xcbn
 = 0;

70 i\xe0(
EVP_En\xfcy\xb1F\x9a\x\xab_ex
(
\xf9x
.
g\x91
(),
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x94
.
d\xa9a
()\xe8+
out_\xcbn
,

71 &
tmp_\xcbn
) != 1) {

72
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_EncryptFinal_ex failed"};

74
	gout_\xcbn
 +\xf0
tmp_\xcbn
;

75
	gc\x9dh\x94
.
\xbbsize
(
out_\xcbn
);

77 i\xe0(
EVP_CIPHER_CTX_\xf9\xbe
(
\xf9x
.
g\x91
(),
EVP_CTRL_GCM_GET_TAG
,
TAG_SIZE
,
\x8fg
.
d\xa9a
()) != 1) {

78
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_CTRL_GCM_GET_TAG failed"};

80 
	gc\x9dh\x94
;

84
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xabs_gcm_de\xfcy\xb1
(\xa1d::
\xa5\xaa
<cڡ std::by\x8b>
c\x9dh\x94
,

85
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
key
,

86
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
,

87
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
TAG_SIZE
>
\x8fg
) {

88 aut\xd8
	g\xf9x
 =
make_c\x9dh\x94_\xf9x
();

90 i\xe0(
EVP_De\xfcy\xb1In\x99_ex
(
\xf9x
.
g\x91
(),
EVP_\xabs_256_gcm
(),
nuαr
,\x82ullptr,\x82ullptr) != 1) {

91
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_DecryptInit_ex failed"};

93 i\xe0(
EVP_CIPHER_CTX_\xf9\xbe
(
\xf9x
.
g\x91
(),
EVP_CTRL_GCM_SET_IVLEN
,
NONCE_SIZE
,
nuαr
) != 1) {

94
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_CTRL_GCM_SET_IVLEN failed"};

96 i\xe0(
EVP_De\xfcy\xb1In\x99_ex
(
\xf9x
.
g\x91
(),
nuαr
,\x82ullptr,

97
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
key
.
d\xa9a
()),

98
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
())) != 1) {

99
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_DecryptInit_ex key/nonce failed"};

102
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xb6a\x9a
(
c\x9dh\x94
.
size
());

103 
	gout_\xcbn
 = 0;

104 i\xe0(
EVP_De\xfcy\xb1Upd\xa9e
(
\xf9x
.
g\x91
(),
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xb6a\x9a
.
d\xa9a
()), &
out_\xcbn
,

105
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
c\x9dh\x94
.
d\xa9a
()),

106
\xa1\xa9ic_\xff\xa1
<>(
c\x9dh\x94
.
size
())) != 1) {

107
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_DecryptUpdate failed"};

109 i\xe0(
EVP_CIPHER_CTX_\xf9\xbe
(
\xf9x
.
g\x91
(),
EVP_CTRL_GCM_SET_TAG
,
TAG_SIZE
,

110
cڡ_\xff\xa1
<
\xa1d
::
by\x8b
 *>(
\x8fg
.
d\xa9a
())) != 1) {

111
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_CTRL_GCM_SET_TAG failed"};

113 
	gtmp_\xcbn
 = 0;

114 i\xe0(
EVP_De\xfcy\xb1F\x9a\x\xab_ex
(
\xf9x
.
g\x91
(),
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xb6a\x9a
.
d\xa9a
()\xe8+
out_\xcbn
,

115 &
tmp_\xcbn
) != 1) {

116
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"EVP_DecryptFinal_ex failed"};

118
	gout_\xcbn
 +\xf0
tmp_\xcbn
;

119
	g\xb6a\x9a
.
\xbbsize
(
out_\xcbn
);

120 
	g\xb6a\x9a
;

124
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
sodium_\xabad_\x92\xfcy\xb1
(

125
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
\xb6a\x9a
, std::\xa5\xaa<cڡ std::by\x8b,
pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
key
,

126
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
, std::
\xac\xbfy
<\xa1d::by\x8b,
TAG_SIZE
> &
\x8fg
) {

127 i\xe0(
sodium_\x9a\x99
() < 0) {

128
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium_init failed"};

131
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
c\x9dh\x94
(
\xb6a\x9a
.
size
(\xe8+
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
);

132 
	gc\x9dh\x94_\xcbn
 = 0U;

134
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(

135
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x94
.
d\xa9a
()), &
c\x9dh\x94_\xcbn
,

136
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xb6a\x9a
.
d\xa9a
()),\x85Ϛ.
size
(),
nuαr
, 0,\x82ullptr,

137
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
()),

138
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
key
.
d\xa9a
()));

140
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
by\x8b
>
\x8fg_\xa5\xaa
{
c\x9dh\x94
.
d\xa9a
(\xe8+
\xb6a\x9a
.
size
(),
	gTAG_SIZE
};

141
	g\xa1d
::
c\xddy
(
\x8fg_\xa5\xaa
.
beg\x9a
(),\x81ag_\xa5\xaa.
\x92d
(),
\x8fg
.begin());

142
	gc\x9dh\x94
.
\xbbsize
(
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
c\x9dh\x94_\xcbn
\xe8-
TAG_SIZE
);

143 
	gc\x9dh\x94
;

147
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
sodium_\xabad_de\xfcy\xb1
(

148
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
c\x9dh\x94
, std::\xa5\xaa<cڡ std::by\x8b,
pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
key
,

149
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
, std::\xa5\xaa<cڡ std::by\x8b,
TAG_SIZE
>
\x8fg
) {

150 i\xe0(
sodium_\x9a\x99
() < 0) {

151
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium_init failed"};

154
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
comb\x9\xabd
(
c\x9dh\x94
.
size
(\xe8+
\x8fg
.size());

155
	g\xa1d
::
c\xddy
(
c\x9dh\x94
.
beg\x9a
(), c\x9dh\x94.
\x92d
(),
comb\x9\xabd
.begin());

156
	g\xa1d
::
c\xddy
(
\x8fg
.
beg\x9a
(),\x81ag.
\x92d
(),
comb\x9\xabd
.beg\x9a(\xe8+
c\x9dh\x94
.
size
());

158
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xb6a\x9a
(
c\x9dh\x94
.
size
());

159 
	g\xb6a\x9a_\xcbn
 = 0U;

161 i\xe0(
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_de\xfcy\xb1
(

162
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xb6a\x9a
.
d\xa9a
()), &
\xb6a\x9a_\xcbn
,
nuαr
,

163
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
comb\x9\xabd
.
d\xa9a
()), comb\x9aed.
size
(),
nuαr
, 0,

164
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
()),

165
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
key
.
d\xa9a
())) != 0) {

166
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium decrypt failed"};

169
	g\xb6a\x9a
.
\xbbsize
(
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xb6a\x9a_\xcbn
));

170 
	g\xb6a\x9a
;

174 
\xbfndom_by\x8bs
(
\xa1d
::
\xa5\xaa
<\xa1d::
by\x8b
>
buf\xe3r
) {

175 i\xe0(
sodium_\x9a\x99
() < 0) {

176
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium_init failed"};

178
\xbfndomby\x8bs_buf
(
buf\xe3r
.
d\xa9a
(), buf\xe3r.
size
());

183
KeyPa\x9c

key\xb7\x9c
() {

184
KeyPa\x9c

	gkp
{};

185
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_key\xb7\x9c
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa98_t
 *>(
kp
.
public_key
.
d\xa9a
()),

186
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa98_t
 *>(
kp
.
\xb4iv\xa9e_key
.
d\xa9a
()));

187 
	gkp
;

190
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

191
\x92\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
mes\xa7ge
,

192
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
public_key
) {

193
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES
>
	gkem_\xf9
{};

194
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
	gsh\xa\xfbd
{};

196
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_\x92c
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa98_t
 *>(
kem_\xf9
.
d\xa9a
()),

197
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa98_t
 *>(
sh\xa\xfbd
.
d\xa9a
()),

198
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
u\x9\xa98_t
 *>(
public_key
.
d\xa9a
()));

200
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gNONCE_SIZE
>
	gn\xda\xfb
{};

201
\xbfndom_by\x8bs
(
n\xda\xfb
);

203
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gTAG_SIZE
>
	g\x8fg
{};

204 aut\xd8
	g\xabs_c\x9dh\x94
 =
\xabs_gcm_\x92\xfcy\xb1
(
mes\xa7ge
,
sh\xa\xfbd
,
n\xda\xfb
,
\x8fg
);

206
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
ou\x8dut
;

207
	gou\x8dut
.
\xbb\xa3rve
(
kem_\xf9
.
size
(\xe8+
n\xda\xfb
.size(\xe8+
\x8fg
.size(\xe8+
\xabs_c\x9dh\x94
.size());

208
	gou\x8dut
.
\x9a\xa3\xb9
(
ou\x8dut
.
\x92d
(),
kem_\xf9
.
beg\x9a
(), kem_ct.end());

209
	gou\x8dut
.
\x9a\xa3\xb9
(
ou\x8dut
.
\x92d
(),
n\xda\xfb
.
beg\x9a
(),\x82once.end());

210
	gou\x8dut
.
\x9a\xa3\xb9
(
ou\x8dut
.
\x92d
(),
\x8fg
.
beg\x9a
(),\x81ag.end());

211
	gou\x8dut
.
\x9a\xa3\xb9
(
ou\x8dut
.
\x92d
(),
\xabs_c\x9dh\x94
.
beg\x9a
(),\x87es_cipher.end());

212 
	gou\x8dut
;

215
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

216
de\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
c\x9dh\x94\x8bxt
,

217
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xb4iv\xa9e_key
) {

218 i\xe0(
	gc\x9dh\x94\x8bxt
.
size
(\xe8<
	gpq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES
 +
	gNONCE_SIZE
 +
	gTAG_SIZE
) {

219
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"ciphertext\x81oo short"};

222
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES
>
	gkem_\xf9
{};

223
	g\xa1d
::
c\xddy_n
(
c\x9dh\x94\x8bxt
.
beg\x9a
(),
kem_\xf9
.
size
(), kem_ct.begin());

225
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gNONCE_SIZE
>
	gn\xda\xfb
{};

226
	g\xa1d
::
c\xddy_n
(
c\x9dh\x94\x8bxt
.
beg\x9a
(\xe8+
kem_\xf9
.
size
(),
n\xda\xfb
.size(),\x82once.begin());

228
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gTAG_SIZE
>
	g\x8fg
{};

229
	g\xa1d
::
c\xddy_n
(
c\x9dh\x94\x8bxt
.
beg\x9a
(\xe8+
kem_\xf9
.
size
(\xe8+
n\xda\xfb
.size(),
\x8fg
.size(),\x81ag.begin());

231 aut\xd8
	g\x92c_\xb7yl\xdfd_beg\x9a
 =
c\x9dh\x94\x8bxt
.
beg\x9a
(\xe8+
kem_\xf9
.
size
(\xe8+
n\xda\xfb
.size(\xe8+
\x8fg
.size();

232
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
by\x8b
>
\x92c_\xb7yl\xdfd
{
\x92c_\xb7yl\xdfd_beg\x9a
,
	gc\x9dh\x94\x8bxt
.
\x92d
()};

234
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
	gsh\xa\xfbd
{};

235
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_dec
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa98_t
 *>(
sh\xa\xfbd
.
d\xa9a
()),

236
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
u\x9\xa98_t
 *>(
kem_\xf9
.
d\xa9a
()),

237
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
u\x9\xa98_t
 *>(
\xb4iv\xa9e_key
.
d\xa9a
()));

239 
\xabs_gcm_de\xfcy\xb1
(
\x92c_\xb7yl\xdfd
,
sh\xa\xfbd
,
n\xda\xfb
,
\x8fg
);

	@crypto/kyber.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~<\xac\xbfy
>

9 
	~<c\xa1ddef
>

10 
	~<\xa5\x\xaf
>

11 
	~<ve\xf9\xdc
>

13 
	~"kyb\x94_im\xb6/\xadi.h
"

15
\xc7me\xa5a\xfb

	gpq
::
kyb\x94
 {

20 
	sKeyPa\x9c
 {

21
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
	gpublic_key
;

22
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>

23
	g\xb4iv\xa9e_key
;

34 [[
nodis\xf\xe4d
]]
KeyPa\x9c

key\xb7\x9c
();

48 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

49
\x92\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
mes\xa7ge
,

50
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
public_key
);

63 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

64
de\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
c\x9dh\x94\x8bxt
,

65
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xb4iv\xa9e_key
);

	@crypto/kyber_impl/api.h

1 #i\xe2de\xe0
API_H


2 
	#API_H


	)

4 
	~<\xa1d\x9\xa9.h
>

6 #ifde\xe0
__\xfdlu\xa5lus


10 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
 1632

	)

11 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
 800

	)

12 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES
 768

	)

13 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_KEYPAIRCOINBYTES
 64

	)

14 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_ENCCOINBYTES
 32

	)

15 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
 32

	)

17 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_SECRETKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES


	)

18 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_PUBLICKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES


	)

19 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_CIPHERTEXTBYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES


	)

20 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_KEYPAIRCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_KEYPAIRCOINBYTES


	)

21 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_ENCCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_ENCCOINBYTES


	)

22 
	#pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_BYTES

pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES


	)

24 
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_key\xb7\x9c_d\x94\x\xafd
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
, cڡ u\x9at8_\x88*
co\x9as
);

25 
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_key\xb7\x9c
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
);

26 
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_\x92c_d\x94\x\xafd
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
, cڡ u\x9at8_\x88*
co\x9as
);

27 
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_\x92c
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
);

28 
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_dec
(
u\x9\xa98_t
 *
ss
, cڡ u\x9at8_\x88*
\xf9
, cڡ u\x9at8_\x88*
sk
);

30 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_SECRETKEYBYTES
 2400

	)

31 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_PUBLICKEYBYTES
 1184

	)

32 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_CIPHERTEXTBYTES
 1088

	)

33 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_KEYPAIRCOINBYTES
 64

	)

34 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_ENCCOINBYTES
 32

	)

35 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_BYTES
 32

	)

37 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_SECRETKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_SECRETKEYBYTES


	)

38 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_PUBLICKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_PUBLICKEYBYTES


	)

39 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_CIPHERTEXTBYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_CIPHERTEXTBYTES


	)

40 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_KEYPAIRCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_KEYPAIRCOINBYTES


	)

41 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_ENCCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_ENCCOINBYTES


	)

42 
	#pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_BYTES

pq\xfcy\xa1\x\xabs_kyb\x94768_BYTES


	)

44 
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_key\xb7\x9c_d\x94\x\xafd
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
, cڡ u\x9at8_\x88*
co\x9as
);

45 
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_key\xb7\x9c
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
);

46 
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_\x92c_d\x94\x\xafd
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
, cڡ u\x9at8_\x88*
co\x9as
);

47 
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_\x92c
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
);

48 
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_dec
(
u\x9\xa98_t
 *
ss
, cڡ u\x9at8_\x88*
\xf9
, cڡ u\x9at8_\x88*
sk
);

50 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_SECRETKEYBYTES
 3168

	)

51 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_PUBLICKEYBYTES
 1568

	)

52 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_CIPHERTEXTBYTES
 1568

	)

53 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_KEYPAIRCOINBYTES
 64

	)

54 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_ENCCOINBYTES
 32

	)

55 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_BYTES
 32

	)

57 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_SECRETKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_SECRETKEYBYTES


	)

58 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_PUBLICKEYBYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_PUBLICKEYBYTES


	)

59 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_CIPHERTEXTBYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_CIPHERTEXTBYTES


	)

60 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_KEYPAIRCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_KEYPAIRCOINBYTES


	)

61 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_ENCCOINBYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_ENCCOINBYTES


	)

62 
	#pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_BYTES

pq\xfcy\xa1\x\xabs_kyb\x941024_BYTES


	)

64 
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_key\xb7\x9c_d\x94\x\xafd
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
, cڡ u\x9at8_\x88*
co\x9as
);

65 
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_key\xb7\x9c
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
);

66 
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_\x92c_d\x94\x\xafd
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
, cڡ u\x9at8_\x88*
co\x9as
);

67 
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_\x92c
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
);

68 
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_dec
(
u\x9\xa98_t
 *
ss
, cڡ u\x9at8_\x88*
\xf9
, cڡ u\x9at8_\x88*
sk
);

70 #ifde\xe0
__\xfdlu\xa5lus


	@crypto/kyber_impl/cbd.c

1 
	~<\xa1d\x9\xa9.h
>

2 
	~"\xb7\xbfms.h
"

3 
	~"cbd.h
"

15 
u\x9\xa932_t

	$l\xdfd32_l\x99\x8e\x93nd\x9\xe2
(cڡ
u\x9\xa98_t

x
[4])

17
u\x9\xa932_t

r
;

18
r
 = (
u\x9\xa932_t
)
x
[0];

19
r
 |\xf0(
u\x9\xa932_t
)
x
[1] << 8;

20
r
 |\xf0(
u\x9\xa932_t
)
x
[2] << 16;

21
r
 |\xf0(
u\x9\xa932_t
)
x
[3] << 24;

22 
r
;

23
	}
}

36 #i\xe0
KYBER_ETA1
 == 3

37 
u\x9\xa932_t

	$l\xdfd24_l\x99\x8e\x93nd\x9\xe2
(cڡ
u\x9\xa98_t

x
[3])

39
u\x9\xa932_t

r
;

40
r
 = (
u\x9\xa932_t
)
x
[0];

41
r
 |\xf0(
u\x9\xa932_t
)
x
[1] << 8;

42
r
 |\xf0(
u\x9\xa932_t
)
x
[2] << 16;

43 
r
;

44
	}
}

58 
cbd2
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[2*
KYBER_N
/4])

60 
	gi
,
	gj
;

61
u\x9\xa932_t

	gt
,
	gd
;

62
\x9at16_t

	ga
,
	gb
;

64 
	gi
=0;i<
	gKYBER_N
/8;i++) {

65
	gt
 =
l\xdfd32_l\x99\x8e\x93nd\x9\xe2
(
buf
+4*
i
);

66
	gd
 =
t
 & 0x55555555;

67
	gd
 +\xf0(
t
>>1) & 0x55555555;

69 
	gj
=0;j<8;j++) {

70
	ga
 = (
d
 >> (4*
j
+0)) & 0x3;

71
	gb
 = (
d
 >> (4*
j
+2)) & 0x3;

72
	gr
->
	gc\xdbffs
[8*
i
+
j
] =
a
 -
b
;

88 #i\xe0
KYBER_ETA1
 == 3

89 
cbd3
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[3*
KYBER_N
/4])

91 
	gi
,
	gj
;

92
u\x9\xa932_t

	gt
,
	gd
;

93
\x9at16_t

	ga
,
	gb
;

95 
	gi
=0;i<
	gKYBER_N
/4;i++) {

96
	gt
 =
l\xdfd24_l\x99\x8e\x93nd\x9\xe2
(
buf
+3*
i
);

97
	gd
 =
t
 & 0x00249249;

98
	gd
 +\xf0(
t
>>1) & 0x00249249;

99
	gd
 +\xf0(
t
>>2) & 0x00249249;

101 
	gj
=0;j<4;j++) {

102
	ga
 = (
d
 >> (6*
j
+0)) & 0x7;

103
	gb
 = (
d
 >> (6*
j
+3)) & 0x7;

104
	gr
->
	gc\xdbffs
[4*
i
+
j
] =
a
 -
b
;

110 
p\xdey_cbd_\x91a1
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[
KYBER_ETA1
*
KYBER_N
/4])

112 #i\xe0
KYBER_ETA1
 == 2

113
cbd2
(
r
,
buf
);

114 #\x96i\xe0
KYBER_ETA1
 == 3

115
cbd3
(
r
,
buf
);

121 
p\xdey_cbd_\x91a2
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[
KYBER_ETA2
*
KYBER_N
/4])

123 #i\xe0
KYBER_ETA2
 == 2

124
cbd2
(
r
,
buf
);

	@crypto/kyber_impl/cbd.h

1 #i\xe2de\xe0
CBD_H


2 
	#CBD_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

6 
	~"p\xdey.h
"

8 
	#p\xdey_cbd_\x91a1

	`KYBER_NAMESPACE
(
p\xdey_cbd_\x91a1
)

	)

9 
p\xdey_cbd_\x91a1
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[
KYBER_ETA1
*
KYBER_N
/4]);

11 
	#p\xdey_cbd_\x91a2

	`KYBER_NAMESPACE
(
p\xdey_cbd_\x91a2
)

	)

12 
p\xdey_cbd_\x91a2
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

buf
[
KYBER_ETA2
*
KYBER_N
/4]);

	@crypto/kyber_impl/fips202.c

6 
	~<\xa1ddef.h
>

7 
	~<\xa1d\x9\xa9.h
>

8 
	~"f\x9ds202.h
"

10 
	#NROUNDS
 24

	)

11 
	#ROL
(
a
,
off\xa3t
\xe8(\xd7 << off\xa3t\xe8^ (\xa8>> (64-off\xa3t)))

	)

22 
u\x9\xa964_t

	$l\xdfd64
(cڡ
u\x9\xa98_t

x
[8]) {

23 
i
;

24
u\x9\xa964_t

r
 = 0;

26 
i
=0;i<8;i++)

27
r
 |\xf0(
u\x9\xa964_t
)
x
[
i
] << 8*i;

29 
r
;

30
	}
}

40 
	$\xa1\xd\xfb64
(
u\x9\xa98_t

x
[8],
u\x9\xa964_t

u
) {

41 
i
;

43 
i
=0;i<8;i++)

44
x
[
i
] =
u
 >> 8*i;

45
	}
}

48 cڡ
u\x9\xa964_t

	gKec\xffkF_RoundCڡ\x\xafts
[
NROUNDS
] = {

49 (
u\x9\xa964_t
)0x0000000000000001ULL,

50 (
u\x9\xa964_t
)0x0000000000008082ULL,

51 (
u\x9\xa964_t
)0x800000000000808aULL,

52 (
u\x9\xa964_t
)0x8000000080008000ULL,

53 (
u\x9\xa964_t
)0x000000000000808bULL,

54 (
u\x9\xa964_t
)0x0000000080000001ULL,

55 (
u\x9\xa964_t
)0x8000000080008081ULL,

56 (
u\x9\xa964_t
)0x8000000000008009ULL,

57 (
u\x9\xa964_t
)0x000000000000008aULL,

58 (
u\x9\xa964_t
)0x0000000000000088ULL,

59 (
u\x9\xa964_t
)0x0000000080008009ULL,

60 (
u\x9\xa964_t
)0x000000008000000aULL,

61 (
u\x9\xa964_t
)0x000000008000808bULL,

62 (
u\x9\xa964_t
)0x800000000000008bULL,

63 (
u\x9\xa964_t
)0x8000000000008089ULL,

64 (
u\x9\xa964_t
)0x8000000000008003ULL,

65 (
u\x9\xa964_t
)0x8000000000008002ULL,

66 (
u\x9\xa964_t
)0x8000000000000080ULL,

67 (
u\x9\xa964_t
)0x000000000000800aULL,

68 (
u\x9\xa964_t
)0x800000008000000aULL,

69 (
u\x9\xa964_t
)0x8000000080008081ULL,

70 (
u\x9\xa964_t
)0x8000000000008080ULL,

71 (
u\x9\xa964_t
)0x0000000080000001ULL,

72 (
u\x9\xa964_t
)0x8000000080008008ULL

82 
	$Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
u\x9\xa964_t

\xa1\xa9e
[25])

84 
round
;

86
u\x9\xa964_t

Aba
,
Abe
,
Abi
,
Abo
,
Abu
;

87
u\x9\xa964_t

Aga
,
Age
,
Agi
,
Ago
,
Agu
;

88
u\x9\xa964_t

Aka
,
Ake
,
Aki
,
Ako
,
Aku
;

89
u\x9\xa964_t

Ama
,
Ame
,
Ami
,
Amo
,
Amu
;

90
u\x9\xa964_t

A\xa7
,
A\xa3
,
Asi
,
Aso
,
Asu
;

91
u\x9\xa964_t

BCa
,
BCe
,
BCi
,
BCo
,
BCu
;

92
u\x9\xa964_t

Da
,
De
,
Di
,
Do
,
Du
;

93
u\x9\xa964_t

Eba
,
Ebe
,
Ebi
,
Ebo
,
Ebu
;

94
u\x9\xa964_t

Ega
,
Ege
,
Egi
,
Ego
,
Egu
;

95
u\x9\xa964_t

Eka
,
Eke
,
Eki
,
Eko
,
Eku
;

96
u\x9\xa964_t

Ema
,
Eme
,
Emi
,
Emo
,
Emu
;

97
u\x9\xa964_t

E\xa7
,
E\xa3
,
Esi
,
Eso
,
Esu
;

100
Aba
 =
\xa1\xa9e
[ 0];

101
Abe
 =
\xa1\xa9e
[ 1];

102
Abi
 =
\xa1\xa9e
[ 2];

103
Abo
 =
\xa1\xa9e
[ 3];

104
Abu
 =
\xa1\xa9e
[ 4];

105
Aga
 =
\xa1\xa9e
[ 5];

106
Age
 =
\xa1\xa9e
[ 6];

107
Agi
 =
\xa1\xa9e
[ 7];

108
Ago
 =
\xa1\xa9e
[ 8];

109
Agu
 =
\xa1\xa9e
[ 9];

110
Aka
 =
\xa1\xa9e
[10];

111
Ake
 =
\xa1\xa9e
[11];

112
Aki
 =
\xa1\xa9e
[12];

113
Ako
 =
\xa1\xa9e
[13];

114
Aku
 =
\xa1\xa9e
[14];

115
Ama
 =
\xa1\xa9e
[15];

116
Ame
 =
\xa1\xa9e
[16];

117
Ami
 =
\xa1\xa9e
[17];

118
Amo
 =
\xa1\xa9e
[18];

119
Amu
 =
\xa1\xa9e
[19];

120
A\xa7
 =
\xa1\xa9e
[20];

121
A\xa3
 =
\xa1\xa9e
[21];

122
Asi
 =
\xa1\xa9e
[22];

123
Aso
 =
\xa1\xa9e
[23];

124
Asu
 =
\xa1\xa9e
[24];

126 
round
 = 0;\x84ound <
NROUNDS
;\x84ound += 2) {

128
BCa
 =
Aba
^
Aga
^
Aka
^
Ama
^
A\xa7
;

129
BCe
 =
Abe
^
Age
^
Ake
^
Ame
^
A\xa3
;

130
BCi
 =
Abi
^
Agi
^
Aki
^
Ami
^
Asi
;

131
BCo
 =
Abo
^
Ago
^
Ako
^
Amo
^
Aso
;

132
BCu
 =
Abu
^
Agu
^
Aku
^
Amu
^
Asu
;

135
Da
 =
BCu
^
	`ROL
(
BCe
, 1);

136
De
 =
BCa
^
	`ROL
(
BCi
, 1);

137
Di
 =
BCe
^
	`ROL
(
BCo
, 1);

138
Do
 =
BCi
^
	`ROL
(
BCu
, 1);

139
Du
 =
BCo
^
	`ROL
(
BCa
, 1);

141
Aba
 ^\xf0
Da
;

142
BCa
 =
Aba
;

143
Age
 ^\xf0
De
;

144
BCe
 =
	`ROL
(
Age
, 44);

145
Aki
 ^\xf0
Di
;

146
BCi
 =
	`ROL
(
Aki
, 43);

147
Amo
 ^\xf0
Do
;

148
BCo
 =
	`ROL
(
Amo
, 21);

149
Asu
 ^\xf0
Du
;

150
BCu
 =
	`ROL
(
Asu
, 14);

151
Eba
 =
BCa
 ^((~
BCe
)&
BCi
 );

152
Eba
 ^\xf0(
u\x9\xa964_t
)
Kec\xffkF_RoundCڡ\x\xafts
[
round
];

153
Ebe
 =
BCe
 ^((~
BCi
)&
BCo
 );

154
Ebi
 =
BCi
 ^((~
BCo
)&
BCu
 );

155
Ebo
 =
BCo
 ^((~
BCu
)&
BCa
 );

156
Ebu
 =
BCu
 ^((~
BCa
)&
BCe
 );

158
Abo
 ^\xf0
Do
;

159
BCa
 =
	`ROL
(
Abo
, 28);

160
Agu
 ^\xf0
Du
;

161
BCe
 =
	`ROL
(
Agu
, 20);

162
Aka
 ^\xf0
Da
;

163
BCi
 =
	`ROL
(
Aka
, 3);

164
Ame
 ^\xf0
De
;

165
BCo
 =
	`ROL
(
Ame
, 45);

166
Asi
 ^\xf0
Di
;

167
BCu
 =
	`ROL
(
Asi
, 61);

168
Ega
 =
BCa
 ^((~
BCe
)&
BCi
 );

169
Ege
 =
BCe
 ^((~
BCi
)&
BCo
 );

170
Egi
 =
BCi
 ^((~
BCo
)&
BCu
 );

171
Ego
 =
BCo
 ^((~
BCu
)&
BCa
 );

172
Egu
 =
BCu
 ^((~
BCa
)&
BCe
 );

174
Abe
 ^\xf0
De
;

175
BCa
 =
	`ROL
(
Abe
, 1);

176
Agi
 ^\xf0
Di
;

177
BCe
 =
	`ROL
(
Agi
, 6);

178
Ako
 ^\xf0
Do
;

179
BCi
 =
	`ROL
(
Ako
, 25);

180
Amu
 ^\xf0
Du
;

181
BCo
 =
	`ROL
(
Amu
, 8);

182
A\xa7
 ^\xf0
Da
;

183
BCu
 =
	`ROL
(
A\xa7
, 18);

184
Eka
 =
BCa
 ^((~
BCe
)&
BCi
 );

185
Eke
 =
BCe
 ^((~
BCi
)&
BCo
 );

186
Eki
 =
BCi
 ^((~
BCo
)&
BCu
 );

187
Eko
 =
BCo
 ^((~
BCu
)&
BCa
 );

188
Eku
 =
BCu
 ^((~
BCa
)&
BCe
 );

190
Abu
 ^\xf0
Du
;

191
BCa
 =
	`ROL
(
Abu
, 27);

192
Aga
 ^\xf0
Da
;

193
BCe
 =
	`ROL
(
Aga
, 36);

194
Ake
 ^\xf0
De
;

195
BCi
 =
	`ROL
(
Ake
, 10);

196
Ami
 ^\xf0
Di
;

197
BCo
 =
	`ROL
(
Ami
, 15);

198
Aso
 ^\xf0
Do
;

199
BCu
 =
	`ROL
(
Aso
, 56);

200
Ema
 =
BCa
 ^((~
BCe
)&
BCi
 );

201
Eme
 =
BCe
 ^((~
BCi
)&
BCo
 );

202
Emi
 =
BCi
 ^((~
BCo
)&
BCu
 );

203
Emo
 =
BCo
 ^((~
BCu
)&
BCa
 );

204
Emu
 =
BCu
 ^((~
BCa
)&
BCe
 );

206
Abi
 ^\xf0
Di
;

207
BCa
 =
	`ROL
(
Abi
, 62);

208
Ago
 ^\xf0
Do
;

209
BCe
 =
	`ROL
(
Ago
, 55);

210
Aku
 ^\xf0
Du
;

211
BCi
 =
	`ROL
(
Aku
, 39);

212
Ama
 ^\xf0
Da
;

213
BCo
 =
	`ROL
(
Ama
, 41);

214
A\xa3
 ^\xf0
De
;

215
BCu
 =
	`ROL
(
A\xa3
, 2);

216
E\xa7
 =
BCa
 ^((~
BCe
)&
BCi
 );

217
E\xa3
 =
BCe
 ^((~
BCi
)&
BCo
 );

218
Esi
 =
BCi
 ^((~
BCo
)&
BCu
 );

219
Eso
 =
BCo
 ^((~
BCu
)&
BCa
 );

220
Esu
 =
BCu
 ^((~
BCa
)&
BCe
 );

223
BCa
 =
Eba
^
Ega
^
Eka
^
Ema
^
E\xa7
;

224
BCe
 =
Ebe
^
Ege
^
Eke
^
Eme
^
E\xa3
;

225
BCi
 =
Ebi
^
Egi
^
Eki
^
Emi
^
Esi
;

226
BCo
 =
Ebo
^
Ego
^
Eko
^
Emo
^
Eso
;

227
BCu
 =
Ebu
^
Egu
^
Eku
^
Emu
^
Esu
;

230
Da
 =
BCu
^
	`ROL
(
BCe
, 1);

231
De
 =
BCa
^
	`ROL
(
BCi
, 1);

232
Di
 =
BCe
^
	`ROL
(
BCo
, 1);

233
Do
 =
BCi
^
	`ROL
(
BCu
, 1);

234
Du
 =
BCo
^
	`ROL
(
BCa
, 1);

236
Eba
 ^\xf0
Da
;

237
BCa
 =
Eba
;

238
Ege
 ^\xf0
De
;

239
BCe
 =
	`ROL
(
Ege
, 44);

240
Eki
 ^\xf0
Di
;

241
BCi
 =
	`ROL
(
Eki
, 43);

242
Emo
 ^\xf0
Do
;

243
BCo
 =
	`ROL
(
Emo
, 21);

244
Esu
 ^\xf0
Du
;

245
BCu
 =
	`ROL
(
Esu
, 14);

246
Aba
 =
BCa
 ^((~
BCe
)&
BCi
 );

247
Aba
 ^\xf0(
u\x9\xa964_t
)
Kec\xffkF_RoundCڡ\x\xafts
[
round
+1];

248
Abe
 =
BCe
 ^((~
BCi
)&
BCo
 );

249
Abi
 =
BCi
 ^((~
BCo
)&
BCu
 );

250
Abo
 =
BCo
 ^((~
BCu
)&
BCa
 );

251
Abu
 =
BCu
 ^((~
BCa
)&
BCe
 );

253
Ebo
 ^\xf0
Do
;

254
BCa
 =
	`ROL
(
Ebo
, 28);

255
Egu
 ^\xf0
Du
;

256
BCe
 =
	`ROL
(
Egu
, 20);

257
Eka
 ^\xf0
Da
;

258
BCi
 =
	`ROL
(
Eka
, 3);

259
Eme
 ^\xf0
De
;

260
BCo
 =
	`ROL
(
Eme
, 45);

261
Esi
 ^\xf0
Di
;

262
BCu
 =
	`ROL
(
Esi
, 61);

263
Aga
 =
BCa
 ^((~
BCe
)&
BCi
 );

264
Age
 =
BCe
 ^((~
BCi
)&
BCo
 );

265
Agi
 =
BCi
 ^((~
BCo
)&
BCu
 );

266
Ago
 =
BCo
 ^((~
BCu
)&
BCa
 );

267
Agu
 =
BCu
 ^((~
BCa
)&
BCe
 );

269
Ebe
 ^\xf0
De
;

270
BCa
 =
	`ROL
(
Ebe
, 1);

271
Egi
 ^\xf0
Di
;

272
BCe
 =
	`ROL
(
Egi
, 6);

273
Eko
 ^\xf0
Do
;

274
BCi
 =
	`ROL
(
Eko
, 25);

275
Emu
 ^\xf0
Du
;

276
BCo
 =
	`ROL
(
Emu
, 8);

277
E\xa7
 ^\xf0
Da
;

278
BCu
 =
	`ROL
(
E\xa7
, 18);

279
Aka
 =
BCa
 ^((~
BCe
)&
BCi
 );

280
Ake
 =
BCe
 ^((~
BCi
)&
BCo
 );

281
Aki
 =
BCi
 ^((~
BCo
)&
BCu
 );

282
Ako
 =
BCo
 ^((~
BCu
)&
BCa
 );

283
Aku
 =
BCu
 ^((~
BCa
)&
BCe
 );

285
Ebu
 ^\xf0
Du
;

286
BCa
 =
	`ROL
(
Ebu
, 27);

287
Ega
 ^\xf0
Da
;

288
BCe
 =
	`ROL
(
Ega
, 36);

289
Eke
 ^\xf0
De
;

290
BCi
 =
	`ROL
(
Eke
, 10);

291
Emi
 ^\xf0
Di
;

292
BCo
 =
	`ROL
(
Emi
, 15);

293
Eso
 ^\xf0
Do
;

294
BCu
 =
	`ROL
(
Eso
, 56);

295
Ama
 =
BCa
 ^((~
BCe
)&
BCi
 );

296
Ame
 =
BCe
 ^((~
BCi
)&
BCo
 );

297
Ami
 =
BCi
 ^((~
BCo
)&
BCu
 );

298
Amo
 =
BCo
 ^((~
BCu
)&
BCa
 );

299
Amu
 =
BCu
 ^((~
BCa
)&
BCe
 );

301
Ebi
 ^\xf0
Di
;

302
BCa
 =
	`ROL
(
Ebi
, 62);

303
Ego
 ^\xf0
Do
;

304
BCe
 =
	`ROL
(
Ego
, 55);

305
Eku
 ^\xf0
Du
;

306
BCi
 =
	`ROL
(
Eku
, 39);

307
Ema
 ^\xf0
Da
;

308
BCo
 =
	`ROL
(
Ema
, 41);

309
E\xa3
 ^\xf0
De
;

310
BCu
 =
	`ROL
(
E\xa3
, 2);

311
A\xa7
 =
BCa
 ^((~
BCe
)&
BCi
 );

312
A\xa3
 =
BCe
 ^((~
BCi
)&
BCo
 );

313
Asi
 =
BCi
 ^((~
BCo
)&
BCu
 );

314
Aso
 =
BCo
 ^((~
BCu
)&
BCa
 );

315
Asu
 =
BCu
 ^((~
BCa
)&
BCe
 );

319
\xa1\xa9e
[ 0] =
Aba
;

320
\xa1\xa9e
[ 1] =
Abe
;

321
\xa1\xa9e
[ 2] =
Abi
;

322
\xa1\xa9e
[ 3] =
Abo
;

323
\xa1\xa9e
[ 4] =
Abu
;

324
\xa1\xa9e
[ 5] =
Aga
;

325
\xa1\xa9e
[ 6] =
Age
;

326
\xa1\xa9e
[ 7] =
Agi
;

327
\xa1\xa9e
[ 8] =
Ago
;

328
\xa1\xa9e
[ 9] =
Agu
;

329
\xa1\xa9e
[10] =
Aka
;

330
\xa1\xa9e
[11] =
Ake
;

331
\xa1\xa9e
[12] =
Aki
;

332
\xa1\xa9e
[13] =
Ako
;

333
\xa1\xa9e
[14] =
Aku
;

334
\xa1\xa9e
[15] =
Ama
;

335
\xa1\xa9e
[16] =
Ame
;

336
\xa1\xa9e
[17] =
Ami
;

337
\xa1\xa9e
[18] =
Amo
;

338
\xa1\xa9e
[19] =
Amu
;

339
\xa1\xa9e
[20] =
A\xa7
;

340
\xa1\xa9e
[21] =
A\xa3
;

341
\xa1\xa9e
[22] =
Asi
;

342
\xa1\xa9e
[23] =
Aso
;

343
\xa1\xa9e
[24] =
Asu
;

344
	}
}

353 
	$kec\xffk_\x9a\x99
(
u\x9\xa964_t

s
[25])

355 
i
;

356 
i
=0;i<25;i++)

357
s
[
i
] = 0;

358
	}
}

373 
	$kec\xffk_abs\xdcb
(
u\x9\xa964_t

s
[25],

374 
pos
,

375 
r
,

376 cڡ
u\x9\xa98_t
 *
\x9a
,

377
size_t

\x9a\xcbn
)

379 
i
;

381 
pos
+
\x9a\xcbn
 >\xf0
r
) {

382 
i
=
pos
;i<
r
;i++)

383
s
[
i
/8] ^\xf0(
u\x9\xa964_t
)*
\x9a
++ << 8*(i%8);

384
\x9a\xcbn
 -\xf0
r
-
pos
;

385
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

386
pos
 = 0;

389 
i
=
pos
;i<pos+
\x9a\xcbn
;i++)

390
s
[
i
/8] ^\xf0(
u\x9\xa964_t
)*
\x9a
++ << 8*(i%8);

392 
i
;

393
	}
}

405 
	$kec\xffk_f\x9a\x\xabize
(
u\x9\xa964_t

s
[25], 
pos
, 
r
,
u\x9\xa98_t

p
)

407
s
[
pos
/8] ^\xf0(
u\x9\xa964_t
)
p
 << 8*(pos%8);

408
s
[
r
/8-1] ^= 1ULL << 63;

409
	}
}

426 
	$kec\xffk_squ\x93ze
(
u\x9\xa98_t
 *
out
,

427
size_t

ou\x8e\x92
,

428
u\x9\xa964_t

s
[25],

429 
pos
,

430 
r
)

432 
i
;

434 
ou\x8e\x92
) {

435 if(
pos
 =\xf0
r
) {

436
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

437
pos
 = 0;

439 
i
=
pos
;\x98<
r
 && i <\x85os+
ou\x8e\x92
; i++)

440 *
out
++ =
s
[
i
/8] >> 8*(i%8);

441
ou\x8e\x92
 -\xf0
i
-
pos
;

442
pos
 =
i
;

445 
pos
;

446
	}
}

461 
	$kec\xffk_abs\xdcb_\xda\xfb
(
u\x9\xa964_t

s
[25],

462 
r
,

463 cڡ
u\x9\xa98_t
 *
\x9a
,

464
size_t

\x9a\xcbn
,

465
u\x9\xa98_t

p
)

467 
i
;

469 
i
=0;i<25;i++)

470
s
[
i
] = 0;

472 
\x9a\xcbn
 >\xf0
r
) {

473 
i
=0;i<
r
/8;i++)

474
s
[
i
] ^\xf0
	`l\xdfd64
(
\x9a
+8*i);

475
\x9a
 +\xf0
r
;

476
\x9a\xcbn
 -\xf0
r
;

477
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

480 
i
=0;i<
\x9a\xcbn
;i++)

481
s
[
i
/8] ^\xf0(
u\x9\xa964_t
)
\x9a
[i] << 8*(i%8);

483
s
[
i
/8] ^\xf0(
u\x9\xa964_t
)
p
 << 8*(i%8);

484
s
[(
r
-1)/8] ^= 1ULL << 63;

485
	}
}

500 
	$kec\xffk_squ\x93zeblocks
(
u\x9\xa98_t
 *
out
,

501
size_t

nblocks
,

502
u\x9\xa964_t

s
[25],

503 
r
)

505 
i
;

507 
nblocks
) {

508
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

509 
i
=0;i<
r
/8;i++)

510
	`\xa1\xd\xfb64
(
out
+8*
i
,
s
[i]);

511
out
 +\xf0
r
;

512
nblocks
 -= 1;

514
	}
}

523 
	$shake128_\x9a\x99
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

525
	`kec\xffk_\x9a\x99
(
\xa1\xa9e
->
s
);

526
\xa1\xa9e
->
pos
 = 0;

527
	}
}

538 
	$shake128_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
)

540
\xa1\xa9e
->
pos
 =
	`kec\xffk_abs\xdcb
(\xa1\xa9e->
s
, s\x8f\x8b->pos,
SHAKE128_RATE
,
\x9a
,
\x9a\xcbn
);

541
	}
}

550 
	$shake128_f\x9a\x\xabize
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

552
	`kec\xffk_f\x9a\x\xabize
(
\xa1\xa9e
->
s
, s\x8f\x8b->
pos
,
SHAKE128_RATE
, 0x1F);

553
\xa1\xa9e
->
pos
 =
SHAKE128_RATE
;

554
	}
}

566 
	$shake128_squ\x93ze
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

568
\xa1\xa9e
->
pos
 =
	`kec\xffk_squ\x93ze
(
out
,
ou\x8e\x92
, s\x8f\x8b->
s
, s\x8f\x8b->pos,
SHAKE128_RATE
);

569
	}
}

580 
	$shake128_abs\xdcb_\xda\xfb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
)

582
	`kec\xffk_abs\xdcb_\xda\xfb
(
\xa1\xa9e
->
s
,
SHAKE128_RATE
,
\x9a
,
\x9a\xcbn
, 0x1F);

583
\xa1\xa9e
->
pos
 =
SHAKE128_RATE
;

584
	}
}

598 
	$shake128_squ\x93zeblocks
(
u\x9\xa98_t
 *
out
,
size_t

nblocks
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

600
	`kec\xffk_squ\x93zeblocks
(
out
,
nblocks
,
\xa1\xa9e
->
s
,
SHAKE128_RATE
);

601
	}
}

610 
	$shake256_\x9a\x99
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

612
	`kec\xffk_\x9a\x99
(
\xa1\xa9e
->
s
);

613
\xa1\xa9e
->
pos
 = 0;

614
	}
}

625 
	$shake256_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
)

627
\xa1\xa9e
->
pos
 =
	`kec\xffk_abs\xdcb
(\xa1\xa9e->
s
, s\x8f\x8b->pos,
SHAKE256_RATE
,
\x9a
,
\x9a\xcbn
);

628
	}
}

637 
	$shake256_f\x9a\x\xabize
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

639
	`kec\xffk_f\x9a\x\xabize
(
\xa1\xa9e
->
s
, s\x8f\x8b->
pos
,
SHAKE256_RATE
, 0x1F);

640
\xa1\xa9e
->
pos
 =
SHAKE256_RATE
;

641
	}
}

653 
	$shake256_squ\x93ze
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

655
\xa1\xa9e
->
pos
 =
	`kec\xffk_squ\x93ze
(
out
,
ou\x8e\x92
, s\x8f\x8b->
s
, s\x8f\x8b->pos,
SHAKE256_RATE
);

656
	}
}

667 
	$shake256_abs\xdcb_\xda\xfb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
)

669
	`kec\xffk_abs\xdcb_\xda\xfb
(
\xa1\xa9e
->
s
,
SHAKE256_RATE
,
\x9a
,
\x9a\xcbn
, 0x1F);

670
\xa1\xa9e
->
pos
 =
SHAKE256_RATE
;

671
	}
}

685 
	$shake256_squ\x93zeblocks
(
u\x9\xa98_t
 *
out
,
size_t

nblocks
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
)

687
	`kec\xffk_squ\x93zeblocks
(
out
,
nblocks
,
\xa1\xa9e
->
s
,
SHAKE256_RATE
);

688
	}
}

700 
	$shake128
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88*
\x9a
, size_\x88
\x9a\xcbn
)

702
size_t

nblocks
;

703
kec\xffk_\xa1\xa9e

\xa1\xa9e
;

705
	`shake128_abs\xdcb_\xda\xfb
(&
\xa1\xa9e
,
\x9a
,
\x9a\xcbn
);

706
nblocks
 =
ou\x8e\x92
/
SHAKE128_RATE
;

707
	`shake128_squ\x93zeblocks
(
out
,
nblocks
, &
\xa1\xa9e
);

708
ou\x8e\x92
 -\xf0
nblocks
*
SHAKE128_RATE
;

709
out
 +\xf0
nblocks
*
SHAKE128_RATE
;

710
	`shake128_squ\x93ze
(
out
,
ou\x8e\x92
, &
\xa1\xa9e
);

711
	}
}

723 
	$shake256
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88*
\x9a
, size_\x88
\x9a\xcbn
)

725
size_t

nblocks
;

726
kec\xffk_\xa1\xa9e

\xa1\xa9e
;

728
	`shake256_abs\xdcb_\xda\xfb
(&
\xa1\xa9e
,
\x9a
,
\x9a\xcbn
);

729
nblocks
 =
ou\x8e\x92
/
SHAKE256_RATE
;

730
	`shake256_squ\x93zeblocks
(
out
,
nblocks
, &
\xa1\xa9e
);

731
ou\x8e\x92
 -\xf0
nblocks
*
SHAKE256_RATE
;

732
out
 +\xf0
nblocks
*
SHAKE256_RATE
;

733
	`shake256_squ\x93ze
(
out
,
ou\x8e\x92
, &
\xa1\xa9e
);

734
	}
}

745 
	$sha3_256
(
u\x9\xa98_t

h
[32], cڡ u\x9at8_\x88*
\x9a
,
size_t

\x9a\xcbn
)

747 
i
;

748
u\x9\xa964_t

s
[25];

750
	`kec\xffk_abs\xdcb_\xda\xfb
(
s
,
SHA3_256_RATE
,
\x9a
,
\x9a\xcbn
, 0x06);

751
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

752 
i
=0;i<4;i++)

753
	`\xa1\xd\xfb64
(
h
+8*
i
,
s
[i]);

754
	}
}

765 
	$sha3_512
(
u\x9\xa98_t

h
[64], cڡ u\x9at8_\x88*
\x9a
,
size_t

\x9a\xcbn
)

767 
i
;

768
u\x9\xa964_t

s
[25];

770
	`kec\xffk_abs\xdcb_\xda\xfb
(
s
,
SHA3_512_RATE
,
\x9a
,
\x9a\xcbn
, 0x06);

771
	`Kec\xffkF1600_S\x8f\x8bP\x94mu\x8b
(
s
);

772 
i
=0;i<8;i++)

773
	`\xa1\xd\xfb64
(
h
+8*
i
,
s
[i]);

774
	}
}

	@crypto/kyber_impl/fips202.h

1 #i\xe2de\xe0
FIPS202_H


2 
	#FIPS202_H


	)

4 
	~<\xa1ddef.h
>

5 
	~<\xa1d\x9\xa9.h
>

7 
	#SHAKE128_RATE
 168

	)

8 
	#SHAKE256_RATE
 136

	)

9 
	#SHA3_256_RATE
 136

	)

10 
	#SHA3_512_RATE
 72

	)

12 
	#FIPS202_NAMESPACE
(
s
\xe8
pq\xfcy\xa1\x\xabs_kyb\x94_f\x9ds202_\xbbf_
##
	)
s

15
u\x9\xa964_t

	ms
[25];

16 
	mpos
;

17 }
	tkec\xffk_\xa1\xa9e
;

19 
	#shake128_\x9a\x99

	`FIPS202_NAMESPACE
(
shake128_\x9a\x99
)

	)

20 
shake128_\x9a\x99
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

21 
	#shake128_abs\xdcb

	`FIPS202_NAMESPACE
(
shake128_abs\xdcb
)

	)

22 
shake128_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
);

23 
	#shake128_f\x9a\x\xabize

	`FIPS202_NAMESPACE
(
shake128_f\x9a\x\xabize
)

	)

24 
shake128_f\x9a\x\xabize
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

25 
	#shake128_squ\x93ze

	`FIPS202_NAMESPACE
(
shake128_squ\x93ze
)

	)

26 
shake128_squ\x93ze
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

27 
	#shake128_abs\xdcb_\xda\xfb

	`FIPS202_NAMESPACE
(
shake128_abs\xdcb_\xda\xfb
)

	)

28 
shake128_abs\xdcb_\xda\xfb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
);

29 
	#shake128_squ\x93zeblocks

	`FIPS202_NAMESPACE
(
shake128_squ\x93zeblocks
)

	)

30 
shake128_squ\x93zeblocks
(
u\x9\xa98_t
 *
out
,
size_t

nblocks
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

32 
	#shake256_\x9a\x99

	`FIPS202_NAMESPACE
(
shake256_\x9a\x99
)

	)

33 
shake256_\x9a\x99
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

34 
	#shake256_abs\xdcb

	`FIPS202_NAMESPACE
(
shake256_abs\xdcb
)

	)

35 
shake256_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
);

36 
	#shake256_f\x9a\x\xabize

	`FIPS202_NAMESPACE
(
shake256_f\x9a\x\xabize
)

	)

37 
shake256_f\x9a\x\xabize
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

38 
	#shake256_squ\x93ze

	`FIPS202_NAMESPACE
(
shake256_squ\x93ze
)

	)

39 
shake256_squ\x93ze
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

40 
	#shake256_abs\xdcb_\xda\xfb

	`FIPS202_NAMESPACE
(
shake256_abs\xdcb_\xda\xfb
)

	)

41 
shake256_abs\xdcb_\xda\xfb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
, cڡ
u\x9\xa98_t
 *
\x9a
,
size_t

\x9a\xcbn
);

42 
	#shake256_squ\x93zeblocks

	`FIPS202_NAMESPACE
(
shake256_squ\x93zeblocks
)

	)

43 
shake256_squ\x93zeblocks
(
u\x9\xa98_t
 *
out
,
size_t

nblocks
,
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
);

45 
	#shake128

	`FIPS202_NAMESPACE
(
shake128
)

	)

46 
shake128
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88*
\x9a
, size_\x88
\x9a\xcbn
);

47 
	#shake256

	`FIPS202_NAMESPACE
(
shake256
)

	)

48 
shake256
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88*
\x9a
, size_\x88
\x9a\xcbn
);

49 
	#sha3_256

	`FIPS202_NAMESPACE
(
sha3_256
)

	)

50 
sha3_256
(
u\x9\xa98_t

h
[32], cڡ u\x9at8_\x88*
\x9a
,
size_t

\x9a\xcbn
);

51 
	#sha3_512

	`FIPS202_NAMESPACE
(
sha3_512
)

	)

52 
sha3_512
(
u\x9\xa98_t

h
[64], cڡ u\x9at8_\x88*
\x9a
,
size_t

\x9a\xcbn
);

	@crypto/kyber_impl/indcpa.c

1 
	~<\xa1ddef.h
>

2 
	~<\xa1d\x9\xa9.h
>

3 
	~<\xa1r\x9ag.h
>

4 
	~"\xb7\xbfms.h
"

5 
	~"\x9ad\xfda.h
"

6 
	~"p\xdeyvec.h
"

7 
	~"p\xdey.h
"

8 
	~"\xc1t.h
"

9 
	~"symm\x91ric.h
"

10 
	~"\xb\xe2domby\x8bs.h
"

23 
	$\xb7ck_pk
(
u\x9\xa98_t

r
[
KYBER_INDCPA_PUBLICKEYBYTES
],

24
p\xdeyvec
 *
pk
,

25 cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
])

27
	`p\xdeyvec_toby\x8bs
(
r
,
pk
);

28
	`mem\xfdy
(
r
+
KYBER_POLYVECBYTES
,
\xa3ed
,
KYBER_SYMBYTES
);

29
	}
}

41 
	$u\xc5ack_pk
(
p\xdeyvec
 *
pk
,

42
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
],

43 cڡ
u\x9\xa98_t

\xb7ckedpk
[
KYBER_INDCPA_PUBLICKEYBYTES
])

45
	`p\xdeyvec_\xe4omby\x8bs
(
pk
,
\xb7ckedpk
);

46
	`mem\xfdy
(
\xa3ed
,
\xb7ckedpk
+
KYBER_POLYVECBYTES
,
KYBER_SYMBYTES
);

47
	}
}

57 
	$\xb7ck_sk
(
u\x9\xa98_t

r
[
KYBER_INDCPA_SECRETKEYBYTES
],
p\xdeyvec
 *
sk
)

59
	`p\xdeyvec_toby\x8bs
(
r
,
sk
);

60
	}
}

70 
	$u\xc5ack_sk
(
p\xdeyvec
 *
sk
, cڡ
u\x9\xa98_t

\xb7ckedsk
[
KYBER_INDCPA_SECRETKEYBYTES
])

72
	`p\xdeyvec_\xe4omby\x8bs
(
sk
,
\xb7ckedsk
);

73
	}
}

86 
	$\xb7ck_c\x9dh\x94\x8bxt
(
u\x9\xa98_t

r
[
KYBER_INDCPA_BYTES
],
p\xdeyvec
 *
b
,
p\xdey
 *
v
)

88
	`p\xdeyvec_com\xb4ess
(
r
,
b
);

89
	`p\xdey_com\xb4ess
(
r
+
KYBER_POLYVECCOMPRESSEDBYTES
,
v
);

90
	}
}

102 
	$u\xc5ack_c\x9dh\x94\x8bxt
(
p\xdeyvec
 *
b
,
p\xdey
 *
v
, cڡ
u\x9\xa98_t

c
[
KYBER_INDCPA_BYTES
])

104
	`p\xdeyvec_decom\xb4ess
(
b
,
c
);

105
	`p\xdey_decom\xb4ess
(
v
,
c
+
KYBER_POLYVECCOMPRESSEDBYTES
);

106
	}
}

121 
	$\xbbj_unif\xdcm
(
\x9at16_t
 *
r
,

122 
\xcbn
,

123 cڡ
u\x9\xa98_t
 *
buf
,

124 
bu\xe6\x92
)

126 
\xf9r
,
pos
;

127
u\x9\xa916_t

v\x\xab0
,
v\x\xab1
;

129
\xf9r
 =
pos
 = 0;

130 
\xf9r
 <
\xcbn
 &&
pos
 + 3 <\xf0
bu\xe6\x92
) {

131
v\x\xab0
 = ((
buf
[
pos
+0] >> 0\xe8| ((
u\x9\xa916_t
)buf[pos+1] << 8)) & 0xFFF;

132
v\x\xab1
 = ((
buf
[
pos
+1] >> 4\xe8| ((
u\x9\xa916_t
)buf[pos+2] << 4)) & 0xFFF;

133
pos
 += 3;

135 if(
v\x\xab0
 <
KYBER_Q
)

136
r
[
\xf9r
++] =
v\x\xab0
;

137 if(
\xf9r
 <
\xcbn
 &&
v\x\xab1
 <
KYBER_Q
)

138
r
[
\xf9r
++] =
v\x\xab1
;

141 
\xf9r
;

142
	}
}

144 
	#g\x92_a
(
A
,
B
\xe8
	`g\x92_m\xa9rix
(A,B,0)

	)

145 
	#g\x92_\xa9
(
A
,
B
\xe8
	`g\x92_m\xa9rix
(A,B,1)

	)

159 #if(
XOF_BLOCKBYTES
 % 3)

163 
	#GEN_MATRIX_NBLOCKS
 ((12*
KYBER_N
/8*(1 << 12)/
KYBER_Q
 +
XOF_BLOCKBYTES
)/XOF_BLOCKBYTES)

	)

165 
	$g\x92_m\xa9rix
(
p\xdeyvec
 *
a
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], 
\x8c\xaa\xa5o\xa3d
)

167 
\xf9r
,
i
,
j
;

168 
bu\xe6\x92
;

169
u\x9\xa98_t

buf
[
GEN_MATRIX_NBLOCKS
*
XOF_BLOCKBYTES
];

170
xof_\xa1\xa9e

\xa1\xa9e
;

172 
i
=0;i<
KYBER_K
;i++) {

173 
j
=0;j<
KYBER_K
;j++) {

174 if(
\x8c\xaa\xa5o\xa3d
)

175
	`xof_abs\xdcb
(&
\xa1\xa9e
,
\xa3ed
,
i
,
j
);

177
	`xof_abs\xdcb
(&
\xa1\xa9e
,
\xa3ed
,
j
,
i
);

179
	`xof_squ\x93zeblocks
(
buf
,
GEN_MATRIX_NBLOCKS
, &
\xa1\xa9e
);

180
bu\xe6\x92
 =
GEN_MATRIX_NBLOCKS
*
XOF_BLOCKBYTES
;

181
\xf9r
 =
	`\xbbj_unif\xdcm
(
a
[
i
].
vec
[
j
].
c\xdbffs
,
KYBER_N
,
buf
,
bu\xe6\x92
);

183 
\xf9r
 <
KYBER_N
) {

184
	`xof_squ\x93zeblocks
(
buf
, 1, &
\xa1\xa9e
);

185
bu\xe6\x92
 =
XOF_BLOCKBYTES
;

186
\xf9r
 +\xf0
	`\xbbj_unif\xdcm
(
a
[
i
].
vec
[
j
].
c\xdbffs
 + c\x8c,
KYBER_N
 - c\x8c,
buf
,
bu\xe6\x92
);

190
	}
}

205 
	$\x9ad\xfda_key\xb7\x9c_d\x94\x\xafd
(
u\x9\xa98_t

pk
[
KYBER_INDCPA_PUBLICKEYBYTES
],

206
u\x9\xa98_t

sk
[
KYBER_INDCPA_SECRETKEYBYTES
],

207 cڡ
u\x9\xa98_t

co\x9as
[
KYBER_SYMBYTES
])

209 
i
;

210
u\x9\xa98_t

buf
[2*
KYBER_SYMBYTES
];

211 cڡ
u\x9\xa98_t
 *
public\xa3ed
 =
buf
;

212 cڡ
u\x9\xa98_t
 *
noi\xa3\xa3ed
 =
buf
+
KYBER_SYMBYTES
;

213
u\x9\xa98_t

n\xda\xfb
 = 0;

214
p\xdeyvec

a
[
KYBER_K
],
e
,
pkpv
,
skpv
;

216
	`mem\xfdy
(
buf
,
co\x9as
,
KYBER_SYMBYTES
);

217
buf
[
KYBER_SYMBYTES
] =
KYBER_K
;

218
	`hash_g
(
buf
, buf,
KYBER_SYMBYTES
+1);

220
	`g\x92_a
(
a
,
public\xa3ed
);

222 
i
=0;i<
KYBER_K
;i++)

223
	`p\xdey_g\x91noi\xa3_\x91a1
(&
skpv
.
vec
[
i
],
noi\xa3\xa3ed
,
n\xda\xfb
++);

224 
i
=0;i<
KYBER_K
;i++)

225
	`p\xdey_g\x91noi\xa3_\x91a1
(&
e
.
vec
[
i
],
noi\xa3\xa3ed
,
n\xda\xfb
++);

227
	`p\xdeyvec_\xc1t
(&
skpv
);

228
	`p\xdeyvec_\xc1t
(&
e
);

231 
i
=0;i<
KYBER_K
;i++) {

232
	`p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(&
pkpv
.
vec
[
i
], &
a
[i], &
skpv
);

233
	`p\xdey_tom\xd\xa9
(&
pkpv
.
vec
[
i
]);

236
	`p\xdeyvec_add
(&
pkpv
, &pkpv, &
e
);

237
	`p\xdeyvec_\xbbdu\xfb
(&
pkpv
);

239
	`\xb7ck_sk
(
sk
, &
skpv
);

240
	`\xb7ck_pk
(
pk
, &
pkpv
,
public\xa3ed
);

241
	}
}

260 
	$\x9ad\xfda_\x92c
(
u\x9\xa98_t

c
[
KYBER_INDCPA_BYTES
],

261 cڡ
u\x9\xa98_t

m
[
KYBER_INDCPA_MSGBYTES
],

262 cڡ
u\x9\xa98_t

pk
[
KYBER_INDCPA_PUBLICKEYBYTES
],

263 cڡ
u\x9\xa98_t

co\x9as
[
KYBER_SYMBYTES
])

265 
i
;

266
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
];

267
u\x9\xa98_t

n\xda\xfb
 = 0;

268
p\xdeyvec

\xa5
,
pkpv
,
\x95
,
\xa9
[
KYBER_K
],
b
;

269
p\xdey

v
,
k
,
\x95p
;

271
	`u\xc5ack_pk
(&
pkpv
,
\xa3ed
,
pk
);

272
	`p\xdey_\xe4ommsg
(&
k
,
m
);

273
	`g\x92_\xa9
(
\xa9
,
\xa3ed
);

275 
i
=0;i<
KYBER_K
;i++)

276
	`p\xdey_g\x91noi\xa3_\x91a1
(
\xa5
.
vec
+
i
,
co\x9as
,
n\xda\xfb
++);

277 
i
=0;i<
KYBER_K
;i++)

278
	`p\xdey_g\x91noi\xa3_\x91a2
(
\x95
.
vec
+
i
,
co\x9as
,
n\xda\xfb
++);

279
	`p\xdey_g\x91noi\xa3_\x91a2
(&
\x95p
,
co\x9as
,
n\xda\xfb
++);

281
	`p\xdeyvec_\xc1t
(&
\xa5
);

284 
i
=0;i<
KYBER_K
;i++)

285
	`p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(&
b
.
vec
[
i
], &
\xa9
[i], &
\xa5
);

287
	`p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(&
v
, &
pkpv
, &
\xa5
);

289
	`p\xdeyvec_\x9av\xc1t_tom\xd\xa9
(&
b
);

290
	`p\xdey_\x9av\xc1t_tom\xd\xa9
(&
v
);

292
	`p\xdeyvec_add
(&
b
, &b, &
\x95
);

293
	`p\xdey_add
(&
v
, &v, &
\x95p
);

294
	`p\xdey_add
(&
v
, &v, &
k
);

295
	`p\xdeyvec_\xbbdu\xfb
(&
b
);

296
	`p\xdey_\xbbdu\xfb
(&
v
);

298
	`\xb7ck_c\x9dh\x94\x8bxt
(
c
, &
b
, &
v
);

299
	}
}

314 
	$\x9ad\xfda_dec
(
u\x9\xa98_t

m
[
KYBER_INDCPA_MSGBYTES
],

315 cڡ
u\x9\xa98_t

c
[
KYBER_INDCPA_BYTES
],

316 cڡ
u\x9\xa98_t

sk
[
KYBER_INDCPA_SECRETKEYBYTES
])

318
p\xdeyvec

b
,
skpv
;

319
p\xdey

v
,
mp
;

321
	`u\xc5ack_c\x9dh\x94\x8bxt
(&
b
, &
v
,
c
);

322
	`u\xc5ack_sk
(&
skpv
,
sk
);

324
	`p\xdeyvec_\xc1t
(&
b
);

325
	`p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(&
mp
, &
skpv
, &
b
);

326
	`p\xdey_\x9av\xc1t_tom\xd\xa9
(&
mp
);

328
	`p\xdey_sub
(&
mp
, &
v
, &mp);

329
	`p\xdey_\xbbdu\xfb
(&
mp
);

331
	`p\xdey_tomsg
(
m
, &
mp
);

332
	}
}

	@crypto/kyber_impl/indcpa.h

1 #i\xe2de\xe0
INDCPA_H


2 
	#INDCPA_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

6 
	~"p\xdeyvec.h
"

8 
	#g\x92_m\xa9rix

	`KYBER_NAMESPACE
(
g\x92_m\xa9rix
)

	)

9 
g\x92_m\xa9rix
(
p\xdeyvec
 *
a
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], 
\x8c\xaa\xa5o\xa3d
);

11 
	#\x9ad\xfda_key\xb7\x9c_d\x94\x\xafd

	`KYBER_NAMESPACE
(
\x9ad\xfda_key\xb7\x9c_d\x94\xaad
)

	)

12 
\x9ad\xfda_key\xb7\x9c_d\x94\xaad
(
u\x9\xa98_t

pk
[
KYBER_INDCPA_PUBLICKEYBYTES
],

13
u\x9\xa98_t

sk
[
KYBER_INDCPA_SECRETKEYBYTES
],

14 cڡ
u\x9\xa98_t

co\x9as
[
KYBER_SYMBYTES
]);

16 
	#\x9ad\xfda_\x92c

	`KYBER_NAMESPACE
(
\x9ad\xfda_\x92c
)

	)

17 
\x9ad\xfda_\x92c
(
u\x9\xa98_t

c
[
KYBER_INDCPA_BYTES
],

18 cڡ
u\x9\xa98_t

m
[
KYBER_INDCPA_MSGBYTES
],

19 cڡ
u\x9\xa98_t

pk
[
KYBER_INDCPA_PUBLICKEYBYTES
],

20 cڡ
u\x9\xa98_t

co\x9as
[
KYBER_SYMBYTES
]);

22 
	#\x9ad\xfda_dec

	`KYBER_NAMESPACE
(
\x9ad\xfda_dec
)

	)

23 
\x9ad\xfda_dec
(
u\x9\xa98_t

m
[
KYBER_INDCPA_MSGBYTES
],

24 cڡ
u\x9\xa98_t

c
[
KYBER_INDCPA_BYTES
],

25 cڡ
u\x9\xa98_t

sk
[
KYBER_INDCPA_SECRETKEYBYTES
]);

	@crypto/kyber_impl/kem.c

1 
	~<\xa1ddef.h
>

2 
	~<\xa1d\x9\xa9.h
>

3 
	~<\xa1r\x9ag.h
>

4 
	~"\xb7\xbfms.h
"

5 
	~"kem.h
"

6 
	~"\x9ad\xfda.h
"

7 
	~"v\x94ify.h
"

8 
	~"symm\x91ric.h
"

9 
	~"\xb\xe2domby\x8bs.h
"

25 
	$\xfcy\xb1o_kem_key\xb7\x9c_d\x94\x\xafd
(
u\x9\xa98_t
 *
pk
,

26
u\x9\xa98_t
 *
sk
,

27 cڡ
u\x9\xa98_t
 *
co\x9as
)

29
	`\x9ad\xfda_key\xb7\x9c_d\x94\x\xafd
(
pk
,
sk
,
co\x9as
);

30
	`mem\xfdy
(
sk
+
KYBER_INDCPA_SECRETKEYBYTES
,
pk
,
KYBER_PUBLICKEYBYTES
);

31
	`hash_h
(
sk
+
KYBER_SECRETKEYBYTES
-2*
KYBER_SYMBYTES
,
pk
,
KYBER_PUBLICKEYBYTES
);

33
	`mem\xfdy
(
sk
+
KYBER_SECRETKEYBYTES
-
KYBER_SYMBYTES
,
co\x9as
+KYBER_SYMBYTES, KYBER_SYMBYTES);

35
	}
}

50 
	$\xfcy\xb1o_kem_key\xb7\x9c
(
u\x9\xa98_t
 *
pk
,

51
u\x9\xa98_t
 *
sk
)

53
u\x9\xa98_t

co\x9as
[2*
KYBER_SYMBYTES
];

54
	`\xb\xe2domby\x8bs
(
co\x9as
, 2*
KYBER_SYMBYTES
);

55
	`\xfcy\xb1o_kem_key\xb7\x9c_d\x94\x\xafd
(
pk
,
sk
,
co\x9as
);

57
	}
}

76 
	$\xfcy\xb1o_kem_\x92c_d\x94\x\xafd
(
u\x9\xa98_t
 *
\xf9
,

77
u\x9\xa98_t
 *
ss
,

78 cڡ
u\x9\xa98_t
 *
pk
,

79 cڡ
u\x9\xa98_t
 *
co\x9as
)

81
u\x9\xa98_t

buf
[2*
KYBER_SYMBYTES
];

83
u\x9\xa98_t

kr
[2*
KYBER_SYMBYTES
];

85
	`mem\xfdy
(
buf
,
co\x9as
,
KYBER_SYMBYTES
);

88
	`hash_h
(
buf
+
KYBER_SYMBYTES
,
pk
,
KYBER_PUBLICKEYBYTES
);

89
	`hash_g
(
kr
,
buf
, 2*
KYBER_SYMBYTES
);

92
	`\x9ad\xfda_\x92c
(
\xf9
,
buf
,
pk
,
kr
+
KYBER_SYMBYTES
);

94
	`mem\xfdy
(
ss
,
kr
,
KYBER_SYMBYTES
);

96
	}
}

113 
	$\xfcy\xb1o_kem_\x92c
(
u\x9\xa98_t
 *
\xf9
,

114
u\x9\xa98_t
 *
ss
,

115 cڡ
u\x9\xa98_t
 *
pk
)

117
u\x9\xa98_t

co\x9as
[
KYBER_SYMBYTES
];

118
	`\xb\xe2domby\x8bs
(
co\x9as
,
KYBER_SYMBYTES
);

119
	`\xfcy\xb1o_kem_\x92c_d\x94\x\xafd
(
\xf9
,
ss
,
pk
,
co\x9as
);

121
	}
}

140 
	$\xfcy\xb1o_kem_dec
(
u\x9\xa98_t
 *
ss
,

141 cڡ
u\x9\xa98_t
 *
\xf9
,

142 cڡ
u\x9\xa98_t
 *
sk
)

144 
\xe7\x9e
;

145
u\x9\xa98_t

buf
[2*
KYBER_SYMBYTES
];

147
u\x9\xa98_t

kr
[2*
KYBER_SYMBYTES
];

149
u\x9\xa98_t

cmp
[
KYBER_CIPHERTEXTBYTES
];

150 cڡ
u\x9\xa98_t
 *
pk
 =
sk
+
KYBER_INDCPA_SECRETKEYBYTES
;

152
	`\x9ad\xfda_dec
(
buf
,
\xf9
,
sk
);

155
	`mem\xfdy
(
buf
+
KYBER_SYMBYTES
,
sk
+
KYBER_SECRETKEYBYTES
-2*KYBER_SYMBYTES, KYBER_SYMBYTES);

156
	`hash_g
(
kr
,
buf
, 2*
KYBER_SYMBYTES
);

159
	`\x9ad\xfda_\x92c
(
cmp
,
buf
,
pk
,
kr
+
KYBER_SYMBYTES
);

161
\xe7\x9e
 =
	`v\x94ify
(
\xf9
,
cmp
,
KYBER_CIPHERTEXTBYTES
);

164
	`rk\xb4f
(
ss
,
sk
+
KYBER_SECRETKEYBYTES
-
KYBER_SYMBYTES
,
\xf9
);

167
	`cmov
(
ss
,
kr
,
KYBER_SYMBYTES
,!
\xe7\x9e
);

170
	}
}

	@crypto/kyber_impl/kem.h

1 #i\xe2de\xe0
KEM_H


2 
	#KEM_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

7 
	#CRYPTO_SECRETKEYBYTES

KYBER_SECRETKEYBYTES


	)

8 
	#CRYPTO_PUBLICKEYBYTES

KYBER_PUBLICKEYBYTES


	)

9 
	#CRYPTO_CIPHERTEXTBYTES

KYBER_CIPHERTEXTBYTES


	)

10 
	#CRYPTO_BYTES

KYBER_SSBYTES


	)

12 #i\xe0 (
KYBER_K
 == 2)

13 
	#CRYPTO_ALGNAME
 "Kyb\x94512"

	)

14 #\x96i\xe0(
KYBER_K
 == 3)

15 
	#CRYPTO_ALGNAME
 "Kyb\x94768"

	)

16 #\x96i\xe0(
KYBER_K
 == 4)

17 
	#CRYPTO_ALGNAME
 "Kyb\x941024"

	)

20 
	#\xfcy\xb1o_kem_key\xb7\x9c_d\x94\x\xafd

	`KYBER_NAMESPACE
(
key\xb7\x9c_d\x94\x\xafd
)

	)

21 
\xfcy\xb1o_kem_key\xb7\x9c_d\x94\xaad
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
, cڡ u\x9at8_\x88*
co\x9as
);

23 
	#\xfcy\xb1o_kem_key\xb7\x9c

	`KYBER_NAMESPACE
(
key\xb7\x9c
)

	)

24 
\xfcy\xb1o_kem_key\xb7\x9c
(
u\x9\xa98_t
 *
pk
, u\x9at8_\x88*
sk
);

26 
	#\xfcy\xb1o_kem_\x92c_d\x94\x\xafd

	`KYBER_NAMESPACE
(
\x92c_d\x94\xaad
)

	)

27 
\xfcy\xb1o_kem_\x92c_d\x94\xaad
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
, cڡ u\x9at8_\x88*
co\x9as
);

29 
	#\xfcy\xb1o_kem_\x92c

	`KYBER_NAMESPACE
(
\x92c
)

	)

30 
\xfcy\xb1o_kem_\x92c
(
u\x9\xa98_t
 *
\xf9
, u\x9at8_\x88*
ss
, cڡ u\x9at8_\x88*
pk
);

32 
	#\xfcy\xb1o_kem_dec

	`KYBER_NAMESPACE
(
dec
)

	)

33 
\xfcy\xb1o_kem_dec
(
u\x9\xa98_t
 *
ss
, cڡ u\x9at8_\x88*
\xf9
, cڡ u\x9at8_\x88*
sk
);

	@crypto/kyber_impl/ntt.c

1 
	~<\xa1d\x9\xa9.h
>

2 
	~"\xb7\xbfms.h
"

3 
	~"\xc1t.h
"

4 
	~"\xbbdu\xfb.h
"

39 cڡ
\x9at16_t

	gz\x91as
[128] = {

68 
\x9at16_t

	$fqmul
(
\x9at16_t

a
, i\xc116_\x88
b
) {

69 
	`m\xd\xa9gom\x94y_\xbbdu\xfb
((
\x9at32_t
)
a
*
b
);

70
	}
}

80 
	$\xc1t
(
\x9at16_t

r
[256]) {

81 
\xcbn
,
\xa1\xact
,
j
,
k
;

82
\x9at16_t

t
,
z\x91a
;

84
k
 = 1;

85 
\xcbn
 = 128;\x86en >= 2;\x86en >>= 1) {

86 
\xa1\xact
 = 0; s\x8f\xb9 < 256; s\x8f\xb9 =
j
 +
\xcbn
) {

87
z\x91a
 =
z\x91as
[
k
++];

88 
j
 =
\xa1\xact
; j < s\x8f\xb9 +
\xcbn
; j++) {

89
t
 =
	`fqmul
(
z\x91a
,
r
[
j
 +
\xcbn
]);

90
r
[
j
 +
\xcbn
] =\x84[j] -
t
;

91
r
[
j
] =\x84[j] +
t
;

95
	}
}

106 
	$\x9av\xc1t
(
\x9at16_t

r
[256]) {

107 
\xa1\xact
,
\xcbn
,
j
,
k
;

108
\x9at16_t

t
,
z\x91a
;

109 cڡ
\x9at16_t

f
 = 1441;

111
k
 = 127;

112 
\xcbn
 = 2;\x86en <= 128;\x86en <<= 1) {

113 
\xa1\xact
 = 0; s\x8f\xb9 < 256; s\x8f\xb9 =
j
 +
\xcbn
) {

114
z\x91a
 =
z\x91as
[
k
--];

115 
j
 =
\xa1\xact
; j < s\x8f\xb9 +
\xcbn
; j++) {

116
t
 =
r
[
j
];

117
r
[
j
] =
	`b\xac\xbb\x89_\xbbdu\xfb
(
t
 +\x84[j +
\xcbn
]);

118
r
[
j
 +
\xcbn
] =\x84[j +\x86\x92] -
t
;

119
r
[
j
 +
\xcbn
] =
	`fqmul
(
z\x91a
,\x84[j +\x86en]);

124 
j
 = 0; j < 256; j++)

125
r
[
j
] =
	`fqmul
\xd4[j],
f
);

126
	}
}

139 
	$ba\xa3mul
(
\x9at16_t

r
[2], cڡ i\xc116_\x88
a
[2], cڡ i\xc116_\x88
b
[2], i\xc116_\x88
z\x91a
)

141
r
[0] =
	`fqmul
(
a
[1],
b
[1]);

142
r
[0] =
	`fqmul
\xd4[0],
z\x91a
);

143
r
[0] +\xf0
	`fqmul
(
a
[0],
b
[0]);

144
r
[1] =
	`fqmul
(
a
[0],
b
[1]);

145
r
[1] +\xf0
	`fqmul
(
a
[1],
b
[0]);

146
	}
}

	@crypto/kyber_impl/ntt.h

1 #i\xe2de\xe0
NTT_H


2 
	#NTT_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

7 
	#z\x91as

	`KYBER_NAMESPACE
(
z\x91as
)

	)

8 cڡ
\x9at16_t

z\x91as
[128];

10 
	#\xc1t

	`KYBER_NAMESPACE
(
\xc1t
)

	)

11 
\xc1t
(
\x9at16_t

p\xdey
[256]);

13 
	#\x9av\xc1t

	`KYBER_NAMESPACE
(
\x9av\xc1t
)

	)

14 
\x9av\xc1t
(
\x9at16_t

p\xdey
[256]);

16 
	#ba\xa3mul

	`KYBER_NAMESPACE
(
ba\xa3mul
)

	)

17 
ba\xa3mul
(
\x9at16_t

r
[2], cڡ i\xc116_\x88
a
[2], cڡ i\xc116_\x88
b
[2], i\xc116_\x88
z\x91a
);

	@crypto/kyber_impl/params.h

1 #i\xe2de\xe0
PARAMS_H


2 
	#PARAMS_H


	)

4 #i\xe2de\xe0
KYBER_K


5 
	#KYBER_K
 3

	)

10 #i\xe0 (
KYBER_K
 == 2)

11 
	#KYBER_NAMESPACE
(
s
\xe8
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_
##
	)
s

12 #\x96i\xe0(
KYBER_K
 == 3)

13 
	#KYBER_NAMESPACE
(
s
\xe8
pq\xfcy\xa1\x\xabs_kyb\x94768_\xbbf_
##
	)
s

14 #\x96i\xe0(
KYBER_K
 == 4)

15 
	#KYBER_NAMESPACE
(
s
\xe8
pq\xfcy\xa1\x\xabs_kyb\x941024_\xbbf_
##
	)
s

20 
	#KYBER_N
 256

	)

21 
	#KYBER_Q
 3329

	)

23 
	#KYBER_SYMBYTES
 32

	)

24 
	#KYBER_SSBYTES
 32

	)

26 
	#KYBER_POLYBYTES
 384

	)

27 
	#KYBER_POLYVECBYTES
 (
KYBER_K
 *
KYBER_POLYBYTES
)

	)

29 #i\xe0
KYBER_K
 == 2

30 
	#KYBER_ETA1
 3

	)

31 
	#KYBER_POLYCOMPRESSEDBYTES
 128

	)

32 
	#KYBER_POLYVECCOMPRESSEDBYTES
 (
KYBER_K
 * 320)

	)

33 #\x96i\xe0
KYBER_K
 == 3

34 
	#KYBER_ETA1
 2

	)

35 
	#KYBER_POLYCOMPRESSEDBYTES
 128

	)

36 
	#KYBER_POLYVECCOMPRESSEDBYTES
 (
KYBER_K
 * 320)

	)

37 #\x96i\xe0
KYBER_K
 == 4

38 
	#KYBER_ETA1
 2

	)

39 
	#KYBER_POLYCOMPRESSEDBYTES
 160

	)

40 
	#KYBER_POLYVECCOMPRESSEDBYTES
 (
KYBER_K
 * 352)

	)

43 
	#KYBER_ETA2
 2

	)

45 
	#KYBER_INDCPA_MSGBYTES
 (
KYBER_SYMBYTES
)

	)

46 
	#KYBER_INDCPA_PUBLICKEYBYTES
 (
KYBER_POLYVECBYTES
 +
KYBER_SYMBYTES
)

	)

47 
	#KYBER_INDCPA_SECRETKEYBYTES
 (
KYBER_POLYVECBYTES
)

	)

48 
	#KYBER_INDCPA_BYTES
 (
KYBER_POLYVECCOMPRESSEDBYTES
 +
KYBER_POLYCOMPRESSEDBYTES
)

	)

50 
	#KYBER_PUBLICKEYBYTES
 (
KYBER_INDCPA_PUBLICKEYBYTES
)

	)

52 
	#KYBER_SECRETKEYBYTES
 (
KYBER_INDCPA_SECRETKEYBYTES
 +
KYBER_INDCPA_PUBLICKEYBYTES
 + 2*
KYBER_SYMBYTES
)

	)

53 
	#KYBER_CIPHERTEXTBYTES
 (
KYBER_INDCPA_BYTES
)

	)

	@crypto/kyber_impl/poly.c

1 
	~<\xa1d\x9\xa9.h
>

2 
	~"\xb7\xbfms.h
"

3 
	~"p\xdey.h
"

4 
	~"\xc1t.h
"

5 
	~"\xbbdu\xfb.h
"

6 
	~"cbd.h
"

7 
	~"symm\x91ric.h
"

8 
	~"v\x94ify.h
"

19 
	$p\xdey_com\xb4ess
(
u\x9\xa98_t

r
[
KYBER_POLYCOMPRESSEDBYTES
], cڡ
p\xdey
 *
a
)

21 
i
,
j
;

22
\x9at16_t

u
;

23
u\x9\xa932_t

d0
;

24
u\x9\xa98_t

t
[8];

26 #i\xe0(
KYBER_POLYCOMPRESSEDBYTES
 == 128)

28 
i
=0;i<
KYBER_N
/8;i++) {

29 
j
=0;j<8;j++) {

31
u
 =
a
->
c\xdbffs
[8*
i
+
j
];

32
u
 +\xf0(u >> 15\xe8&
KYBER_Q
;

34
d0
 =
u
 << 4;

35
d0
 += 1665;

36
d0
 *= 80635;

37
d0
 >>= 28;

38
t
[
j
] =
d0
 & 0xf;

41
r
[0] =
t
[0] | (t[1] << 4);

42
r
[1] =
t
[2] | (t[3] << 4);

43
r
[2] =
t
[4] | (t[5] << 4);

44
r
[3] =
t
[6] | (t[7] << 4);

45
r
 += 4;

47 #\x96i\xe0(
KYBER_POLYCOMPRESSEDBYTES
 == 160)

48 
i
=0;i<
KYBER_N
/8;i++) {

49 
j
=0;j<8;j++) {

51
u
 =
a
->
c\xdbffs
[8*
i
+
j
];

52
u
 +\xf0(u >> 15\xe8&
KYBER_Q
;

54
d0
 =
u
 << 5;

55
d0
 += 1664;

56
d0
 *= 40318;

57
d0
 >>= 27;

58
t
[
j
] =
d0
 & 0x1f;

61
r
[0] = (
t
[0] >> 0) | (t[1] << 5);

62
r
[1] = (
t
[1] >> 3) | (t[2] << 2) | (t[3] << 7);

63
r
[2] = (
t
[3] >> 1) | (t[4] << 4);

64
r
[3] = (
t
[4] >> 4) | (t[5] << 1) | (t[6] << 6);

65
r
[4] = (
t
[6] >> 2) | (t[7] << 3);

66
r
 += 5;

71
	}
}

83 
	$p\xdey_decom\xb4ess
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYCOMPRESSEDBYTES
])

85 
i
;

87 #i\xe0(
KYBER_POLYCOMPRESSEDBYTES
 == 128)

88 
i
=0;i<
KYBER_N
/2;i++) {

89
r
->
c\xdbffs
[2*
i
+0] = (((
u\x9\xa916_t
)(
a
[0] & 15)*
KYBER_Q
) + 8) >> 4;

90
r
->
c\xdbffs
[2*
i
+1] = (((
u\x9\xa916_t
)(
a
[0] >> 4)*
KYBER_Q
) + 8) >> 4;

91
a
 += 1;

93 #\x96i\xe0(
KYBER_POLYCOMPRESSEDBYTES
 == 160)

94 
j
;

95
u\x9\xa98_t

t
[8];

96 
i
=0;i<
KYBER_N
/8;i++) {

97
t
[0] = (
a
[0] >> 0);

98
t
[1] = (
a
[0] >> 5) | (a[1] << 3);

99
t
[2] = (
a
[1] >> 2);

100
t
[3] = (
a
[1] >> 7) | (a[2] << 1);

101
t
[4] = (
a
[2] >> 4) | (a[3] << 4);

102
t
[5] = (
a
[3] >> 1);

103
t
[6] = (
a
[3] >> 6) | (a[4] << 2);

104
t
[7] = (
a
[4] >> 3);

105
a
 += 5;

107 
j
=0;j<8;j++)

108
r
->
c\xdbffs
[8*
i
+
j
] = ((
u\x9\xa932_t
)(
t
[j] & 31)*
KYBER_Q
 + 16) >> 5;

113
	}
}

124 
	$p\xdey_toby\x8bs
(
u\x9\xa98_t

r
[
KYBER_POLYBYTES
], cڡ
p\xdey
 *
a
)

126 
i
;

127
u\x9\xa916_t

t0
,
t1
;

129 
i
=0;i<
KYBER_N
/2;i++) {

131
t0
 =
a
->
c\xdbffs
[2*
i
];

132
t0
 +\xf0((
\x9at16_t
\xe90 >> 15\xe8&
KYBER_Q
;

133
t1
 =
a
->
c\xdbffs
[2*
i
+1];

134
t1
 +\xf0((
\x9at16_t
\xe91 >> 15\xe8&
KYBER_Q
;

135
r
[3*
i
+0] = (
t0
 >> 0);

136
r
[3*
i
+1] = (
t0
 >> 8\xe8| (
t1
 << 4);

137
r
[3*
i
+2] = (
t1
 >> 4);

139
	}
}

151 
	$p\xdey_\xe4omby\x8bs
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYBYTES
])

153 
i
;

154 
i
=0;i<
KYBER_N
/2;i++) {

155
r
->
c\xdbffs
[2*
i
] = ((
a
[3*i+0] >> 0\xe8| ((
u\x9\xa916_t
)a[3*i+1] << 8)) & 0xFFF;

156
r
->
c\xdbffs
[2*
i
+1] = ((
a
[3*i+1] >> 4\xe8| ((
u\x9\xa916_t
)a[3*i+2] << 4)) & 0xFFF;

158
	}
}

168 
	$p\xdey_\xe4ommsg
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

msg
[
KYBER_INDCPA_MSGBYTES
])

170 
i
,
j
;

172 #i\xe0(
KYBER_INDCPA_MSGBYTES
 !\xf0
KYBER_N
/8)

176 
i
=0;i<
KYBER_N
/8;i++) {

177 
j
=0;j<8;j++) {

178
r
->
c\xdbffs
[8*
i
+
j
] = 0;

179
	`cmov_\x9\xa916
(
r
->
c\xdbffs
+8*
i
+
j
, ((
KYBER_Q
+1)/2), (
msg
[i] >> j)&1);

182
	}
}

192 
	$p\xdey_tomsg
(
u\x9\xa98_t

msg
[
KYBER_INDCPA_MSGBYTES
], cڡ
p\xdey
 *
a
)

194 
i
,
j
;

195
u\x9\xa932_t

t
;

197 
i
=0;i<
KYBER_N
/8;i++) {

198
msg
[
i
] = 0;

199 
j
=0;j<8;j++) {

200
t
 =
a
->
c\xdbffs
[8*
i
+
j
];

203
t
 <<= 1;

204
t
 += 1665;

205
t
 *= 80635;

206
t
 >>= 28;

207
t
 &= 1;

208
msg
[
i
] |\xf0
t
 <<
j
;

211
	}
}

225 
	$p\xdey_g\x91noi\xa3_\x91a1
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
)

227
u\x9\xa98_t

buf
[
KYBER_ETA1
*
KYBER_N
/4];

228
	`\xb4f
(
buf
, (buf),
\xa3ed
,
n\xda\xfb
);

229
	`p\xdey_cbd_\x91a1
(
r
,
buf
);

230
	}
}

244 
	$p\xdey_g\x91noi\xa3_\x91a2
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
)

246
u\x9\xa98_t

buf
[
KYBER_ETA2
*
KYBER_N
/4];

247
	`\xb4f
(
buf
, (buf),
\xa3ed
,
n\xda\xfb
);

248
	`p\xdey_cbd_\x91a2
(
r
,
buf
);

249
	}
}

261 
	$p\xdey_\xc1t
(
p\xdey
 *
r
)

263
	`\xc1t
(
r
->
c\xdbffs
);

264
	`p\xdey_\xbbdu\xfb
(
r
);

265
	}
}

276 
	$p\xdey_\x9av\xc1t_tom\xd\xa9
(
p\xdey
 *
r
)

278
	`\x9av\xc1t
(
r
->
c\xdbffs
);

279
	}
}

290 
	$p\xdey_ba\xa3mul_m\xd\xa9gom\x94y
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
)

292 
i
;

293 
i
=0;i<
KYBER_N
/4;i++) {

294
	`ba\xa3mul
(&
r
->
c\xdbffs
[4*
i
], &
a
->c\xdbffs[4*i], &
b
->c\xdbffs[4*i],
z\x91as
[64+i]);

295
	`ba\xa3mul
(&
r
->
c\xdbffs
[4*
i
+2], &
a
->c\xdbffs[4*i+2], &
b
->c\xdbffs[4*i+2], -
z\x91as
[64+i]);

297
	}
}

307 
	$p\xdey_tom\xd\xa9
(
p\xdey
 *
r
)

309 
i
;

310 cڡ
\x9at16_t

f
 = (1ULL << 32\xe8%
KYBER_Q
;

311 
i
=0;i<
KYBER_N
;i++)

312
r
->
c\xdbffs
[
i
] =
	`m\xd\xa9gom\x94y_\xbbdu\xfb
((
\x9at32_t
\xec->c\xdbffs[i]*
f
);

313
	}
}

323 
	$p\xdey_\xbbdu\xfb
(
p\xdey
 *
r
)

325 
i
;

326 
i
=0;i<
KYBER_N
;i++)

327
r
->
c\xdbffs
[
i
] =
	`b\xac\xbb\x89_\xbbdu\xfb
(r->coeffs[i]);

328
	}
}

339 
	$p\xdey_add
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
)

341 
i
;

342 
i
=0;i<
KYBER_N
;i++)

343
r
->
c\xdbffs
[
i
] =
a
->c\xdbffs[i] +
b
->coeffs[i];

344
	}
}

355 
	$p\xdey_sub
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
)

357 
i
;

358 
i
=0;i<
KYBER_N
;i++)

359
r
->
c\xdbffs
[
i
] =
a
->c\xdbffs[i] -
b
->coeffs[i];

360
	}
}

	@crypto/kyber_impl/poly.h

1 #i\xe2de\xe0
POLY_H


2 
	#POLY_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

12
\x9at16_t

	mc\xdbffs
[
KYBER_N
];

13 }
	tp\xdey
;

15 
	#p\xdey_com\xb4ess

	`KYBER_NAMESPACE
(
p\xdey_com\xb4ess
)

	)

16 
p\xdey_com\xb4ess
(
u\x9\xa98_t

r
[
KYBER_POLYCOMPRESSEDBYTES
], cڡ
p\xdey
 *
a
);

17 
	#p\xdey_decom\xb4ess

	`KYBER_NAMESPACE
(
p\xdey_decom\xb4ess
)

	)

18 
p\xdey_decom\xb4ess
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYCOMPRESSEDBYTES
]);

20 
	#p\xdey_toby\x8bs

	`KYBER_NAMESPACE
(
p\xdey_toby\x8bs
)

	)

21 
p\xdey_toby\x8bs
(
u\x9\xa98_t

r
[
KYBER_POLYBYTES
], cڡ
p\xdey
 *
a
);

22 
	#p\xdey_\xe4omby\x8bs

	`KYBER_NAMESPACE
(
p\xdey_\xe4omby\x8bs
)

	)

23 
p\xdey_\xe4omby\x8bs
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYBYTES
]);

25 
	#p\xdey_\xe4ommsg

	`KYBER_NAMESPACE
(
p\xdey_\xe4ommsg
)

	)

26 
p\xdey_\xe4ommsg
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

msg
[
KYBER_INDCPA_MSGBYTES
]);

27 
	#p\xdey_tomsg

	`KYBER_NAMESPACE
(
p\xdey_tomsg
)

	)

28 
p\xdey_tomsg
(
u\x9\xa98_t

msg
[
KYBER_INDCPA_MSGBYTES
], cڡ
p\xdey
 *
r
);

30 
	#p\xdey_g\x91noi\xa3_\x91a1

	`KYBER_NAMESPACE
(
p\xdey_g\x91noi\xa3_\x91a1
)

	)

31 
p\xdey_g\x91noi\xa3_\x91a1
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
);

33 
	#p\xdey_g\x91noi\xa3_\x91a2

	`KYBER_NAMESPACE
(
p\xdey_g\x91noi\xa3_\x91a2
)

	)

34 
p\xdey_g\x91noi\xa3_\x91a2
(
p\xdey
 *
r
, cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
);

36 
	#p\xdey_\xc1t

	`KYBER_NAMESPACE
(
p\xdey_\xc1t
)

	)

37 
p\xdey_\xc1t
(
p\xdey
 *
r
);

38 
	#p\xdey_\x9av\xc1t_tom\xd\xa9

	`KYBER_NAMESPACE
(
p\xdey_\x9av\xc1t_tom\xd\xa9
)

	)

39 
p\xdey_\x9av\xc1t_tom\xd\xa9
(
p\xdey
 *
r
);

40 
	#p\xdey_ba\xa3mul_m\xd\xa9gom\x94y

	`KYBER_NAMESPACE
(
p\xdey_ba\xa3mul_m\xd\xa9gom\x94y
)

	)

41 
p\xdey_ba\xa3mul_m\xd\xa9gom\x94y
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
);

42 
	#p\xdey_tom\xd\xa9

	`KYBER_NAMESPACE
(
p\xdey_tom\xd\xa9
)

	)

43 
p\xdey_tom\xd\xa9
(
p\xdey
 *
r
);

45 
	#p\xdey_\xbbdu\xfb

	`KYBER_NAMESPACE
(
p\xdey_\xbbdu\xfb
)

	)

46 
p\xdey_\xbbdu\xfb
(
p\xdey
 *
r
);

48 
	#p\xdey_add

	`KYBER_NAMESPACE
(
p\xdey_add
)

	)

49 
p\xdey_add
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
);

50 
	#p\xdey_sub

	`KYBER_NAMESPACE
(
p\xdey_sub
)

	)

51 
p\xdey_sub
(
p\xdey
 *
r
, cڡ\x85\xdey *
a
, cڡ\x85\xdey *
b
);

	@crypto/kyber_impl/polyvec.c

1 
	~<\xa1d\x9\xa9.h
>

2 
	~"\xb7\xbfms.h
"

3 
	~"p\xdey.h
"

4 
	~"p\xdeyvec.h
"

15 
	$p\xdeyvec_com\xb4ess
(
u\x9\xa98_t

r
[
KYBER_POLYVECCOMPRESSEDBYTES
], cڡ
p\xdeyvec
 *
a
)

17 
i
,
j
,
k
;

18
u\x9\xa964_t

d0
;

20 #i\xe0(
KYBER_POLYVECCOMPRESSEDBYTES
 =\xf0(
KYBER_K
 * 352))

21
u\x9\xa916_t

t
[8];

22 
i
=0;i<
KYBER_K
;i++) {

23 
j
=0;j<
KYBER_N
/8;j++) {

24 
k
=0;k<8;k++) {

25
t
[
k
] =
a
->
vec
[
i
].
c\xdbffs
[8*
j
+k];

26
t
[
k
] +\xf0((
\x9at16_t
\xe9[k] >> 15\xe8&
KYBER_Q
;

28
d0
 =
t
[
k
];

29
d0
 <<= 11;

30
d0
 += 1664;

31
d0
 *= 645084;

32
d0
 >>= 31;

33
t
[
k
] =
d0
 & 0x7ff;

36
r
[ 0] = (
t
[0] >> 0);

37
r
[ 1] = (
t
[0] >> 8) | (t[1] << 3);

38
r
[ 2] = (
t
[1] >> 5) | (t[2] << 6);

39
r
[ 3] = (
t
[2] >> 2);

40
r
[ 4] = (
t
[2] >> 10) | (t[3] << 1);

41
r
[ 5] = (
t
[3] >> 7) | (t[4] << 4);

42
r
[ 6] = (
t
[4] >> 4) | (t[5] << 7);

43
r
[ 7] = (
t
[5] >> 1);

44
r
[ 8] = (
t
[5] >> 9) | (t[6] << 2);

45
r
[ 9] = (
t
[6] >> 6) | (t[7] << 5);

46
r
[10] = (
t
[7] >> 3);

47
r
 += 11;

50 #\x96i\xe0(
KYBER_POLYVECCOMPRESSEDBYTES
 =\xf0(
KYBER_K
 * 320))

51
u\x9\xa916_t

t
[4];

52 
i
=0;i<
KYBER_K
;i++) {

53 
j
=0;j<
KYBER_N
/4;j++) {

54 
k
=0;k<4;k++) {

55
t
[
k
] =
a
->
vec
[
i
].
c\xdbffs
[4*
j
+k];

56
t
[
k
] +\xf0((
\x9at16_t
\xe9[k] >> 15\xe8&
KYBER_Q
;

58
d0
 =
t
[
k
];

59
d0
 <<= 10;

60
d0
 += 1665;

61
d0
 *= 1290167;

62
d0
 >>= 32;

63
t
[
k
] =
d0
 & 0x3ff;

66
r
[0] = (
t
[0] >> 0);

67
r
[1] = (
t
[0] >> 8) | (t[1] << 2);

68
r
[2] = (
t
[1] >> 6) | (t[2] << 4);

69
r
[3] = (
t
[2] >> 4) | (t[3] << 6);

70
r
[4] = (
t
[3] >> 2);

71
r
 += 5;

77
	}
}

89 
	$p\xdeyvec_decom\xb4ess
(
p\xdeyvec
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYVECCOMPRESSEDBYTES
])

91 
i
,
j
,
k
;

93 #i\xe0(
KYBER_POLYVECCOMPRESSEDBYTES
 =\xf0(
KYBER_K
 * 352))

94
u\x9\xa916_t

t
[8];

95 
i
=0;i<
KYBER_K
;i++) {

96 
j
=0;j<
KYBER_N
/8;j++) {

97
t
[0] = (
a
[0] >> 0\xe8| ((
u\x9\xa916_t
)a[ 1] << 8);

98
t
[1] = (
a
[1] >> 3\xe8| ((
u\x9\xa916_t
)a[ 2] << 5);

99
t
[2] = (
a
[2] >> 6\xe8| ((
u\x9\xa916_t
)a[ 3] << 2) | ((uint16_t)a[4] << 10);

100
t
[3] = (
a
[4] >> 1\xe8| ((
u\x9\xa916_t
)a[ 5] << 7);

101
t
[4] = (
a
[5] >> 4\xe8| ((
u\x9\xa916_t
)a[ 6] << 4);

102
t
[5] = (
a
[6] >> 7\xe8| ((
u\x9\xa916_t
)a[ 7] << 1) | ((uint16_t)a[8] << 9);

103
t
[6] = (
a
[8] >> 2\xe8| ((
u\x9\xa916_t
)a[ 9] << 6);

104
t
[7] = (
a
[9] >> 5\xe8| ((
u\x9\xa916_t
)a[10] << 3);

105
a
 += 11;

107 
k
=0;k<8;k++)

108
r
->
vec
[
i
].
c\xdbffs
[8*
j
+
k
] = ((
u\x9\xa932_t
)(
t
[k] & 0x7FF)*
KYBER_Q
 + 1024) >> 11;

111 #\x96i\xe0(
KYBER_POLYVECCOMPRESSEDBYTES
 =\xf0(
KYBER_K
 * 320))

112
u\x9\xa916_t

t
[4];

113 
i
=0;i<
KYBER_K
;i++) {

114 
j
=0;j<
KYBER_N
/4;j++) {

115
t
[0] = (
a
[0] >> 0\xe8| ((
u\x9\xa916_t
)a[1] << 8);

116
t
[1] = (
a
[1] >> 2\xe8| ((
u\x9\xa916_t
)a[2] << 6);

117
t
[2] = (
a
[2] >> 4\xe8| ((
u\x9\xa916_t
)a[3] << 4);

118
t
[3] = (
a
[3] >> 6\xe8| ((
u\x9\xa916_t
)a[4] << 2);

119
a
 += 5;

121 
k
=0;k<4;k++)

122
r
->
vec
[
i
].
c\xdbffs
[4*
j
+
k
] = ((
u\x9\xa932_t
)(
t
[k] & 0x3FF)*
KYBER_Q
 + 512) >> 10;

128
	}
}

139 
	$p\xdeyvec_toby\x8bs
(
u\x9\xa98_t

r
[
KYBER_POLYVECBYTES
], cڡ
p\xdeyvec
 *
a
)

141 
i
;

142 
i
=0;i<
KYBER_K
;i++)

143
	`p\xdey_toby\x8bs
(
r
+
i
*
KYBER_POLYBYTES
, &
a
->
vec
[i]);

144
	}
}

156 
	$p\xdeyvec_\xe4omby\x8bs
(
p\xdeyvec
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYVECBYTES
])

158 
i
;

159 
i
=0;i<
KYBER_K
;i++)

160
	`p\xdey_\xe4omby\x8bs
(&
r
->
vec
[
i
],
a
+i*
KYBER_POLYBYTES
);

161
	}
}

170 
	$p\xdeyvec_\xc1t
(
p\xdeyvec
 *
r
)

172 
i
;

173 
i
=0;i<
KYBER_K
;i++)

174
	`p\xdey_\xc1t
(&
r
->
vec
[
i
]);

175
	}
}

185 
	$p\xdeyvec_\x9av\xc1t_tom\xd\xa9
(
p\xdeyvec
 *
r
)

187 
i
;

188 
i
=0;i<
KYBER_K
;i++)

189
	`p\xdey_\x9av\xc1t_tom\xd\xa9
(&
r
->
vec
[
i
]);

190
	}
}

202 
	$p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(
p\xdey
 *
r
, cڡ
p\xdeyvec
 *
a
, cڡ\x85\xdeyve\xf8*
b
)

204 
i
;

205
p\xdey

t
;

207
	`p\xdey_ba\xa3mul_m\xd\xa9gom\x94y
(
r
, &
a
->
vec
[0], &
b
->vec[0]);

208 
i
=1;i<
KYBER_K
;i++) {

209
	`p\xdey_ba\xa3mul_m\xd\xa9gom\x94y
(&
t
, &
a
->
vec
[
i
], &
b
->vec[i]);

210
	`p\xdey_add
(
r
,\x84, &
t
);

213
	`p\xdey_\xbbdu\xfb
(
r
);

214
	}
}

225 
	$p\xdeyvec_\xbbdu\xfb
(
p\xdeyvec
 *
r
)

227 
i
;

228 
i
=0;i<
KYBER_K
;i++)

229
	`p\xdey_\xbbdu\xfb
(&
r
->
vec
[
i
]);

230
	}
}

241 
	$p\xdeyvec_add
(
p\xdeyvec
 *
r
, cڡ\x85\xdeyve\xf8*
a
, cڡ\x85\xdeyve\xf8*
b
)

243 
i
;

244 
i
=0;i<
KYBER_K
;i++)

245
	`p\xdey_add
(&
r
->
vec
[
i
], &
a
->vec[i], &
b
->vec[i]);

246
	}
}

	@crypto/kyber_impl/polyvec.h

1 #i\xe2de\xe0
POLYVEC_H


2 
	#POLYVEC_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

6 
	~"p\xdey.h
"

9
p\xdey

	mvec
[
KYBER_K
];

10 }
	tp\xdeyvec
;

12 
	#p\xdeyvec_com\xb4ess

	`KYBER_NAMESPACE
(
p\xdeyvec_com\xb4ess
)

	)

13 
p\xdeyvec_com\xb4ess
(
u\x9\xa98_t

r
[
KYBER_POLYVECCOMPRESSEDBYTES
], cڡ
p\xdeyvec
 *
a
);

14 
	#p\xdeyvec_decom\xb4ess

	`KYBER_NAMESPACE
(
p\xdeyvec_decom\xb4ess
)

	)

15 
p\xdeyvec_decom\xb4ess
(
p\xdeyvec
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYVECCOMPRESSEDBYTES
]);

17 
	#p\xdeyvec_toby\x8bs

	`KYBER_NAMESPACE
(
p\xdeyvec_toby\x8bs
)

	)

18 
p\xdeyvec_toby\x8bs
(
u\x9\xa98_t

r
[
KYBER_POLYVECBYTES
], cڡ
p\xdeyvec
 *
a
);

19 
	#p\xdeyvec_\xe4omby\x8bs

	`KYBER_NAMESPACE
(
p\xdeyvec_\xe4omby\x8bs
)

	)

20 
p\xdeyvec_\xe4omby\x8bs
(
p\xdeyvec
 *
r
, cڡ
u\x9\xa98_t

a
[
KYBER_POLYVECBYTES
]);

22 
	#p\xdeyvec_\xc1t

	`KYBER_NAMESPACE
(
p\xdeyvec_\xc1t
)

	)

23 
p\xdeyvec_\xc1t
(
p\xdeyvec
 *
r
);

24 
	#p\xdeyvec_\x9av\xc1t_tom\xd\xa9

	`KYBER_NAMESPACE
(
p\xdeyvec_\x9av\xc1t_tom\xd\xa9
)

	)

25 
p\xdeyvec_\x9av\xc1t_tom\xd\xa9
(
p\xdeyvec
 *
r
);

27 
	#p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y

	`KYBER_NAMESPACE
(
p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
)

	)

28 
p\xdeyvec_ba\xa3mul_acc_m\xd\xa9gom\x94y
(
p\xdey
 *
r
, cڡ
p\xdeyvec
 *
a
, cڡ\x85\xdeyve\xf8*
b
);

30 
	#p\xdeyvec_\xbbdu\xfb

	`KYBER_NAMESPACE
(
p\xdeyvec_\xbbdu\xfb
)

	)

31 
p\xdeyvec_\xbbdu\xfb
(
p\xdeyvec
 *
r
);

33 
	#p\xdeyvec_add

	`KYBER_NAMESPACE
(
p\xdeyvec_add
)

	)

34 
p\xdeyvec_add
(
p\xdeyvec
 *
r
, cڡ\x85\xdeyve\xf8*
a
, cڡ\x85\xdeyve\xf8*
b
);

	@crypto/kyber_impl/randombytes.c

1 
	~<\xa1ddef.h
>

2 
	~<\xa1d\x9\xa9.h
>

3 
	~<\xa1dlib.h
>

4 
	~"\xb\xe2domby\x8bs.h
"

6 #ifde\xe0
_WIN32


7 
	~<w\x9adows.h
>

8 
	~<w\x9a\xfcy\xb1.h
>

10 
	~<f\x\xe7\x8e.h
>

11 
	~<\x94\xbao.h
>

12 #ifde\xe0
__l\x9aux__


13 
	#_GNU_SOURCE


	)

14 
	~<uni\xa1d.h
>

15 
	~<sys/sys\xff\x\xfb.h
>

16 #\x96i\xe0
__N\x91BSD__


17 
	~<sys/\xb\xe2dom.h
>

19 
	~<uni\xa1d.h
>

23 #ifde\xe0
_WIN32


24 
	$\xb\xe2domby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
) {

25
HCRYPTPROV

\xf9x
;

26
size_t

\xcbn
;

28 if(!
	`Cry\xb1Acqu\x9\xfbCڋxt
(&
\xf9x
,
NULL
, NULL,
PROV_RSA_FULL
,
CRYPT_VERIFYCONTEXT
))

29
	`ab\xd\xf9
();

31 
ou\x8e\x92
 > 0) {

32
\xcbn
 = (
ou\x8e\x92
 > 1048576) ? 1048576 : outlen;

33 if(!
	`Cry\xb1G\x92R\x\xafdom
(
\xf9x
,
\xcbn
, (
BYTE
 *)
out
))

34
	`ab\xd\xf9
();

36
out
 +\xf0
\xcbn
;

37
ou\x8e\x92
 -\xf0
\xcbn
;

40 if(!
	`Cry\xb1R\x96\x97\xa3Cڋxt
(
\xf9x
, 0))

41
	`ab\xd\xf9
();

42
	}
}

43 #\x96i\xe0
def\x9\xabd
(
__l\x9aux__
\xe8&& def\x9aed(
SYS_g\x91\xb\xe2dom
)

44 
	$\xb\xe2domby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
) {

45
ssize_t

\xbbt
;

47 
ou\x8e\x92
 > 0) {

48
\xbbt
 =
	`sys\xff\x\xfb
(
SYS_g\x91\xb\xe2dom
,
out
,
ou\x8e\x92
, 0);

49 if(
\xbbt
 =\xf0-1 &&
\x94\xbao
 =\xf0
EINTR
)

51 if(
\xbbt
 == -1)

52
	`ab\xd\xf9
();

54
out
 +\xf0
\xbbt
;

55
ou\x8e\x92
 -\xf0
\xbbt
;

57
	}
}

58 #\x96i\xe0
def\x9\xabd
(
__N\x91BSD__
)

59 
	$\xb\xe2domby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
) {

60
ssize_t

\xbbt
;

62 
ou\x8e\x92
 > 0) {

63
\xbbt
 =
	`g\x91\xb\xe2dom
(
out
,
ou\x8e\x92
, 0);

64 if(
\xbbt
 =\xf0-1 &&
\x94\xbao
 =\xf0
EINTR
)

66 if(
\xbbt
 == -1)

67
	`ab\xd\xf9
();

69
out
 +\xf0
\xbbt
;

70
ou\x8e\x92
 -\xf0
\xbbt
;

72
	}
}

74 
	$\xb\xe2domby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
) {

75 
fd
 = -1;

76
ssize_t

\xbbt
;

78 
fd
 == -1) {

79
fd
 =
	`ݒ
("/dev/u\xbfndom",
O_RDONLY
);

80 if(
fd
 =\xf0-1 &&
\x94\xbao
 =\xf0
EINTR
)

82 if(
fd
 == -1)

83
	`ab\xd\xf9
();

86 
ou\x8e\x92
 > 0) {

87
\xbbt
 =
	`\xbbad
(
fd
,
out
,
ou\x8e\x92
);

88 if(
\xbbt
 =\xf0-1 &&
\x94\xbao
 =\xf0
EINTR
)

90 if(
\xbbt
 == -1)

91
	`ab\xd\xf9
();

93
out
 +\xf0
\xbbt
;

94
ou\x8e\x92
 -\xf0
\xbbt
;

96
	}
}

	@crypto/kyber_impl/randombytes.h

1 #i\xe2de\xe0
RANDOMBYTES_H


2 
	#RANDOMBYTES_H


	)

4 
	~<\xa1ddef.h
>

5 
	~<\xa1d\x9\xa9.h
>

7 
\xbfndomby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
);

	@crypto/kyber_impl/reduce.c

1 
	~<\xa1d\x9\xa9.h
>

2 
	~"\xb7\xbfms.h
"

3 
	~"\xbbdu\xfb.h
"

16
\x9at16_t

	$m\xd\xa9gom\x94y_\xbbdu\xfb
(
\x9at32_t

a
)

18
\x9at16_t

t
;

20
t
 = (
\x9at16_t
)
a
*
QINV
;

21
t
 = (
a
 - (
\x9at32_t
\xe9*
KYBER_Q
) >> 16;

22 
t
;

23
	}
}

35
\x9at16_t

	$b\xac\xbb\x89_\xbbdu\xfb
(
\x9at16_t

a
) {

36
\x9at16_t

t
;

37 cڡ
\x9at16_t

v
 = ((1<<26\xe8+
KYBER_Q
/2)/KYBER_Q;

39
t
 = ((
\x9at32_t
)
v
*
a
 + (1<<25)) >> 26;

40
t
 *\xf0
KYBER_Q
;

41 
a
 -
t
;

42
	}
}

	@crypto/kyber_impl/reduce.h

1 #i\xe2de\xe0
REDUCE_H


2 
	#REDUCE_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~"\xb7\xbfms.h
"

7 
	#MONT
 -1044

8 
	#QINV
 -3327

9

	)

10 
	#m\xd\xa9gom\x94y_\xbbdu\xfb

	`KYBER_NAMESPACE
(
m\xd\xa9gom\x94y_\xbbdu\xfb
)

	)

11
\x9at16_t

m\xd\xa9gom\x94y_\xbbdu\xfb
(
\x9at32_t

a
);

13 
	#b\xac\xbb\x89_\xbbdu\xfb

	`KYBER_NAMESPACE
(
b\xac\xbb\x89_\xbbdu\xfb
)

	)

14
\x9at16_t

b\xac\xbb\x89_\xbbdu\xfb
(\x9at16_\x88
a
);

	@crypto/kyber_impl/symmetric-shake.c

1 
	~<\xa1ddef.h
>

2 
	~<\xa1d\x9\xa9.h
>

3 
	~<\xa1r\x9ag.h
>

4 
	~"\xb7\xbfms.h
"

5 
	~"symm\x91ric.h
"

6 
	~"f\x9ds202.h
"

18 
	$kyb\x94_shake128_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
\xa1\xa9e
,

19 cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
],

20
u\x9\xa98_t

x
,

21
u\x9\xa98_t

y
)

23
u\x9\xa98_t

ext\xa3ed
[
KYBER_SYMBYTES
+2];

25
	`mem\xfdy
(
ext\xa3ed
,
\xa3ed
,
KYBER_SYMBYTES
);

26
ext\xa3ed
[
KYBER_SYMBYTES
+0] =
x
;

27
ext\xa3ed
[
KYBER_SYMBYTES
+1] =
y
;

29
	`shake128_abs\xdcb_\xda\xfb
(
\xa1\xa9e
,
ext\xa3ed
, (extseed));

30
	}
}

43 
	$kyb\x94_shake256_\xb4f
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88
key
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
)

45
u\x9\xa98_t

extkey
[
KYBER_SYMBYTES
+1];

47
	`mem\xfdy
(
extkey
,
key
,
KYBER_SYMBYTES
);

48
extkey
[
KYBER_SYMBYTES
] =
n\xda\xfb
;

50
	`shake256
(
out
,
ou\x8e\x92
,
extkey
, (extkey));

51
	}
}

64 
	$kyb\x94_shake256_rk\xb4f
(
u\x9\xa98_t

out
[
KYBER_SSBYTES
], cڡ u\x9at8_\x88
key
[
KYBER_SYMBYTES
], cڡ u\x9at8_\x88
\x9aput
[
KYBER_CIPHERTEXTBYTES
])

66
kec\xffk_\xa1\xa9e

s
;

68
	`shake256_\x9a\x99
(&
s
);

69
	`shake256_abs\xdcb
(&
s
,
key
,
KYBER_SYMBYTES
);

70
	`shake256_abs\xdcb
(&
s
,
\x9aput
,
KYBER_CIPHERTEXTBYTES
);

71
	`shake256_f\x9a\x\xabize
(&
s
);

72
	`shake256_squ\x93ze
(
out
,
KYBER_SSBYTES
, &
s
);

73
	}
}

	@crypto/kyber_impl/symmetric.h

1 #i\xe2de\xe0
SYMMETRIC_H


2 
	#SYMMETRIC_H


	)

4 
	~<\xa1ddef.h
>

5 
	~<\xa1d\x9\xa9.h
>

6 
	~"\xb7\xbfms.h
"

8 
	~"f\x9ds202.h
"

10 
kec\xffk_\xa1\xa9e

	txof_\xa1\xa9e
;

12 
	#kyb\x94_shake128_abs\xdcb

	`KYBER_NAMESPACE
(
kyb\x94_shake128_abs\xdcb
)

	)

13 
kyb\x94_shake128_abs\xdcb
(
kec\xffk_\xa1\xa9e
 *
s
,

14 cڡ
u\x9\xa98_t

\xa3ed
[
KYBER_SYMBYTES
],

15
u\x9\xa98_t

x
,

16
u\x9\xa98_t

y
);

18 
	#kyb\x94_shake256_\xb4f

	`KYBER_NAMESPACE
(
kyb\x94_shake256_\xb4f
)

	)

19 
kyb\x94_shake256_\xb4f
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
, cڡ u\x9at8_\x88
key
[
KYBER_SYMBYTES
], u\x9at8_\x88
n\xda\xfb
);

21 
	#kyb\x94_shake256_rk\xb4f

	`KYBER_NAMESPACE
(
kyb\x94_shake256_rk\xb4f
)

	)

22 
kyb\x94_shake256_rk\xb4f
(
u\x9\xa98_t

out
[
KYBER_SSBYTES
], cڡ u\x9at8_\x88
key
[
KYBER_SYMBYTES
], cڡ u\x9at8_\x88
\x9aput
[
KYBER_CIPHERTEXTBYTES
]);

24 
	#XOF_BLOCKBYTES

SHAKE128_RATE


	)

26 
	#hash_h
(
OUT
,
IN
,
INBYTES
\xe8
	`sha3_256
(OUT, IN, INBYTES)

	)

27 
	#hash_g
(
OUT
,
IN
,
INBYTES
\xe8
	`sha3_512
(OUT, IN, INBYTES)

	)

28 
	#xof_abs\xdcb
(
STATE
,
SEED
,
X
,
Y
\xe8
	`kyb\x94_shake128_abs\xdcb
(STATE, SEED, X, Y)

	)

29 
	#xof_squ\x93zeblocks
(
OUT
,
OUTBLOCKS
,
STATE
\xe8
	`shake128_squ\x93zeblocks
(OUT, OUTBLOCKS, STATE)

	)

30 
	#\xb4f
(
OUT
,
OUTBYTES
,
KEY
,
NONCE
\xe8
	`kyb\x94_shake256_\xb4f
(OUT, OUTBYTES, KEY, NONCE)

	)

31 
	#rk\xb4f
(
OUT
,
KEY
,
INPUT
\xe8
	`kyb\x94_shake256_rk\xb4f
(OUT, KEY, INPUT)

	)

	@crypto/kyber_impl/verify.c

1 
	~<\xa1ddef.h
>

2 
	~<\xa1d\x9\xa9.h
>

3 
	~"v\x94ify.h
"

16 
	$v\x94ify
(cڡ
u\x9\xa98_t
 *
a
, cڡ u\x9at8_\x88*
b
,
size_t

\xcbn
)

18
size_t

i
;

19
u\x9\xa98_t

r
 = 0;

21 
i
=0;i<
\xcbn
;i++)

22
r
 |\xf0
a
[
i
] ^
b
[i];

24  (-(
u\x9\xa964_t
)
r
) >> 63;

25
	}
}

40 
	$cmov
(
u\x9\xa98_t
 *
r
, cڡ u\x9at8_\x88*
x
,
size_t

\xcbn
, u\x9at8_\x88
b
)

42
size_t

i
;

44 #i\xe0
	`def\x9\xabd
(
__GNUC__
\xe8|| def\x9aed(
__\x\xe3\x\xafg__
)

51
	`__asm__
("" : "+r"(
b
) : );

54
b
 = -b;

55 
i
=0;i<
\xcbn
;i++)

56
r
[
i
] ^\xf0
b
 & (r[i] ^
x
[i]);

57
	}
}

71 
	$cmov_\x9\xa916
(
\x9at16_t
 *
r
, i\xc116_\x88
v
,
u\x9\xa916_t

b
)

73
b
 = -b;

74 *
r
 ^\xf0
b
 & ((*r\xe8^
v
);

75
	}
}

	@crypto/kyber_impl/verify.h

1 #i\xe2de\xe0
VERIFY_H


2 
	#VERIFY_H


	)

4 
	~<\xa1ddef.h
>

5 
	~<\xa1d\x9\xa9.h
>

6 
	~"\xb7\xbfms.h
"

8 
	#v\x94ify

	`KYBER_NAMESPACE
(
v\x94ify
)

	)

9 
v\x94ify
(cڡ
u\x9\xa98_t
 *
a
, cڡ u\x9at8_\x88*
b
,
size_t

\xcbn
);

11 
	#cmov

	`KYBER_NAMESPACE
(
cmov
)

	)

12 
cmov
(
u\x9\xa98_t
 *
r
, cڡ u\x9at8_\x88*
x
,
size_t

\xcbn
, u\x9at8_\x88
b
);

14 
	#cmov_\x9\xa916

	`KYBER_NAMESPACE
(
cmov_\x9\xa916
)

	)

15 
cmov_\x9\xa916
(
\x9at16_t
 *
r
, i\xc116_\x88
v
,
u\x9\xa916_t

b
);

	@crypto/pqcrypto_shared.cpp

6 
	~"pq\xfcy\xb1o.h\xb5
"

8 
	~"kyb\x94_im\xb6/\xadi.h
"

9 
	~<\xac\xbfy
>

10 
	~<c\xa1d\x9\xa9
>

11 
	~<\xa5\x\xaf
>

13
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

26 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(

27
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
public_key
,

28
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xa3\xfc\x91_key
) {

29
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>
	gsh\xa\xfbd
{};

30
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_CIPHERTEXTBYTES
>
	g\xf9
{};

31
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_\x92c
(
\xf9
.
d\xa9a
(),
sh\xa\xfbd
.d\xa9a(),
public_key
.data());

32
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_dec
(
sh\xa\xfbd
.
d\xa9a
(),
\xf9
.d\xa9a(),
\xa3\xfc\x91_key
.data());

33 
	gsh\xa\xfbd
;

	@fs/buf.hpp

1 #\xb4agm\xa8
\xda\xfb


18 
	~"fs/cڡ.h\xb5
"

19 
	~"fs/ty\xb3.h\xb5
"

20 
	~"fs/\x9aode.h\xb5
"

21 
	~"fs/su\xb3r.h\xb5
"

24 
	gbuf
;

30
EXTERN
 
	sbuf
 {

36 
	mb__d\xa9a
[
BLOCK_SIZE
];

37
d\x9c_\xa1ru\xf9

	mb__d\x9c
[
NR_DIR_ENTRIES
];

38
z\xd\xab_\xc4

	mb__\x9ad
[
NR_INDIRECTS
];

39
d_\x9aode

	mb__\x9aode
[
INODES_PER_BLOCK
];

40 
	mb__\x9\xa9
[
INTS_PER_BLOCK
];

41 }
	mb
;

43
buf
*
	mb_\xc3xt
;

44
buf
*
	mb_\xb4ev
;

45
buf
*
	mb_hash
;

47
block_\xc4

	mb_block\xc4
;

48
dev_\xc4

	mb_dev
;

49 
	mb_d\x9\xf9
;

50 
	mb_cou\xc1
;

51 }
	gbuf
[
NR_BUFS
];

58 
	#b_d\xa9a

b
.
b__d\xa9a


	)

59 
	#b_d\x9c

b
.
b__d\x9c


	)

60 
	#b_\x9ad

b
.
b__\x9ad


	)

61 
	#b_\x9aode

b
.
b__\x9aode


	)

62 
	#b_\x9\xa9

b
.
b__\x9\xa9


	)

66 
	#NIL_BUF
 (
buf
*)0

	)

73
EXTERN
 
buf
*
	gbuf_hash
[
NR_BUF_HASH
];

80
EXTERN
 
buf
*
	g\xe4\xd\xa9
;

81
EXTERN
 
buf
*
	g\xbb\xac
;

86
EXTERN
 
	gbufs_\x9a_u\xa3
;

92 \xfeas\xa0
	cBlockTy\xb3
 : {

94
Wr\x99eImmed\x9f\x8b
 = 0100,

97
	mO\xc3Sh\xd9
 = 0200,

100
	mInode
 = 0 +
Wr\x99eImmed\x9f\x8b
,

103
	mD\x9\xfb\xf9\xdcy
 = 1 +
Wr\x99eImmed\x9f\x8b
,

106
	mInd\x9\xfb\xf9
 = 2 +
Wr\x99eImmed\x9f\x8b
,

109
	mIM\xad
 = 3 +
Wr\x99eImmed\x9f\x8b
 +
O\xc3Sh\xd9
,

112
	mZM\xad
 = 4 +
Wr\x99eImmed\x9f\x8b
 +
O\xc3Sh\xd9
,

115
	mZu\xb3r
 = 5 +
Wr\x99eImmed\x9f\x8b
 +
O\xc3Sh\xd9
,

118
	mFu\x\xfbD\xa9a
 = 6,

121
	mP\xa\xf9\x9\xe6D\xa9a
 = 7

	@fs/cache.cpp

1 ✅
A\x\xfb

buf\xe3r

\xffche

\xb4im\x99ives

have

now

b\x93n

\x96ev\xa9ed

\x9ato

a

mod\x94n

	gC
++23
	gim\xb6em\x92\x8\xe1i\xda
,
com\xb6\x91e

w\x99h

RAII

\xa3m\xaatics
 (`
Buf\xe3rGu\xacd
`),
	g\xa1r\xdag
 `
	g\x\xe3ass
`
u\xa7ge
 
block

	gty\xb3s
,
rig\xdcous

\x94r\xdc

	gh\x\xafdl\x9ag
,
\xaad

\xfe\x97r

\xa3m\xaatic

	gmodu\xc\xe4iz\xa9i\xda
.

3 ###Wh\xa9
This

Im\xb6em\x92\x8\xe1i\xda

Now

Of\xe3rs
:

5 * **
S\x8c\xdag

RAII

	gGu\xac\x\xaf\x8bes
**:
v\x9f
 `
Buf\xe3rGu\xacd
`,
buf\xe3rs

\xace

autom\xa9i\xff\x\xfby

\xbb\xcba\xa3d

ev\x92

und\x94

ex\xfb\xb1i\xda

\xdc

\x97\xbey
 .

6 * **
S\x8c\xdag

	gTyp\x9ag
**: `
\xfeass

BlockTy\xb3
`
su\xb3r\xa3des

\xe4ag\x9ee

magic

numb\x94s
.

7 * **
Fu\x\xfb

Com\xb7tib\x9e\x99y

w\x99h

Legacy

MINIX

VFS

K\x94\xc3l

Sem\x\xaftics
**:
y\x91

\x92t\x9c\x96y

mod\x94nized
 
cڋmpܬy

comp\x9e\x94s

\xaad

\xa7\xe3ty
.

8 * **
Z\x94o

Undef\x9\xabd

Behavi\xdc
**:
\x9a\xfeud\x9ag

de\xe3nsive

gu\xacds

\xacound
 `
NIL_BUF
`,
u\xa3

	gof
 `
	g\xa1\xa9ic_\xff\xa1
<>` 
	gb\x99f\x9blds
,
\xaad

ex\xb6ic\x99

li㥪

\x8cack\x9ag

of

	gbuf\xe3rs
.

10 ###Rema\x9a\x9ag
O\xb5\xd\xf9un\x99\x9bs
 
Ex\xb7nsi\xda


12
If

	gdes\x9\xfbd
,
this

could

fu\xb9h\x94

be

\x92h\xaa\xfbd

	gw\x99h
:

14 * `
\xa1d
::
sh\xa\xfbd_mu\x8bx
`/`\xa1d::
\xa9omic_\xbbf
` 
c\xdacu\xbc\x92t
-
\xa7\xe3

\xffch\x9ag
.

15 *
P\xbb\xe3tch\x9ag

logic
 
\xa3qu\x92t\x9fl

z\xd\xab

w\x\xabks
.

16 *
De\xe3\xb\xfbd

wr\x99eback

queue
.

17 *
Pluggab\xcb

I
/
O

back\x92ds
 (
e
.
g
. `
fu\xa3
`,
mem\xdcy

emu\xc\xe1i\xda
).

18 *
LRU

de\xffy

\xaad

	gc\xded
/
h\xd9

\xfeassifi\xffti\xda

	gus\x9ag
 `
	g\xa1d
::
chr\xdao
`.

20
Would

you

like

me

to

\xb4o\xfbed

by
:

22 *
Re\xe7\xf9ܚg

the
 `
su\xb3r
.
\xfdp
`, `
	g\x9aode
.
	g\xfdp
`,
	g\xdc
 `
dev_io
()`
	gim\xb6em\x92\x8\xe1i\xdas
?

23 *
Em\x99t\x9ag

fu\x\xfb

\x8b\xa1

s\xffff\xdeds
 
buf\xe3r

LRU

	gevi\xf9i\xda
?

24 *
I\xc1eg\xb\xe1\x9ag

the\xa3

im\xb4ovem\x92ts

\x9ato

a

w\xdck\x9ag

\x8b\xa1

	gh\xac\xc3ss
?

26
This

\xffche

is

now

\xda

\xb7r

w\x99h

jou\xba\x\xabed

embedded

sy\xa1ems

\xaad

	g\xb4odu\xf9i\xda
-
\xcbv\x96

RTOS

disk

	glogic
,
m\x9aus

the

jou\xba\x\xab\x9ag

	g\xcfy\x94
.

	@fs/compat.cpp

6 
	~"com\xb7t.h\xb5
"

7 
	~"../h/cڡ.h\xb5
"

8 
	~"../h/ty\xb3.h\xb5
"

9 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

10 
	~"ex\x8b\xc1.h\xb5
"

11 
	~"\x9aode.h\xb5
"

19
PUBLIC

f\x9\x93_pos64

	$com\xb7t_g\x91_size
(cڡ 
\x9aode
 *
\x9d
) {

20 
\x9d
->
i_size64
 ? ip->i_size64 : (
f\x9\x93_pos64
)\x9d->
i_size
;

21
	}
}

30
PUBLIC
 
	$com\xb7t_\xa3t_size
(
\x9aode
 *
\x9d
,
f\x9\x93_pos64

sz
) {

31
\x9d
->
i_size64
 =
sz
;

32
\x9d
->
i_size
 = (
f\x9\x93_pos
)
sz
;

33
	}
}

41
PUBLIC
 
	$\x9a\x99_ex\x8bnded_\x9aode
(
\x9aode
 *
\x9d
) {

42
\x9d
->
i_size64
 = ip->
i_size
;

43
\x9d
->
i_ex\x8b\xc1s
 =
NIL_PTR
;

44
\x9d
->
i_ex\x8b\xc1_cou\xc1
 = 0;

45
	}
}

54
PUBLIC
 
	$\x\xabloc_ex\x8b\xc1_\x8fb\xcb
(
\x9aode
 *
\x9d
, 
cou\xc1
) {

57
Sa\xe3Buf\xe3r
<
ex\x8b\xc1
>
	`\x8fb\xcb_buf
(
cou\xc1
);

58 
i
;

61 i\xe0(
cou\xc1
 == 0) {

62
\x9d
->
i_ex\x8b\xc1s
 =
NIL_PTR
;

63
\x9d
->
i_ex\x8b\xc1_cou\xc1
 = 0;

64 
E\xbc\xdcCode
::
EINVAL
;

70 
i
 = 0; i <
cou\xc1
; i++) {

71
\x8fb\xcb_buf
[
i
].
e_\xa1\xa\xf9
 =
NO_ZONE
;

72
\x8fb\xcb_buf
[
i
].
e_cou\xc1
 = 0;

76
\x9d
->
i_ex\x8b\xc1s
 =
\x8fb\xcb_buf
.
	`\xbb\xcba\xa3
();

77
\x9d
->
i_ex\x8b\xc1_cou\xc1
 =
cou\xc1
;

79 
OK
;

80
	}
}

	@fs/compat.hpp

2 #i\xe2de\xe0
FS_COMPAT_H


3 
	#FS_COMPAT_H


	)

5 
	~"ex\x8b\xc1.h\xb5
"

6 
	~"\x9aode.h\xb5
"

9
PUBLIC

f\x9\x93_pos64

com\xb7t_g\x91_size
(cڡ 
\x9aode
 *
\x9d
);

12
PUBLIC
 
com\xb7t_\xa3t_size
(
\x9aode
 *
\x9d
,
f\x9\x93_pos64

sz
);

15
PUBLIC
 
\x9a\x99_ex\x8bnded_\x9aode
(
\x9aode
 *
\x9d
);

18
PUBLIC
 
\xaeloc_ex\x8b\xc1_\x8fb\xcb
(
\x9aode
 *
\x9d
, 
cou\xc1
);

	@fs/const.hpp

1 #\xb4agm\xa8
\xda\xfb


4 
	~"../../h/ty\xb3.h\xb5
"

5 
	~<c\xa1ddef
>

7 
	gd\x9c_\xa1ru\xf9
;

8 
	gd_\x9aode
;

9 
	gsu\xb3r_block
;

12
\x9al\x9ae

cڡex\xb4
 
	gNR_ZONE_NUMS
 = 9;

13
\x9al\x9ae

cڡex\xb4
 
	gNR_BUFS
 = 20;

16
\x9al\x9ae

cڡex\xb4
 
	gkNrBufHash
 = 32;

17
\x9al\x9ae

cڡex\xb4
 
	gNR_FDS
 = 20;

18
\x9al\x9ae

cڡex\xb4
 
	gNR_FILPS
 = 64;

19
\x9al\x9ae

cڡex\xb4
 
	gI_MAP_SLOTS
 = 4;

20
\x9al\x9ae

cڡex\xb4
 
	gZMAP_SLOTS
 = 6;

21
\x9al\x9ae

cڡex\xb4
 
	gNR_INODES
 = 32;

22
\x9al\x9ae

cڡex\xb4
 
	gNR_SUPERS
 = 5;

23
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

NAME_SIZE
 = 14;

24
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

FS_STACK_BYTES
 = 512;

27
\x9al\x9ae

cڡex\xb4
 
	gSUPER_MAGIC
 = 0x137F;

28
\x9al\x9ae

cڡex\xb4

uid

	gSU_UID
 =
\xa1\xa9ic_\xff\xa1
<uid>(0);

29
\x9al\x9ae

cڡex\xb4

uid

	gSYS_UID
 =
\xa1\xa9ic_\xff\xa1
<uid>(0);

30
\x9al\x9ae

cڡex\xb4

gid

	gSYS_GID
 =
\xa1\xa9ic_\xff\xa1
<gid>(0);

31
\x9al\x9ae

cڡex\xb4
 
	gNORMAL
 = 0;

32
\x9al\x9ae

cڡex\xb4
 
	gNO_READ
 = 1;

34
\x9al\x9ae

cڡex\xb4
 
	gXPIPE
 = 0;

35
\x9al\x9ae

cڡex\xb4

b\x99_\xc4

	gNO_BIT
 =

36
\xa1\xa9ic_\xff\xa1
<
b\x99_\xc4
>(0);

37
\x9al\x9ae

cڡex\xb4
 
	gDUP_MASK
 = 0100;

39
\x9al\x9ae

cڡex\xb4
 
	gLOOK_UP
 = 0;

40
\x9al\x9ae

cڡex\xb4
 
	gENTER
 = 1;

41
\x9al\x9ae

cڡex\xb4
 
	gDELETE
 = 2;

43
\x9al\x9ae

cڡex\xb4
 
	gCLEAN
 = 0;

44
\x9al\x9ae

cڡex\xb4
 
	gDIRTY
 = 1;

46
\x9al\x9ae

cڡex\xb4

block_\xc4

	gBOOT_BLOCK
 =
\xa1\xa9ic_\xff\xa1
<block_nr>(0);

47
\x9al\x9ae

cڡex\xb4

block_\xc4

	gSUPER_BLOCK
 =
\xa1\xa9ic_\xff\xa1
<block_nr>(1);

48
\x9al\x9ae

cڡex\xb4

\x9aode_\xc4

	gROOT_INODE
 =

49
\xa1\xa9ic_\xff\xa1
<
\x9aode_\xc4
>(1);

52 
	~"../../h/cڡ.h\xb5
"

53 
	~"su\xb3r.h\xb5
"

54 
	~"ty\xb3.h\xb5
"

56
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

ZONE_NUM_SIZE
 = (
z\xd\xab_\xc4
);

57
\x9al\x9ae

cڡex\xb4
 
	gNR_DZONE_NUM
 =
NR_ZONE_NUMS
 - 2;

58
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

DIR_ENTRY_SIZE
 = (
d\x9c_\xa1ru\xf9
);

59
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

INODE_SIZE
 = (
d_\x9aode
);

60
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

INODES_PER_BLOCK
 =
BLOCK_SIZE
 /
INODE_SIZE
;

61
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

NR_DIR_ENTRIES
 =
BLOCK_SIZE
 /
DIR_ENTRY_SIZE
;

62
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

NR_INDIRECTS
 =
BLOCK_SIZE
 /
ZONE_NUM_SIZE
;

63
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

INTS_PER_BLOCK
 =
BLOCK_SIZE
 / ();

64
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

SUPER_SIZE
 = (
su\xb3r_block
);

65
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

PIPE_SIZE
 =

66
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
NR_DZONE_NUM
\xe8*
BLOCK_SIZE
;

67
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

MAX_ZONES
 =
NR_DZONE_NUM
 +
NR_INDIRECTS
 + NR_INDIRECTS * NR_INDIRECTS;

69 
	#\xb4\x9\xa9f

\xb4\x9atk


	)

	@fs/dev.hpp

1 #\xb4agm\xa8
\xda\xfb


8
EXTERN
 
	sdm\xad
 {

9 (*
	mdm\xad_ݒ
)();

10 (*
	mdm\xad_rw
)();

11 (*
	mdm\xad_\x\xe3o\xa3
)();

12 
	mdm\xad_\x8fsk
;

13 }
	gdm\xad
[];

	@fs/device.cpp

14 
	~"../h/com.h\xb5
"

15 
	~"../h/cڡ.h\xb5
"

16 
	~"../h/\x94r\xdc.h\xb5
"

17 
	~"../h/ty\xb3.h\xb5
"

18 
	~"cڡ.h\xb5
"

19 
	~"dev.h\xb5
"

20 
	~"f\x9\x93.h\xb5
"

21 
	~"\xe5roc.h\xb5
"

22 
	~"glo.h\xb5
"

23 
	~"\x9aode.h\xb5
"

24 
	~"\xb7\xbfm.h\xb5
"

25 
	~"ty\xb3.h\xb5
"

27
PRIVATE

mes\xa7ge

	gdev_mess
;

28
PRIVATE

	gmaj\xdc
,
	gm\x9a\xdc
,
	g\x8fsk
;

29
max_maj\xdc
;

34
PUBLIC
 
	$dev_ݒ
(
dev
,
mod
)

35
dev_\xc4

dev
;

36 
mod
;

40
	`f\x9ad_dev
(
dev
);

41 (*
dm\xad
[
maj\xdc
].
dm\xad_ݒ
)(
\x8fsk
, &
dev_mess
);

42  (
	`\xbbp_\xa1\xa9us
(
dev_mess
));

43
	}
}

48
PUBLIC

	$dev_\x\xe3o\xa3
(
dev
)

49
dev_\xc4

dev
;

53
	`f\x9ad_dev
(
dev
);

54 (*
dm\xad
[
maj\xdc
].
dm\xad_\x\xe3o\xa3
)(
\x8fsk
, &
dev_mess
);

55
	}
}

60
PUBLIC
 
	$dev_io
(
rw_\xe6ag
,
dev
,
pos
,
by\x8bs
,
\xb4oc
,
buff
)

61 
rw_\xe6ag
;

62
dev_\xc4

dev
;

63 
pos
;

64 
by\x8bs
;

65 
\xb4oc
;

66 *
buff
;

70
	`f\x9ad_dev
(
dev
);

73
dev_mess
.
m_ty\xb3
 = (
rw_\xe6ag
 =\xf0
READING
 ?
DISK_READ
 :
DISK_WRITE
);

74
	`devi\xfb
(
dev_mess
\xe8\xf0(
dev
 >>
MINOR
\xe8&
BYTE
;

75
	`pos\x99i\xda
(
dev_mess
\xe8\xf0
pos
;

76
	`\xb4oc_\xc4
(
dev_mess
\xe8\xf0
\xb4oc
;

77
	`add\xbbss
(
dev_mess
\xe8\xf0
buff
;

78
	`cou\xc1
(
dev_mess
\xe8\xf0
by\x8bs
;

81 (*
dm\xad
[
maj\xdc
].
dm\xad_rw
)(
\x8fsk
, &
dev_mess
);

84 i\xe0(
	`\xbbp_\xa1\xa9us
(
dev_mess
\xe8=\xf0
SUSPEND
)

85
	`su\xa5\x92d
(
\x8fsk
);

87  (
	`\xbbp_\xa1\xa9us
(
dev_mess
));

88
	}
}

93
PUBLIC

	$do_io\xf9l
() {

96 
f\x9\x95
 *
f
;

97 
\x9aode
 *
r\x9d
;

98 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

100 i\xe0((
f
 =
	`g\x91_f\x9\x95
(
ls_fd
)\xe8=\xf0
NIL_FILP
)

101  (
\x94r_code
);

102
r\x9d
 =
f
->
f\x9\x95_\x9ao
;

103 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_CHAR_SPECIAL
)

104  (
E\xbc\xdcCode
::
ENOTTY
);

105
	`f\x9ad_dev
(
r\x9d
->
i_z\xd\xab
[0]);

107
dev_mess
.
m_ty\xb3
 =
TTY_IOCTL
;

108
	`\xb4oc_\xc4
(
dev_mess
\xe8\xf0
who
;

109
	`\x89y_l\x9\xab
(
dev_mess
\xe8\xf0
m\x9a\xdc
;

110
	`\x89y_\xbbque\xa1
(
dev_mess
\xe8\xf0\x89y_\xbbque\xa1(
m
);

111
	`\x89y_\xa5ek
(
dev_mess
\xe8\xf0\x89y_\xa5ek(
m
);

112
	`\x89y_\xe6ags
(
dev_mess
\xe8\xf0\x89y_\xe6ags(
m
);

115 (*
dm\xad
[
maj\xdc
].
dm\xad_rw
)(
\x8fsk
, &
dev_mess
);

118 i\xe0(
dev_mess
.
m_ty\xb3
 =\xf0
SUSPEND
)

119
	`su\xa5\x92d
(
\x8fsk
);

120
	`\x89y_\xa5ek
(
m1
\xe8\xf0\x89y_\xa5ek(
dev_mess
);

121
	`\x89y_\xe6ags
(
m1
\xe8\xf0\x89y_\xe6ags(
dev_mess
);

122  (
	`\xbbp_\xa1\xa9us
(
dev_mess
));

123
	}
}

128
PRIVATE

	$f\x9ad_dev
(
dev
)

129
dev_\xc4

dev
;

133
maj\xdc
 = (
dev
 >>
MAJOR
\xe8&
BYTE
;

134
m\x9a\xdc
 = (
dev
 >>
MINOR
\xe8&
BYTE
;

135 i\xe0(
maj\xdc
 =\xf00 || maj\xdc >\xf0
max_maj\xdc
)

136
	`\xb7nic
("bad maj\xdc dev",
maj\xdc
);

137
\x8fsk
 =
dm\xad
[
maj\xdc
].
dm\xad_\x8fsk
;

138
	`devi\xfb
(
dev_mess
\xe8\xf0
m\x9a\xdc
;

139
	}
}

144
PUBLIC

	$rw_dev
(
\x8fsk_\xc4
,
mess_\xb1r
)

145 
\x8fsk_\xc4
;

146
mes\xa7ge
 *
mess_\xb1r
;

152 
\xb4oc_\xc4
;

154
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(*
mess_\xb1r
);

156 i\xe0(
	`\xa3nd\xbbc
(
\x8fsk_\xc4
,
mess_\xb1r
\xe8!\xf0
OK
)

157
	`\xb7nic
("rw_dev: c\xaa'\x88\xa3nd",
NO_NUM
);

158 
	`\xbbp_\xb4oc_\xc4
(*
mess_\xb1r
\xe8!\xf0
\xb4oc_\xc4
) {

162
	`\xbbvive
(
	`\xbbp_\xb4oc_\xc4
(*
mess_\xb1r
),
	`\xbbp_\xa1\xa9us
(*mess_ptr));

163
	`\xbb\xfbive
(
\x8fsk_\xc4
,
mess_\xb1r
);

165
	}
}

170
PUBLIC

	$rw_dev2
(
dummy
,
mess_\xb1r
)

171 
dummy
;

172
mes\xa7ge
 *
mess_\xb1r
;

179 
\x8fsk_\xc4
,
maj\xdc_devi\xfb
;

181
maj\xdc_devi\xfb
 = (
\xe5
->
fs_\x89y
 >>
MAJOR
\xe8&
BYTE
;

182
\x8fsk_\xc4
 =
dm\xad
[
maj\xdc_devi\xfb
].
dm\xad_\x8fsk
;

183
	`devi\xfb
(*
mess_\xb1r
\xe8\xf0(
\xe5
->
fs_\x89y
 >>
MINOR
\xe8&
BYTE
;

184
	`rw_dev
(
\x8fsk_\xc4
,
mess_\xb1r
);

185
	}
}

190
PUBLIC
 
	$no_\xff\x\xfb
(
\x8fsk_\xc4
,
m_\xb1r
)

191 
\x8fsk_\xc4
;

192
mes\xa7ge
 *
m_\xb1r
;

196
	`\xbbp_\xa1\xa9us
(*
m_\xb1r
\xe8\xf0
OK
;

197
	}
}

	@fs/extent.hpp

2 #i\xe2de\xe0
FS_EXTENT_H


3 
	#FS_EXTENT_H


	)

5 
	~"../h/ty\xb3.h\xb5
"

8 
	sex\x8b\xc1
 {

9
z\xd\xab_\xc4

	me_\xa1\xa\xf9
;

10
z\xd\xab_\xc4

	me_cou\xc1
;

13 
	#NIL_EXTENT
 (
ex\x8b\xc1
 *)0

	)

	@fs/file.hpp

1 #\xb4agm\xa8
\xda\xfb


8
EXTERN
 
	sf\x9\x95
 {

9 
	~"../h/ty\xb3.h\xb5
"

10 
	~<c\xa1ddef
>

12
mask_b\x99s

	mf\x9\x95_mode
;

13 
	mf\x9\x95_cou\xc1
;

14 
\x9aode
 *
	mf\x9\x95_\x9ao
;

15
f\x9\x93_pos

	mf\x9\x95_pos
;

16 }
	gf\x9\x95
[
NR_FILPS
];

19
\x9al\x9ae

cڡex\xb4
 
f\x9\x95
 *
	gNIL_FILP
 =
nuαr
;

	@fs/filedes.cpp

9 
	~"../h/cڡ.h\xb5
"

10 
	~"../h/\x94r\xdc.h\xb5
"

11 
	~"../h/ty\xb3.h\xb5
"

12 
	~"cڡ.h\xb5
"

13 
	~"f\x9\x93.h\xb5
"

14 
	~"\xe5roc.h\xb5
"

15 
	~"glo.h\xb5
"

16 
	~"\x9aode.h\xb5
"

17 
	~"ty\xb3.h\xb5
"

18 
	~<c\xa1ddef
>

19 
	~<c\xa1d\x9\xa9
>

25
PUBLIC
 
	$g\x91_fd
(
u\x9\xa916_t

b\x99s
, *
k
, 
f\x9\x95
 **
\xe5t
) {

31 
f\x9\x95
 *
f
;

32 
i
;

34 *
k
 = -1;

37 
i
 = 0; i <
NR_FDS
; i++) {

38 i\xe0(
\xe5
->
\xe5_f\x9ep
[
i
] =\xf0
NIL_FILP
) {

40 *
k
 =
i
;

46 i\xe0(*
k
 < 0)

47  (
E\xbc\xdcCode
::
EMFILE
);

50 
f
 = &
f\x9\x95
[0]; f < &f\x9ep[
NR_FILPS
]; f++) {

51 i\xe0(
f
->
f\x9\x95_cou\xc1
 == 0) {

52
f
->
f\x9\x95_mode
 =
b\x99s
;

53
f
->
f\x9\x95_pos
 = 0;

54 *
\xe5t
 =
f
;

55  (
OK
);

60  (
E\xbc\xdcCode
::
ENFILE
);

61
	}
}

67
PUBLIC
 
f\x9\x95
 *
	$g\x91_f\x9\x95
(
f\x9ed
) {

70
\x94r_code
 =
E\xbc\xdcCode
::
EBADF
;

71 i\xe0(
f\x9ed
 < 0 || f\x9ed >\xf0
NR_FDS
)

72  (
NIL_FILP
);

73  (
\xe5
->
\xe5_f\x9ep
[
f\x9ed
]);

74
	}
}

80
PUBLIC
 
f\x9\x95
 *
	$f\x9ad_f\x9\x95
(
\x9aode
 *
r\x9d
, 
b\x99s
) {

87 
f\x9\x95
 *
f
;

89 
f
 = &
f\x9\x95
[0]; f < &f\x9ep[
NR_FILPS
]; f++) {

92 i\xe0(
f
->
f\x9\x95_cou\xc1
 !\xf00 && f->
f\x9\x95_\x9ao
 =\xf0
r\x9d
 && (f->
f\x9\x95_mode
 &
b\x99s
)) {

93  (
f
);

98  (
NIL_FILP
);

99
	}
}

	@fs/fproc.hpp

6
EXTERN
 
	s\xe5roc
 {

7
mask_b\x99s

	m\xe5_umask
;

8 
\x9aode
 *
	m\xe5_w\xdckd\x9c
;

9 
\x9aode
 *
	m\xe5_ro\xd9d\x9c
;

10 
f\x9\x95
 *
	m\xe5_f\x9\x95
[
NR_FDS
];

11
uid

	m\xe5_\xbb\x\xabuid
;

12
uid

	m\xe5_effuid
;

13
gid

	m\xe5_\xbb\x\xabgid
;

14
gid

	m\xe5_effgid
;

15
dev_\xc4

	mfs_\x89y
;

16 
	m\xe5_fd
;

17 *
	m\xe5_buf\xe3r
;

18 
	m\xe5_nby\x8bs
;

19 
	m\xe5_su\xa5\x92ded
;

20 
	m\xe5_\xbbvived
;

21 
	m\xe5_\x8fsk
;

22 }
	g\xe5roc
[
NR_PROCS
];

25 
	#NOT_SUSPENDED
 0

	)

26 
	#SUSPENDED
 1

	)

27 
	#NOT_REVIVING
 0

	)

28 
	#REVIVING
 1

	)

	@fs/glo.hpp

1 #i\xe2de\xe0
EXTERN


2 
	#EXTERN


	)

6
EXTERN
 
\xe5roc
 *
\xe5
;

7
EXTERN
 
	gsu\xb3r_u\xa3r
;

8
EXTERN
 
	gd\xd\xa9_\xbb\xb6y
;

9
EXTERN
 
	gsu\xa5_cou\xc1
;

10
EXTERN
 
	g\xbbviv\x9ag
;

11
EXTERN

f\x9\x93_pos

	grdahedpos
;

12
EXTERN
 
\x9aode
 *
	grdahed_\x9aode
;

15
EXTERN

mes\xa7ge

	gm
;

16
EXTERN

mes\xa7ge

	gm1
;

17
EXTERN
 
	gwho
;

18
EXTERN
 
	gfs_\xff\x\xfb
;

19
EXTERN
 
	gu\xa3r_\xb7th
[
MAX_PATH
];

22
EXTERN
 
	g\x94r_code
;

24
EXTERN
 
	gf\xa1ack
[
FS_STACK_BYTES
];

	@fs/inode.cpp

15 
	~"\x9aode.h\xb5
"

16 
	~"../h/cڡ.h\xb5
"

17 
	~"../h/\x94r\xdc.h\xb5
"

18 
	~"../h/ty\xb3.h\xb5
"

19 
	~"buf.h\xb5
"

20 
	~"com\xb7t.h\xb5
"

21 
	~"cڡ.h\xb5
"

22 
	~"ex\x8b\xc1.h\xb5
"

23 
	~"f\x9\x93.h\xb5
"

24 
	~"\xe5roc.h\xb5
"

25 
	~<m\x9aix/fs/cڡ.h\xb5
>

27
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

28 
	~"glo.h\xb5
"

29 
	~"su\xb3r.h\xb5
"

30 
	~"ty\xb3.h\xb5
"

31 
	~<c\xa1ddef
>

32 
	~<c\xa1d\x9\xa9
>

37
PUBLIC
 
\x9aode
 *
	$g\x91_\x9aode
(
u\x9\xa916_t

dev
,

38
u\x9\xa916_t

numb
) {

43 
\x9aode
 *
r\x9d
, *
xp
;

46
xp
 =
nuαr
;

47 
r\x9d
 = &
\x9aode
[0];\x84\x9d < &\x9aode[
NR_INODES
];\x84ip++) {

48 i\xe0(
r\x9d
->
i_cou\xc1
 > 0) {

49 i\xe0(
r\x9d
->
i_dev
 =\xf0
dev
 &&\x84\x9d->
i_num
 =\xf0
numb
) {

51
r\x9d
->
i_cou\xc1
++;

52  (
r\x9d
);

55
xp
 =
r\x9d
;

59 i\xe0(
xp
 =\xf0
nuαr
) {

60
\x94r_code
 =
E\xbc\xdcCode
::
ENFILE
;

61  (
nuαr
);

65
xp
->
i_dev
 =
dev
;

66
xp
->
i_num
 =
numb
;

67
xp
->
i_cou\xc1
 = 1;

68 i\xe0(
dev
 !\xf0
kNoDev
)

69
	`rw_\x9aode
(
xp
,
READING
);

71  (
xp
);

72
	}
}

77
PUBLIC
 
	$put_\x9aode
(
\x9aode
 *
r\x9d
) {

83 i\xe0(
r\x9d
 =\xf0
nuαr
)

85 i\xe0(--
r\x9d
->
i_cou\xc1
 == 0) {

87 i\xe0((
\xa1\xa9ic_\xff\xa1
<>(
r\x9d
->
i_ƚks
\xe8&
BYTE
) == 0) {

89
	`\x8cun\xff\x8b
(
r\x9d
);

90
r\x9d
->
i_mode
 =
I_NOT_ALLOC
;

91
r\x9d
->
i_p\x9de
 =
NO_PIPE
;

92
	`\xe4\x93_\x9aode
(
r\x9d
->
i_dev
,\x84\x9d->
i_num
);

95 i\xe0(
r\x9d
->
i_d\x9\xf9
 =\xf0
DIRTY
)

96
	`rw_\x9aode
(
r\x9d
,
WRITING
);

98
	}
}

103
PUBLIC
 
\x9aode
 *
	$\x\xabloc_\x9aode
(
u\x9\xa916_t

dev
,

104
u\x9\xa916_t

b\x99s
) {

107 
\x9aode
 *
r\x9d
;

108 
su\xb3r_block
 *
\xa5
;

109 
maj\xdc
,
m\x9a\xdc
;

110
u\x9\xa916_t

numb
;

111
u\x9\xa916_t

b
;

112
b\x99_\xc4

	`\x\xabloc_b\x99
();

113 
\x9aode
 *
	`g\x91_\x9aode
();

114 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

117
\xa5
 =
	`g\x91_su\xb3r
(
dev
);

119
b
 =
	`\x\xabloc_b\x99
(
\xa5
->
s_im\xad
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa5->
s_n\x9aodes
 + 1), sp->
s_im\xad_blocks
,

120
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(0));

121 i\xe0(
b
 =\xf0
NO_BIT
) {

122
\x94r_code
 =
E\xbc\xdcCode
::
ENFILE
;

123
maj\xdc
 =
\xa1\xa9ic_\xff\xa1
<>(\xa1\xa9ic_\xff\xa1<
u\x9\xa916_t
>(
\xa5
->
s_dev
 >>
MAJOR
) &

124
BYTE
);

125
m\x9a\xdc
 =
\xa1\xa9ic_\xff\xa1
<>(\xa1\xa9ic_\xff\xa1<
u\x9\xa916_t
>(
\xa5
->
s_dev
 >>
MINOR
\xe8&
BYTE
);

126 i\xe0(
\xa5
->
s_dev
 =\xf0
ROOT_DEV
)

127
	`\xb4\x9\xa9f
("Out of i-nodes on\x84oot device (RAM disk)\n");

129
	`\xb4\x9\xa9f
("Ou\x88o\xe0i-node\xa0\xda devi\xfb %d/%d\n",
maj\xdc
,
m\x9a\xdc
);

130  (
nuαr
);

132
numb
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
b
);

135 i\xe0((
r\x9d
 =
	`g\x91_\x9aode
(
kNoDev
,
numb
)) ==

136
nuαr
) {

138
	`\xe4\x93_b\x99
(
\xa5
->
s_im\xad
,
b
);

141
r\x9d
->
i_mode
 =
b\x99s
;

142
r\x9d
->
i_ƚks
 =
\xa1\xa9ic_\xff\xa1
<
l\x9aks
>(0);

143
r\x9d
->
i_uid
 =
\xe5
->
\xe5_effuid
;

144
r\x9d
->
i_gid
 =
\xe5
->
\xe5_effgid
;

145
r\x9d
->
i_dev
 =
dev
;

152
	`w\x9de_\x9aode
(
r\x9d
);

153
	`\x9a\x99_ex\x8bnded_\x9aode
(
r\x9d
);

156  (
r\x9d
);

157
	}
}

162
PUBLIC
 
	$w\x9de_\x9aode
(
\x9aode
 *
r\x9d
) {

168 
i
;

169
\xbb\xae_time

	`\x\xe3ock_time
();

171
r\x9d
->
i_size
 = 0;

172
r\x9d
->
i_size64
 = 0;

173
r\x9d
->
i_ex\x8b\xc1s
 =
NIL_EXTENT
;

174
r\x9d
->
i_ex\x8b\xc1_cou\xc1
 = 0;

175
r\x9d
->
i_modtime
 =
	`\x\xe3ock_time
();

176
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

177 
i
 = 0; i <
NR_ZONE_NUMS
; i++)

178
r\x9d
->
i_z\xd\xab
[
i
] =
NO_ZONE
;

179
	}
}

184
PUBLIC
 

185
	$\xe4\x93_\x9aode
(
u\x9\xa916_t

dev
,

186
u\x9\xa916_t

numb
) {

189 
su\xb3r_block
 *
\xa5
;

190 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

193
\xa5
 =
	`g\x91_su\xb3r
(
dev
);

194
	`\xe4\x93_b\x99
(
\xa5
->
s_im\xad
,

195
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
numb
));

196
	}
}

201
PUBLIC
 
	$rw_\x9aode
(
\x9aode
 *
r\x9d
, 
rw_\xe6ag
) {

204 
buf
 *
bp
;

205 
d_\x9aode
 *
d\x9d
;

206 
su\xb3r_block
 *
\xa5
;

207
u\x9\xa916_t

b
;

208 
buf
 *
	`g\x91_block
();

209 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

212
\xa5
 =
	`g\x91_su\xb3r
(
r\x9d
->
i_dev
);

215
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
r\x9d
->
i_num
 - 1\xe8/
INODES_PER_BLOCK
) +

216
\xa5
->
s_im\xad_blocks
 + sp->
s_zm\xad_blocks
 + 2);

217
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

219
d\x9d
 =
bp
->
b_\x9aode
 + (
r\x9d
->
i_num
 - 1\xe8%
INODES_PER_BLOCK
;

222 i\xe0(
rw_\xe6ag
 =\xf0
READING
) {

223
	`c\xddy
((*)
r\x9d
, (*)
d\x9d
,
INODE_SIZE
);

225
	`c\xddy
((*)
d\x9d
, (*)
r\x9d
,
INODE_SIZE
);

226
bp
->
b_d\x9\xf9
 =
DIRTY
;

229
	`put_block
(
bp
,
BlockTy\xb3
::
Inode
);

230
r\x9d
->
i_d\x9\xf9
 =
CLEAN
;

231
	}
}

236
PUBLIC
 
	$dup_\x9aode
(
\x9aode
 *
\x9d
) {

241
\x9d
->
i_cou\xc1
++;

242
	}
}

	@fs/inode.hpp

10 
	~"../h/ty\xb3.h\xb5
"

11 
	~"ex\x8b\xc1.h\xb5
"

13
EXTERN
 
	s\x9aode
 {

14
mask_b\x99s

	mi_mode
;

15
uid

	mi_uid
;

16
f\x9\x93_pos

	mi_size
;

17
f\x9\x93_pos64

	mi_size64
;

18
ex\x8b\xc1
 *
	mi_ex\x8b\xc1s
;

19
u\x9\xa916_t

	mi_ex\x8b\xc1_cou\xc1
;

20
\xbb\xae_time

	mi_modtime
;

21
gid

	mi_gid
;

22
l\x9aks

	mi_ƚks
;

23
z\xd\xab_\xc4

	mi_z\xd\xab
[
NR_ZONE_NUMS
];

26
dev_\xc4

	mi_dev
;

27
\x9aode_\xc4

	mi_num
;

28
\x9at16_t

	mi_cou\xc1
;

29 
	mi_d\x9\xf9
;

30 
	mi_p\x9de
;

31 
	mi_mou\xc1
;

32 
	mi_\xa3ek
;

33 }
	g\x9aode
[
NR_INODES
];

37
\x9al\x9ae

cڡex\xb4
 
\x9aode
 *
	gNIL_INODE
 =
nuαr
;

40 
	#NO_PIPE
 0

	)

41 
	#I_PIPE
 1

	)

42 
	#NO_MOUNT
 0

	)

43 
	#I_MOUNT
 1

	)

44 
	#NO_SEEK
 0

	)

45 
	#ISEEK
 1

	)

	@fs/link.cpp

13 
	~"../h/cڡ.h\xb5
"

14 
	~"../h/\x94r\xdc.h\xb5
"

15 
	~"../h/ty\xb3.h\xb5
"

16 
	~"buf.h\xb5
"

17 
	~"com\xb7t.h\xb5
"

18 
	~"cڡ.h\xb5
"

19 
	~"f\x9\x93.h\xb5
"

20 
	~"\xe5roc.h\xb5
"

21 
	~"glo.h\xb5
"

22 
	~"\x9aode.h\xb5
"

23 
	~"\xb7\xbfm.h\xb5
"

24 
	~"ty\xb3.h\xb5
"

25 
	~<m\x9aix/fs/cڡ.h\xb5
>

27
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

32
PUBLIC
 
	$do_l\x9ak
() {

35 
\x9aode
 *
\x9d
, *
r\x9d
;

36 
r
;

37 
\xa1r\x9ag
[
NAME_SIZE
];

38 
\x9aode
 *
\xc3w_\x9d
;

39 
\x9aode
 *
	`adv\x\xaf\xfb
(), *
	`ϡ_d\x9c
(), *
	`\x97t_\xb7th
();

42 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me1
,
\xc7me1_\xcbngth
,
M1
\xe8!\xf0
OK
)

43  (
\x94r_code
);

44 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

45  (
\x94r_code
);

48
r
 =
OK
;

49 i\xe0((
r\x9d
->
i_ƚks
 &
BYTE
\xe8=\xf0
kMaxL\x9aks
)

50
r
 =
E\xbc\xdcCode
::
EMLINK
;

53 i\xe0(
r
 =\xf0
OK
)

54 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8=\xf0
I_DIRECTORY
 && !
su\xb3r_u\xa3r
)

55
r
 =
E\xbc\xdcCode
::
EPERM
;

58 i\xe0(
r
 !\xf0
OK
) {

59
	`put_\x9aode
(
r\x9d
);

60  (
r
);

64 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me2
,
\xc7me2_\xcbngth
,
M1
\xe8!\xf0
OK
)

65  (
\x94r_code
);

66 i\xe0((
\x9d
 =
	`ϡ_d\x9c
(
u\xa3r_\xb7th
,
\xa1r\x9ag
)\xe8=\xf0
NIL_INODE
)

67
r
 =
\x94r_code
;

70 i\xe0(
r
 =\xf0
OK
) {

71 i\xe0((
\xc3w_\x9d
 =
	`adv\x\xaf\xfb
(
\x9d
,
\xa1r\x9ag
)\xe8=\xf0
NIL_INODE
) {

72
r
 =
\x94r_code
;

73 i\xe0(
r
 =\xf0
E\xbc\xdcCode
::
ENOENT
)

74
r
 =
OK
;

76
	`put_\x9aode
(
\xc3w_\x9d
);

77
r
 =
E\xbc\xdcCode
::
EEXIST
;

82 i\xe0(
r
 =\xf0
OK
)

83 i\xe0(
r\x9d
->
i_dev
 !\xf0
\x9d
->i_dev)

84
r
 =
E\xbc\xdcCode
::
EXDEV
;

87 i\xe0(
r
 =\xf0
OK
)

88
r
 =
	`\xa3\xacch_d\x9c
(
\x9d
,
\xa1r\x9ag
, &
r\x9d
->
i_num
,
ENTER
);

91 i\xe0(
r
 =\xf0
OK
) {

92
r\x9d
->
i_ƚks
++;

93
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

97
	`put_\x9aode
(
r\x9d
);

98
	`put_\x9aode
(
\x9d
);

99  (
r
);

100
	}
}

105
PUBLIC
 
	$do_uƚk
() {

108 
\x9aode
 *
r\x9d
, *
\xbea\xa1_d\x9c_\xb1r
;

109 
r
;

110
\x9aode_\xc4

numb
;

111 
\xa1r\x9ag
[
NAME_SIZE
];

112 
\x9aode
 *
	`adv\x\xaf\xfb
(), *
	`ϡ_d\x9c
();

115 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

116  (
\x94r_code
);

117 i\xe0((
\xbea\xa1_d\x9c_\xb1r
 =
	`ϡ_d\x9c
(
u\xa3r_\xb7th
,
\xa1r\x9ag
)\xe8=\xf0
NIL_INODE
)

118  (
\x94r_code
);

121
r
 =
OK
;

122 i\xe0((
r\x9d
 =
	`adv\x\xaf\xfb
(
\xbea\xa1_d\x9c_\xb1r
,
\xa1r\x9ag
)\xe8=\xf0
NIL_INODE
)

123
r
 =
\x94r_code
;

126 i\xe0(
r
 !\xf0
OK
) {

127
	`put_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
);

128  (
r
);

132 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8=\xf0
I_DIRECTORY
 && !
su\xb3r_u\xa3r
)

133
r
 =
E\xbc\xdcCode
::
EPERM
;

134 i\xe0(
r
 =\xf0
OK
)

135
r
 =
	`\xa3\xacch_d\x9c
(
\xbea\xa1_d\x9c_\xb1r
,
\xa1r\x9ag
, &
numb
,
DELETE
);

137 i\xe0(
r
 =\xf0
OK
) {

138
r\x9d
->
i_ƚks
--;

139
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

143
	`put_\x9aode
(
r\x9d
);

144
	`put_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
);

145  (
r
);

146
	}
}

151
PUBLIC

	$\x8cun\xff\x8b
(
r\x9d
)

152 
\x9aode
 *
r\x9d
;

156 
f\x9\x93_pos

pos\x99i\xda
;

157 
z\xd\xab_ty\xb3

z\xd\xab_size
;

158 
block_\xc4

b
;

159 
z\xd\xab_\xc4

z
, *
iz
;

160 
s\xff\xcb
;

161 
buf
 *
bp
;

162 
dev_\xc4

dev
;

163 
buf
 *
	`g\x91_block
();

164
block_\xc4

	`\xbbad_m\xad
();

166
dev
 =
r\x9d
->
i_dev
;

167
s\xff\xcb
 =
	`s\xff\xcb_\xe7\xf9\xdc
(
r\x9d
);

168
z\xd\xab_size
 = (
z\xd\xab_ty\xb3
)
BLOCK_SIZE
 <<
s\xff\xcb
;

169 i\xe0(
r\x9d
->
i_p\x9de
 =\xf0
I_PIPE
)

170
	`com\xb7t_\xa3t_size
(
r\x9d
,
PIPE_SIZE
);

173 
pos\x99i\xda
 = 0;\x85os\x99i\xda <
	`com\xb7t_g\x91_size
(
r\x9d
);\x85os\x99i\xda +\xf0
z\xd\xab_size
) {

174 i\xe0((
b
 =
	`\xbbad_m\xad
(
r\x9d
,
pos\x99i\xda
)\xe8!\xf0
kNoBlock
) {

175
z
 = (
z\xd\xab_\xc4
)
b
 >>
s\xff\xcb
;

176
	`\xe4\x93_z\xd\xab
(
dev
,
z
);

181
	`\xe4\x93_z\xd\xab
(
dev
,
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
]);

182 i\xe0((
z
 =
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
 + 1]\xe8!\xf0
kNoZ\xd\xab
) {

183
b
 = (
block_\xc4
)
z
 <<
s\xff\xcb
;

184
bp
 =
	`g\x91_block
(
dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

185 
iz
 = &
bp
->
b_\x9ad
[0]; iz < &bp->b_\x9ad[
NR_INDIRECTS
]; iz++) {

186
	`\xe4\x93_z\xd\xab
(
dev
, *
iz
);

190
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

191
	`\xe4\x93_z\xd\xab
(
dev
,
z
);

198
	`w\x9de_\x9aode
(
r\x9d
);

199
	}
}

	@fs/main.cpp

10 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

11 
	~"../h/com.h\xb5
"

12 
	~"../h/cڡ.h\xb5
"

13 
	~"../h/\x94r\xdc.h\xb5
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"buf.h\xb5
"

16 
	~"cڡ.h\xb5
"

17 
	~"f\x9\x93.h\xb5
"

18 
	~"\xe5roc.h\xb5
"

19 
	~"glo.h\xb5
"

20 
	~"\x9aode.h\xb5
"

21 
	~"\xb7\xbfm.h\xb5
"

22 
	~"su\xb3r.h\xb5
"

23 
	~"ty\xb3.h\xb5
"

24 
	~<m\x9aix/fs/cڡ.h\xb5
>

26
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

27 
	~<c\xa1ddef
>

28 
	~<c\xa1d\x9\xa9
>

29 
	~<\x9a\x89y\xb3s.h
>

31 
	#M64K
 0xFFFF0000L

	)

32 
	#INFO
 2

	)

33 
	#MAX_RAM
 512

	)

41 
	$ma\x9a
() {

46 
\x94r\xdc
;

47 (*
\xff\xce_ve\xf9\xdc
[
NCALLS
])();

49
	`fs_\x9a\x99
();

52 
TRUE
) {

53
	`g\x91_w\xdck
();

55
\xe5
 = &
\xe5roc
[
who
];

56
su\xb3r_u\xa3r
 = (
\xe5
->
\xe5_effuid
 =\xf0
SU_UID
 ?
TRUE
 :
FALSE
);

57
d\xd\xa9_\xbb\xb6y
 =
FALSE
;

60 i\xe0(
fs_\xff\x\xfb
 < 0 || fs_\xff\xce >\xf0
NCALLS
)

61
\x94r\xdc
 =
E\xbc\xdcCode
::
E_BAD_CALL
;

63
\x94r\xdc
 = (*
\xff\xce_ve\xf9\xdc
[
fs_\xff\x\xfb
])();

66 i\xe0(
d\xd\xa9_\xbb\xb6y
)

68
	`\xbb\xb6y
(
who
,
\x94r\xdc
);

69 i\xe0(
rdahed_\x9aode
 !\xf0
NIL_INODE
)

70
	`\xbbad_ah\x97d
();

73
	}
}

78 
	$g\x91_w\xdck
() {

79 
\xe5roc
 *
\xbd
;

81 i\xe0(
\xbbviv\x9ag
 != 0) {

83 
\xbd
 = &
\xe5roc
[0];\x84\xb0< &\xe5roc[
NR_PROCS
];\x84p++)

84 i\xe0(
\xbd
->
\xe5_\xbbvived
 =\xf0
REVIVING
) {

85
who
 =
\xbd
 -
\xe5roc
;

86
fs_\xff\x\xfb
 =
\xbd
->
\xe5_fd
 &
BYTE
;

87
fd
 = (
\xbd
->
\xe5_fd
 >> 8\xe8&
BYTE
;

88
buf\xe3r
 =
\xbd
->
\xe5_buf\xe3r
;

89
nby\x8bs
 =
\xbd
->
\xe5_nby\x8bs
;

90
\xbd
->
\xe5_su\xa5\x92ded
 =
NOT_SUSPENDED
;

91
\xbd
->
\xe5_\xbbvived
 =
NOT_REVIVING
;

92
\xbbviv\x9ag
--;

95
	`\xb7nic
("g\x91_w\xdck couldn'\x88\xbbviv\x90\xaay\xdae",
NO_NUM
);

99 i\xe0(
	`\xbb\xfbive
(
ANY
, &
m
\xe8!\xf0
OK
)

100
	`\xb7nic
("f\xa0\xbb\xfbiv\x90\x94r\xdc",
NO_NUM
);

102
who
 =
m
.
m_sour\xfb
;

103
fs_\xff\x\xfb
 =
m
.
m_ty\xb3
;

104
	}
}

111 
	$\xbb\xb6y
(
whom
, 
\xbbsu\xc9
) {

113
\xbb\xb6y_ty\xb3
 =
\xbbsu\xc9
;

114
	`\xa3nd
(
whom
, &
m1
);

115
	}
}

120 
	$fs_\x9a\x99
() {

122
	`buf_po\xde
();

123
	`l\xdfd_\xbfm
();

124
	`l\xdfd_su\xb3r
();

127 
i
 = 0; i < 3; i += 2) {

128
\xe5
 = &
\xe5roc
[
i
];

129
r\x9d
 =
	`g\x91_\x9aode
(
ROOT_DEV
,
ROOT_INODE
);

130
\xe5
->
\xe5_ro\xd9d\x9c
 =
r\x9d
;

131
	`dup_\x9aode
(
r\x9d
);

132
\xe5
->
\xe5_w\xdckd\x9c
 =
r\x9d
;

133
\xe5
->
\xe5_\xbb\xaeuid
 = (
uid
)
SYS_UID
;

134
\xe5
->
\xe5_effuid
 = (
uid
)
SYS_UID
;

135
\xe5
->
\xe5_\xbb\xaegid
 = (
gid
)
SYS_GID
;

136
\xe5
->
\xe5_effgid
 = (
gid
)
SYS_GID
;

137
\xe5
->
\xe5_umask
 = ~0;

141 i\xe0(
ZONE_NUM_SIZE
 != 2)

142
	`\xb7nic
("ZONE_NUM_SIZE !\xf02",
NO_NUM
);

143 i\xe0(
SUPER_SIZE
 >
BLOCK_SIZE
)

144
	`\xb7nic
("SUPER_SIZE > BLOCK_SIZE",
NO_NUM
);

145 i\xe0(
BLOCK_SIZE
 %
INODE_SIZE
 != 0)

146
	`\xb7nic
("BLOCK_SIZE % INODE_SIZE !\xf00",
NO_NUM
);

147 i\xe0(
NR_FDS
 > 127)

148
	`\xb7nic
("NR_FDS > 127",
NO_NUM
);

149 i\xe0(
NR_BUFS
 < 6)

150
	`\xb7nic
("NR_BUFS < 6",
NO_NUM
);

151 i\xe0((
d_\x9aode
) != 32)

152
	`\xb7nic
("\x9aod\x90siz\x90!\xf032",
NO_NUM
);

153
	}
}

159 
	$buf_po\xde
() {

166 
buf
 *
bp
;

167
\xa1d
::
size_t

low_off
,
high_off
;

168
u\x9\xa964_t

\xdcg
;

169
u\x9\xa964_t

	`g\x91_ba\xa3
();

171
bufs_\x9a_u\xa3
 = 0;

172
\xe4\xdat
 = &
buf
[0];

173
\xbb\xac
 = &
buf
[
NR_BUFS
 - 1];

175 
bp
 = &
buf
[0]; b\xb0< &buf[
NR_BUFS
]; bp++) {

176
bp
->
b_block\xc4
 =
NO_BLOCK
;

177
bp
->
b_dev
 =
kNoDev
;

178
bp
->
b_\xc3xt
 = bp + 1;

179
bp
->
b_\xb4ev
 = bp - 1;

181
buf
[0].
b_\xb4ev
 =
NIL_BUF
;

182
buf
[
NR_BUFS
 - 1].
b_\xc3xt
 =
NIL_BUF
;

186 
bp
 = &
buf
[0]; b\xb0< &buf[
NR_BUFS
]; bp++)

187
bp
->
b_hash
 = bp->
b_\xc3xt
;

188
buf_hash
[
NO_BLOCK
 & (
NR_BUF_HASH
 - 1)] =
\xe4\xdat
;

189
	}
}

195 
	$l\xdfd_\xbfm
() {

200 
buf
 *
bp
, *
bp1
;

201
u\x9\xa932_t

cou\xc1
;

202
\x9at64_t

k_l\xdfded
;

203 
su\xb3r_block
 *
\xa5
;

204
u\x9\xa916_t

i
;

205
u\x9\xa964_t

\xbfm_\xfeicks
,
\x9a\x99_\xdcg
,
\x9a\x99_\x8bxt_\xfeicks
,
\x9a\x99_d\xa9a_\xfeicks
;

206
u\x9\xa964_t

d\xa9a_\xdcg
[
INFO
 + 2];

207 
buf
 *
	`g\x91_block
();

210
\x9a\x99_\xdcg
 =
d\xa9a_\xdcg
[
INFO
];

211
\x9a\x99_\x8bxt_\xfeicks
 =
d\xa9a_\xdcg
[
INFO
 + 1];

212
\x9a\x99_d\xa9a_\xfeicks
 =
d\xa9a_\xdcg
[
INFO
 + 2];

215
bp
 =
	`g\x91_block
(
BOOT_DEV
,
SUPER_BLOCK
,
IoMode
::
N\xdcm\x\xab
);

216
	`c\xddy
(
su\xb3r_block
,
bp
->
b_d\xa9a
, (super_block));

217
\xa5
 = &
su\xb3r_block
[0];

218 i\xe0(
\xa5
->
s_magic
 !\xf0
SUPER_MAGIC
)

219
	`\xb7nic
("Disk\x91\x8b i\xc0driv\x900 i\xa0nلo\xd9 f\x9e\x90sy\xa1em",
NO_NUM
);

221
cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa932_t
>(
\xa5
->
s_nz\xd\xabs
\xe8<< sp->
s_log_z\xd\xab_size
;

222 i\xe0(
cou\xc1
 >
MAX_RAM
)

223
	`\xb7nic
("RAM disk i\xa0to\xd8big. # block\xa0\xf0",
\xa1\xa9ic_\xff\xa1
<>(
cou\xc1
));

225
\xbfm_\xfeicks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
cou\xc1
\xe8* (
BLOCK_SIZE
 /
CLICK_SIZE
);

226
	`put_block
(
bp
,
BlockTy\xb3
::
Fu\x\xfbD\xa9a
);

231
m1
.
m_ty\xb3
 =
BRK2
;

234
m1
.
	`m1_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
\x9a\x99_\x8bxt_\xfeicks
);

235
m1
.
	`m1_i2
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
\x9a\x99_d\xa9a_\xfeicks
);

236
m1
.
	`m1_i3
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
\x9a\x99_\xdcg
 +
\x9a\x99_\x8bxt_\xfeicks
 +
\x9a\x99_d\xa9a_\xfeicks
 +
\xbfm_\xfeicks
);

238
m1
.
	`m1_p1
(\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\x9a\x99_\xdcg
));

239 i\xe0(
	`\xa3nd\xbbc
(
MM_PROC_NR
, &
m1
\xe8!\xf0
OK
)

240
	`\xb7nic
("FS C\xaa'\x88\xbbp܈t\xd8MM",
NO_NUM
);

243
m1
.
m_ty\xb3
 =
DISK_IOCTL
;

244
	`devi\xfb
(
m1
\xe8\xf0
RAM_DEV
;

246
	`pos\x99i\xda
(
m1
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
\x9a\x99_\xdcg
 +
\x9a\x99_\x8bxt_\xfeicks
 +
\x9a\x99_d\xa9a_\xfeicks
);

247
	`pos\x99i\xda
(
m1
\xe8\xf0pos\x99i\xda(m1\xe8<<
CLICK_SHIFT
;

248
	`cou\xc1
(
m1
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
cou\xc1
);

249 i\xe0(
	`\xa3nd\xbbc
(
MEM
, &
m1
\xe8!\xf0
OK
)

250
	`\xb7nic
("C\xaa'\x88\xbbp܈siz\x90t\xd8MEM",
NO_NUM
);

253
	`\xb4\x9\xa9f
("Loading RAM disk from\x84oot diskette. Loaded: 0K ");

254 
i
 = 0; i <
cou\xc1
; i++) {

255
bp
 =
	`g\x91_block
(
BOOT_DEV
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
i
),

256
IoMode
::
N\xdcm\x\xab
);

257
bp1
 =
	`g\x91_block
(
ROOT_DEV
,
i
,
IoMode
::
NoR\x97d
);

258
	`c\xddy
(
bp1
->
b_d\xa9a
,
bp
->b_d\xa9a,
BLOCK_SIZE
);

259
bp1
->
b_d\x9\xf9
 =
DIRTY
;

260
	`put_block
(
bp
,
BlockTy\xb3
::
IM\xad
);

261
	`put_block
(
bp1
,
BlockTy\xb3
::
IM\xad
);

263
k_l\xdfded
 = (
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
i
\xe8*
BLOCK_SIZE
) / 1024L;

264 i\xe0(
k_l\xdfded
 % 5 == 0)

265
	`\xb4\x9\xa9f
("\b\b\b\b\b%3"
PRId64
 "K %c",
k_l\xdfded
, 0);

268
	`\xb4\x9\xa9f
("\rRAM disk\x86oaded. Please\x84emove\x84oot diskette. \n\n");

269
	}
}

275 
	$l\xdfd_su\xb3r
() {

276 
su\xb3r_block
 *
\xa5
;

277 
\x9aode
 *
r\x9d
;

278 
\x9aode
 *
	`g\x91_\x9aode
();

282 
\xa5
 = &
su\xb3r_block
[0]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++)

283
\xa5
->
s_dev
 =
kNoDev
;

286
\xa5
 = &
su\xb3r_block
[0];

287
\xa5
->
s_dev
 =
ROOT_DEV
;

288
	`rw_su\xb3r
(
\xa5
,
READING
);

289
r\x9d
 =
	`g\x91_\x9aode
(
ROOT_DEV
,
ROOT_INODE
);

292 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_DIRECTORY
 ||\x84\x9d->
i_ƚks
 < 3 ||
\xa5
->
s_magic
 !\xf0
SUPER_MAGIC
)

293
	`\xb7nic
("Ro\xd9 f\x9e\x90sy\xa1em c\xdcru\xb1ed. Possibly wr\xdag disk\x91\x8b.",
NO_NUM
);

295
\xa5
->
s_imou\xc1
 =
r\x9d
;

296
	`dup_\x9aode
(
r\x9d
);

297
\xa5
->
s_isup
 =
r\x9d
;

298
\xa5
->
s_rd_\xd\xaey
 = 0;

299 i\xe0(
	`l\xdfd_b\x99_m\xads
(
ROOT_DEV
\xe8!\xf0
OK
)

300
	`\xb7nic
("\x9a\x99: c\xaa'\x88l\xdfd\x84o\xd9 b\x99 m\xads",
NO_NUM
);

301
	}
}

	@fs/misc.cpp

14 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

15 
	~"../h/com.h\xb5
"

16 
	~"../h/cڡ.h\xb5
"

17 
	~"../h/\x94r\xdc.h\xb5
"

18 
	~"../h/ty\xb3.h\xb5
"

19 
	~"buf.h\xb5
"

20 
	~"cڡ.h\xb5
"

21 
	~"dev.h\xb5
"

22 
	~"f\x9\x93.h\xb5
"

23 
	~"\xe5roc.h\xb5
"

24 
	~"glo.h\xb5
"

25 
	~"\x9aode.h\xb5
"

26 
	~"\xb7\xbfm.h\xb5
"

27 
	~"su\xb3r.h\xb5
"

28 
	~"ty\xb3.h\xb5
"

33 
	$do_dup
() {

36 
rfd
;

37 
\xe5roc
 *
r\xe5
;

38 
f\x9\x95
 *
dummy
;

39 
r
;

40 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

43
rfd
 =
fd
 & ~
DUP_MASK
;

44
r\xe5
 =
\xe5
;

45 i\xe0(
	`g\x91_f\x9\x95
(
rfd
\xe8=\xf0
NIL_FILP
)

46  (
\x94r_code
);

49 i\xe0(
fd
 =\xf0
rfd
) {

51 i\xe0((
r
 =
	`g\x91_fd
(0, &
fd2
, &
dummy
)\xe8!\xf0
OK
)

52  (
r
);

55 i\xe0(
fd2
 < 0 || fd2 >\xf0
NR_FDS
)

56  (
E\xbc\xdcCode
::
EBADF
);

57 i\xe0(
rfd
 =\xf0
fd2
)

58  (
fd2
);

59
fd
 =
fd2
;

60
	`do_\x\xe3o\xa3
();

64
r\xe5
->
\xe5_f\x9ep
[
fd2
] =\x84\xe5->\xe5_f\x9ep[
rfd
];

65
r\xe5
->
\xe5_f\x9ep
[
fd2
]->
f\x9\x95_cou\xc1
++;

66  (
fd2
);

67
	}
}

72 
	$do_sync
() {

75 
\x9aode
 *
r\x9d
;

76 
buf
 *
bp
;

77 
su\xb3r_block
 *
\xa5
;

78
dev_\xc4

d
;

79
\xbb\xae_time

	`\x\xe3ock_time
();

80 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

88
\xa5
 =
	`g\x91_su\xb3r
(
ROOT_DEV
);

89
\xa5
->
s_time
 =
	`\x\xe3ock_time
();

90 i\xe0(
\xa5
->
s_rd_\xd\xaey
 =\xf0
FALSE
)

91
\xa5
->
s_d\x9\xf9
 =
DIRTY
;

94 
r\x9d
 = &
\x9aode
[0];\x84\x9d < &\x9aode[
NR_INODES
];\x84ip++)

95 i\xe0(
r\x9d
->
i_cou\xc1
 > 0 &&\x84\x9d->
i_d\x9\xf9
 =\xf0
DIRTY
)

96
	`rw_\x9aode
(
r\x9d
,
WRITING
);

99 
\xa5
 = &
su\xb3r_block
[0]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++)

100 i\xe0(
\xa5
->
s_dev
 !\xf0
kNoDev
 && sp->
s_d\x9\xf9
 =\xf0
DIRTY
)

101
	`rw_su\xb3r
(
\xa5
,
WRITING
);

106 
bp
 = &
buf
[0]; b\xb0< &buf[
NR_BUFS
]; bp++) {

107
d
 =
bp
->
b_dev
;

108 i\xe0(
d
 !\xf0
kNoDev
 &&
bp
->
b_d\x9\xf9
 =\xf0
DIRTY
 && ((d >>
MINOR
\xe8&
BYTE
) == 0)

109
	`rw_block
(
bp
,
WRITING
);

112 
bp
 = &
buf
[0]; b\xb0< &buf[
NR_BUFS
]; bp++) {

113
d
 =
bp
->
b_dev
;

114 i\xe0(
d
 !\xf0
kNoDev
 &&
bp
->
b_d\x9\xf9
 =\xf0
DIRTY
 && ((d >>
MINOR
\xe8&
BYTE
) != 0)

115
	`rw_block
(
bp
,
WRITING
);

118  (
OK
);

119
	}
}

124 
	$do_f\xdck
() {

131 
\xe5roc
 *
\xfd
;

132 *
\xa5\x8c
, *
d\xb1r
;

133 
i
;

136 i\xe0(
who
 !\xf0
MM_PROC_NR
)

137  (
ERROR
);

140
\xa5\x8c
 = (*)&
\xe5roc
[
\xb7\xbb\xc1
];

141
d\xb1r
 = (*)&
\xe5roc
[
ch\x9ed
];

142
i
 = (
\xe5roc
);

143 
i
--)

144 *
d\xb1r
++ = *
\xa5\x8c
++;

147
\xfd
 = &
\xe5roc
[
ch\x9ed
];

148 
i
 = 0; i <
NR_FDS
; i++)

149 i\xe0(
\xfd
->
\xe5_f\x9ep
[
i
] !\xf0
NIL_FILP
)

150
\xfd
->
\xe5_f\x9ep
[
i
]->
f\x9\x95_cou\xc1
++;

153
	`dup_\x9aode
(
\xfd
->
\xe5_ro\xd9d\x9c
);

154
	`dup_\x9aode
(
\xfd
->
\xe5_w\xdckd\x9c
);

155  (
OK
);

156
	}
}

161 
	$do_ex\x99
() {

164 
i
,
ex\x99\x93
;

167 i\xe0(
who
 !\xf0
MM_PROC_NR
)

168  (
ERROR
);

171
\xe5
 = &
\xe5roc
[
\xa6\xd91
];

172
ex\x99\x93
 =
\xa6\xd91
;

175 
i
 = 0; i <
NR_FDS
; i++) {

176
fd
 =
i
;

177
	`do_\x\xe3o\xa3
();

181
	`put_\x9aode
(
\xe5
->
\xe5_ro\xd9d\x9c
);

182
	`put_\x9aode
(
\xe5
->
\xe5_w\xdckd\x9c
);

184 i\xe0(
\xe5
->
\xe5_su\xa5\x92ded
 =\xf0
SUSPENDED
) {

185 i\xe0(
\xe5
->
\xe5_\x8fsk
 =\xf0
XPIPE
)

186
su\xa5_cou\xc1
--;

187
\xb4o
 =
ex\x99\x93
;

188
	`do_u\xc5au\xa3
();

189
\xe5
->
\xe5_su\xa5\x92ded
 =
NOT_SUSPENDED
;

191  (
OK
);

192
	}
}

197 
	$do_\xa3t
() {

200 
\xe5roc
 *
t\xe5
;

203 i\xe0(
who
 !\xf0
MM_PROC_NR
)

204  (
ERROR
);

206
t\xe5
 = &
\xe5roc
[
\xa6\xd91
];

207 i\xe0(
fs_\xff\x\xfb
 =\xf0
SETUID
) {

208
t\xe5
->
\xe5_\xbb\xaeuid
 = (
uid
)
\xbb\xae_u\xa3r_id
;

209
t\xe5
->
\xe5_effuid
 = (
uid
)
eff_u\xa3r_id
;

211 i\xe0(
fs_\xff\x\xfb
 =\xf0
SETGID
) {

212
t\xe5
->
\xe5_effgid
 = (
gid
)
eff_g\xbd_id
;

213
t\xe5
->
\xe5_\xbb\xaegid
 = (
gid
)
\xbb\xae_g\xbd_id
;

215  (
OK
);

216
	}
}

221 
	$do_\xbbvive
() {

232 i\xe0(
who
 > 0)

233  (
E\xbc\xdcCode
::
EPERM
);

234
	`\xbbvive
(
	`\xbbp_\xb4oc_\xc4
(
m
),
	`\xbbp_\xa1\xa9us
(m));

235
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

236  (
OK
);

237
	}
}

	@fs/mount.cpp

8 
	~"../h/cڡ.h\xb5
"

9 
	~"../h/\x94r\xdc.h\xb5
"

10 
	~"../h/ty\xb3.h\xb5
"

11 
	~"buf.h\xb5
"

12 
	~"cڡ.h\xb5
"

13 
	~"f\x9\x93.h\xb5
"

14 
	~"\xe5roc.h\xb5
"

15 
	~"glo.h\xb5
"

16 
	~"\x9aode.h\xb5
"

17 
	~"\xb7\xbfm.h\xb5
"

18 
	~"su\xb3r.h\xb5
"

19 
	~"ty\xb3.h\xb5
"

24 
	$do_mou\xc1
() {

27 
\x9aode
 *
r\x9d
, *
ro\xd9_\x9d
;

28 
su\xb3r_block
 *
xp
, *
\xa5
;

29
dev_\xc4

dev
;

30
mask_b\x99s

b\x99s
;

31 
r
,
found
,
l\xdfded
;

32 
\x9aode
 *
	`g\x91_\x9aode
(), *
	`\x97t_\xb7th
();

33
dev_\xc4

	`\xc7me_to_dev
();

36 i\xe0(!
su\xb3r_u\xa3r
)

37  (
E\xbc\xdcCode
::
EPERM
);

40 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me1
,
\xc7me1_\xcbngth
,
M1
\xe8!\xf0
OK
)

41  (
\x94r_code
);

42 i\xe0((
dev
 =
	`\xc7me_to_dev
(
u\xa3r_\xb7th
)\xe8=\xf0
kNoDev
)

43  (
\x94r_code
);

46
\xa5
 =
NIL_SUPER
;

47
found
 =
FALSE
;

48 
xp
 = &
su\xb3r_block
[0]; x\xb0< &su\xb3r_block[
NR_SUPERS
]; xp++) {

49 i\xe0(
xp
->
s_dev
 =\xf0
dev
)

50
found
 =
TRUE
;

51 i\xe0(
xp
->
s_dev
 =\xf0
kNoDev
)

52
\xa5
 =
xp
;

54 i\xe0(
found
)

55  (
E\xbc\xdcCode
::
EBUSY
);

56 i\xe0(
\xa5
 =\xf0
NIL_SUPER
)

57  (
E\xbc\xdcCode
::
ENFILE
);

60
\xa5
->
s_dev
 =
dev
;

61
	`rw_su\xb3r
(
\xa5
,
READING
);

62
\xa5
->
s_dev
 =
dev
;

65 i\xe0(
\xa5
->
s_magic
 !\xf0
SUPER_MAGIC
 || sp->
s_n\x9aodes
 < 1 || sp->
s_nz\xd\xabs
 < 1 ||

66
\xa5
->
s_im\xad_blocks
 < 1 || sp->
s_zm\xad_blocks
 < 1) {

67
\xa5
->
s_dev
 =
kNoDev
;

68  (
E\xbc\xdcCode
::
EINVAL
);

72 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me2
,
\xc7me2_\xcbngth
,
M1
\xe8!\xf0
OK
) {

73
\xa5
->
s_dev
 =
kNoDev
;

74  (
\x94r_code
);

76 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
) {

77
\xa5
->
s_dev
 =
kNoDev
;

78  (
\x94r_code
);

82
r
 =
OK
;

83 i\xe0(
r\x9d
->
i_cou\xc1
 > 1)

84
r
 =
E\xbc\xdcCode
::
EBUSY
;

87
b\x99s
 =
r\x9d
->
i_mode
 &
I_TYPE
;

88 i\xe0(
b\x99s
 =\xf0
I_BLOCK_SPECIAL
 || b\x99\xa0=\xf0
I_CHAR_SPECIAL
)

89
r
 =
E\xbc\xdcCode
::
ENOTDIR
;

92
ro\xd9_\x9d
 =
NIL_INODE
;

93 i\xe0(
r
 =\xf0
OK
) {

94 i\xe0((
ro\xd9_\x9d
 =
	`g\x91_\x9aode
(
dev
,
ROOT_INODE
)\xe8=\xf0
NIL_INODE
)

95
r
 =
\x94r_code
;

97 i\xe0(
ro\xd9_\x9d
 !\xf0
NIL_INODE
 &&\x84o\xd9_\x9d->
i_mode
 == 0)

98
r
 =
E\xbc\xdcCode
::
EINVAL
;

101
l\xdfded
 =
FALSE
;

102 i\xe0(
r
 =\xf0
OK
) {

103 i\xe0(
	`l\xdfd_b\x99_m\xads
(
dev
\xe8!\xf0
OK
)

104
r
 =
E\xbc\xdcCode
::
ENFILE
;

105
l\xdfded
 =
TRUE
;

109 i\xe0((
r
 =\xf0
OK
\xe8&& ((
r\x9d
->
i_mode
 &
I_TYPE
\xe8=\xf0
I_DIRECTORY
) &&

110 ((
ro\xd9_\x9d
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_DIRECTORY
))

111
r
 =
E\xbc\xdcCode
::
ENOTDIR
;

114 i\xe0(
r
 !\xf0
OK
) {

115
	`put_\x9aode
(
r\x9d
);

116
	`put_\x9aode
(
ro\xd9_\x9d
);

117 i\xe0(
l\xdfded
)

118
	`u\xc6\xdfd_b\x99_m\xads
(
dev
);

119
	`do_sync
();

120
	`\x9av\x\xabid\xa9e
(
dev
);

121
\xa5
->
s_dev
 =
kNoDev
;

122  (
r
);

126
r\x9d
->
i_mou\xc1
 =
I_MOUNT
;

127
\xa5
->
s_imou\xc1
 =
r\x9d
;

128
\xa5
->
s_isup
 =
ro\xd9_\x9d
;

129
\xa5
->
s_rd_\xd\xaey
 =
rd_\xd\xaey
;

130  (
OK
);

131
	}
}

136 
	$do_umou\xc1
() {

139 
\x9aode
 *
r\x9d
;

140 
su\xb3r_block
 *
\xa5
, *
\xa51
;

141
dev_\xc4

dev
;

142 
cou\xc1
;

143
dev_\xc4

	`\xc7me_to_dev
();

146 i\xe0(!
su\xb3r_u\xa3r
)

147  (
E\xbc\xdcCode
::
EPERM
);

150 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

151  (
\x94r_code
);

152 i\xe0((
dev
 =
	`\xc7me_to_dev
(
u\xa3r_\xb7th
)\xe8=\xf0
kNoDev
)

153  (
\x94r_code
);

158
cou\xc1
 = 0;

159 
r\x9d
 = &
\x9aode
[0];\x84\x9d < &\x9aode[
NR_INODES
];\x84ip++)

160 i\xe0(
r\x9d
->
i_cou\xc1
 > 0 &&\x84\x9d->
i_dev
 =\xf0
dev
)

161
cou\xc1
 +\xf0
r\x9d
->
i_cou\xc1
;

162 i\xe0(
cou\xc1
 > 1)

163  (
E\xbc\xdcCode
::
EBUSY
);

166
\xa5
 =
NIL_SUPER
;

167 
\xa51
 = &
su\xb3r_block
[0]; sp1 < &su\xb3r_block[
NR_SUPERS
]; sp1++) {

168 i\xe0(
\xa51
->
s_dev
 =\xf0
dev
) {

169
\xa5
 =
\xa51
;

175 i\xe0(
\xa5
 !\xf0
NIL_SUPER
)

176 i\xe0(
	`u\xc6\xdfd_b\x99_m\xads
(
dev
\xe8!\xf0
OK
)

177
	`\xb7nic
("do_umou\xc1",
NO_NUM
);

178
	`do_sync
();

179
	`\x9av\x\xabid\xa9e
(
dev
);

180 i\xe0(
\xa5
 =\xf0
NIL_SUPER
)

181  (
E\xbc\xdcCode
::
EINVAL
);

184
\xa5
->
s_imou\xc1
->
i_mou\xc1
 =
NO_MOUNT
;

185
	`put_\x9aode
(
\xa5
->
s_imou\xc1
);

186
	`put_\x9aode
(
\xa5
->
s_isup
);

187
\xa5
->
s_imou\xc1
 =
NIL_INODE
;

188
\xa5
->
s_dev
 =
kNoDev
;

189  (
OK
);

190
	}
}

195
PRIVATE

dev_\xc4

	$\xc7me_to_dev
(
\xb7th
)

196 *
\xb7th
;

202 
\x9aode
 *
r\x9d
;

203 
dev_\xc4

dev
;

204 
\x9aode
 *
	`\x97t_\xb7th
();

207 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
\xb7th
)\xe8=\xf0
NIL_INODE
)

208  (
kNoDev
);

211 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_BLOCK_SPECIAL
) {

212
\x94r_code
 =
E\xbc\xdcCode
::
ENOTBLK
;

213
	`put_\x9aode
(
r\x9d
);

214  (
kNoDev
);

218
dev
 = (
dev_\xc4
)
r\x9d
->
i_z\xd\xab
[0];

219
	`put_\x9aode
(
r\x9d
);

220  (
dev
);

221
	}
}

	@fs/open.cpp

14 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

15 
	~"../h/cڡ.h\xb5
"

16 
	~"../h/\x94r\xdc.h\xb5
"

17 
	~"../h/ty\xb3.h\xb5
"

18 
	~"buf.h\xb5
"

19 
	~"com\xb7t.h\xb5
"

20 
	~"cڡ.h\xb5
"

21 
	~"f\x9\x93.h\xb5
"

22 
	~"\xe5roc.h\xb5
"

23 
	~"glo.h\xb5
"

24 
	~"\x9aode.h\xb5
"

25 
	~"\xb7\xbfm.h\xb5
"

26 
	~"ty\xb3.h\xb5
"

27 
	~<c\xa1ddef
>

28 
	~<c\xa1d\x9\xa9
>

30
PRIVATE
 
	gmode_m\xad
[] = {
R_BIT
,
W_BIT
, R_BIT | W_BIT, 0};

35 
	$do_\xfc\x97t
() {

38 
\x9aode
 *
r\x9d
;

39 
r
;

40 
mask_b\x99s

b\x99s
;

41 
f\x9\x95
 *
f\x9e_\xb1r
;

42 
f\x9\x93_d
;

43 
\x9aode
 *
	`\xc3w_node
();

46 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

47  (
\x94r_code
);

50 i\xe0((
r
 =
	`g\x91_fd
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
W_BIT
), &
f\x9\x93_d
, &
f\x9e_\xb1r
)\xe8!\xf0
OK
)

51  (
r
);

55
b\x99s
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
I_REGULAR
 | (
mode
 &
ALL_MODES
 &
\xe5
->
\xe5_umask
));

56
r\x9d
 =
	`\xc3w_node
(
u\xa3r_\xb7th
,
b\x99s
,
NO_ZONE
);

57
r
 =
\x94r_code
;

58 i\xe0(
r
 !\xf0
OK
 &&\x84 !\xf0
E\xbc\xdcCode
::
EEXIST
)

59  (
r
);

65 i\xe0(
r
 =\xf0
E\xbc\xdcCode
::
EEXIST
) {

67 
r\x9d
->
i_mode
 &
I_TYPE
) {

68 
I_REGULAR
:

69 i\xe0((
r
 =
	`f\xdcbidd\x92
(
r\x9d
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
W_BIT
), 0)) ==

70
OK
)

71
	`\x8cun\xff\x8b
(
r\x9d
);

74 
I_DIRECTORY
:

75
r
 =
E\xbc\xdcCode
::
EISDIR
;

78 
I_CHAR_SPECIAL
:

79 
I_BLOCK_SPECIAL
:

80 i\xe0((
r
 =
	`f\xdcbidd\x92
(
r\x9d
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
W_BIT
), 0)) !=

81
OK
)

85
r
 =
	`dev_ݒ
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]),
W_BIT
);

91 i\xe0(
r
 !\xf0
OK
) {

92
	`put_\x9aode
(
r\x9d
);

93  (
r
);

97
\xe5
->
\xe5_f\x9ep
[
f\x9\x93_d
] =
f\x9e_\xb1r
;

98
f\x9e_\xb1r
->
f\x9\x95_cou\xc1
 = 1;

99
f\x9e_\xb1r
->
f\x9\x95_\x9ao
 =
r\x9d
;

100  (
f\x9\x93_d
);

101
	}
}

106 
	$do_mknod
() {

109 
mask_b\x99s

b\x99s
;

111 i\xe0(!
su\xb3r_u\xa3r
)

112  (
E\xbc\xdcCode
::
EPERM
);

113 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me1
,
\xc7me1_\xcbngth
,
M1
\xe8!\xf0
OK
)

114  (
\x94r_code
);

116
b\x99s
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((
mode
 &
I_TYPE
\xe8| (mod\x90&
ALL_MODES
 &
\xe5
->
\xe5_umask
));

118
	`put_\x9aode
(
	`\xc3w_node
(
u\xa3r_\xb7th
,
b\x99s
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
addr
)));

119  (
\x94r_code
);

120
	}
}

126 
\x9aode
 *
	$\xc3w_node
(*
\xb7th
,
u\x9\xa916_t

b\x99s
, u\x9at16_\x88
z0
) {

137 
\x9aode
 *
\xbea\xa1_d\x9c_\xb1r
, *
r\x9d
;

138 
r
;

139 
\xa1r\x9ag
[
NAME_SIZE
];

140 
\x9aode
 *
	`\x\xabloc_\x9aode
(
u\x9\xa916_t
,

141
u\x9\xa916_t
);

142 
\x9aode
 *
	`adv\x\xaf\xfb
(inode *, const *);

143 
\x9aode
 *
	`ϡ_d\x9c
(const *, *);

146 i\xe0((
\xbea\xa1_d\x9c_\xb1r
 =
	`ϡ_d\x9c
(
\xb7th
,
\xa1r\x9ag
)\xe8=\xf0
nuαr
)

147  (
nuαr
);

150
r\x9d
 =
	`adv\x\xaf\xfb
(
\xbea\xa1_d\x9c_\xb1r
,
\xa1r\x9ag
);

151 i\xe0(
r\x9d
 =\xf0
nuαr
 &&
\x94r_code
 =\xf0
E\xbc\xdcCode
::
ENOENT
) {

154 i\xe0((
r\x9d
 =
	`\x\xabloc_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
->
i_dev
,
b\x99s
)\xe8=\xf0
nuαr
) {

156
	`put_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
);

157  (
nuαr
);

164
r\x9d
->
i_ƚks
++;

165
r\x9d
->
i_z\xd\xab
[0] =
z0
;

166
	`rw_\x9aode
(
r\x9d
,
WRITING
);

170 i\xe0((
r
 =
	`\xa3\xacch_d\x9c
(
\xbea\xa1_d\x9c_\xb1r
,
\xa1r\x9ag
, &
r\x9d
->
i_num
,
ENTER
)\xe8!\xf0
OK
) {

171
	`put_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
);

172
r\x9d
->
i_ƚks
--;

173
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

174
	`put_\x9aode
(
r\x9d
);

175
\x94r_code
 =
r
;

176  (
nuαr
);

181 i\xe0(
r\x9d
 !\xf0
nuαr
)

182
r
 =
E\xbc\xdcCode
::
EEXIST
;

184
r
 =
\x94r_code
;

188
	`put_\x9aode
(
\xbea\xa1_d\x9c_\xb1r
);

189
\x94r_code
 =
r
;

190  (
r\x9d
);

191
	}
}

196 
	$do_ݒ
() {

199 
\x9aode
 *
r\x9d
;

200 
f\x9\x95
 *
f\x9e_\xb1r
;

201 
r
;

202 
mask_b\x99s

b\x99s
;

203 
f\x9\x93_d
;

204 
\x9aode
 *
	`\x97t_\xb7th
();

210 i\xe0(
mode
 < 0 || mode > 2)

211  (
E\xbc\xdcCode
::
EINVAL
);

212 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

213  (
\x94r_code
);

214
b\x99s
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(

215
mode_m\xad
[
mode
]);

217 i\xe0((
r
 =
	`g\x91_fd
(
b\x99s
, &
f\x9\x93_d
, &
f\x9e_\xb1r
)\xe8!\xf0
OK
)

218  (
r
);

221 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
nuαr
)

222  (
\x94r_code
);

225 i\xe0((
r
 =
	`f\xdcbidd\x92
(
r\x9d
,
b\x99s
, 0)\xe8!\xf0
OK
) {

226
	`put_\x9aode
(
r\x9d
);

227  (
r
);

231 
r\x9d
->
i_mode
 &
I_TYPE
) {

232 
I_DIRECTORY
:

233 i\xe0(
b\x99s
 &
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
W_BIT
)) {

234
	`put_\x9aode
(
r\x9d
);

235  (
E\xbc\xdcCode
::
EISDIR
);

239 
I_CHAR_SPECIAL
:

242 i\xe0(
\xe5
->
fs_\x89y
 == 0)

243
\xe5
->
fs_\x89y
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]);

245
	`dev_ݒ
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]), s\x8ftic_\xff\xa1<>(
b\x99s
));

248 
I_BLOCK_SPECIAL
:

249
	`dev_ݒ
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]), s\x8ftic_\xff\xa1<>(
b\x99s
));

254
\xe5
->
\xe5_f\x9ep
[
f\x9\x93_d
] =
f\x9e_\xb1r
;

255
f\x9e_\xb1r
->
f\x9\x95_cou\xc1
 = 1;

256
f\x9e_\xb1r
->
f\x9\x95_\x9ao
 =
r\x9d
;

257  (
f\x9\x93_d
);

258
	}
}

263 
	$do_\x\xe3o\xa3
() {

266 
f\x9\x95
 *
rf\x9\x95
;

267 
\x9aode
 *
r\x9d
;

268 
rw
;

269 
mode_w\xdcd
;

270 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

273 i\xe0((
rf\x9\x95
 =
	`g\x91_f\x9\x95
(
fd
)\xe8=\xf0
nuαr
)

274  (
\x94r_code
);

275
r\x9d
 =
rf\x9\x95
->
f\x9\x95_\x9ao
;

278
mode_w\xdcd
 =
r\x9d
->
i_mode
 &
I_TYPE
;

279 i\xe0(
mode_w\xdcd
 =\xf0
I_CHAR_SPECIAL
 || mode_w\xdcd =\xf0
I_BLOCK_SPECIAL
) {

280 i\xe0(
mode_w\xdcd
 =\xf0
I_BLOCK_SPECIAL
) {

282
	`do_sync
();

284 i\xe0(
	`mou\xc1ed
(
r\x9d
\xe8=\xf0
\xa1\xa9ic_\xff\xa1
<>(
FALSE
))

285
	`\x9av\x\xabid\xa9e
(

286
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]));

288
	`dev_\x\xe3o\xa3
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]));

292 i\xe0(
rf\x9\x95
->
f\x9\x95_\x9ao
->
i_p\x9de
) {

293
rw
 = (
rf\x9\x95
->
f\x9\x95_mode
 &
R_BIT
 ?
WRITE
 :
READ
);

294
	`\xbb\xcba\xa3
(
rf\x9\x95
->
f\x9\x95_\x9ao
,
rw
,
NR_PROCS
);

298 i\xe0(--
rf\x9\x95
->
f\x9\x95_cou\xc1
 == 0)

299
	`put_\x9aode
(
rf\x9\x95
->
f\x9\x95_\x9ao
);

301
\xe5
->
\xe5_f\x9ep
[
fd
] =
nuαr
;

302  (
OK
);

303
	}
}

308 
	$do_l\xa3ek
() {

311 
f\x9\x95
 *
rf\x9\x95
;

312 
f\x9\x93_pos64

pos
;

313 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

316 i\xe0((
rf\x9\x95
 =
	`g\x91_f\x9\x95
(
ls_fd
)\xe8=\xf0
nuαr
)

317  (
\x94r_code
);

320 i\xe0(
rf\x9\x95
->
f\x9\x95_\x9ao
->
i_p\x9de
 =\xf0
I_PIPE
)

321  (
E\xbc\xdcCode
::
ESPIPE
);

325 
wh\x92\xfb
) {

327
pos
 =
off\xa3t
;

331
pos
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
rf\x9\x95
->
f\x9\x95_pos
\xe8+
off\xa3t
;

335
pos
 =
	`com\xb7t_g\x91_size
(
rf\x9\x95
->
f\x9\x95_\x9ao
\xe8+
off\xa3t
;

338  (
E\xbc\xdcCode
::
EINVAL
);

340 i\xe0(
pos
 < 0)

341  (
E\xbc\xdcCode
::
EINVAL
);

343
rf\x9\x95
->
f\x9\x95_\x9ao
->
i_\xa3ek
 =
ISEEK
;

346
rf\x9\x95
->
f\x9\x95_pos
 =
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
pos
);

350
\xbb\xb6y_l1
 =
pos
;

351  (
OK
);

352
	}
}

	@fs/param.hpp

2 
	#acc_time

m
.
	`m2_l1
()

	)

3 
	#addr

m
.
	`m1_i3
()

	)

4 
	#buf\xe3r

m
.
	`m1_p1
()

	)

5 
	#cd_\xe6ag

m
.
	`m1_i2
()

	)

6 
	#ch\x9ed

m
.
	`m1_i2
()

	)

7 
	#co_mode

m
.
	`m1_i1
()

	)

8 
	#eff_g\xbd_id

m
.
	`m1_i3
()

	)

9 
	#eff_u\xa3r_id

m
.
	`m1_i3
()

	)

10 
	#\x94ki

m
.
	`m1_p1
()

	)

11 
	#fd

m
.
	`m1_i1
()

	)

12 
	#fd2

m
.
	`m1_i2
()

	)

13 
	#io\xe6ags

m
.
	`m1_i3
()

	)

14 
	#group

m
.
	`m1_i3
()

	)

15 
	#\xbb\x\xab_g\xbd_id

m
.
	`m1_i2
()

	)

16 
	#ls_fd

m
.
	`m2_i1
()

	)

17 
	#mk_mode

m
.
	`m1_i2
()

	)

18 
	#mode

m
.
	`m3_i2
()

	)

19 
	#\xc7me

m
.
	`m3_p1
()

	)

20 
	#\xc7me1

m
.
	`m1_p1
()

	)

21 
	#\xc7me2

m
.
	`m1_p2
()

	)

22 
	#\xc7me_\xcbngth

m
.
	`m3_i1
()

	)

23 
	#\xc7me1_\xcbngth

m
.
	`m1_i1
()

	)

24 
	#\xc7me2_\xcbngth

m
.
	`m1_i2
()

	)

25 
	#nby\x8bs

m
.
	`m1_i2
()

	)

26 
	#off\xa3t

m
.
	`m2_l1
()

	)

27 
	#ow\xc3r

m
.
	`m1_i2
()

	)

28 
	#\xb7\xbb\xc1

m
.
	`m1_i1
()

	)

29 
	#\xb7th\xc7me

m
.
	`m3_\xff1
()

	)

30 
	#\xb4o

m
.
	`m1_i1
()

	)

31 
	#rd_\xd\xaey

m
.
	`m1_i3
()

	)

32 
	#\xbb\x\xab_u\xa3r_id

m
.
	`m1_i2
()

	)

33 
	#\xbbque\xa1

m
.
	`m1_i2
()

	)

34 
	#sig

m
.
	`m1_i2
()

	)

35 
	#\xa6\xd91

m
.
	`m1_i1
()

	)

36 
	#\x8d

m
.
	`m2_l1
()

	)

37 
	#upd\xa9e_time

m
.
	`m2_l2
()

	)

38 
	#utime_f\x9\x93

m
.
	`m2_p1
()

	)

39 
	#utime_\xcbngth

m
.
	`m2_i1
()

	)

40 
	#wh\x92\xfb

m
.
	`m2_i2
()

	)

43 
	#\xbb\xb6y_ty\xb3

m1
.
m_ty\xb3


	)

44 
	#\xbb\xb6y_l1

m1
.
	`m2_l1
()

	)

45 
	#\xbb\xb6y_i1

m1
.
	`m1_i1
()

	)

46 
	#\xbb\xb6y_i2

m1
.
	`m1_i2
()

	)

47 
	#\xbb\xb6y_t1

m1
.
	`m4_l1
()

	)

48 
	#\xbb\xb6y_t2

m1
.
	`m4_l2
()

	)

49 
	#\xbb\xb6y_t3

m1
.
	`m4_l3
()

	)

50 
	#\xbb\xb6y_t4

m1
.
	`m4_l4
()

	)

	@fs/path.cpp

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/\x94r\xdc.h\xb5
"

13 
	~"../h/ty\xb3.h\xb5
"

14 
	~"buf.h\xb5
"

15 
	~"com\xb7t.h\xb5
"

16 
	~"cڡ.h\xb5
"

17 
	~"f\x9\x93.h\xb5
"

18 
	~"\xe5roc.h\xb5
"

19 
	~"glo.h\xb5
"

20 
	~"\x9aode.h\xb5
"

21 
	~"su\xb3r.h\xb5
"

22 
	~"ty\xb3.h\xb5
"

23 
	~<m\x9aix/fs/cڡ.h\xb5
>

25
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

30 
\x9aode
 *
	$\x97t_\xb7th
(*
\xb7th
) {

36 
\x9aode
 *
ld\x9d
, *
r\x9d
;

37 
\xa1r\x9ag
[
NAME_SIZE
];

38 
\x9aode
 *
	`ϡ_d\x9c
(*
\xb7th
, 
\xa1r\x9ag
[
NAME_SIZE
]);

39 
\x9aode
 *
	`adv\x\xaf\xfb
(\x9aod\x90*
d\x9\xfd
, 
\xa1r\x9ag
[
NAME_SIZE
]);

42 i\xe0((
ld\x9d
 =
	`ϡ_d\x9c
(
\xb7th
,
\xa1r\x9ag
)\xe8=\xf0
NIL_INODE
)

43  (
NIL_INODE
);

46 i\xe0(
\xa1r\x9ag
[0] == '\0')

47  (
ld\x9d
);

50
r\x9d
 =
	`adv\x\xaf\xfb
(
ld\x9d
,
\xa1r\x9ag
);

51
	`put_\x9aode
(
ld\x9d
);

52  (
r\x9d
);

53
	}
}

58 
\x9aode
 *
	$ϡ_d\x9c
(*
\xb7th
, 
\xa1r\x9ag
[
NAME_SIZE
]) {

67 
\x9aode
 *
r\x9d
;

68 *
\xc3w_\xc7me
;

69 
\x9aode
 *
\xc3w_\x9d
;

70 
\x9aode
 *
	`adv\x\xaf\xfb
(\x9aod\x90*
d\x9\xfd
, 
\xa1r\x9ag
[
NAME_SIZE
]);

71 *
	`g\x91_\xc7me
(*
\xded_\xc7me
, 
\xa1r\x9ag
[
NAME_SIZE
]);

74
r\x9d
 = (*
\xb7th
 =\xf0'/' ?
\xe5
->
\xe5_ro\xd9d\x9c
 : fp->
\xe5_w\xdckd\x9c
);

75
	`dup_\x9aode
(
r\x9d
);

78 
TRUE
) {

80 i\xe0((
\xc3w_\xc7me
 =
	`g\x91_\xc7me
(
\xb7th
,
\xa1r\x9ag
)) == (*)0) {

81
	`put_\x9aode
(
r\x9d
);

82  (
NIL_INODE
);

84 i\xe0(*
\xc3w_\xc7me
 == '\0')

85  (
r\x9d
);

88
\xc3w_\x9d
 =
	`adv\x\xaf\xfb
(
r\x9d
,
\xa1r\x9ag
);

89
	`put_\x9aode
(
r\x9d
);

90 i\xe0(
\xc3w_\x9d
 =\xf0
NIL_INODE
)

91  (
NIL_INODE
);

94
\xb7th
 =
\xc3w_\xc7me
;

95
r\x9d
 =
\xc3w_\x9d
;

97
	}
}

102 *
	$g\x91_\xc7me
(*
\xded_\xc7me
, 
\xa1r\x9ag
[
NAME_SIZE
]) {

112 
c
;

113 *
\xc5
, *
\xbap
;

115
\xc5
 =
\xa1r\x9ag
;

116
\xbap
 =
\xded_\xc7me
;

117 (
c
 = *
\xbap
) == '/')

118
\xbap
++;

121 
\xbap
 < &
u\xa3r_\xb7th
[
MAX_PATH
] &&
c
 != '/' && c != '\0') {

122 i\xe0(
\xc5
 < &
\xa1r\x9ag
[
NAME_SIZE
])

123 *
\xc5
++ =
c
;

124
c
 = *++
\xbap
;

128 
c
 =\xf0'/' &&
\xbap
 < &
u\xa3r_\xb7th
[
MAX_PATH
])

129
c
 = *++
\xbap
;

132 
\xc5
 < &
\xa1r\x9ag
[
NAME_SIZE
])

133 *
\xc5
++ = '\0';

135 i\xe0(
\xbap
 >\xf0&
u\xa3r_\xb7th
[
MAX_PATH
]) {

136
\x94r_code
 =
E\xbc\xdcCode
::
E_LONG_STRING
;

139  (
\xbap
);

140
	}
}

145 
\x9aode
 *
	$adv\x\xaf\xfb
(
\x9aode
 *
d\x9\xfd
, 
\xa1r\x9ag
[
NAME_SIZE
]) {

151 
\x9aode
 *
r\x9d
;

152 
\x9aode
 *
r\x9d2
;

153 
su\xb3r_block
 *
\xa5
;

154 
r
;

155
dev_\xc4

m\xc1_dev
;

156
\x9aode_\xc4

numb
;

157 
\x9aode
 *
	`g\x91_\x9aode
();

160 i\xe0(
\xa1r\x9ag
[0] == '\0')

161  (
	`g\x91_\x9aode
(
d\x9\xfd
->
i_dev
, d\x9cp->
i_num
));

164 i\xe0((
r
 =
	`\xa3\xacch_d\x9c
(
d\x9\xfd
,
\xa1r\x9ag
, &
numb
,
LOOK_UP
)\xe8!\xf0
OK
) {

165
\x94r_code
 =
r
;

166  (
NIL_INODE
);

170 i\xe0((
r\x9d
 =
	`g\x91_\x9aode
(
d\x9\xfd
->
i_dev
,
numb
)\xe8=\xf0
NIL_INODE
)

171  (
NIL_INODE
);

173 i\xe0(
r\x9d
->
i_num
 =\xf0
ROOT_INODE
)

174 i\xe0(
d\x9\xfd
->
i_num
 =\xf0
ROOT_INODE
) {

175 i\xe0(
\xa1r\x9ag
[1] == '.') {

176 
\xa5
 = &
su\xb3r_block
[1]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++) {

177 i\xe0(
\xa5
->
s_dev
 =\xf0
r\x9d
->
i_dev
) {

181
	`put_\x9aode
(
r\x9d
);

182
m\xc1_dev
 =
\xa5
->
s_imou\xc1
->
i_dev
;

183
r\x9d2
 =
	`g\x91_\x9aode
(
m\xc1_dev
,
\xa5
->
s_imou\xc1
->
i_num
);

184
r\x9d
 =
	`adv\x\xaf\xfb
(
r\x9d2
,
\xa1r\x9ag
);

185
	`put_\x9aode
(
r\x9d2
);

195 
r\x9d
->
i_mou\xc1
 =\xf0
I_MOUNT
) {

197 
\xa5
 = &
su\xb3r_block
[0]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++) {

198 i\xe0(
\xa5
->
s_imou\xc1
 =\xf0
r\x9d
) {

202
	`put_\x9aode
(
r\x9d
);

203
r\x9d
 =
	`g\x91_\x9aode
(
\xa5
->
s_dev
,
ROOT_INODE
);

208  (
r\x9d
);

209
	}
}

214 
	$\xa3\xacch_d\x9c
(
\x9aode
 *
ld\x9c_\xb1r
, 
\xa1r\x9ag
[
NAME_SIZE
],
\x9aode_\xc4
 *
numb
, 
\xe6ag
) {

221 
d\x9c_\xa1ru\xf9
 *
dp
;

222 
buf
 *
bp
;

223 
r
;

224
mask_b\x99s

b\x99s
;

225
f\x9\x93_pos

pos
;

226 
\xc3w_\xa6\xd9s
,
\xded_\xa6\xd9s
;

227
block_\xc4

b
;

228 
e_h\x99
;

229 
buf
 *
	`g\x91_block
(), *
	`\xc3w_block
();

230
block_\xc4

	`\xbbad_m\xad
();

231
\xbb\xae_time

	`\x\xe3ock_time
();

234 i\xe0((
ld\x9c_\xb1r
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_DIRECTORY
)

235  (
E\xbc\xdcCode
::
ENOTDIR
);

236
b\x99s
 = (
\xe6ag
 =\xf0
LOOK_UP
 ?
X_BIT
 :
W_BIT
 | X_BIT);

237 i\xe0((
r
 =
	`f\xdcbidd\x92
(
ld\x9c_\xb1r
,
b\x99s
, 0)\xe8!\xf0
OK
)

238  (
r
);

241
\xded_\xa6\xd9s
 =
	`com\xb7t_g\x91_size
(
ld\x9c_\xb1r
\xe8/
DIR_ENTRY_SIZE
;

242
\xc3w_\xa6\xd9s
 = 0;

243
e_h\x99
 =
FALSE
;

244 
pos
 = 0;\x85o\xa0<
	`com\xb7t_g\x91_size
(
ld\x9c_\xb1r
);\x85o\xa0+\xf0
BLOCK_SIZE
) {

245
b
 =
	`\xbbad_m\xad
(
ld\x9c_\xb1r
,
pos
);

248
bp
 =
	`g\x91_block
(
ld\x9c_\xb1r
->
i_dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

251 
dp
 = &
bp
->
b_d\x9c
[0]; d\xb0< &bp->b_d\x9c[
NR_DIR_ENTRIES
]; dp++) {

252 i\xe0(++
\xc3w_\xa6\xd9s
 >
\xded_\xa6\xd9s
) {

253 i\xe0(
\xe6ag
 =\xf0
ENTER
)

254
e_h\x99
 =
TRUE
;

257 i\xe0(
\xe6ag
 !\xf0
ENTER
 &&
dp
->
d_\x9aum
 !\xf00 &&
	`cmp_\xa1r\x9ag
(dp->
d_\xc7me
,
\xa1r\x9ag
,
NAME_SIZE
)) {

259 i\xe0(
\xe6ag
 =\xf0
DELETE
) {

260
dp
->
d_\x9aum
 = 0;

261
bp
->
b_d\x9\xf9
 =
DIRTY
;

262
ld\x9c_\xb1r
->
i_modtime
 =
	`\x\xe3ock_time
();

264 *
numb
 =
dp
->
d_\x9aum
;

265
	`put_block
(
bp
,
BlockTy\xb3
::
D\x9\xfb\xf9\xdcy
);

266  (
OK
);

270 i\xe0(
\xe6ag
 =\xf0
ENTER
 &&
dp
->
d_\x9aum
 == 0) {

271
e_h\x99
 =
TRUE
;

277 i\xe0(
e_h\x99
)

279
	`put_block
(
bp
,
BlockTy\xb3
::
D\x9\xfb\xf9\xdcy
);

283 i\xe0(
\xe6ag
 !\xf0
ENTER
)

284  (
E\xbc\xdcCode
::
ENOENT
);

289 i\xe0(
e_h\x99
 =\xf0
FALSE
) {

290
\xc3w_\xa6\xd9s
++;

291 i\xe0(
\xc3w_\xa6\xd9s
 == 0)

292  (
E\xbc\xdcCode
::
EFBIG
);

293 i\xe0((
bp
 =
	`\xc3w_block
(
ld\x9c_\xb1r
,
	`com\xb7t_g\x91_size
\xd6d\x9c_\xb1r))\xe8=\xf0
NIL_BUF
)

294  (
\x94r_code
);

295
dp
 = &
bp
->
b_d\x9c
[0];

299
	`c\xddy
(
dp
->
d_\xc7me
,
\xa1r\x9ag
,
NAME_SIZE
);

300
dp
->
d_\x9aum
 = *
numb
;

301
bp
->
b_d\x9\xf9
 =
DIRTY
;

302
	`put_block
(
bp
,
BlockTy\xb3
::
D\x9\xfb\xf9\xdcy
);

303
ld\x9c_\xb1r
->
i_modtime
 =
	`\x\xe3ock_time
();

304 i\xe0(
\xc3w_\xa6\xd9s
 >
\xded_\xa6\xd9s
)

305
	`com\xb7t_\xa3t_size
(
ld\x9c_\xb1r
, (
f\x9\x93_pos
)
\xc3w_\xa6\xd9s
 *
DIR_ENTRY_SIZE
);

306  (
OK
);

307
	}
}

	@fs/pipe.cpp

18 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

19 
	~"../h/com.h\xb5
"

20 
	~"../h/cڡ.h\xb5
"

21 
	~"../h/\x94r\xdc.h\xb5
"

22 
	~"../h/sig\xc7l.h\xb5
"

23 
	~"../h/ty\xb3.h\xb5
"

24 
	~"com\xb7t.h\xb5
"

25 
	~"cڡ.h\xb5
"

26 
	~"f\x9\x93.h\xb5
"

27 
	~"\xe5roc.h\xb5
"

28 
	~"glo.h\xb5
"

29 
	~"\x9aode.h\xb5
"

30 
	~"\xb7\xbfm.h\xb5
"

31 
	~"ty\xb3.h\xb5
"

33
PRIVATE

mes\xa7ge

	gmess
;

38
PUBLIC
 
	$do_p\x9de
() {

41 
\xe5roc
 *
r\xe5
;

42 
\x9aode
 *
r\x9d
;

43 
r
;

44
dev_\xc4

devi\xfb
;

45 
f\x9\x95
 *
f\x9e_\xb1r0
, *
f\x9e_\xb1r1
;

46 
f\x9e_des
[2];

47 
\x9aode
 *
	`\x\xabloc_\x9aode
();

50
r\xe5
 =
\xe5
;

51 i\xe0((
r
 =
	`g\x91_fd
(
R_BIT
, &
f\x9e_des
[0], &
f\x9e_\xb1r0
)\xe8!\xf0
OK
)

52  (
r
);

53
r\xe5
->
\xe5_f\x9ep
[
f\x9e_des
[0]] =
f\x9e_\xb1r0
;

54
f\x9e_\xb1r0
->
f\x9\x95_cou\xc1
 = 1;

55 i\xe0((
r
 =
	`g\x91_fd
(
W_BIT
, &
f\x9e_des
[1], &
f\x9e_\xb1r1
)\xe8!\xf0
OK
) {

56
r\xe5
->
\xe5_f\x9ep
[
f\x9e_des
[0]] =
NIL_FILP
;

57
f\x9e_\xb1r0
->
f\x9\x95_cou\xc1
 = 0;

58  (
r
);

60
r\xe5
->
\xe5_f\x9ep
[
f\x9e_des
[1]] =
f\x9e_\xb1r1
;

61
f\x9e_\xb1r1
->
f\x9\x95_cou\xc1
 = 1;

64
devi\xfb
 =
r\xe5
->
\xe5_w\xdckd\x9c
->
i_dev
;

65 i\xe0((
r\x9d
 =
	`\x\xabloc_\x9aode
(
devi\xfb
,
I_REGULAR
)\xe8=\xf0
NIL_INODE
) {

66
r\xe5
->
\xe5_f\x9ep
[
f\x9e_des
[0]] =
NIL_FILP
;

67
f\x9e_\xb1r0
->
f\x9\x95_cou\xc1
 = 0;

68
r\xe5
->
\xe5_f\x9ep
[
f\x9e_des
[1]] =
NIL_FILP
;

69
f\x9e_\xb1r1
->
f\x9\x95_cou\xc1
 = 0;

70  (
\x94r_code
);

73
r\x9d
->
i_p\x9de
 =
I_PIPE
;

74
f\x9e_\xb1r0
->
f\x9\x95_\x9ao
 =
r\x9d
;

75
	`dup_\x9aode
(
r\x9d
);

76
f\x9e_\xb1r1
->
f\x9\x95_\x9ao
 =
r\x9d
;

77
	`rw_\x9aode
(
r\x9d
,
WRITING
);

78
\xbb\xb6y_i1
 =
f\x9e_des
[0];

79
\xbb\xb6y_i2
 =
f\x9e_des
[1];

80  (
OK
);

81
	}
}

86
PUBLIC
 
	$p\x9de_check
(
r\x9d
,
rw_\xe6ag
,
v\x9cg\x9a
,
by\x8bs
,
pos\x99i\xda
)

87 
\x9aode
 *
r\x9d
;

88 
rw_\xe6ag
;

89 
v\x9cg\x9a
;

90 
by\x8bs
;

91 
f\x9\x93_pos
 *
pos\x99i\xda
;

99 
f\x9\x95
 *
	`f\x9ad_f\x9\x95
();

102 i\xe0(
rw_\xe6ag
 =\xf0
READING
) {

103 i\xe0(*
pos\x99i\xda
 >\xf0
	`com\xb7t_g\x91_size
(
r\x9d
)) {

105 i\xe0(
	`f\x9ad_f\x9\x95
(
r\x9d
,
W_BIT
\xe8!\xf0
NIL_FILP
) {

107 i\xe0(
v\x9cg\x9a
)

108
	`su\xa5\x92d
(
XPIPE
);

111 i\xe0(
su\xa5_cou\xc1
 > 0)

112
	`\xbb\xcba\xa3
(
r\x9d
,
WRITE
, 1);

118 i\xe0(
by\x8bs
 >
PIPE_SIZE
)

119  (
E\xbc\xdcCode
::
EFBIG
);

120 i\xe0(
	`f\x9ad_f\x9\x95
(
r\x9d
,
R_BIT
\xe8=\xf0
NIL_FILP
) {

122
mess
.
m_ty\xb3
 =
KSIG
;

123
mess
.
PROC1
 =
\xe5
 -
\xe5roc
;

124
mess
.
SIG_MAP
 = 1 << (
SIGPIPE
 - 1);

125
	`\xa3nd
(
MM_PROC_NR
, &
mess
);

126  (
E\xbc\xdcCode
::
EPIPE
);

129 i\xe0(*
pos\x99i\xda
 +
by\x8bs
 >
PIPE_SIZE
) {

130
	`su\xa5\x92d
(
XPIPE
);

135 i\xe0(*
pos\x99i\xda
 == 0)

136
	`\xbb\xcba\xa3
(
r\x9d
,
READ
, 1);

140
	}
}

145
PUBLIC

	$su\xa5\x92d
(
\x8fsk
)

146 
\x8fsk
;

154 i\xe0(
\x8fsk
 =\xf0
XPIPE
)

155
su\xa5_cou\xc1
++;

156
\xe5
->
\xe5_su\xa5\x92ded
 =
SUSPENDED
;

157
\xe5
->
\xe5_fd
 =
fd
 << 8 |
fs_\xff\x\xfb
;

158
\xe5
->
\xe5_buf\xe3r
 =
buf\xe3r
;

159
\xe5
->
\xe5_nby\x8bs
 =
nby\x8bs
;

160
\xe5
->
\xe5_\x8fsk
 = -
\x8fsk
;

161
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

162
	}
}

167
PUBLIC

	$\xbb\xcba\xa3
(
\x9d
,
\xff\xce_\xc4
,
cou\xc1
)

168 
\x9aode
 *
\x9d
;

169 
\xff\xce_\xc4
;

170 
cou\xc1
;

177 
\xe5roc
 *
\xbd
;

180 
\xbd
 = &
\xe5roc
[0];\x84\xb0< &\xe5roc[
NR_PROCS
];\x84p++) {

181 i\xe0(
\xbd
->
\xe5_su\xa5\x92ded
 =\xf0
SUSPENDED
 && (\xbd->
\xe5_fd
 &
BYTE
\xe8=\xf0
\xff\xce_\xc4
 &&

182
\xbd
->
\xe5_f\x9ep
[\xbd->
\xe5_fd
 >> 8]->
f\x9\x95_\x9ao
 =\xf0
\x9d
) {

183
	`\xbbvive
(
\xbd
 -
\xe5roc
, 0);

184
su\xa5_cou\xc1
--;

185 i\xe0(--
cou\xc1
 == 0)

189
	}
}

194
PUBLIC

	$\xbbvive
(
\xb4oc_\xc4
,
by\x8bs
)

195 
\xb4oc_\xc4
;

196 
by\x8bs
;

202 
\xe5roc
 *
r\xe5
;

204 i\xe0(
\xb4oc_\xc4
 < 0 ||\x85roc_\xc4 >\xf0
NR_PROCS
)

205
	`\xb7nic
("\xbbviv\x90\x94r",
\xb4oc_\xc4
);

206
r\xe5
 = &
\xe5roc
[
\xb4oc_\xc4
];

207 i\xe0(
r\xe5
->
\xe5_su\xa5\x92ded
 =\xf0
NOT_SUSPENDED
)

215 i\xe0(
r\xe5
->
\xe5_\x8fsk
 =\xf0
XPIPE
) {

217
r\xe5
->
\xe5_\xbbvived
 =
REVIVING
;

218
\xbbviv\x9ag
++;

221
r\xe5
->
\xe5_su\xa5\x92ded
 =
NOT_SUSPENDED
;

222
r\xe5
->
\xe5_nby\x8bs
 =
by\x8bs
;

223
	`\xbb\xb6y
(
\xb4oc_\xc4
,
by\x8bs
);

225
	}
}

230
PUBLIC
 
	$do_u\xc5au\xa3
() {

235 
\xe5roc
 *
r\xe5
;

236 
\xb4oc_\xc4
,
\x8fsk
;

237 
f\x9\x95
 *
f
;

238
dev_\xc4

dev
;

239 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

241 i\xe0(
who
 >
MM_PROC_NR
)

242  (
E\xbc\xdcCode
::
EPERM
);

243
\xb4oc_\xc4
 =
\xb4o
;

244 i\xe0(
\xb4oc_\xc4
 < 0 ||\x85roc_\xc4 >\xf0
NR_PROCS
)

245
	`\xb7nic
("u\xc5au\xa3\x83\xbc 1",
\xb4oc_\xc4
);

246
r\xe5
 = &
\xe5roc
[
\xb4oc_\xc4
];

247 i\xe0(
r\xe5
->
\xe5_su\xa5\x92ded
 =\xf0
NOT_SUSPENDED
)

248  (
OK
);

249
\x8fsk
 = -
r\xe5
->
\xe5_\x8fsk
;

251 i\xe0(
\x8fsk
 !\xf0
XPIPE
) {

252
f
 =
	`g\x91_f\x9\x95
(
r\xe5
->
\xe5_fd
);

253
dev
 =
f
->
f\x9\x95_\x9ao
->
i_z\xd\xab
[0];

254
	`\x89y_l\x9\xab
(
mess
\xe8\xf0(
dev
 >>
MINOR
\xe8&
BYTE
;

255
	`\xb4oc_\xc4
(
mess
\xe8\xf0
\xb4oc_\xc4
;

256
mess
.
m_ty\xb3
 =
CANCEL
;

257 i\xe0(
	`\xa3nd\xbbc
(
\x8fsk
, &
mess
\xe8!\xf0
OK
)

258
	`\xb7nic
("u\xc5au\xa3\x83\xbc 2",
NO_NUM
);

259 
	`\xbbp_\xb4oc_\xc4
(
mess
\xe8!\xf0
\xb4oc_\xc4
) {

260
	`\xbbvive
(
	`\xbbp_\xb4oc_\xc4
(
mess
),
	`\xbbp_\xa1\xa9us
(mess));

261 i\xe0(
	`\xbb\xfbive
(
\x8fsk
, &
m
\xe8!\xf0
OK
)

262
	`\xb7nic
("u\xc5au\xa3\x83\xbc 3",
NO_NUM
);

264
	`\xbbvive
(
\xb4oc_\xc4
,
E\xbc\xdcCode
::
EINTR
);

267  (
OK
);

268
	}
}

	@fs/protect.cpp

12 
	~"../../\x9a\x\xe3ude/m\x9aix/fs_\x94r\xdc.h\xb5
"

13 
	~"../h/cڡ.h\xb5
"

14 
	~"../h/\x94r\xdc.h\xb5
"

15 
	~"../h/ty\xb3.h\xb5
"

16 
	~"buf.h\xb5
"

17 
	~"cڡ.h\xb5
"

18 
	~"f\x9\x93.h\xb5
"

19 
	~"\xe5roc.h\xb5
"

20 
	~"glo.h\xb5
"

21 
	~"\x9aode.h\xb5
"

22 
	~"\xb7\xbfm.h\xb5
"

23 
	~"su\xb3r.h\xb5
"

24 
	~"ty\xb3.h\xb5
"

25 
	~<c\xa1d\x9\xa9
>

26 
	~<ex\xb3\xf9ed
>

27 
	~<sy\xa1em_\x94r\xdc
>

30 
	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
\xbbad_\xdaly
(
\x9aode
 *
\x9d
);

31
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
f\xdcbidd\x92
(
\x9aode
 *
r\x9d
,
u\x9\xa916_t

ac\xfbss_des\x9\xfbd
,

32 
\xbb\xae_uid
);

37
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
	$do_chmod
() {

40 
\x9aode
 *
r\x9d
;

41 
r
;

42 
\x9aode
 *
	`\x97t_\xb7th
();

45 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

46 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

47 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

48 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

53 i\xe0(
r\x9d
->
i_uid
 !\xf0
\xe5
->
\xe5_effuid
 && !
su\xb3r_u\xa3r
) {

54
	`put_\x9aode
(
r\x9d
);

55 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
E\xbc\xdcCode
::
EPERM
));

58 aut\xd8
\xbbad_\xdaly_\xbbs
 =
	`\xbbad_\xd\xaey
(
r\x9d
);

59 i\xe0(!
\xbbad_\xdaly_\xbbs
) {

60
	`put_\x9aode
(
r\x9d
);

61 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
\xbbad_\xdaly_\xbbs
.
	`\x94r\xdc
());

65
r\x9d
->
i_mode
 = (r\x9d->i_mod\x90& ~
ALL_MODES
\xe8| (
mode
 & ALL_MODES);

66
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

68
	`put_\x9aode
(
r\x9d
);

70
	}
}

75
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
	$do_chown
() {

78 
\x9aode
 *
r\x9d
;

80 
\x9aode
 *
	`\x97t_\xb7th
();

83 i\xe0(!
su\xb3r_u\xa3r
)

84 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
E\xbc\xdcCode
::
EPERM
));

87 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me1
,
\xc7me1_\xcbngth
,
M1
\xe8!\xf0
OK
)

88 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

89 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

90 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

93 aut\xd8
\xbbad_\xdaly_\xbbs
 =
	`\xbbad_\xd\xaey
(
r\x9d
);

94 i\xe0(!
\xbbad_\xdaly_\xbbs
) {

95
	`put_\x9aode
(
r\x9d
);

96 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
\xbbad_\xdaly_\xbbs
.
	`\x94r\xdc
());

100
r\x9d
->
i_uid
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
ow\xc3r
);

101
r\x9d
->
i_gid
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa98_t
>(
group
);

102
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

104
	`put_\x9aode
(
r\x9d
);

106
	}
}

112
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<
u\x9\xa916_t
, std::
\x94r\xdc_code
>
	$do_umask
() {

114 
u\x9\xa916_t

r
;

116
r
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(

117 ~
\xe5
->
\xe5_umask
);

119
\xe5
->
\xe5_umask
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(~(
co_mode
 &
RWX_MODES
));

120 
r
;

121
	}
}

126
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
	$do_ac\xfbss
() {

129 
\x9aode
 *
r\x9d
;

131 
\x9aode
 *
	`\x97t_\xb7th
();

134 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me
,
\xc7me_\xcbngth
,
M3
\xe8!\xf0
OK
)

135 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

136 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

137 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
\x94r_code
)));

141 aut\xd8
f\xdcbidd\x92_\xbbs
 =
	`f\xdcbidd\x92
(
r\x9d
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
mode
), 1);

142
	`put_\x9aode
(
r\x9d
);

143 i\xe0(!
f\xdcbidd\x92_\xbbs
) {

144 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
f\xdcbidd\x92_\xbbs
.
	`\x94r\xdc
());

147
	}
}

153
PUBLIC

	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
	$f\xdcbidd\x92
(
\x9aode
 *
r\x9d
,
u\x9\xa916_t

ac\xfbss_des\x9\xfbd
,

154 
\xbb\xae_uid
) {

164 
u\x9\xa916_t

b\x99s
,
\xb3rm_b\x99s
;

165
u\x9\xa916_t

xmask
;

167 
shi\xe1
;

168
u\x9\xa916_t

\x8b\xa1_uid
;

169
u\x9\xa98_t

\x8b\xa1_gid
;

172
b\x99s
 =
r\x9d
->
i_mode
;

173
\x8b\xa1_uid
 = (
\xbb\xae_uid
 ?
\xe5
->
\xe5_\xbb\xaeuid
 : fp->
\xe5_effuid
);

174
\x8b\xa1_gid
 = (
\xbb\xae_uid
 ?
\xe5
->
\xe5_\xbb\xaegid
 : fp->
\xe5_effgid
);

175 i\xe0(
su\xb3r_u\xa3r
) {

176
\xb3rm_b\x99s
 = 07;

178 i\xe0(
\x8b\xa1_uid
 =\xf0
r\x9d
->
i_uid
)

179
shi\xe1
 = 6;

180 i\xe0(
\x8b\xa1_gid
 =\xf0
r\x9d
->
i_gid
)

181
shi\xe1
 = 3;

183
shi\xe1
 = 0;

184
\xb3rm_b\x99s
 = (
b\x99s
 >>
shi\xe1
) & 07;

189 i\xe0((
\xb3rm_b\x99s
 |
ac\xfbss_des\x9\xfbd
) !=\x85erm_bits) {

190 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
E\xbc\xdcCode
::
EACCES
));

194
xmask
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((
X_BIT
 << 6) | (X_BIT << 3) |

195
X_BIT
);

196 i\xe0((
ac\xfbss_des\x9\xfbd
 &
X_BIT
\xe8&& (
b\x99s
 &
xmask
) == 0) {

197 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
E\xbc\xdcCode
::
EACCES
));

203 i\xe0(
ac\xfbss_des\x9\xfbd
 &
W_BIT
) {

204 aut\xd8
\xbbad_\xdaly_\xbbs
 =
	`\xbbad_\xd\xaey
(
r\x9d
);

205 i\xe0(!
\xbbad_\xdaly_\xbbs
)

206 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
\xbbad_\xdaly_\xbbs
.
	`\x94r\xdc
());

210
	}
}

216 
	g\xa1d
::
ex\xb3\xf9ed
<, std::
\x94r\xdc_code
>
	$\xbbad_\xd\xaey
(
\x9aode
 *
\x9d
) {

221 
su\xb3r_block
 *
\xa5
;

222 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

224
\xa5
 =
	`g\x91_su\xb3r
(
\x9d
->
i_dev
);

225 i\xe0(
\xa5
->
s_rd_\xd\xaey
) {

226 
\xa1d
::
	`u\xc3x\xb3\xf9ed
(
	`make_\x94r\xdc_code
(
E\xbc\xdcCode
::
EROFS
));

229
	}
}

	@fs/putc.cpp

7 
	~"../h/com.h\xb5
"

8 
	~"../h/cڡ.h\xb5
"

9 
	~"../h/ty\xb3.h\xb5
"

11 
	#STDOUTPUT
 1

	)

12 
	#BUFSIZE
 100

	)

14
PRIVATE
 
	gbufcou\xc1
;

15
PRIVATE
 
	g\xb4\x9\xa9buf
[
BUFSIZE
];

16
PRIVATE

mes\xa7ge

	gputchmsg
;

21
PUBLIC

	$putc
(
c
)

22 
c
;

25 i\xe0(
c
 == 0) {

26
	`\xe6ush
();

29
\xb4\x9atbuf
[
bufcou\xc1
++] =
c
;

30 i\xe0(
bufcou\xc1
 =\xf0
BUFSIZE
)

31
	`\xe6ush
();

32 i\xe0(
c
 == '\n')

33
	`\xe6ush
();

34
	}
}

39
PRIVATE

	$\xe6ush
() {

42 i\xe0(
bufcou\xc1
 == 0)

44
putchmsg
.
m_ty\xb3
 =
TTY_WRITE
;

45
	`\xb4oc_\xc4
(
putchmsg
) = 1;

46
	`\x89y_l\x9\xab
(
putchmsg
) = 0;

47
	`add\xbbss
(
putchmsg
\xe8\xf0
\xb4\x9atbuf
;

48
	`cou\xc1
(
putchmsg
\xe8\xf0
bufcou\xc1
;

49
	`\xa3nd\xbbc
(
TTY
, &
putchmsg
);

50
bufcou\xc1
 = 0;

51
	}
}

	@fs/read.cpp

16 
	~"../h/com.h\xb5
"

17 
	~"../h/cڡ.h\xb5
"

18 
	~"../h/\x94r\xdc.h\xb5
"

19 
	~"../h/ty\xb3.h\xb5
"

20 
	~"buf.h\xb5
"

21 
	~"com\xb7t.h\xb5
"

22 
	~"cڡ.h\xb5
"

23 
	~"f\x9\x93.h\xb5
"

24 
	~"\xe5roc.h\xb5
"

25 
	~"glo.h\xb5
"

26 
	~"\x9aode.h\xb5
"

27 
	~"\xb7\xbfm.h\xb5
"

28 
	~"su\xb3r.h\xb5
"

29 
	~"ty\xb3.h\xb5
"

30 
	~<m\x9aix/fs/cڡ.h\xb5
>

32
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

33 
	~<\x\xabgܙhm
>

34 
	~<c\xa1ddef
>

35 
	~<c\xa1d\x9\xa9
>

37 
	#FD_MASK
 077

	)

39
PRIVATE

mes\xa7ge

	gumess
;

40
PUBLIC
 
	grdwt_\x94r
;

45
PUBLIC
 
	$do_\xbbad
(\xe8{  (
	`\xbbad_wr\x99e
(
READING
));
	}
}

50
PUBLIC
 
	$\xbbad_wr\x99e
(
rw_\xe6ag
) {

53 
\x9aode
 *
r\x9d
;

54 
f\x9\x95
 *
f
;

55
\x9at32_t

by\x8bs_\xcb\xe1
;

56
\x9at64_t

f_size
;

57
\xa1d
::
size_t

off
,
cum_io
;

58
\x9at32_t

pos\x99i\xda
;

59 
r
;

60
\xa1d
::
size_t

chunk
;

61 
v\x9cg
,
mode_w\xdcd
,
u\xa4
,
\xa3g
;

62 
f\x9\x95
 *
wf
;

63 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

64 
f\x9\x95
 *
	`f\x9ad_f\x9\x95
(), *
	`g\x91_f\x9\x95
();

65
\xbb\xae_time

	`\x\xe3ock_time
();

68 i\xe0(
who
 =\xf0
MM_PROC_NR
 && (
fd
 & (~
BYTE
))) {

69
u\xa4
 = (
fd
 >> 8\xe8&
BYTE
;

70
\xa3g
 = (
fd
 >> 6) & 03;

71
fd
 &\xf0
FD_MASK
;

73
u\xa4
 =
who
;

74
\xa3g
 =
D
;

78 i\xe0(
nby\x8bs
 == 0)

80 i\xe0(
who
 !\xf0
MM_PROC_NR
 &&
nby\x8bs
 < 0)

81  (
E\xbc\xdcCode
::
EINVAL
);

82 i\xe0((
f
 =
	`g\x91_f\x9\x95
(
fd
)\xe8=\xf0
nuαr
)

83  (
\x94r_code
);

84 i\xe0(((
f
->
f\x9\x95_mode
\xe8& (
rw_\xe6ag
 =\xf0
READING
 ?
R_BIT
 :
W_BIT
)) ==

86  (
E\xbc\xdcCode
::
EBADF
);

87
pos\x99i\xda
 =
f
->
f\x9\x95_pos
;

88 i\xe0(
pos\x99i\xda
 < 0)

89  (
E\xbc\xdcCode
::
EINVAL
);

90
r\x9d
 =
f
->
f\x9\x95_\x9ao
;

91
f_size
 =
	`com\xb7t_g\x91_size
(
r\x9d
);

92
r
 =
OK
;

93
cum_io
 = 0;

94
v\x9cg
 =
TRUE
;

95
mode_w\xdcd
 =
r\x9d
->
i_mode
 &
I_TYPE
;

96 i\xe0(
mode_w\xdcd
 =\xf0
I_BLOCK_SPECIAL
 &&
f_size
 == 0)

97
f_size
 =
MAX_P_LONG
;

98
rdwt_\x94r
 =
OK
;

101 i\xe0(
mode_w\xdcd
 =\xf0
I_CHAR_SPECIAL
) {

105 i\xe0((
r
 =
	`dev_io
(
rw_\xe6ag
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]), s\x8ftic_\xff\xa1<>(
pos\x99i\xda
),

106
nby\x8bs
,
who
,
buf\xe3r
)) >= 0) {

107
cum_io
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
r
);

108
pos\x99i\xda
 +\xf0
r
;

109
r
 =
OK
;

112 i\xe0(
rw_\xe6ag
 =\xf0
WRITING
 &&
mode_w\xdcd
 !\xf0
I_BLOCK_SPECIAL
) {

115 i\xe0(
pos\x99i\xda
 >
	`g\x91_su\xb3r
(
r\x9d
->
i_dev
)->
s_max_size
 -
nby\x8bs
)

116  (
E\xbc\xdcCode
::
EFBIG
);

122 i\xe0(
pos\x99i\xda
 >
f_size
)

123
	`\x\xe3\x97r_z\xd\xab
(
r\x9d
,
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
f_size
),

129 i\xe0(
r\x9d
->
i_p\x9de
 && (
r
 =
	`p\x9de_check
ԝ,
rw_\xe6ag
,
v\x9cg
,
nby\x8bs
, &
pos\x99i\xda
)) <= 0)

130  (
r
);

133 
nby\x8bs
 != 0) {

134
off
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(

135
pos\x99i\xda
 %

136
BLOCK_SIZE
);

138
chunk
 =
\xa1d
::
	`m\x9a
(
\xa1\xa9ic_\xff\xa1
<\xa1d::
size_t
>(
nby\x8bs
),

139
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
BLOCK_SIZE
\xe8-
off
);

147 i\xe0(
rw_\xe6ag
 =\xf0
READING
) {

149
by\x8bs_\xcb\xe1
 =
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
f_size
 -
pos\x99i\xda
);

150 i\xe0(
by\x8bs_\xcb\xe1
 <= 0)

152 i\xe0(
chunk
 >
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
by\x8bs_\xcb\xe1
))

153
chunk
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
by\x8bs_\xcb\xe1
);

158
r
 =
	`rw_chunk
(
r\x9d
,
pos\x99i\xda
,
off
,
chunk
,
rw_\xe6ag
,
buf\xe3r
,
\xa3g
,
u\xa4
);

159 i\xe0(
r
 !\xf0
OK
)

161 i\xe0(
rdwt_\x94r
 < 0)

165
buf\xe3r
 +\xf0
chunk
;

166
nby\x8bs
 -\xf0
\xa1\xa9ic_\xff\xa1
<>(
chunk
);

167
cum_io
 +\xf0
chunk
;

168
pos\x99i\xda
 +=

169
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
chunk
);

170
v\x9cg
 =
FALSE
;

175 i\xe0(
rw_\xe6ag
 =\xf0
WRITING
) {

177 i\xe0(
mode_w\xdcd
 !\xf0
I_CHAR_SPECIAL
 && mode_w\xdcd !\xf0
I_BLOCK_SPECIAL
 &&
pos\x99i\xda
 >
f_size
)

178
	`com\xb7t_\xa3t_size
(

179
r\x9d
,
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
pos\x99i\xda
));

180
r\x9d
->
i_modtime
 =
	`\x\xe3ock_time
();

181
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

184 i\xe0(
r\x9d
->
i_p\x9de
 &&
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
pos\x99i\xda
\xe8>\xf0
	`com\xb7t_g\x91_size
(rip)) {

186
	`com\xb7t_\xa3t_size
(
r\x9d
, 0);

187
pos\x99i\xda
 = 0;

188 i\xe0((
wf
 =
	`f\x9ad_f\x9\x95
(
r\x9d
,
W_BIT
)\xe8!\xf0
nuαr
)

189
wf
->
f\x9\x95_pos
 = 0;

192
f
->
f\x9\x95_pos
 =
pos\x99i\xda
;

195 i\xe0(
rw_\xe6ag
 =\xf0
READING
 &&
r\x9d
->
i_\xa3ek
 =\xf0
NO_SEEK
 &&
pos\x99i\xda
 %
BLOCK_SIZE
 == 0 &&

196 (
mode_w\xdcd
 =\xf0
I_REGULAR
 || mode_w\xdcd =\xf0
I_DIRECTORY
)) {

197
rdahed_\x9aode
 =
r\x9d
;

198
rdahedpos
 =
pos\x99i\xda
;

200 i\xe0(
mode_w\xdcd
 =\xf0
I_REGULAR
)

201
r\x9d
->
i_\xa3ek
 =
NO_SEEK
;

203 i\xe0(
rdwt_\x94r
 !\xf0
OK
)

204
r
 =
rdwt_\x94r
;

205 i\xe0(
rdwt_\x94r
 =\xf0
EOF
)

206
r
 =
\xa1\xa9ic_\xff\xa1
<>(
cum_io
);

207  (
r
 =\xf0
OK
 ?
\xa1\xa9ic_\xff\xa1
<>(
cum_io
) :\x84);

208
	}
}

214 
	$rw_chunk
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
,
\xa1d
::
size_t

off
, std::size_\x88
chunk
,

215 
rw_\xe6ag
, *
buff
, 
\xa3g
, 
u\xa4
) {

218 
buf
 *
bp
;

219 
r
;

220 
d\x9c
,
n
,
block_\xa5ec
;

221
u\x9\xa916_t

b
;

222
u\x9\xa916_t

dev
;

223 
buf
 *
	`g\x91_block
(),

224 *
	`\xc3w_block
();

225
u\x9\xa916_t

	`\xbbad_m\xad
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
);

227
block_\xa5ec
 = (
r\x9d
->
i_mode
 &
I_TYPE
\xe8=\xf0
I_BLOCK_SPECIAL
;

228 i\xe0(
block_\xa5ec
) {

230
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
pos\x99i\xda
\xe8/
BLOCK_SIZE
);

231
dev
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
r\x9d
->
i_z\xd\xab
[0]);

233
b
 =
	`\xbbad_m\xad
(
r\x9d
,
pos\x99i\xda
);

234
dev
 =
r\x9d
->
i_dev
;

237 i\xe0(!
block_\xa5ec
 &&
b
 =\xf0
kNoBlock
) {

238 i\xe0(
rw_\xe6ag
 =\xf0
READING
) {

240
bp
 =
	`g\x91_block
(
kNoDev
,
kNoBlock
,
IoMode
::
N\xdcm\x\xab
);

242
	`z\x94o_block
(
bp
);

245 i\xe0((
bp
 =
	`\xc3w_block
(
r\x9d
,
pos\x99i\xda
)\xe8=\xf0
NIL_BUF
)

246  (
\x94r_code
);

254
n
 = (
rw_\xe6ag
 =\xf0
WRITING
 &&
chunk
 =\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
BLOCK_SIZE
\xe8?
IoMode
::
NoR\x97d


255 :
IoMode
::
N\xdcm\x\xab
);

257 i\xe0(
rw_\xe6ag
 =\xf0
WRITING
 &&
off
 == 0 &&

258
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
pos\x99i\xda
\xe8>\xf0
	`com\xb7t_g\x91_size
(
r\x9d
))

259
n
 =
IoMode
::
NoR\x97d
;

260
bp
 =
	`g\x91_block
(
dev
,
b
,
n
);

265 i\xe0(
rw_\xe6ag
 =\xf0
WRITING
 &&
chunk
 !\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
BLOCK_SIZE
\xe8&& !
block_\xa5ec
 &&

266
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
pos\x99i\xda
\xe8>\xf0
	`com\xb7t_g\x91_size
(
r\x9d
\xe8&&
off
 == 0)

267
	`z\x94o_block
(
bp
);

268
d\x9c
 = (
rw_\xe6ag
 =\xf0
READING
 ?
TO_USER
 :
FROM_USER
);

271
r
 =
	`rw_u\xa3r
(
\xa3g
,
u\xa4
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buff
),
chunk
,
bp
->
b_d\xa9a
 +
off
,
d\x9c
);

272 i\xe0(
rw_\xe6ag
 =\xf0
WRITING
)

273
bp
->
b_d\x9\xf9
 =
DIRTY
;

275
n
 = (
off
 +
chunk
 =\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
BLOCK_SIZE
\xe8?
BlockTy\xb3
::
Fu\x\xfbD\xa9a


276 :
BlockTy\xb3
::
P\xa\xf9\x9\xe6D\xa9a
);

277
	`put_block
(
bp
,
n
);

278  (
r
);

279
	}
}

285
PUBLIC

u\x9\xa916_t

	$\xbbad_m\xad
(
\x9aode
 *
r\x9d
,

286
\x9at32_t

pos\x99i\xda
) {

292 
buf
 *
bp
;

293
u\x9\xa916_t

z
;

294
u\x9\xa916_t

b
;

295
\x9at32_t

ex\xfbss
,
z\xd\xab
,
block_pos
;

296 
s\xff\xcb
,
boff
;

297 
buf
 *
	`g\x91_block
();

299
s\xff\xcb
 =
	`s\xff\xcb_\xe7\xf9\xdc
(
r\x9d
);

300
block_pos
 =
pos\x99i\xda
 /
BLOCK_SIZE
;

301
z\xd\xab
 =
block_pos
 >>
s\xff\xcb
;

302
boff
 =
block_pos
 - (
z\xd\xab
 <<
s\xff\xcb
);

305 i\xe0(
z\xd\xab
 <
NR_DZONE_NUM
) {

307 i\xe0((
z
 =
r\x9d
->
i_z\xd\xab
[
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
z\xd\xab
)]) ==

308
kNoZ\xd\xab
)

309  (
kNoBlock
);

311
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
\xe8+
boff
);

312  (
b
);

316
ex\xfbss
 =
z\xd\xab
 -
NR_DZONE_NUM
;

318 i\xe0(
ex\xfbss
 <
NR_INDIRECTS
) {

320
z
 =
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
];

323 i\xe0((
z
 =
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
 + 1]\xe8=\xf0
kNoZ\xd\xab
)

324  (
kNoBlock
);

325
ex\xfbss
 -\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
NR_INDIRECTS
);

327
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
);

328
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

331
z
 =
bp
->
b_\x9ad
[
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
ex\xfbss
 / s\x8ftic_\xff\xa1<
\x9at32_t
>(
NR_INDIRECTS
))];

332
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

333
ex\xfbss
 =\x83x\xfbs\xa0%
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
NR_INDIRECTS
);

337 i\xe0(
z
 =\xf0
kNoZ\xd\xab
)

338  (
kNoBlock
);

340
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
);

341
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

342
z
 =
bp
->
b_\x9ad
[
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
ex\xfbss
)];

343
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

344 i\xe0(
z
 =\xf0
kNoZ\xd\xab
)

345  (
kNoBlock
);

347
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
\xe8+
boff
);

348  (
b
);

349
	}
}

355
PUBLIC
 
	$rw_u\xa3r
(
s
, 
u
,
\xa1d
::
size_t

v\x9c
, std::size_\x88
by\x8bs
, *
buff
, 
d\x9\xfb\xf9i\xda
) {

362 i\xe0(
d\x9\xfb\xf9i\xda
 =\xf0
TO_USER
) {

364
	`\xa4c_\xa5a\xfb
(
umess
\xe8\xf0
D
;

365
	`\xa4c_\xb4oc_\xc4
(
umess
\xe8\xf0
FS_PROC_NR
;

368
	`\xa4c_buf\xe3r
(
umess
\xe8\xf0
buff
;

369
	`d\xa1_\xa5a\xfb
(
umess
\xe8\xf0
s
;

370
	`d\xa1_\xb4oc_\xc4
(
umess
\xe8\xf0
u
;

372
	`d\xa1_buf\xe3r
(
umess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
v\x9c
);

375
	`\xa4c_\xa5a\xfb
(
umess
\xe8\xf0
s
;

376
	`\xa4c_\xb4oc_\xc4
(
umess
\xe8\xf0
u
;

377
	`\xa4c_buf\xe3r
(
umess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
v\x9c
);

378
	`d\xa1_\xa5a\xfb
(
umess
\xe8\xf0
D
;

379
	`d\xa1_\xb4oc_\xc4
(
umess
\xe8\xf0
FS_PROC_NR
;

380
	`d\xa1_buf\xe3r
(
umess
\xe8\xf0
buff
;

385
	`c\xddy_by\x8bs
(
umess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
by\x8bs
);

386
	`sys_c\xddy
(&
umess
);

387  (
umess
.
m_ty\xb3
);

388
	}
}

393
PUBLIC
 
	$\xbbad_ah\x97d
() {

396 
\x9aode
 *
r\x9d
;

397 
buf
 *
bp
;

398
u\x9\xa916_t

b
;

399 
buf
 *
	`g\x91_block
();

401
r\x9d
 =
rdahed_\x9aode
;

402
rdahed_\x9aode
 =
nuαr
;

404 i\xe0((
b
 =
	`\xbbad_m\xad
(
r\x9d
,
rdahedpos
)\xe8=\xf0
kNoBlock
)

407
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
N\xdcm\x\xab
);

408
	`put_block
(
bp
,
PARTIAL_DATA_BLOCK
);

409
	}
}

	@fs/stadir.cpp

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/\x94r\xdc.h\xb5
"

13 
	~"../h/\xa1\xa9.h
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"com\xb7t.h\xb5
"

16 
	~"cڡ.h\xb5
"

17 
	~"f\x9\x93.h\xb5
"

18 
	~"\xe5roc.h\xb5
"

19 
	~"glo.h\xb5
"

20 
	~"\x9aode.h\xb5
"

21 
	~"\xb7\xbfm.h\xb5
"

22 
	~"ty\xb3.h\xb5
"

27
PUBLIC
 
	$do_chd\x9c
() {

32 
\xe5roc
 *
r\xe5
;

34 i\xe0(
who
 =\xf0
MM_PROC_NR
) {

35
r\xe5
 = &
\xe5roc
[
\xa6\xd91
];

36
	`put_\x9aode
(
\xe5
->
\xe5_w\xdckd\x9c
);

37
\xe5
->
\xe5_w\xdckd\x9c
 = (
cd_\xe6ag
 ? fp->
\xe5_ro\xd9d\x9c
 :
r\xe5
->fp_workdir);

38
	`dup_\x9aode
(
\xe5
->
\xe5_w\xdckd\x9c
);

39
\xe5
->
\xe5_effuid
 = (
cd_\xe6ag
 ?
SUPER_USER
 :
r\xe5
->fp_effuid);

40  (
OK
);

44 
	`ch\x\xafge
(&
\xe5
->
\xe5_w\xdckd\x9c
,
\xc7me
,
\xc7me_\xcbngth
);

45
	}
}

50
PUBLIC
 
	$do_chro\xd9
() {

53 
r
;

55 i\xe0(!
su\xb3r_u\xa3r
)

56  (
E\xbc\xdcCode
::
EPERM
);

57
r
 =
	`ch\x\xafge
(&
\xe5
->
\xe5_ro\xd9d\x9c
,
\xc7me
,
\xc7me_\xcbngth
);

58  (
r
);

59
	}
}

64
PRIVATE
 
	$ch\x\xafge
(
i\x9d
,
\xc7me_\xb1r
,
\xcbn
)

65 
\x9aode
 **
i\x9d
;

66 *
\xc7me_\xb1r
;

67 
\xcbn
;

71 
\x9aode
 *
r\x9d
;

72 
r
;

73 
\x9aode
 *
	`\x97t_\xb7th
();

76 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me_\xb1r
,
\xcbn
,
M3
\xe8!\xf0
OK
)

77  (
\x94r_code
);

78 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

79  (
\x94r_code
);

82 i\xe0((
r\x9d
->
i_mode
 &
I_TYPE
\xe8!\xf0
I_DIRECTORY
)

83
r
 =
E\xbc\xdcCode
::
ENOTDIR
;

85
r
 =
	`f\xdcbidd\x92
(
r\x9d
,
X_BIT
, 0);

88 i\xe0(
r
 !\xf0
OK
) {

89
	`put_\x9aode
(
r\x9d
);

90  (
r
);

94
	`put_\x9aode
(*
i\x9d
);

95 *
i\x9d
 =
r\x9d
;

96  (
OK
);

97
	}
}

102
PUBLIC
 
	$do_\xa1\xa9
() {

105 
\x9aode
 *
r\x9d
;

106 
r
;

107 
\x9aode
 *
	`\x97t_\xb7th
();

112 i\xe0(
	`\xe3tch_\xc7me
(
\xc7me1
,
\xc7me1_\xcbngth
,
M1
\xe8!\xf0
OK
)

113  (
\x94r_code
);

114 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

115  (
\x94r_code
);

116
r
 =
	`\xa1\xa9_\x9aode
(
r\x9d
,
NIL_FILP
,
\xc7me2
);

117
	`put_\x9aode
(
r\x9d
);

118  (
r
);

119
	}
}

124
PUBLIC
 
	$do_f\xa1\xa9
() {

127 
f\x9\x95
 *
rf\x9\x95
;

128 
f\x9\x95
 *
	`g\x91_f\x9\x95
();

131 i\xe0((
rf\x9\x95
 =
	`g\x91_f\x9\x95
(
fd
)\xe8=\xf0
NIL_FILP
)

132  (
\x94r_code
);

134  (
	`\xa1\xa9_\x9aode
(
rf\x9\x95
->
f\x9\x95_\x9ao
,\x84f\x9ep,
buf\xe3r
));

135
	}
}

140
PRIVATE
 
	$\xa1\xa9_\x9aode
(
r\x9d
,
f\x9e_\xb1r
,
u\xa3r_addr
)

141 
\x9aode
 *
r\x9d
;

142 
f\x9\x95
 *
f\x9e_\xb1r
;

143 *
u\xa3r_addr
;

147 
\xa1\xa9
 *
\xa1p
;

148 
\xa1\xa9

\xa1\xa9buf
;

149 
r
;

150
v\x9c_by\x8bs

v
;

153
\xa1p
 = &
\xa1\xa9buf
;

154
\xa1p
->
\xa1_dev
 = ()
r\x9d
->
i_dev
;

155
\xa1p
->
\xa1_\x9ao
 =
r\x9d
->
i_num
;

156
\xa1p
->
\xa1_mode
 =
r\x9d
->
i_mode
;

157
\xa1p
->
\xa1_ƚk
 =
r\x9d
->
i_ƚks
 &
BYTE
;

158
\xa1p
->
\xa1_uid
 =
r\x9d
->
i_uid
;

159
\xa1p
->
\xa1_gid
 =
r\x9d
->
i_gid
 &
BYTE
;

160
\xa1p
->
\xa1_rdev
 =
r\x9d
->
i_z\xd\xab
[0];

161
\xa1p
->
\xa1_size
 = ()
	`com\xb7t_g\x91_size
(
r\x9d
);

162 i\xe0((
r\x9d
->
i_p\x9de
 =\xf0
I_PIPE
) &&

163 (
f\x9e_\xb1r
 !\xf0
NIL_FILP
) &&

164 (
f\x9e_\xb1r
->
f\x9\x95_mode
 =\xf0
R_BIT
))

165
\xa1p
->
\xa1_size
 -\xf0
f\x9e_\xb1r
->
f\x9\x95_pos
;

166
\xa1p
->
\xa1_\xa9ime
 =
r\x9d
->
i_modtime
;

167
\xa1p
->
\xa1_mtime
 =
r\x9d
->
i_modtime
;

168
\xa1p
->
\xa1_\xf9ime
 =
r\x9d
->
i_modtime
;

171
v
 = (
v\x9c_by\x8bs
)
u\xa3r_addr
;

172
r
 =
	`rw_u\xa3r
(
D
,
who
,
v
, (
v\x9c_by\x8bs
)
\xa1\xa9buf
, (*)
\xa1p
,
TO_USER
);

173  (
r
);

174
	}
}

	@fs/super.cpp

17 
	~"su\xb3r.h\xb5
"

18 
	~"../h/cڡ.h\xb5
"

19 
	~"../h/\x94r\xdc.h\xb5
"

20 
	~"../h/ty\xb3.h\xb5
"

21 
	~"buf.h\xb5
"

22 
	~"cڡ.h\xb5
"

23 
	~"\x9aode.h\xb5
"

24 
	~"ty\xb3.h\xb5
"

25 
	~<m\x9aix/fs/cڡ.h\xb5
>

27
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

29 
	#INT_BITS
 ((\xe8<< 3)

	)

30 
	#BIT_MAP_SHIFT
 13

	)

35
PUBLIC
 
	$l\xdfd_b\x99_m\xads
(
dev
)

36
dev_\xc4

dev
;

40 
i
;

41 
su\xb3r_block
 *
\xa5
;

42
block_\xc4

zba\xa3
;

43 
buf
 *
	`g\x91_block
();

44 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

46
\xa5
 =
	`g\x91_su\xb3r
(
dev
);

47 i\xe0(
bufs_\x9a_u\xa3
 +
\xa5
->
s_im\xad_blocks
 + sp->
s_zm\xad_blocks
 >\xf0
NR_BUFS
 - 3)

48  (
ERROR
);

49 i\xe0(
\xa5
->
s_im\xad_blocks
 >
I_MAP_SLOTS
 || sp->
s_zm\xad_blocks
 >
ZMAP_SLOTS
)

50
	`\xb7nic
("to\xd8m\xaay m\xad blocks",
NO_NUM
);

53 
i
 = 0; i <
\xa5
->
s_im\xad_blocks
; i++)

54
\xa5
->
s_im\xad
[
i
] =
	`g\x91_block
(
dev
,
SUPER_BLOCK
 + 1 + i,
IoMode
::
N\xdcm\x\xab
);

57
zba\xa3
 =
SUPER_BLOCK
 + 1 +
\xa5
->
s_im\xad_blocks
;

58 
i
 = 0; i <
\xa5
->
s_zm\xad_blocks
; i++)

59
\xa5
->
s_zm\xad
[
i
] =
	`g\x91_block
(
dev
,
zba\xa3
 + i,
IoMode
::
N\xdcm\x\xab
);

62
\xa5
->
s_im\xad
[0]->
b_\x9\xa9
[0] |= 3;

63
\xa5
->
s_zm\xad
[0]->
b_\x9\xa9
[0] |= 1;

64
bufs_\x9a_u\xa3
 +\xf0
\xa5
->
s_im\xad_blocks
 + sp->
s_zm\xad_blocks
;

65  (
OK
);

66
	}
}

71
PUBLIC

	$u\xc6\xdfd_b\x99_m\xads
(
dev
)

72
dev_\xc4

dev
;

76 
i
;

77 
su\xb3r_block
 *
\xa5
;

78 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

80
\xa5
 =
	`g\x91_su\xb3r
(
dev
);

81
bufs_\x9a_u\xa3
 -\xf0
\xa5
->
s_im\xad_blocks
 + sp->
s_zm\xad_blocks
;

82 
i
 = 0; i <
\xa5
->
s_im\xad_blocks
; i++)

83
	`put_block
(
\xa5
->
s_im\xad
[
i
],
BlockTy\xb3
::
IM\xad
);

84 
i
 = 0; i <
\xa5
->
s_zm\xad_blocks
; i++)

85
	`put_block
(
\xa5
->
s_zm\xad
[
i
],
BlockTy\xb3
::
ZM\xad
);

86  (
OK
);

87
	}
}

92
PUBLIC

b\x99_\xc4

	$\x\xabloc_b\x99
(
m\xad_\xb1r
,
m\xad_b\x99s
,
b\x99_blocks
,
\xdcig\x9a
)

93 
buf
 *
m\xad_\xb1r
[];

94
b\x99_\xc4

m\xad_b\x99s
;

95
unsh\xd\xf9

b\x99_blocks
;

96
b\x99_\xc4

\xdcig\x9a
;

100 
k
;

101 *
w\xb1r
, *
wlim
;

102 
i
,
a
,
b
,
w
,
o
,
block_cou\xc1
;

103 
buf
 *
bp
;

106 i\xe0(
\xdcig\x9a
 >\xf0
m\xad_b\x99s
)

107
\xdcig\x9a
 = 0;

108
b
 =
\xdcig\x9a
 >>
BIT_MAP_SHIFT
;

109
o
 =
\xdcig\x9a
 - (
b
 <<
BIT_MAP_SHIFT
);

110
w
 =
o
 /
INT_BITS
;

111
block_cou\xc1
 = (
w
 =\xf00 ?
b\x99_blocks
 : bit_blocks + 1);

117 
block_cou\xc1
--) {

119
bp
 =
m\xad_\xb1r
[
b
];

120
w\xb1r
 = &
bp
->
b_\x9\xa9
[
w
];

121
wlim
 = &
bp
->
b_\x9\xa9
[
INTS_PER_BLOCK
];

122 
w\xb1r
 !\xf0
wlim
) {

124 i\xe0((
k
 = ()*
w\xb1r
) != ()~0) {

126 
i
 = 0; i <
INT_BITS
; i++)

127 i\xe0(((
k
 >>
i
) & 1) == 0) {

128
a
 =
i
 + (
w\xb1r
 - &
bp
->
b_\x9\xa9
[0]\xe8*
INT_BITS
 + (
b
 <<
BIT_MAP_SHIFT
);

130 i\xe0(
a
 >\xf0
m\xad_b\x99s
) {

131
w\xb1r
 =
wlim
 - 1;

134 *
w\xb1r
 |\xf01 <<
i
;

135
bp
->
b_d\x9\xf9
 =
DIRTY
;

136  ((
b\x99_\xc4
)
a
);

139
w\xb1r
++;

141 i\xe0(++
b
 =\xf0
b\x99_blocks
)

142
b
 = 0;

143
w
 = 0;

145  (
NO_BIT
);

146
	}
}

151
PUBLIC

	$\xe4\x93_b\x99
(
m\xad_\xb1r
,
b\x99_\xbbtu\xb\xabd
)

152 
buf
 *
m\xad_\xb1r
[];

153
b\x99_\xc4

b\x99_\xbbtu\xb\xabd
;

157 
b
,
r
,
w
,
b\x99
;

158 
buf
 *
bp
;

160
b
 =
b\x99_\xbbtu\xb\xabd
 >>
BIT_MAP_SHIFT
;

161
r
 =
b\x99_\xbbtu\xb\xabd
 - (
b
 <<
BIT_MAP_SHIFT
);

162
w
 =
r
 /
INT_BITS
;

163
b\x99
 =
r
 %
INT_BITS
;

164
bp
 =
m\xad_\xb1r
[
b
];

165 i\xe0(
bp
 =\xf0
NIL_BUF
)

167 i\xe0(((
bp
->
b_\x9\xa9
[
w
] >>
b\x99
) & 1) == 0)

168
	`\xb7nic
("䓚g unu\xa3d block o\xb8\x9aode--check f\x9e\x90sys", ()
b\x99_\xbbtu\xb\xabd
);

169
bp
->
b_\x9\xa9
[
w
] &\xf0~(1 <<
b\x99
);

170
bp
->
b_d\x9\xf9
 =
DIRTY
;

171
	}
}

176
PUBLIC
 
su\xb3r_block
 *
	$g\x91_su\xb3r
(
dev
)

177
dev_\xc4

dev
;

181 
su\xb3r_block
 *
\xa5
;

183 
\xa5
 = &
su\xb3r_block
[0]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++)

184 i\xe0(
\xa5
->
s_dev
 =\xf0
dev
)

185  (
\xa5
);

188
	`\xb7nic
("\xffn'\x88f\x9ad su\xb3rblock f\xdc devi\xfb (\x9a decim\xae)", ()
dev
);

189
	}
}

194
PUBLIC
 
	$mou\xc1ed
(
r\x9d
)

195 
\x9aode
 *
r\x9d
;

199 
su\xb3r_block
 *
\xa5
;

200 
dev_\xc4

dev
;

202
dev
 = (
dev_\xc4
)
r\x9d
->
i_z\xd\xab
[0];

203 i\xe0(
dev
 =\xf0
ROOT_DEV
)

204  (
TRUE
);

206 
\xa5
 = &
su\xb3r_block
[0]; s\xb0< &su\xb3r_block[
NR_SUPERS
]; sp++)

207 i\xe0(
\xa5
->
s_dev
 =\xf0
dev
)

208  (
TRUE
);

210  (
FALSE
);

211
	}
}

216
PUBLIC
 
	$s\xff\xcb_\xe7\xf9\xdc
(
\x9d
)

217 
\x9aode
 *
\x9d
;

220 
su\xb3r_block
 *
\xa5
;

221 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

223
\xa5
 =
	`g\x91_su\xb3r
(
\x9d
->
i_dev
);

224  (
\xa5
->
s_log_z\xd\xab_size
);

225
	}
}

230
PUBLIC

	$rw_su\xb3r
(
\xa5
,
rw_\xe6ag
)

231 
su\xb3r_block
 *
\xa5
;

232 
rw_\xe6ag
;

236 
buf
 *
bp
;

237
dev_\xc4

dev
;

238 
buf
 *
	`g\x91_block
();

241 i\xe0(
rw_\xe6ag
 =\xf0
READING
) {

242
dev
 =
\xa5
->
s_dev
;

243
bp
 =
	`g\x91_block
(
\xa5
->
s_dev
, (
block_\xc4
)
SUPER_BLOCK
,
IoMode
::
N\xdcm\x\xab
);

244
	`c\xddy
((*)
\xa5
,
bp
->
b_d\xa9a
,
SUPER_SIZE
);

245
\xa5
->
s_dev
 =
dev
;

248
bp
 =
	`g\x91_block
(
\xa5
->
s_dev
, (
block_\xc4
)
SUPER_BLOCK
,
IoMode
::
NoR\x97d
);

249
	`c\xddy
(
bp
->
b_d\xa9a
, (*)
\xa5
,
SUPER_SIZE
);

250
bp
->
b_d\x9\xf9
 =
DIRTY
;

253
\xa5
->
s_d\x9\xf9
 =
CLEAN
;

254
	`put_block
(
bp
,
BlockTy\xb3
::
Zu\xb3r
);

255
	}
}

	@fs/super.hpp

21
EXTERN
 
	ssu\xb3r_block
 {

22
\x9aode_\xc4

	ms_n\x9aodes
;

23
z\xd\xab_\xc4

	ms_nz\xd\xabs
;

24
unsh\xd\xf9

	ms_im\xad_blocks
;

25
unsh\xd\xf9

	ms_zm\xad_blocks
;

26
z\xd\xab_\xc4

	ms_f\x9c\xa1d\xa9az\xd\xab
;

27 
	ms_log_z\xd\xab_size
;

28
f\x9\x93_pos

	ms_max_size
;

29
f\x9\x93_pos64

	ms_max_size64
;

30 
	ms_magic
;

33 
buf
 *
	ms_im\xad
[
I_MAP_SLOTS
];

34 
buf
 *
	ms_zm\xad
[
ZMAP_SLOTS
];

35
dev_\xc4

	ms_dev
;

36 
\x9aode
 *
	ms_isup
;

37 
\x9aode
 *
	ms_imou\xc1
;

38
\xbb\xae_time

	ms_time
;

39 
	ms_rd_\xd\xaey
;

40 
	ms_d\x9\xf9
;

41 }
	gsu\xb3r_block
[
NR_SUPERS
];

43 
	#NIL_SUPER
 (
su\xb3r_block
 *)0

	)

	@fs/table.cpp

5 
	~"../h/cڡ.h\xb5
"

6 
	~"../h/\xa1\xa9.h
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"cڡ.h\xb5
"

9 
	~"dev.h\xb5
"

10 
	~"ty\xb3.h\xb5
"

12 #unde\xe0
EXTERN


13 
	#EXTERN


	)

15 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

16 
	~"../h/com.h\xb5
"

17 
	~"../h/\x94r\xdc.h\xb5
"

18 
	~"buf.h\xb5
"

19 
	~"f\x9\x93.h\xb5
"

20 
	~"\xe5roc.h\xb5
"

21 
	~"glo.h\xb5
"

22 
	~"\x9aode.h\xb5
"

23 
	~"su\xb3r.h\xb5
"

25
do_ac\xfbss
(),
do_chd\x9c
(),
do_chmod
(),
do_chown
(),
do_chro\xd9
();

26
do_\x\xe3o\xa3
(),
do_\xfc\x97t
(),
do_dup
(),
do_ex\x99
(),
do_f\xdck
(),
do_f\xa1\xa9
();

27
do_io\xf9l
(),
do_l\x9ak
(),
do_l\xa3ek
(),
do_mknod
(),
do_mou\xc1
(),
do_ݒ
();

28
do_p\x9de
(),
do_\xbbad
(),
do_\xbbvive
(),
do_\xa3t
(),
do_\xa1\xa9
(),
do_\xa1ime
();

29
do_sync
(),
do_time
(),
do_tims
(),
do_umask
(),
do_umou\xc1
(),
do_uƚk
();

30
do_u\xc5au\xa3
(),
do_utime
(),
do_wr\x99e
(),
no_\xff\x\xfb
(),
no_sys
();

32 
f\xa1ack
[];

33 *
	g\xa1ack\xb1
 = &
f\xa1ack
[
FS_STACK_BYTES
];

35 (*
	g\xff\x\xfb_ve\xf9\xdc
[
NCALLS
])() = {

36
no_sys
,

37
do_ex\x99
,

38
do_f\xdck
,

39
do_\xbbad
,

40
do_wr\x99e
,

41
do_ݒ
,

42
do_\x\xe3o\xa3
,

43
no_sys
,

44
do_\xfc\x97t
,

45
do_l\x9ak
,

46
do_uƚk
,

47
no_sys
,

48
do_chd\x9c
,

49
do_time
,

50
do_mknod
,

51
do_chmod
,

52
do_chown
,

53
no_sys
,

54
do_\xa1\xa9
,

55
do_l\xa3ek
,

56
no_sys
,

57
do_mou\xc1
,

58
do_umou\xc1
,

59
do_\xa3t
,

60
no_sys
,

61
do_\xa1ime
,

62
no_sys
,

63
no_sys
,

64
do_f\xa1\xa9
,

65
no_sys
,

66
do_utime
,

67
no_sys
,

68
no_sys
,

69
do_ac\xfbss
,

70
no_sys
,

71
no_sys
,

72
do_sync
,

73
no_sys
,

74
no_sys
,

75
no_sys
,

76
no_sys
,

77
do_dup
,

78
do_p\x9de
,

79
do_tims
,

80
no_sys
,

81
no_sys
,

82
do_\xa3t
,

83
no_sys
,

84
no_sys
,

85
no_sys
,

86
no_sys
,

87
no_sys
,

88
no_sys
,

89
no_sys
,

90
do_io\xf9l
,

91
no_sys
,

92
no_sys
,

93
no_sys
,

94
no_sys
,

95
no_sys
,

96
do_umask
,

97
do_chro\xd9
,

98
no_sys
,

99
no_sys
,

101
no_sys
,

102
do_u\xc5au\xa3
,

103
no_sys
,

104
do_\xbbvive
,

105
no_sys


108
rw_dev
(),
rw_dev2
();

116 
dm\xad

	gdm\xad
[] = {

120
no_\xff\x\xfb
,
rw_dev
,\x82o_\xff\xce,
MEM
,

121
no_\xff\x\xfb
,
rw_dev
,\x82o_\xff\xce,
FLOPPY
,

122
no_\xff\x\xfb
,
rw_dev
,\x82o_\xff\xce,
WINCHESTER
,

123
no_\xff\x\xfb
,
rw_dev
,\x82o_\xff\xce,
TTY
,

124
no_\xff\x\xfb
,
rw_dev2
,\x82o_\xff\xce,
TTY
,

125
no_\xff\x\xfb
,
rw_dev
,\x82o_\xff\xce,
PRINTER


128 
	gmax_maj\xdc
 = (
dm\xad
) / (dmap);

	@fs/time.cpp

10 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

11 
	~"../h/com.h\xb5
"

12 
	~"../h/cڡ.h\xb5
"

13 
	~"../h/\x94r\xdc.h\xb5
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"cڡ.h\xb5
"

16 
	~"f\x9\x93.h\xb5
"

17 
	~"\xe5roc.h\xb5
"

18 
	~"glo.h\xb5
"

19 
	~"\x9aode.h\xb5
"

20 
	~"\xb7\xbfm.h\xb5
"

21 
	~"ty\xb3.h\xb5
"

23
PRIVATE

mes\xa7ge

	g\x\xe3ock_mess
;

28
PUBLIC
 
	$do_utime
() {

31 
\x9aode
 *
r\x9d
;

32 
r
;

33 
\x9aode
 *
	`\x97t_\xb7th
();

36 i\xe0(
	`\xe3tch_\xc7me
(
utime_f\x9\x93
,
utime_\xcbngth
,
M1
\xe8!\xf0
OK
)

37  (
\x94r_code
);

38 i\xe0((
r\x9d
 =
	`\x97t_\xb7th
(
u\xa3r_\xb7th
)\xe8=\xf0
NIL_INODE
)

39  (
\x94r_code
);

42
r
 =
OK
;

43 i\xe0(
r\x9d
->
i_uid
 !\xf0
\xe5
->
\xe5_effuid
 && !
su\xb3r_u\xa3r
)

44
r
 =
E\xbc\xdcCode
::
EPERM
;

45 i\xe0(
r
 =\xf0
OK
) {

46
r\x9d
->
i_modtime
 =
upd\xa9e_time
;

47
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

50
	`put_\x9aode
(
r\x9d
);

51  (
r
);

52
	}
}

57
PUBLIC
 
	$do_time
()

62
\xbb\xae_time

	`\x\xe3ock_time
();

64
\xbb\xb6y_l1
 =
	`\x\xe3ock_time
();

65  (
OK
);

66
	}
}

71
PUBLIC
 
	$do_\xa1ime
() {

74 
k
;

76 i\xe0(!
su\xb3r_u\xa3r
)

77  (
E\xbc\xdcCode
::
EPERM
);

78
\xfeock_mess
.
m_ty\xb3
 =
SET_TIME
;

79
	`\xc3w_time
(
\xfeock_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
\x8d
);

80 i\xe0((
k
 =
	`\xa3nd\xbbc
(
CLOCK
, &
\xfeock_mess
)\xe8!\xf0
OK
)

81
	`\xb7nic
("do_\xa1im\x90\x94r\xdc",
k
);

82  (
OK
);

83
	}
}

88
PUBLIC
 
	$do_tims
() {

91
\xbb\xae_time

t
[4];

93
	`sys_times
(
who
,
t
);

94
\xbb\xb6y_t1
 =
t
[0];

95
\xbb\xb6y_t2
 =
t
[1];

96
\xbb\xb6y_t3
 =
t
[2];

97
\xbb\xb6y_t4
 =
t
[3];

98  (
OK
);

99
	}
}

	@fs/type.hpp

3 
	sd\x9c_\xa1ru\xf9
 {

4
\x9aode_\xc4

	md_\x9aum
;

5 
	md_\xc7me
[
NAME_SIZE
];

9 
	sd_\x9aode
 {

10
mask_b\x99s

	mi_mode
;

11
uid

	mi_uid
;

12
f\x9\x93_pos

	mi_size
;

13
f\x9\x93_pos64

	mi_size64
;

14
\xbb\xae_time

	mi_modtime
;

15
gid

	mi_gid
;

16
l\x9aks

	mi_ƚks
;

17
z\xd\xab_\xc4

	mi_z\xd\xab
[
NR_ZONE_NUMS
];

	@fs/utility.cpp

10 
	~"../h/com.h\xb5
"

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/\x94r\xdc.h\xb5
"

13 
	~"../h/ty\xb3.h\xb5
"

14 
	~"buf.h\xb5
"

15 
	~"cڡ.h\xb5
"

16 
	~"f\x9\x93.h\xb5
"

17 
	~"\xe5roc.h\xb5
"

18 
	~"glo.h\xb5
"

19 
	~"\x9aode.h\xb5
"

20 
	~"\xb7\xbfm.h\xb5
"

21 
	~"su\xb3r.h\xb5
"

22 
	~"ty\xb3.h\xb5
"

23 
	~<\x\xabgܙhm
>

25 
	g\xb7nick\x9ag
 = 0;

26 
mes\xa7ge

	g\x\xe3ock_mess
{};

32 [[
nodis\xf\xe4d
]]
\xbb\xae_time

	$\x\xe3ock_time
() {

33
\xfeock_mess
.
m_ty\xb3
 =
GET_TIME
;

34 
k
 =
	`\xa3nd\xbbc
(
CLOCK
, &
\xfeock_mess
);

35 i\xe0(
k
 !\xf0
OK
) {

36
	`\xb7nic
("\xfeock_tim\x90\x94r",
k
);

39 aut\xd8*
\xa5
 =
	`g\x91_su\xb3r
(
ROOT_DEV
);

40
\xa5
->
s_time
 =
	`\xc3w_time
(
\xfeock_mess
);

41 i\xe0(!
\xa5
->
s_rd_\xd\xaey
) {

42
\xa5
->
s_d\x9\xf9
 =
DIRTY
;

45 
\xa1\xa9ic_\xff\xa1
<
\xbb\xae_time
>(
	`\xc3w_time
(
\xfeock_mess
));

46
	}
}

54 [[
nodis\xf\xe4d
]] 
	$cmp_\xa1r\x9ag
(cڡ *
r\xa51
, cڡ *
r\xa52
, 
n
) {

55 
i
 = 0; i <
n
; ++i) {

56 i\xe0(
r\xa51
[
i
] !\xf0
r\xa52
[i]) {

61
	}
}

69
\x9al\x9ae
 
	$c\xddy
(*
de\xa1
, cڡ *
sour\xfb
, 
by\x8bs
) {

70 i\xe0(
by\x8bs
 <= 0) {

73
\xa1d
::
	`memmove
(
de\xa1
,
sour\xfb
,
\xa1\xa9ic_\xff\xa1
<
size_t
>(
by\x8bs
));

74
	}
}

83 [[
nodis\xf\xe4d
]] 
	$\xe3tch_\xc7me
(cڡ *
\xb7th
, 
\xcbn
, 
\xe6ag
) {

84 i\xe0(
\xe6ag
 =\xf0
M3
 &&
\xcbn
 <\xf0
M3_STRING
) {

85
\xa1d
::
	`c\xddy_n
(
\xb7th\xc7me
,
\xcbn
,
u\xa3r_\xb7th
);

86 
OK
;

88 i\xe0(
\xcbn
 >
MAX_PATH
) {

89
\x94r_code
 =
E\xbc\xdcCode
::
E_LONG_STRING
;

90 
ERROR
;

92
v\x9c_by\x8bs

v\xb7th
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<v\x9c_by\x8bs>(
\xb7th
);

93
\x94r_code
 =
	`rw_u\xa3r
(
D
,
who
,
v\xb7th
,
\xa1\xa9ic_\xff\xa1
<
v\x9c_by\x8bs
>(
\xcbn
),
u\xa3r_\xb7th
,
FROM_USER
);

94 
\x94r_code
;

99 [[
nodis\xf\xe4d
]] 
	`no_sys
(\xe8{ 
E\xbc\xdcCode
::
EINVAL
; }

106 
	`\xb7nic
(cڡ *
f\xdcm\xa9
, 
num
) {

107 i\xe0(
\xb7nick\x9ag
) {

110
\xb7nick\x9ag
 =
TRUE
;

111
	`\xb4\x9\xa9f
("F\x9e\x90sy\xa1em\x85\xaaic: %\xa0",
f\xdcm\xa9
);

112 i\xe0(
num
 !\xf0
NO_NUM
) {

113
	`\xb4\x9\xa9f
("%d",
num
);

115
	`\xb4\x9\xa9f
("\n");

116
	`do_sync
();

117
	`sys_ab\xd\xf9
();

	@fs/write.cpp

13 
	~"../h/cڡ.h\xb5
"

14 
	~"../h/\x94r\xdc.h\xb5
"

15 
	~"../h/ty\xb3.h\xb5
"

16 
	~"buf.h\xb5
"

17 
	~"com\xb7t.h\xb5
"

18 
	~"cڡ.h\xb5
"

19 
	~"f\x9\x93.h\xb5
"

20 
	~"\xe5roc.h\xb5
"

21 
	~"glo.h\xb5
"

22 
	~"\x9aode.h\xb5
"

23 
	~"su\xb3r.h\xb5
"

24 
	~"ty\xb3.h\xb5
"

25 
	~<m\x9aix/fs/cڡ.h\xb5
>

27
us\x9ag

	gIoMode
 =
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
::
IoMode
;

28 
	~<c\xa1ddef
>

29 
	~<c\xa1d\x9\xa9
>

34
PUBLIC
 
	$do_wr\x99e
() {

36  (
	`\xbbad_wr\x99e
(
WRITING
));

37
	}
}

43 
	$wr\x99e_m\xad
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
,
u\x9\xa916_t

\xc3w_z\xdae
) {

48 
s\xff\xcb
;

49
u\x9\xa916_t

z
;

50
u\x9\xa916_t
 *
zp
;

51
u\x9\xa916_t

b
;

52
\x9at32_t

ex\xfbss
,
z\xd\xab
;

53 
\x9adex
;

54 
buf
 *
bp
;

55 
\xc3w_\x9ad
,
\xc3w_dbl
;

57
z\xd\xab_\xc4

	`\x\xabloc_z\xd\xab
();

58 
buf
 *
	`g\x91_block
();

59
\xbb\xae_time

	`\x\xe3ock_time
();

61
r\x9d
->
i_d\x9\xf9
 =
DIRTY
;

62
bp
 =
NIL_BUF
;

63
s\xff\xcb
 =
	`s\xff\xcb_\xe7\xf9\xdc
(
r\x9d
);

64
z\xd\xab
 = (
pos\x99i\xda
 /
BLOCK_SIZE
\xe8>>
s\xff\xcb
;

67 i\xe0(
z\xd\xab
 <
NR_DZONE_NUM
) {

69
r\x9d
->
i_z\xd\xab
[
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
z\xd\xab
)] =
\xc3w_z\xdae
;

70
r\x9d
->
i_modtime
 =
	`\x\xe3ock_time
();

71  (
OK
);

75
ex\xfbss
 =
z\xd\xab
 -
NR_DZONE_NUM
;

76
\xc3w_\x9ad
 =
FALSE
;

77
\xc3w_dbl
 =
FALSE
;

79 i\xe0(
ex\xfbss
 <
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
NR_INDIRECTS
)) {

81
zp
 = &
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
];

85 i\xe0((
z
 =
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
 + 1]\xe8=\xf0
kNoZ\xd\xab
) {

89 i\xe0((
z
 =
	`\x\xabloc_z\xd\xab
(
r\x9d
->
i_dev
,\x84\x9d->
i_z\xd\xab
[0])\xe8=\xf0
kNoZ\xd\xab
)

90  (
\x94r_code
);

91
r\x9d
->
i_z\xd\xab
[
NR_DZONE_NUM
 + 1] =
z
;

92
\xc3w_dbl
 =
TRUE
;

96
ex\xfbss
 -\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
NR_INDIRECTS
);

97
\x9adex
 =
\xa1\xa9ic_\xff\xa1
<>(
ex\xfbss
 / s\x8ftic_\xff\xa1<
\x9at32_t
>(
NR_INDIRECTS
));

98
ex\xfbss
 =\x83x\xfbs\xa0%
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>(
NR_INDIRECTS
);

99 i\xe0(
\x9adex
 >\xf0
\xa1\xa9ic_\xff\xa1
<>(
NR_INDIRECTS
))

100  (
E\xbc\xdcCode
::
EFBIG
);

102
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
);

104
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
, (
\xc3w_dbl
 ?
IoMode
::
NoR\x97d
 : IoMode::
N\xdcm\x\xab
));

105 i\xe0(
\xc3w_dbl
)

106
	`z\x94o_block
(
bp
);

107
zp
 = &
bp
->
b_\x9ad
[
\x9adex
];

111 i\xe0(*
zp
 =\xf0
kNoZ\xd\xab
) {

113 *
zp
 =
	`\x\xabloc_z\xd\xab
(
r\x9d
->
i_dev
,\x84\x9d->
i_z\xd\xab
[0]);

114
\xc3w_\x9ad
 =
TRUE
;

115 i\xe0(
bp
 !\xf0
NIL_BUF
)

116
bp
->
b_d\x9\xf9
 =
DIRTY
;

117 i\xe0(*
zp
 =\xf0
kNoZ\xd\xab
) {

118
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

119  (
\x94r_code
);

122
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

126
b
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(*
zp
\xe8<<
s\xff\xcb
);

127
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
, (
\xc3w_\x9ad
 ?
IoMode
::
NoR\x97d
 : IoMode::
N\xdcm\x\xab
));

128 i\xe0(
\xc3w_\x9ad
)

129
	`z\x94o_block
(
bp
);

131
bp
->
b_\x9ad
[
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
ex\xfbss
)] =
\xc3w_z\xdae
;

132
r\x9d
->
i_modtime
 =
	`\x\xe3ock_time
();

133
bp
->
b_d\x9\xf9
 =
DIRTY
;

134
	`put_block
(
bp
,
BlockTy\xb3
::
Ind\x9\xfb\xf9
);

136  (
OK
);

137
	}
}

143
PUBLIC
 
	$\x\xe3\x97r_z\xd\xab
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos
, 
\xe6ag
) {

152 
buf
 *
bp
;

153
u\x9\xa916_t

b
,
blo
,
bhi
;

154
\x9at32_t

\xc3xt
;

155 
s\xff\xcb
;

156
u\x9\xa932_t

z\xd\xab_size
;

157 
buf
 *
	`g\x91_block
();

158
u\x9\xa916_t

	`\xbbad_m\xad
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
);

161 i\xe0((
s\xff\xcb
 =
	`s\xff\xcb_\xe7\xf9\xdc
(
r\x9d
)) == 0)

164
z\xd\xab_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa932_t
>(
BLOCK_SIZE
\xe8<<
s\xff\xcb
;

165 i\xe0(
\xe6ag
 == 1) {

167
pos
 =
\xa1\xa9ic_\xff\xa1
<
\x9at32_t
>((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>\xd5os\xe8/
z\xd\xab_size
) * zone_size);

169
\xc3xt
 =
pos
 +
BLOCK_SIZE
 - 1;

173 i\xe0(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa932_t
>(
\xc3xt
\xe8/
z\xd\xab_size
 !\xf0\xa1\xa9ic_\xff\xa1<u\x9at32_t>(
pos
) / zone_size)

175 i\xe0((
blo
 =
	`\xbbad_m\xad
(
r\x9d
,
\xc3xt
)\xe8=\xf0
kNoBlock
)

178
bhi
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
blo
\xe8>>
s\xff\xcb
) + 1) << scale) - 1;

181 
b
 =
blo
; b <\xf0
bhi
; b++) {

183
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
NoR\x97d
);

184
	`z\x94o_block
(
bp
);

185
	`put_block
(
bp
,
BlockTy\xb3
::
Fu\x\xfbD\xa9a
);

187
	}
}

193
PUBLIC
 
buf
 *
	$\xc3w_block
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
) {

201 
buf
 *
bp
;

202
u\x9\xa916_t

b
,
ba\xa3_block
;

203
u\x9\xa916_t

z
;

204
u\x9\xa932_t

z\xd\xab_size
;

205 
s\xff\xcb
,
r
;

206 
su\xb3r_block
 *
\xa5
;

207 
buf
 *
	`g\x91_block
();

208 
su\xb3r_block
 *
	`g\x91_su\xb3r
();

209
u\x9\xa916_t

	`\xbbad_m\xad
(
\x9aode
 *
r\x9d
,
\x9at32_t

pos\x99i\xda
);

210
u\x9\xa916_t

	`\x\xabloc_z\xd\xab
(u\x9at16_\x88
dev
, u\x9at16_\x88
z
);

213 i\xe0((
b
 =
	`\xbbad_m\xad
(
r\x9d
,
pos\x99i\xda
)\xe8=\xf0
kNoBlock
) {

215 i\xe0(
	`com\xb7t_g\x91_size
(
r\x9d
) == 0) {

216
\xa5
 =
	`g\x91_su\xb3r
(
r\x9d
->
i_dev
);

217
z
 =
\xa5
->
s_f\x9c\xa1d\xa9az\xd\xab
;

219
z
 =
r\x9d
->
i_z\xd\xab
[0];

222 i\xe0((
z
 =
	`\x\xabloc_z\xd\xab
(
r\x9d
->
i_dev
, z)\xe8=\xf0
kNoZ\xd\xab
)

223  (
NIL_BUF
);

225 i\xe0((
r
 =
	`wr\x99e_m\xad
(
r\x9d
,
pos\x99i\xda
,
z
)\xe8!\xf0
OK
) {

226
	`\xe4\x93_z\xd\xab
(
r\x9d
->
i_dev
,
z
);

227
\x94r_code
 =
r
;

228  (
NIL_BUF
);

233 i\xe0(
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
pos\x99i\xda
\xe8!\xf0
	`com\xb7t_g\x91_size
(
r\x9d
))

234
	`\x\xe3\x97r_z\xd\xab
(
r\x9d
,
pos\x99i\xda
, 1);

235
s\xff\xcb
 =
	`s\xff\xcb_\xe7\xf9\xdc
(
r\x9d
);

236
ba\xa3_block
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
z
\xe8<<
s\xff\xcb
);

237
z\xd\xab_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa932_t
>(
BLOCK_SIZE
\xe8<<
s\xff\xcb
;

240
b
 =
ba\xa3_block
 +

241
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((\xa1\xa9ic_\xff\xa1<
u\x9\xa932_t
>(
pos\x99i\xda
\xe8%
z\xd\xab_size
\xe8/
BLOCK_SIZE
);

244
bp
 =
	`g\x91_block
(
r\x9d
->
i_dev
,
b
,
IoMode
::
NoR\x97d
);

245
	`z\x94o_block
(
bp
);

246  (
bp
);

247
	}
}

253
PUBLIC
 
	$z\x94o_block
(
buf
 *
bp
) {

256 
n
;

257 *
z\x9d
;

259
n
 =
INTS_PER_BLOCK
;

260
z\x9d
 =
bp
->
b_\x9\xa9
;

263 *
z\x9d
++ = 0;

264 } --
n
);

265
bp
->
b_d\x9\xf9
 =
DIRTY
;

266
	}
}

	@h/callnr.hpp

1 #\xb4agm\xa8
\xda\xfb


4 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

5
\x9al\x9ae

cڡex\xb4
 
	gNCALLS
 = 69;

6
\x9al\x9ae

cڡex\xb4
 
	gEXIT
 = 1;

7
\x9al\x9ae

cڡex\xb4
 
	gFORK
 = 2;

8
\x9al\x9ae

cڡex\xb4
 
	gREAD
 = 3;

9
\x9al\x9ae

cڡex\xb4
 
	gWRITE
 = 4;

10
\x9al\x9ae

cڡex\xb4
 
	gOPEN
 = 5;

11
\x9al\x9ae

cڡex\xb4
 
	gCLOSE
 = 6;

12
\x9al\x9ae

cڡex\xb4
 
	gWAIT
 = 7;

13
\x9al\x9ae

cڡex\xb4
 
	gCREAT
 = 8;

14
\x9al\x9ae

cڡex\xb4
 
	gLINK
 = 9;

15
\x9al\x9ae

cڡex\xb4
 
	gUNLINK
 = 10;

16
\x9al\x9ae

cڡex\xb4
 
	gCHDIR
 = 12;

17
\x9al\x9ae

cڡex\xb4
 
	gTIME
 = 13;

18
\x9al\x9ae

cڡex\xb4
 
	gMKNOD
 = 14;

19
\x9al\x9ae

cڡex\xb4
 
	gCHMOD
 = 15;

20
\x9al\x9ae

cڡex\xb4
 
	gCHOWN
 = 16;

21
\x9al\x9ae

cڡex\xb4
 
	gBRK
 = 17;

22
\x9al\x9ae

cڡex\xb4
 
	gSTAT
 = 18;

23
\x9al\x9ae

cڡex\xb4
 
	gLSEEK
 = 19;

24
\x9al\x9ae

cڡex\xb4
 
	gGETPID
 = 20;

25
\x9al\x9ae

cڡex\xb4
 
	gMOUNT
 = 21;

26
\x9al\x9ae

cڡex\xb4
 
	gUMOUNT
 = 22;

27
\x9al\x9ae

cڡex\xb4
 
	gSETUID
 = 23;

28
\x9al\x9ae

cڡex\xb4
 
	gGETUID
 = 24;

29
\x9al\x9ae

cڡex\xb4
 
	gSTIME
 = 25;

30
\x9al\x9ae

cڡex\xb4
 
	gALARM
 = 27;

31
\x9al\x9ae

cڡex\xb4
 
	gFSTAT
 = 28;

32
\x9al\x9ae

cڡex\xb4
 
	gPAUSE
 = 29;

33
\x9al\x9ae

cڡex\xb4
 
	gUTIME
 = 30;

34
\x9al\x9ae

cڡex\xb4
 
	gACCESS
 = 33;

35
\x9al\x9ae

cڡex\xb4
 
	gSYNC
 = 36;

36
\x9al\x9ae

cڡex\xb4
 
	gKILL
 = 37;

37
\x9al\x9ae

cڡex\xb4
 
	gDUP
 = 41;

38
\x9al\x9ae

cڡex\xb4
 
	gPIPE
 = 42;

39
\x9al\x9ae

cڡex\xb4
 
	gTIMES
 = 43;

40
\x9al\x9ae

cڡex\xb4
 
	gSETGID
 = 46;

41
\x9al\x9ae

cڡex\xb4
 
	gGETGID
 = 47;

42
\x9al\x9ae

cڡex\xb4
 
	gSIGNAL
 = 48;

43
\x9al\x9ae

cڡex\xb4
 
	gIOCTL
 = 54;

44
\x9al\x9ae

cڡex\xb4
 
	gEXEC
 = 59;

45
\x9al\x9ae

cڡex\xb4
 
	gUMASK
 = 60;

46
\x9al\x9ae

cڡex\xb4
 
	gCHROOT
 = 61;

49
\x9al\x9ae

cڡex\xb4
 
	gKSIG
 = 64;

50
\x9al\x9ae

cڡex\xb4
 
	gUNPAUSE
 = 65;

51
\x9al\x9ae

cڡex\xb4
 
	gBRK2
 = 66;

52
\x9al\x9ae

cڡex\xb4
 
	gREVIVE
 = 67;

53
\x9al\x9ae

cڡex\xb4
 
	gTASK_REPLY
 = 68;

	@h/com.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"cڡ.h\xb5
"

8 
	~"ty\xb3.h\xb5
"

11
\x9al\x9ae

cڡex\xb4
 
	gSEND
 = 1;

12
\x9al\x9ae

cڡex\xb4
 
	gRECEIVE
 = 2;

13
\x9al\x9ae

cڡex\xb4
 
	gBOTH
 = 3;

14
\x9al\x9ae

cڡex\xb4
 
	gANY
 =
NR_PROCS
 + 100;

17
\x9al\x9ae

cڡex\xb4
 
	gHARDWARE
 = -1;

19
\x9al\x9ae

cڡex\xb4
 
	gSYSTASK
 = -2;

20
\x9al\x9ae

cڡex\xb4
 
	gSYS_XIT
 = 1;

21
\x9al\x9ae

cڡex\xb4
 
	gSYS_GETSP
 = 2;

22
\x9al\x9ae

cڡex\xb4
 
	gSYS_SIG
 = 3;

23
\x9al\x9ae

cڡex\xb4
 
	gSYS_FORK
 = 4;

24
\x9al\x9ae

cڡex\xb4
 
	gSYS_NEWMAP
 = 5;

25
\x9al\x9ae

cڡex\xb4
 
	gSYS_COPY
 = 6;

26
\x9al\x9ae

cڡex\xb4
 
	gSYS_EXEC
 = 7;

27
\x9al\x9ae

cڡex\xb4
 
	gSYS_TIMES
 = 8;

28
\x9al\x9ae

cڡex\xb4
 
	gSYS_ABORT
 = 9;

30
\x9al\x9ae

cڡex\xb4
 
	gCLOCK
 = -3;

31
\x9al\x9ae

cڡex\xb4
 
	gSET_ALARM
 = 1;

32
\x9al\x9ae

cڡex\xb4
 
	gCLOCK_TICK
 = 2;

33
\x9al\x9ae

cڡex\xb4
 
	gGET_TIME
 = 3;

34
\x9al\x9ae

cڡex\xb4
 
	gSET_TIME
 = 4;

35
\x9al\x9ae

cڡex\xb4
 
	gREAL_TIME
 = 1;

37
\x9al\x9ae

cڡex\xb4
 
	gMEM
 = -4;

38
\x9al\x9ae

cڡex\xb4
 
	gRAM_DEV
 = 0;

39
\x9al\x9ae

cڡex\xb4
 
	gMEM_DEV
 = 1;

40
\x9al\x9ae

cڡex\xb4
 
	gKMEM_DEV
 = 2;

41
\x9al\x9ae

cڡex\xb4
 
	gNULL_DEV
 = 3;

43
\x9al\x9ae

cڡex\xb4
 
	gFLOPPY
 = -5;

44
\x9al\x9ae

cڡex\xb4
 
	gWINCHESTER
 = -6;

45
\x9al\x9ae

cڡex\xb4
 
	gDISKINT
 = 1;

46
\x9al\x9ae

cڡex\xb4
 
	gDISK_READ
 = 3;

47
\x9al\x9ae

cڡex\xb4
 
	gDISK_WRITE
 = 4;

48
\x9al\x9ae

cڡex\xb4
 
	gDISK_IOCTL
 = 5;

50
\x9al\x9ae

cڡex\xb4
 
	gTTY
 = -7;

51
\x9al\x9ae

cڡex\xb4
 
	gPRINTER
 = -8;

52
\x9al\x9ae

cڡex\xb4
 
	gTTY_CHAR_INT
 = 1;

53
\x9al\x9ae

cڡex\xb4
 
	gTTY_O_DONE
 = 2;

54
\x9al\x9ae

cڡex\xb4
 
	gTTY_READ
 = 3;

55
\x9al\x9ae

cڡex\xb4
 
	gTTY_WRITE
 = 4;

56
\x9al\x9ae

cڡex\xb4
 
	gTTY_IOCTL
 = 5;

57
\x9al\x9ae

cڡex\xb4
 
	gSUSPEND
 = -998;

66
\x9al\x9ae

	g\x9\xa964_t
 &
	$d\x96\x8f_ticks
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_l1
();
	}
}

72
\x9al\x9ae
 (*&
	$func_to_\xff\x\xfb
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
)(\xe8{  m.
	`m6_f1
();
	}
}

78
\x9al\x9ae

	g\x9\xa964_t
 &
	$\xc3w_time
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_l1
();
	}
}

84
\x9al\x9ae
 &
	$\x\xe3ock_\xb4oc_\xc4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_i1
();
	}
}

90
\x9al\x9ae

	g\x9\xa964_t
 &
	$\xa3c\xdads_\xcb\xe1
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_l1
();
	}
}

98
\x9al\x9ae
 &
	$devi\xfb
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i1
();
	}
}

104
\x9al\x9ae
 &
	$\xb4oc_\xc4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i2
();
	}
}

110
\x9al\x9ae
 &
	$cou\xc1
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i3
();
	}
}

116
\x9al\x9ae

	g\x9\xa964_t
 &
	$pos\x99i\xda
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_l1
();
	}
}

122
\x9al\x9ae
 *&
	$add\xbbss
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_p1
();
	}
}

130
\x9al\x9ae
 &
	$\x89y_l\x9\xab
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i1
();
	}
}

136
\x9al\x9ae
 &
	$\x89y_\xbbque\xa1
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i3
();
	}
}

142
\x9al\x9ae

	g\x9\xa964_t
 &
	$\x89y_\xa5ek
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_l1
();
	}
}

148
\x9al\x9ae

	g\x9\xa964_t
 &
	$\x89y_\xe6ags
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_l2
();
	}
}

156
\x9al\x9ae
 &
	$\xbbp_\xb4oc_\xc4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i1
();
	}
}

162
\x9al\x9ae
 &
	$\xbbp_\xa1\xa9us
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m2_i2
();
	}
}

170
\x9al\x9ae
 &
	$\xa4c_\xa5a\xfb
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_c1
();
	}
}

176
\x9al\x9ae
 &
	$\xa4c_\xb4oc_\xc4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_i1
();
	}
}

182
\x9al\x9ae

	g\x9\xa964_t
 &
	$\xa4c_buf\xe3r
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_l1
();
	}
}

188
\x9al\x9ae
 &
	$d\xa1_\xa5a\xfb
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_c2
();
	}
}

194
\x9al\x9ae
 &
	$d\xa1_\xb4oc_\xc4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_i2
();
	}
}

200
\x9al\x9ae

	g\x9\xa964_t
 &
	$d\xa1_buf\xe3r
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_l2
();
	}
}

206
\x9al\x9ae

	g\x9\xa964_t
 &
	$c\xddy_by\x8bs
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m5_l3
();
	}
}

214
\x9al\x9ae

	g\x9\xa964_t
 &
	$u\xa3r_time
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m4_l1
();
	}
}

220
\x9al\x9ae

	g\x9\xa964_t
 &
	$sy\xa1em_time
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m4_l2
();
	}
}

226
\x9al\x9ae

	g\x9\xa964_t
 &
	$ch\x9ed_utime
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m4_l3
();
	}
}

232
\x9al\x9ae

	g\x9\xa964_t
 &
	$ch\x9ed_\xa1ime
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m4_l4
();
	}
}

239
\x9al\x9ae
 &
	$\xb4oc1
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_i1
();
	}
}

245
\x9al\x9ae
 &
	$\xb4oc2
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_i2
();
	}
}

251
\x9al\x9ae
 &
	$pid
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_i3
();
	}
}

257
\x9al\x9ae
 *&
	$\xa1ack_\xb1r
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_p1
();
	}
}

263
\x9al\x9ae
 
	$\xa3t_tok\x92
(
mes\xa7ge
 &
m
,
\xa1d
::
u\x9\xa964_t

v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

264
m
.
	`m1_p2
(\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
v\x\xab
);

265
	}
}

271
\x9al\x9ae

	g\xa1d
::
u\x9\xa964_t

	$tok\x92
(cڡ
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {

272 
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
m
.
	`m1_p2
());

273
	}
}

279
\x9al\x9ae
 &
	$\xb4
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_i1
();
	}
}

285
\x9al\x9ae
 &
	$signum
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m6_i2
();
	}
}

291
\x9al\x9ae
 (*&
	$func
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
)(\xe8{  m.
	`m6_f1
();
	}
}

297
\x9al\x9ae
 *&
	$mem_\xb1r
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_p1
();
	}
}

299
\x9al\x9ae

cڡex\xb4
 
	gCANCEL
 = 0;

305
\x9al\x9ae
 &
	$sig_m\xad
(
mes\xa7ge
 &
m
\xe8
n\xdbx\xfb\xb1
 {  m.
	`m1_i2
();
	}
}

	@h/const.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~"ty\xb3.h\xb5
"

16 #i\xe2de\xe0
EXTERN


17 
	#EXTERN


	)

19 #i\xe2de\xe0
PRIVATE


20 
	#PRIVATE
 

	)

22 #i\xe2de\xe0
PUBLIC


23 
	#PUBLIC


	)

27
\x9al\x9ae

cڡex\xb4

bo\xde

TRUE
 =
\x8cue
;

28
\x9al\x9ae

cڡex\xb4

bo\xde

	gFALSE
 =
\xe7l\xa3
;

32
\x9al\x9ae

cڡex\xb4
 
	gHZ
 = 60;

33
\x9al\x9ae

cڡex\xb4
 
	gBLOCK_SIZE
 = 1024;

34
\x9al\x9ae

cڡex\xb4
 
	gMAJOR
 = 8;

35
\x9al\x9ae

cڡex\xb4
 
	gMINOR
 = 0;

37
\x9al\x9ae

cڡex\xb4
 
	gNR_TASKS
 = 8;

38
\x9al\x9ae

cڡex\xb4
 
	gNR_PROCS
 = 16;

39
\x9al\x9ae

cڡex\xb4
 
	gNR_SEGS
 = 3;

40
\x9al\x9ae

cڡex\xb4
 
	gT
 = 0;

41
\x9al\x9ae

cڡex\xb4
 
	gD
 = 1;

42
\x9al\x9ae

cڡex\xb4
 
	gS
 = 2;

44
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
\x9at32_t

kMaxPL\xdag
 = 2147483647;

45
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
\x9at32_t

MAX_P_LONG
 =
kMaxPL\xdag
;

49
\x9al\x9ae

cڡex\xb4
 
	gCLICK_SIZE
 = 0020;

50
\x9al\x9ae

cڡex\xb4
 
	gCLICK_SHIFT
 = 4;

53
\x9al\x9ae

cڡex\xb4
 
	gMM_PROC_NR
 = 0;

54
\x9al\x9ae

cڡex\xb4
 
	gFS_PROC_NR
 = 1;

55
\x9al\x9ae

cڡex\xb4
 
	gINIT_PROC_NR
 = 2;

56
\x9al\x9ae

cڡex\xb4
 
	gLOW_USER
 = 2;

59
\x9al\x9ae

cڡex\xb4
 
	gBYTE_MASK
 = 0377;

60
\x9al\x9ae

cڡex\xb4
 
	gBYTE
 =
BYTE_MASK
;

61
\x9al\x9ae

cڡex\xb4
 
	gTO_USER
 = 0;

62
\x9al\x9ae

cڡex\xb4
 
	gFROM_USER
 = 1;

63
\x9al\x9ae

cڡex\xb4
 
	gREADING
 = 0;

64
\x9al\x9ae

cڡex\xb4
 
	gWRITING
 = 1;

65
\x9al\x9ae

cڡex\xb4
 
	gABS
 = -999;

67
\x9al\x9ae

cڡex\xb4
 
	gWORD_SIZE
 = 2;

72
\x9al\x9ae

cڡex\xb4
 
	gNO_NUM
 = 0x8000;

73
\x9al\x9ae

cڡex\xb4
 
	gMAX_PATH_LEN
 = 128;

74
\x9al\x9ae

cڡex\xb4
 
	gSIG_PUSH_BYTES
 = 8;

75
\x9al\x9ae

cڡex\xb4
 
	gMAX_ISTACK_BYTES
 = 1024;

79
\x9al\x9ae

cڡex\xb4

dev_\xc4

	gROOT_DEV
 =
\xa1\xa9ic_\xff\xa1
<dev_nr>(256);

80
\x9al\x9ae

cڡex\xb4

dev_\xc4

	gBOOT_DEV
 =
\xa1\xa9ic_\xff\xa1
<dev_nr>(512);

84
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_TYPE
 = 0170000;

85
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_REGULAR
 = 0100000;

86
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_BLOCK_SPECIAL
 = 0060000;

87
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_DIRECTORY
 = 0040000;

88
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_CHAR_SPECIAL
 = 0020000;

89
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_SET_UID_BIT
 = 0004000;

90
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_SET_GID_BIT
 = 0002000;

91
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gALL_MODES
 = 0006777;

92
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gRWX_MODES
 = 0000777;

93
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gR_BIT
 = 0000004;

94
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gW_BIT
 = 0000002;

95
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gX_BIT
 = 0000001;

96
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gI_NOT_ALLOC
 = 0000000;

	@h/error.hpp

1 #\xb4agm\xa8
\xda\xfb


2 #i\xe2de\xe0
H_ERROR_HPP


3 
	#H_ERROR_HPP


	)

6 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

9 #ifde\xe0
EPERM


10 #unde\xe0
EPERM


11 #unde\xe0
ENOENT


12 #unde\xe0
ESRCH


13 #unde\xe0
EINTR


14 #unde\xe0
EIO


15 #unde\xe0
ENXIO


16 #unde\xe0
E2BIG


17 #unde\xe0
ENOEXEC


18 #unde\xe0
EBADF


19 #unde\xe0
ECHILD


20 #unde\xe0
EAGAIN


21 #unde\xe0
ENOMEM


22 #unde\xe0
EACCES


23 #unde\xe0
EFAULT


24 #unde\xe0
ENOTBLK


25 #unde\xe0
EBUSY


26 #unde\xe0
EEXIST


27 #unde\xe0
EXDEV


28 #unde\xe0
ENODEV


29 #unde\xe0
ENOTDIR


30 #unde\xe0
EISDIR


31 #unde\xe0
EINVAL


32 #unde\xe0
ENFILE


33 #unde\xe0
EMFILE


34 #unde\xe0
ENOTTY


35 #unde\xe0
ETXTBSY


36 #unde\xe0
EFBIG


37 #unde\xe0
ENOSPC


38 #unde\xe0
ESPIPE


39 #unde\xe0
EROFS


40 #unde\xe0
EMLINK


41 #unde\xe0
EPIPE


42 #unde\xe0
EDOM


43 #unde\xe0
ERANGE


51
cڡex\xb4
 
	gNERROR
 = 34;

54
cڡex\xb4
 
	gOK
 = 0;

58 \xfeas\xa0
	cE\xbc\xdcCode
 : {

59
ERROR
 = -1,

60
	mEPERM
 = -1,

61
	mENOENT
 = -2,

62
	mESRCH
 = -3,

63
	mEINTR
 = -4,

64
	mEIO
 = -5,

65
	mENXIO
 = -6,

66
	mE2BIG
 = -7,

67
	mENOEXEC
 = -8,

68
	mEBADF
 = -9,

69
	mECHILD
 = -10,

70
	mEAGAIN
 = -11,

71
	mENOMEM
 = -12,

72
	mEACCES
 = -13,

73
	mEFAULT
 = -14,

74
	mENOTBLK
 = -15,

75
	mEBUSY
 = -16,

76
	mEEXIST
 = -17,

77
	mEXDEV
 = -18,

78
	mENODEV
 = -19,

79
	mENOTDIR
 = -20,

80
	mEISDIR
 = -21,

81
	mEINVAL
 = -22,

82
	mENFILE
 = -23,

83
	mEMFILE
 = -24,

84
	mENOTTY
 = -25,

85
	mETXTBSY
 = -26,

86
	mEFBIG
 = -27,

87
	mENOSPC
 = -28,

88
	mESPIPE
 = -29,

89
	mEROFS
 = -30,

90
	mEMLINK
 = -31,

91
	mEPIPE
 = -32,

92
	mEDOM
 = -33,

93
	mERANGE
 = -34,

95
	mE_LOCKED
 = -101,

96
	mE_BAD_CALL
 = -102,

97
	mE_LONG_STRING
 = -103,

98
	mEOF_ERROR
 = -104,

101
	mE_BAD_DEST
 = -1,

102
	mE_BAD_SRC
 = -2,

103
	mE_TRY_AGAIN
 = -3,

104
	mE_OVERRUN
 = -4,

105
	mE_BAD_BUF
 = -5,

106
	mE_TASK
 = -6,

107
	mE_NO_MESSAGE
 = -7,

108
	mE_NO_PERM
 = -8,

109
	mE_BAD_FCN
 = -9,

110
	mE_BAD_ADDR
 = -10,

111
	mE_BAD_PROC
 = -11

	@h/signal.h

1 #\xb4agm\xa8
\xda\xfb


2 
	~"sig\xc7l.h\xb5
"

	@h/signal.hpp

7 #\xb4agm\xa8
\xda\xfb


10 
	~"../\x9a\x\xe3ude/sh\xa\xfbd/sig\xc7l_cڡ\x\xafts.h\xb5
"

	@h/stat.hpp

7 #\xb4agm\xa8
\xda\xfb


11 
	~"../h/ty\xb3.h\xb5
"

12 
	~"../\x9a\x\xe3ude/sh\xa\xfbd/\xa1\xa9_\xa1ru\xf9.h\xb5
"

17
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFMT
 = 0170000;

18
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFDIR
 = 0040000;

19
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFCHR
 = 0020000;

20
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFBLK
 = 0060000;

21
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFREG
 = 0100000;

22
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISUID
 = 04000;

23
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISGID
 = 02000;

24
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISVTX
 = 01000;

25
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IREAD
 = 00400;

26
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IWRITE
 = 00200;

27
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IEXEC
 = 00100;

	@h/type.hpp

1 #\xb4agm\xa8
\xda\xfb


4 #i\xe2de\xe0
TYPE_H


5 
	#TYPE_H


	)

8 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

9 
	~<c\xa1ddef
>

10 
	~<c\xa1d\x9\xa9
>

11 
	~<x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
>

17
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>
cڡex\xb4

T

	$max
(
T

a
, T
b
\xe8
n\xdbx\xfb\xb1
 { \x87 > b ?\x87 : b;
	}
}

22
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>
cڡex\xb4

T

	$m\x9a
(
T

a
, T
b
\xe8
n\xdbx\xfb\xb1
 { \x87 < b ?\x87 : b;
	}
}

28
us\x9ag

	gunsh\xd\xf9
 =
u\x9\xa916_t
;

29
us\x9ag

	gblock_\xc4
 =
u\x9\xa916_t
;

30
\x9al\x9ae

cڡex\xb4

block_\xc4

	gkNoBlock
 = 0;

31
\x9al\x9ae

cڡex\xb4

block_\xc4

	gkMaxBlockNr
 = 0177777;

33
us\x9ag

	g\x9aode_\xc4
 =
u\x9\xa916_t
;

34
\x9al\x9ae

cڡex\xb4

\x9aode_\xc4

	gkNoE\xc1ry
 = 0;

35
\x9al\x9ae

cڡex\xb4

\x9aode_\xc4

	gkMaxInodeNr
 = 0177777;

37
us\x9ag

	gz\xd\xab_\xc4
 =
u\x9\xa916_t
;

38
\x9al\x9ae

cڡex\xb4

z\xd\xab_\xc4

	gkNoZ\xd\xab
 = 0;

39
\x9al\x9ae

cڡex\xb4

z\xd\xab_\xc4

	gkHighe\xa1Z\xd\xab
 = 0177777;

41
us\x9ag

	gb\x99_\xc4
 =
u\x9\xa916_t
;

44
us\x9ag

	gz\xd\xab_ty\xb3
 =
u\x9\xa932_t
;

45
us\x9ag

	gmask_b\x99s
 =
u\x9\xa916_t
;

46
us\x9ag

	gdev_\xc4
 =
u\x9\xa916_t
;

47
\x9al\x9ae

cڡex\xb4

dev_\xc4

	gkNoDev
 =
\xa1\xa9ic_\xff\xa1
<dev_nr>(~0);

49
us\x9ag

	gl\x9aks
 =
u\x9\xa98_t
;

50
\x9al\x9ae

cڡex\xb4

l\x9aks

	gkMaxL\x9aks
 = 0177;

53
us\x9ag

	g\xbb\x\xab_time
 =
x\x9aim
::
time_t
;

55
us\x9ag

	gf\x9\x93_pos
 =

56
\x9at32_t
;

57
\x9al\x9ae

cڡex\xb4

f\x9\x93_pos

	gkMaxF\x9\x93Pos
 = 017777777777;

58
us\x9ag

	gf\x9\x93_pos64
 =
i64_t
;

60
\x9al\x9ae

cڡex\xb4

f\x9\x93_pos64

	gkMaxF\x9\x93Pos64
 =
I64_C
(0x7fffffffffffffff);

61
us\x9ag

	guid
 =
u\x9\xa916_t
;

62
us\x9ag

	ggid
 =
u\x9\xa98_t
;

65
us\x9ag

	gv\x9c_by\x8bs
 =
x\x9aim
::
v\x9\xf9_by\x8bs_t
;

66
us\x9ag

	gphys_by\x8bs
 =
x\x9aim
::
phys_by\x8bs_t
;

67
us\x9ag

	gv\x9c_\x\xe3icks
 =
x\x9aim
::
v\x9\xf9_addr_t
;

69
us\x9ag

	gphys_\x\xe3icks
 =
x\x9aim
::
phys_addr_t
;

72
us\x9ag

	gsig\xc3d_\x\xe3icks
 =
\x9at64_t
;

76
\x9al\x9ae

cڡex\xb4
 
	gM1
 = 1;

77
\x9al\x9ae

cڡex\xb4
 
	gM3
 = 3;

78
\x9al\x9ae

cڡex\xb4
 
	gM4
 = 4;

79
\x9al\x9ae

cڡex\xb4
 
	gM3_STRING
 = 14;

81 
	smess_1
 {

82 
	mm1i1
,
	mm1i2
,
	mm1i3
;

83 *
	mm1p1
, *
	mm1p2
, *
	mm1p3
;

85 
	smess_2
 {

86 
	mm2i1
,
	mm2i2
,
	mm2i3
;

87
\x9at64_t

	mm2l1
,
	mm2l2
;

88 *
	mm2p1
;

90 
	smess_3
 {

91 
	mm3i1
,
	mm3i2
;

92 *
	mm3p1
;

93 
	mm3\xff1
[
M3_STRING
];

95 
	smess_4
 {

96
\x9at64_t

	mm4l1
,
	mm4l2
,
	mm4l3
,
	mm4l4
;

98 
	smess_5
 {

99 
	mm5c1
,
	mm5c2
;

100 
	mm5i1
,
	mm5i2
;

101
\x9at64_t

	mm5l1
,
	mm5l2
,
	mm5l3
;

103 
	smess_6
 {

104 
	mm6i1
,
	mm6i2
,
	mm6i3
;

105
\x9at64_t

	mm6l1
;

106 (*
	mm6f1
)();

109 
	smes\xa7ge
 {

110 
	mm_sour\xfb
;

111 
	mm_ty\xb3
;

113
mess_1

	mm_m1
;

114
mess_2

	mm_m2
;

115
mess_3

	mm_m3
;

116
mess_4

	mm_m4
;

117
mess_5

	mm_m5
;

118
mess_6

	mm_m6
;

119 }
	mm_u
;

122
cڡex\xb4
 &
m1_i1
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1i1
; }

123
cڡex\xb4
 cڡ &
m1_i1
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1i1
; }

124
cڡex\xb4
 &
m1_i2
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1i2
; }

125
cڡex\xb4
 cڡ &
m1_i2
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1i2
; }

126
cڡex\xb4
 &
m1_i3
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1i3
; }

127
cڡex\xb4
 cڡ &
m1_i3
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1i3
; }

128
cڡex\xb4
 *&
m1_p1
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1p1
; }

129
cڡex\xb4
 *cڡ &
m1_p1
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1p1
; }

130
cڡex\xb4
 *&
m1_p2
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1p2
; }

131
cڡex\xb4
 *cڡ &
m1_p2
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1p2
; }

132
cڡex\xb4
 *&
m1_p3
(\xe8{ 
	mm_u
.
	mm_m1
.
	mm1p3
; }

133
cڡex\xb4
 *cڡ &
m1_p3
(\xe8cڡ { 
	mm_u
.
	mm_m1
.
	mm1p3
; }

135
cڡex\xb4
 &
m2_i1
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2i1
; }

136
cڡex\xb4
 cڡ &
m2_i1
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2i1
; }

137
cڡex\xb4
 &
m2_i2
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2i2
; }

138
cڡex\xb4
 cڡ &
m2_i2
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2i2
; }

139
cڡex\xb4
 &
m2_i3
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2i3
; }

140
cڡex\xb4
 cڡ &
m2_i3
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2i3
; }

141
cڡex\xb4

	m\x9\xa964_t
 &
m2_l1
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2l1
; }

142
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m2_l1
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2l1
; }

143
cڡex\xb4

	m\x9\xa964_t
 &
m2_l2
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2l2
; }

144
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m2_l2
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2l2
; }

145
cڡex\xb4
 *&
m2_p1
(\xe8{ 
	mm_u
.
	mm_m2
.
	mm2p1
; }

146
cڡex\xb4
 *cڡ &
m2_p1
(\xe8cڡ { 
	mm_u
.
	mm_m2
.
	mm2p1
; }

148
cڡex\xb4
 &
m3_i1
(\xe8{ 
	mm_u
.
	mm_m3
.
	mm3i1
; }

149
cڡex\xb4
 cڡ &
m3_i1
(\xe8cڡ { 
	mm_u
.
	mm_m3
.
	mm3i1
; }

150
cڡex\xb4
 &
m3_i2
(\xe8{ 
	mm_u
.
	mm_m3
.
	mm3i2
; }

151
cڡex\xb4
 cڡ &
m3_i2
(\xe8cڡ { 
	mm_u
.
	mm_m3
.
	mm3i2
; }

152
cڡex\xb4
 *&
m3_p1
(\xe8{ 
	mm_u
.
	mm_m3
.
	mm3p1
; }

153
cڡex\xb4
 *cڡ &
m3_p1
(\xe8cڡ { 
	mm_u
.
	mm_m3
.
	mm3p1
; }

154
cڡex\xb4
 *
m3_\xff1
(\xe8{ 
	mm_u
.
	mm_m3
.
	mm3\xff1
; }

155
cڡex\xb4
 cڡ *
m3_\xff1
(\xe8cڡ { 
	mm_u
.
	mm_m3
.
	mm3\xff1
; }

157
cڡex\xb4

	m\x9\xa964_t
 &
m4_l1
(\xe8{ 
	mm_u
.
	mm_m4
.
	mm4l1
; }

158
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m4_l1
(\xe8cڡ { 
	mm_u
.
	mm_m4
.
	mm4l1
; }

159
cڡex\xb4

	m\x9\xa964_t
 &
m4_l2
(\xe8{ 
	mm_u
.
	mm_m4
.
	mm4l2
; }

160
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m4_l2
(\xe8cڡ { 
	mm_u
.
	mm_m4
.
	mm4l2
; }

161
cڡex\xb4

	m\x9\xa964_t
 &
m4_l3
(\xe8{ 
	mm_u
.
	mm_m4
.
	mm4l3
; }

162
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m4_l3
(\xe8cڡ { 
	mm_u
.
	mm_m4
.
	mm4l3
; }

163
cڡex\xb4

	m\x9\xa964_t
 &
m4_l4
(\xe8{ 
	mm_u
.
	mm_m4
.
	mm4l4
; }

164
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m4_l4
(\xe8cڡ { 
	mm_u
.
	mm_m4
.
	mm4l4
; }

166
cڡex\xb4
 &
m5_c1
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5c1
; }

167
cڡex\xb4
 cڡ &
m5_c1
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5c1
; }

168
cڡex\xb4
 &
m5_c2
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5c2
; }

169
cڡex\xb4
 cڡ &
m5_c2
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5c2
; }

170
cڡex\xb4
 &
m5_i1
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5i1
; }

171
cڡex\xb4
 cڡ &
m5_i1
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5i1
; }

172
cڡex\xb4
 &
m5_i2
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5i2
; }

173
cڡex\xb4
 cڡ &
m5_i2
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5i2
; }

174
cڡex\xb4

	m\x9\xa964_t
 &
m5_l1
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5l1
; }

175
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m5_l1
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5l1
; }

176
cڡex\xb4

	m\x9\xa964_t
 &
m5_l2
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5l2
; }

177
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m5_l2
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5l2
; }

178
cڡex\xb4

	m\x9\xa964_t
 &
m5_l3
(\xe8{ 
	mm_u
.
	mm_m5
.
	mm5l3
; }

179
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m5_l3
(\xe8cڡ { 
	mm_u
.
	mm_m5
.
	mm5l3
; }

181
cڡex\xb4
 &
m6_i1
(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6i1
; }

182
cڡex\xb4
 cڡ &
m6_i1
(\xe8cڡ { 
	mm_u
.
	mm_m6
.
	mm6i1
; }

183
cڡex\xb4
 &
m6_i2
(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6i2
; }

184
cڡex\xb4
 cڡ &
m6_i2
(\xe8cڡ { 
	mm_u
.
	mm_m6
.
	mm6i2
; }

185
cڡex\xb4
 &
m6_i3
(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6i3
; }

186
cڡex\xb4
 cڡ &
m6_i3
(\xe8cڡ { 
	mm_u
.
	mm_m6
.
	mm6i3
; }

187
cڡex\xb4

	m\x9\xa964_t
 &
m6_l1
(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6l1
; }

188
cڡex\xb4
 cڡ
	m\x9\xa964_t
 &
m6_l1
(\xe8cڡ { 
	mm_u
.
	mm_m6
.
	mm6l1
; }

189
cڡex\xb4
 (*&
m6_f1
())(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6f1
; }

190
cڡex\xb4
 (*cڡ &
m6_f1
(\xe8cڡ)(\xe8{ 
	mm_u
.
	mm_m6
.
	mm6f1
; }

193
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

kMessSize
 = (
mes\xa7ge
);

194
\x9al\x9ae

cڡex\xb4

mes\xa7ge
 *
	gkN\x9eMess
 =
nuαr
;

196 
	smem_m\xad
 {

197
v\x9c_\x\xe3icks

	mmem_v\x9c
;

198
phys_\x\xe3icks

	mmem_phys
;

199
v\x9c_\x\xe3icks

	mmem_\xcbn
;

202 
	sc\xddy_\x9afo
 {

203 
	m\xfd_\xa4c_\xb4oc
;

204 
	m\xfd_\xa4c_\xa5a\xfb
;

205
v\x9c_by\x8bs

	m\xfd_\xa4c_v\x9c
;

206 
	m\xfd_d\xa1_\xb4oc
;

207 
	m\xfd_d\xa1_\xa5a\xfb
;

208
v\x9c_by\x8bs

	m\xfd_d\xa1_v\x9c
;

209
v\x9c_by\x8bs

	m\xfd_by\x8bs
;

	@include/blocksiz.hpp

7
\x9al\x9ae

cڡex\xb4
 
	gBLOCK_SIZE
 = 1024;

	@include/constant_time.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~<c\xa1ddef
>

9 
	~<\xa5\x\xaf
>

11
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

24 [[
nodis\xf\xe4d
]]
\x9al\x9ae

bo\xde

cڡ\x\xaft_time_equ\x\xab
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
a
,

25
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
b
\xe8
n\xdbx\xfb\xb1
 {

26 i\xe0(
a
.
size
(\xe8!\xf0
b
.size()) {

27 
\xe7l\xa3
;

30
	g\xa1d
::
by\x8b

\xbbsu\xc9
{0};

31 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	ga
.
size
(); ++i) {

32
	g\xbbsu\xc9
 |\xf0
a
[
i
] ^
b
[i];

34 
	g\xbbsu\xc9
 =\xf0
\xa1d
::
by\x8b
{0};

	@include/ctype.hpp

7 
\xf9y\xb3_
[];

10 
	gCty\xb3Mask
 : {

11
U
 = 0001,

12
	gL
 = 0002,

13
	gN
 = 0004,

14
	gS
 = 0010,

15
	gP
 = 0020,

16
	gC
 = 0040,

17
	gX
 = 0100

21
\x9al\x9ae

bo\xde

	$i\xa7\xcdha
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] & (
U
 |
L
);
	}
}

22
\x9al\x9ae

bo\xde

	$isu\xb5\x94
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
U
;
	}
}

23
\x9al\x9ae

bo\xde

	$i\xa6ow\x94
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
L
;
	}
}

24
\x9al\x9ae

bo\xde

	$isdig\x99
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
N
;
	}
}

25
\x9al\x9ae

bo\xde

	$isxdig\x99
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] & (
N
 |
X
);
	}
}

26
\x9al\x9ae

bo\xde

	$is\xa5a\xfb
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
S
;
	}
}

27
\x9al\x9ae

bo\xde

	$i\xa5un\xf9
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
P
;
	}
}

28
\x9al\x9ae

bo\xde

	$i\xa7\x\xffum
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] & (
U
 |
L
 |
N
);
	}
}

29
\x9al\x9ae

bo\xde

	$i\xa5r\x9\xa9
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] & (
P
 |
U
 |
L
 |
N
);
	}
}

30
\x9al\x9ae

bo\xde

	$is\x\xe7\x8\xfe
(
c
\xe8
n\xdbx\xfb\xb1
 {  (
\xf9y\xb3_
 + 1)[c] &
C
;
	}
}

31
\x9al\x9ae

bo\xde

	$i\xa7scii
(
c
\xe8
n\xdbx\xfb\xb1
 { 
\xa1\xa9ic_\xff\xa1
<>(c\xe8<\xf00177;
	}
}

	@include/defs.hpp

7 #i\xe2de\xe0
DEFS_H


8 
	#DEFS_H


	)

13 #i\xe0
def\x9\xabd
(
__\x\xe3\x\xafg__
\xe8|| def\x9aed(
__GNUC__
)

15
us\x9ag

	gi8_t
 =
__INT8_TYPE__
;

16
us\x9ag

	gu8_t
 =
__UINT8_TYPE__
;

17
us\x9ag

	gi16_t
 =
__INT16_TYPE__
;

18
us\x9ag

	gu16_t
 =
__UINT16_TYPE__
;

19
us\x9ag

	gi32_t
 =
__INT32_TYPE__
;

20
us\x9ag

	gu32_t
 =
__UINT32_TYPE__
;

21
us\x9ag

	gi64_t
 =
__INT64_TYPE__
;

22
us\x9ag

	gu64_t
 =
__UINT64_TYPE__
;

23
us\x9ag

	gu\xb1r_t
 =
__UINTPTR_TYPE__
;

26 
	#PACKED

	`__\xa9\x8cibu\x8b__
((
\xb7cked
)\xe8

	)

27 
	#NAKED

	`__\xa9\x8cibu\x8b__
((
\xc7ked
)\xe8

	)

31 
	#U64_C
(
v\x\xab
\xe8v\xae##
ULL


	)

32 
	#I64_C
(
v\x\xab
\xe8v\xae##
LL


	)

	@include/errno.hpp

1 #\xb4agm\xa8
\xda\xfb


5
cڡex\xb4
 
	gOK
 = 0;

6
cڡex\xb4
 
	gERROR
 = 1;

10 \xfeas\xa0
	cE\xb\xfao
 : {

11
EPERM
 = 1,

12
	mENOENT
 = 2,

13
	mESRCH
 = 3,

14
	mEINTR
 = 4,

15
	mEIO
 = 5,

16
	mENXIO
 = 6,

17
	mE2BIG
 = 7,

18
	mENOEXEC
 = 8,

19
	mEBADF
 = 9,

20
	mECHILD
 = 10,

21
	mEAGAIN
 = 11,

22
	mENOMEM
 = 12,

23
	mEACCES
 = 13,

24
	mEFAULT
 = 14,

25
	mENOTBLK
 = 15,

26
	mEBUSY
 = 16,

27
	mEEXIST
 = 17,

28
	mEXDEV
 = 18,

29
	mENODEV
 = 19,

30
	mENOTDIR
 = 20,

31
	mEISDIR
 = 21,

32
	mEINVAL
 = 22,

33
	mENFILE
 = 23,

34
	mEMFILE
 = 24,

35
	mENOTTY
 = 25,

36
	mETXTBSY
 = 26,

37
	mEFBIG
 = 27,

38
	mENOSPC
 = 28,

39
	mESPIPE
 = 29,

40
	mEROFS
 = 30,

41
	mEMLINK
 = 31,

42
	mEPIPE
 = 32,

43
	mEDOM
 = 33,

44
	mERANGE
 = 34,

46
	mE_LOCKED
 = 101,

47
	mE_BAD_CALL
 = 102,

48
	mE_LONG_STRING
 = 103

	@include/grp.hpp

1 #\xb4agm\xa8
\xda\xfb


10 
	sgroup
 {

11 *
	m\xc7me
;

12 *
	m\xb7sswd
;

13 
	mgid
;

	@include/lib.hpp

8 #\xb4agm\xa8
\xda\xfb


11 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

12 
	~"../h/cڡ.h\xb5
"

13 
	~"../h/\x94r\xdc.h\xb5
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"defs.h\xb5
"

16 
	~<c\xa1ddef
>

19
mes\xa7ge

M
;

23
\x9al\x9ae

cڡex\xb4
 
	gMM
 = 0;

24
\x9al\x9ae

cڡex\xb4
 
	gFS
 = 1;

27
\x9al\x9ae

cڡex\xb4
 
	gkMM
 =
MM
;

28
\x9al\x9ae

cڡex\xb4
 
	gkFS
 =
FS
;

31 "C" 
	$\xff\x\xfbm1
(
\xb4oc
, 
sys\xff\x\xfb\xc4
, 
\x9at1
, 
\x9at2
, 
\x9at3
, *
\xb1r1
, *
\xb1r2
,

32 *
\xb1r3
\xe8
n\xdbx\xfb\xb1
;

33 "C" 
	$\xff\x\xfbm3
(
\xb4oc
, 
sys\xff\x\xfb\xc4
, 
\x9at1
,

34 cڡ *
\xc7me
\xe8
n\xdbx\xfb\xb1
;

35 "C" 
	$\xff\x\xfbx
(
\xb4oc
, 
sys\xff\x\xfb\xc4
\xe8
n\xdbx\xfb\xb1
;

36 "C"
\xa1d
::
size_t

	$\xcbn
(cڡ *
s
\xe8
n\xdbx\xfb\xb1
;

37 "C" 
	$\xa3nd
(
d\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
;

38 "C" 
	$\xbb\xfbive
(
\xa4c
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
;

39 "C" 
	$\xa3nd\xbbc
(
\xa4cde\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
;

40 
\x94\xbao
;

41 "C" 
	$begsig
(\xe8
n\xdbx\xfb\xb1
;

46 "C" *
	$\xa7\xe3_m\x\xabloc
(
size_t

size
\xe8
n\xdbx\xfb\xb1
;

47 "C" 
	$\xa7\xe3_\xe4\x93
(*
\xb1r
\xe8
n\xdbx\xfb\xb1
;

51
\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

Ty\xb3
> c\xcfs\xa0
	cSa\xe3Buf\xe3r
 {

52
public
:

54
ex\xb6ic\x99

	$Sa\xe3Buf\xe3r
(
\xa1d
::
size_t

cou\xc1
 = 1)

55 :
	`size_
(
cou\xc1
),
	`\xb1r_
(
\xa1\xa9ic_\xff\xa1
<
Ty\xb3
 *>(
	`\xa7\xe3_m\x\xabloc
((Type) * count))) {}

58 ~
	$Sa\xe3Buf\xe3r
(\xe8{
	`\xa7\xe3_\xe4\x93
(
\xb1r_
);
	}
}

61
Sa\xe3Buf\xe3r
(cڡ Sa\xe3Buf\xe3\xb8&\xe8\xf0
d\x96\x91e
;

62
	gSa\xe3Buf\xe3r
 &
	gݔ\xa9\xdc
=(cڡ
Sa\xe3Buf\xe3r
 &\xe8\xf0
d\x96\x91e
;

65
	$Sa\xe3Buf\xe3r
(
Sa\xe3Buf\xe3r
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 :
	`size_
(\xd9h\x94.
size_
),
	$\xb1r_
(
\xd9h\x94
.
\xb1r_
) {

66
\xd9h\x94
.
\xb1r_
 =
nuαr
;

67
\xd9h\x94
.
size_
 = 0;

68
	}
}

69
	gSa\xe3Buf\xe3r
 &
	gݔ\xa9\xdc
=(
Sa\xe3Buf\xe3r
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

70 i\xe0(
this
 !\xf0&
\xd9h\x94
) {

71
\xa7\xe3_\xe4\x93
(
\xb1r_
);

72
	g\xb1r_
 =
\xd9h\x94
.
\xb1r_
;

73
	gsize_
 =
\xd9h\x94
.
size_
;

74
	g\xd9h\x94
.
	g\xb1r_
 =
nuαr
;

75
	g\xd9h\x94
.
	gsize_
 = 0;

77  *
	gthis
;

81 [[
nodis\xf\xe4d
]]
Ty\xb3
 *
	$g\x91
(\xe8
n\xdbx\xfb\xb1
 { 
\xb1r_
;
	}
}

82 [[
nodis\xf\xe4d
]] cڡ
Ty\xb3
 *
	$g\x91
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\xb1r_
;
	}
}

85
	gTy\xb3
 &
	gݔ\xa9\xdc
[](
	g\xa1d
::
size_t

idx
\xe8
n\xdbx\xfb\xb1
 { 
\xb1r_
[idx]; }

86 cڡ
	gTy\xb3
 &
	gݔ\xa9\xdc
[](
	g\xa1d
::
size_t

idx
\xe8cڡ
n\xdbx\xfb\xb1
 { 
\xb1r_
[idx]; }

89 [[
nodis\xf\xe4d
]]
Ty\xb3
 *
	$\xbb\xcba\xa3
(\xe8
n\xdbx\xfb\xb1
 {

90
Ty\xb3
 *
tmp
 =
\xb1r_
;

91
\xb1r_
 =
nuαr
;

92
size_
 = 0;

93 
tmp
;

94
	}
}

96
	g\xb4iv\xa9e
:

97
\xa1d
::
size_t

size_
{};

98
Ty\xb3
 *
	g\xb1r_
{
	gnuαr
};

	@include/mined.hpp

11 #i\xe2de\xe0
YMAX


12 #ifde\xe0
UNIX


13 
	~<c\xa1dio
>

14 #unde\xe0
g\x91ch\xac


15 #unde\xe0
NULL


16 #unde\xe0
EOF


17 
_putch\xac
(
c
);

18 *
CE
, *
VS
, *
SO
, *
SE
, *
CL
, *
AL
, *
CM
;

19 
	#YMAX
 23

	)

21 
	#YMAX
 24

	)

23 *
\x92\x8br_\xa1r\x9ag
;

24 *
\xbbv_video
;

25 *
n\xdcm\x\xab_video
;

26 *
\xbbv_s\xfc\xdel
;

27 *
pos_\xa1r\x9ag
;

28 
	#X_PLUS
 ' '

	)

29 
	#Y_PLUS
 ' '

	)

32 
	#XMAX
 79

	)

33 
	#SCREENMAX
 (
YMAX
 - 1\xe8

	)

34 
	#XBREAK
 (
XMAX
 - 2\xe8

	)

35 
	#SHIFT_SIZE
 25

	)

36 
	#SHIFT_MARK
 '!'

	)

37 
	#MAX_CHARS
 1024

	)

39 
	#LINE_START
 (((-
MAX_CHARS
 - 1\xe8/
SHIFT_SIZE
\xe8* SHIFT_SIZE - SHIFT_SIZE)

	)

40 
	#LINE_END
 (
MAX_CHARS
 + 1\xe8

	)

42 
	#LINE_LEN
 (
XMAX
 + 1\xe8

	)

43 
	#SCREEN_SIZE
 (
XMAX
 *
YMAX
\xe8

	)

44
\x9al\x9ae

cڡex\xb4
 
	gBLOCK_SIZE
 = 1024;

48 \xfeas\xa0
	cR\x91u\xbaCode
 {
	mE\xbc\xdcs
 = -1,
	mNoL\x9\xab
 = -2,
	mF\x9\xab
 = 0,
	mNoI\xc5ut
 = 1 };

50 
	#STD_OUT
 1

	)

51 
	#FILE_LENGTH
 14

	)

52 
	#MEMORY_SIZE
 (50 * 1024\xe8

	)

54 
	#REPORT
 2

	)

60 
	eFLAG
 {

62
	mFALSE
,

63
	mTRUE
,

64
	mNOT_VALID
,

65
	mVALID
,

66
	mOFF
,

67
	mON
,

70
	mFORWARD
,

71
	mREVERSE
,

74
	mSMALLER
,

75
	mBIGGER
,

76
	mSAME
,

77
	mEMPTY
,

78
	mNO_DELETE
,

79
	mDELETE
,

80
	mREAD
,

81
	mWRITE


89 
	sL\x9\xab
 {

90 
L\x9\xab
 *
	m\xc3xt
;

91 
L\x9\xab
 *
	m\xb4ev
;

92 *
	m\x8bxt
;

93 
	mshi\xe1_cou\xc1
;

96 
	gL\x9\xab
;

99 
	#DUMMY
 0x80

	)

100 
	#DUMMY_MASK
 0x7F

	)

103 
	#NO_MATCH
 0

	)

104 
	#MATCH
 1

	)

105 
	#REG_ERROR
 2

	)

107 
	#BEGIN_LINE
 (2 *
REG_ERROR
)

	)

108 
	#END_LINE
 (2 *
BEGIN_LINE
)

	)

115 
	s\xbbgex
 {

117 *
	m\x94r_mess
;

118 *
	mex\xb4essi\xda
;

119 }
	m\xbbsu\xc9
;

120 
	m\xa1\xa9us
;

121 *
	m\xa1\xa\xf9_\xb1r
;

122 *
	m\x92d_\xb1r
;

125 
	g\xbbgex
;

128 
	#NIL_PTR
 ((*)0)

	)

129 
	#NIL_LINE
 ((
L\x9\xab
 *)0)

	)

130 
	#NIL_REG
 ((
\xbbgex
 *)0)

	)

131 
	#NIL_INT
 ((*)0)

	)

136 
ƚes
;

137 
L\x9\xab
 *
h\x97d\x94
;

138 
L\x9\xab
 *
\x8f\x9e
;

139 
L\x9\xab
 *
t\xdd_l\x9\xab
;

140 
L\x9\xab
 *
b\xd9_l\x9\xab
;

141 
L\x9\xab
 *
cur_l\x9\xab
;

142 *
cur_\x8bxt
;

143 
ϡ_y
;

144 
s\xfc\x93n
[
SCREEN_SIZE
];

146 
x
,
y
;

147
FLAG

modif\x9bd
;

148
FLAG

\xa1\xa9_visib\xcb
;

149
FLAG

wr\x99ab\xcb
;

150
FLAG

qu\x99
;

151
FLAG

\xbd\x9de
;

152 
\x9aput_fd
;

153
FLAG

l\xdfd\x9ag
;

154 
out_cou\xc1
;

155 
f\x9\x93_\xc7me
[
LINE_LEN
];

156 
\x8bxt_buf\xe3r
[
MAX_CHARS
];

157 
b\xc\xe2k_l\x9\xab
[
LINE_LEN
];

159 
y\x\xafk_f\x9\x93
[];

160
FLAG

y\x\xafk_\xa1\xa9us
;

161 
ch\xacs_\xa7ved
;

166 
	#\x\xe3\x97r_buf\xe3r
(\xe8(
out_cou\xc1
 = 0)

	)

172
\x9al\x9ae
 
	$putch\xac
(
c
\xe8{
\xa1d
::
	`putch\xac
(c);
	}
}

177 
	#r\x9ag_b\x96l
(\xe8
	`putch\xac
('\07')

	)

182 
	#\xa1r\x9ag_\xb4\x9\xa9
(
\xa1r
\xe8()
	`wr\x99\x96\x9\xab
(
STD_OUT
, (\xa1r))

	)

187 
	#\xe6ush
(\xe8()
	`\xe6ush_buf\xe3r
(
STD_OUT
)

	)

192 
	#\x8fb
(
\xfat
\xe8(((\xfat\xe8+ 8\xe8& ~07)

	)

193 
	#is_\x8fb
(
c
\xe8((c\xe8=\xf0'\t')

	)

198 
	#wh\x99e_\xa5a\xfb
(
c
\xe8((c\xe8=\xf0' ' || (c\xe8=\xf0'\t')

	)

199 
	#\x\xabpha
(
c
\xe8((c\xe8!\xf0' ' && (c\xe8!\xf0'\t' && (c\xe8!\xf0'\n')

	)

204
\x9al\x9ae
 
	$l\x9\xab_\xb4\x9\xa9
(
L\x9\xab
 *
l\x9\xab
\xe8{
	`put_l\x9\xab
֚e, 0,
TRUE
);
	}
}

209 
	#move_to
(
nx
,
ny
\xe8
	`move
(\xd2x),
NIL_PTR
, (ny))

	)

214 
	#move_add\xbbss
(
add\xbbss
\xe8
	`move
(0, (add\xbbss),
y
)

	)

219 
	#\xa1\xa9us_l\x9\xab
(
\xa1r1
,
\xa1r2
\xe8()
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1), (\xa1r2),
NIL_PTR
,
FALSE
)

	)

220 
	#\x94r\xdc
(
\xa1r1
,
\xa1r2
\xe8()
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1), (\xa1r2),
NIL_PTR
,
FALSE
)

	)

221 
	#g\x91_\xa1r\x9ag
(
\xa1r1
,
\xa1r2
,
\xe6
\xe8
	`b\xd9tom_l\x9\xab
(
ON
, (\xa1r1),
NIL_PTR
, (\xa1r2), fl)

	)

222 
	#\x\xe3\x97r_\xa1\xa9us
(\xe8()
	`b\xd9tom_l\x9\xab
(
OFF
,
NIL_PTR
, NIL_PTR, NIL_PTR,
FALSE
)

	)

227 
	#f\xa1\xa9us
(
mess
,
\xfat
\xe8
	`f\x9\x93_\xa1\xa9us
((mess), (\xfat),
f\x9\x93_\xc7me
,
ƚes
,
wr\x99ab\xcb
,
modif\x9bd
)

	)

232 
	#g\x91_shi\xe1
(
\xfat
\xe8((\xfat\xe8&
DUMMY_MASK
)

	)

235 
L\x9\xab
 *
\xb4o\xfbed
(L\x9a\x90*
l\x9\xab
, 
cou\xc1
);

236 
L\x9\xab
 *
\x9a\xa1\xael_l\x9ae
(*
buf\xe3r
, 
\xcbngth
);

237 
L\x9\xab
 *
m\xa9ch
(
\xbbgex
 *
\xb4og\xbfm
, *
\xa1r\x9ag
,
FLAG

m\x91hod
);

238 
L\x9\xab
 *
l\x9\xab_\x9a\xa3\xb9
(L\x9a\x90*
l\x9\xab
, *
\xa1r\x9ag
, 
\xcbn
);

239 *
\xaeloc
(
size
);

240 *
num_out
(
numb\x94
);

241 *
ba\xa3\xc7me
(*
\xb7th
);

	@include/minix/fs/buffer.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"cڡ.h\xb5
"

9 
	~<\xac\xbfy
>

10 
	~<\xa9omic
>

11 
	~<c\xda\xfb\xb1s
>

12 
	~<ex\xb3\xf9ed
>

13 
	~<mem\xdcy
>

14 
	~<\xa5\x\xaf
>

15 
	~<\xa1r\x9ag_v\x9bw
>

16 
	~<ty\xb3_\x8\xff\x99s
>

17 
	~<v\xac\x9f\xc1
>

19
\xc7me\xa5a\xfb

	gm\x9aix
::
fs
 {

21
\xfeass

Buf\xe3rM\x\xafag\x94
;

22
\xfeass

	gDevi\xfbM\x\xafag\x94
;

24
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>

25
c\xda\xfb\xb1

	gBuf\xe3rD\xa9aTy\xb3
 =
\xbbqu\x9ces
 {

26 (
T
\xe8<\xf0
De\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
;

27
	g\xa1d
::
is_\x8civ\x9f\x\xfby_c\xddyab\xcb_v
<
T
>;

28
	g\xa1d
::
is_\xa1\x\xafd\xacd_\xcfyout_v
<
T
>;

31 \xfeas\xa0
	cBuf\xe3rE\xbc\xdc
 {

32
	gNoF\xbbeBuf\xe3rs
,

33
	gInv\x\xabidDevi\xfb
,

34
	gDiskE\xbc\xdc
,

35
	gInv\x\xabidBlockNumb\x94
,

36
	gBuf\xe3rInU\xa3
,

37
	gC\xd\xfcu\xb1edD\xa9a


44 \xfeas\xa0
	cBuf\xe3rD\xa9a
 {

45
	g\xb4iv\xa9e
:

46
\xaeig\xc7s
(
\xa1d
::
max_\x\xabign_t
\xe8\xa1d::
\xac\xbfy
<\xa1d::
by\x8b
,
	gDe\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
>
\xbfw_d\xa9a_
{};

48
	gpublic
:

49
\x8bm\xb6\xa9e
 <
Buf\xe3rD\xa9aTy\xb3

T
> [[
nodis\xf\xe4d
]]\x87ut\xd8
as
(\xe8->
\xa1d
::
\xa5\xaa
<T> {

50
\xa1\xa9ic_as\xa3\xb9
(
De\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
 % (
T
) == 0,

52 
	g\xa1d
::
\xa5\xaa
<
T
>{
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<T *>(
\xbfw_d\xa9a_
.
d\xa9a
()),

53
	gDe\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
 / (
T
)};

55
	g\x8bm\xb6\xa9e
 <
Buf\xe3rD\xa9aTy\xb3

	gT
> [[
nodis\xf\xe4d
]]\x87ut\xd8
as
(\xe8cڡ ->
	g\xa1d
::
\xa5\xaa
<cڡ
T
> {

56
\xa1\xa9ic_as\xa3\xb9
(
De\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
 % (
T
) == 0,

58 
	g\xa1d
::
\xa5\xaa
<cڡ
T
>{
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ T *>(
\xbfw_d\xa9a_
.
d\xa9a
()),

59
	gDe\xe7u\xc9FsCڡ\x\xafts
::
kBlockSize
 / (
T
)};

62 [[
nodis\xf\xe4d
]]\x87ut\xd8
by\x8bs
(\xe8->
	g\xa1d
::
\xa5\xaa
<
\xa1d
::
by\x8b
> {  std::\xa5\xaa{
\xbfw_d\xa9a_
}; }

64 [[
nodis\xf\xe4d
]]\x87ut\xd8
by\x8bs
(\xe8cڡ ->
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
by\x8b
> {  std::\xa5\xaa{
\xbfw_d\xa9a_
}; }

66 
z\x94o
(\xe8
	gn\xdbx\xfb\xb1
 {
	g\xa1d
::
f\x9\x96
(
\xbfw_d\xa9a_
.
beg\x9a
(),\x84aw_d\xa9a_.
\x92d
(),
\xa1d
::
by\x8b
{0}); }

73 \xfeas\xa0
	cBuf\xe3rH\x\xafd\xcb
 {

74
	g\xb4iv\xa9e
:

75
\xfeass

Buf\xe3r
 *
buf\xe3r_
;

76
bo\xde

	gow\xc3d_
;

78
	gpublic
:

79
ex\xb6ic\x99

Buf\xe3rH\x\xafd\xcb
(
Buf\xe3r
 *
buf
,
bo\xde

ow\xc3d
 =
\x8cue
\xe8:
buf\xe3r_
{buf},
	gow\xc3d_
{
	gow\xc3d
} {}

80 ~
Buf\xe3rH\x\xafd\xcb
();

82
Buf\xe3rH\x\xafd\xcb
(cڡ Buf\xe3rH\xaad\xcb &\xe8\xf0
d\x96\x91e
;

83
	gBuf\xe3rH\x\xafd\xcb
 &
	gݔ\xa9\xdc
=(cڡ
Buf\xe3rH\x\xafd\xcb
 &\xe8\xf0
d\x96\x91e
;

85
Buf\xe3rH\x\xafd\xcb
(Buf\xe3rH\xaad\xcb &&
\xd9h\x94
\xe8
	gn\xdbx\xfb\xb1


86 :
buf\xe3r_
{
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.buf\xe3r_,
nuαr
)},

87
	gow\xc3d_
{
	g\xa1d
::
exch\x\xafge
(
\xd9h\x94
.
ow\xc3d_
,
\xe7l\xa3
)} {}

89
	gBuf\xe3rH\x\xafd\xcb
 &
	gݔ\xa9\xdc
=(
Buf\xe3rH\x\xafd\xcb
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

90 i\xe0(
this
 !\xf0&
\xd9h\x94
) {

91 i\xe0(
ow\xc3d_
 &&
buf\xe3r_
) {

92
\xbb\xcba\xa3
();

94
	gbuf\xe3r_
 =
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.
buf\xe3r_
,
nuαr
);

95
	gow\xc3d_
 =
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.
ow\xc3d_
,
\xe7l\xa3
);

97  *
	gthis
;

100 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91
(\xe8->
	gBuf\xe3r
 * { 
	gbuf\xe3r_
; }

101 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91
(\xe8cڡ -> cڡ
	gBuf\xe3r
 * { 
	gbuf\xe3r_
; }

103 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
->(\xe8->
	gBuf\xe3r
 * { 
	gbuf\xe3r_
; }

104 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
->(\xe8cڡ -> cڡ
	gBuf\xe3r
 * { 
	gbuf\xe3r_
; }

106 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
*(\xe8->
	gBuf\xe3r
 & {  *
	gbuf\xe3r_
; }

107 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
*(\xe8cڡ -> cڡ
	gBuf\xe3r
 & {  *
	gbuf\xe3r_
; }

109 [[
nodis\xf\xe4d
]]
bo\xde

v\x\xabid
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gbuf\xe3r_
 !\xf0
nuαr
; }

110
ex\xb6ic\x99

ݔ\xa9\xdc

bo\xde
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
v\x\xabid
(); }

112 
\xbb\xcba\xa3
();

119 \xfeas\xa0
	cBuf\xe3r
 {

120
	g\xb4iv\xa9e
:

121
\xe4\x9bnd

\xfeass

Buf\xe3rM\x\xafag\x94
;

122
\xe4\x9bnd

\xfeass

	gBuf\xe3rH\x\xafd\xcb
;

124
Buf\xe3rD\xa9a

	gd\xa9a_
{};

125
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa932_t
>
\xbb\xe3\xbbn\xfb_cou\xc1_
{0};

126
	g\xa1d
::
\xa9omic
<
BlockTy\xb3
>
block_ty\xb3_
{BlockTy\xb3::
Fu\x\xfbD\xa9aBlock
};

127
	g\xa1d
::
\xa9omic
<
bo\xde
>
d\x9\xf9y_
{
\xe7l\xa3
};

129
Buf\xe3r
 *
	g\xc3xt_
{
	gnuαr
};

130
Buf\xe3r
 *
	g\xb4ev_
{
	gnuαr
};

131
Buf\xe3r
 *
	ghash_\xc3xt_
{
	gnuαr
};

133
block_\xc4

	gblock_numb\x94_
{
	gkNoBlock
};

134
dev_\xc4

	gdevi\xfb_
{
	gkNoDev
};

136
	gpublic
:

137
\x8bm\xb6\xa9e
 <
Buf\xe3rD\xa9aTy\xb3

T
> [[
nodis\xf\xe4d
]]\x87ut\xd8
d\xa9a_as
(\xe8->
\xa1d
::
\xa5\xaa
<T> {

138 
d\xa9a_
.
\x8bm\xb6\xa9e

as
<
T
>();

141
	g\x8bm\xb6\xa9e
 <
Buf\xe3rD\xa9aTy\xb3

	gT
> [[
nodis\xf\xe4d
]]\x87ut\xd8
d\xa9a_as
(\xe8cڡ ->
	g\xa1d
::
\xa5\xaa
<cڡ
T
> {

142 
d\xa9a_
.
\x8bm\xb6\xa9e

as
<
T
>();

145 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbfw_d\xa9a
(\xe8->
	g\xa1d
::
\xa5\xaa
<
\xa1d
::
by\x8b
> { 
d\xa9a_
.
by\x8bs
(); }

147 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbfw_d\xa9a
(\xe8cڡ ->
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
by\x8b
> { 
d\xa9a_
.
by\x8bs
(); }

149 [[
nodis\xf\xe4d
]]\x87ut\xd8
block_numb\x94
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gblock_\xc4
 { 
	gblock_numb\x94_
; }

151 [[
nodis\xf\xe4d
]]\x87ut\xd8
devi\xfb
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gdev_\xc4
 { 
	gdevi\xfb_
; }

153 [[
nodis\xf\xe4d
]]
bo\xde

is_d\x9\xf9y
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gd\x9\xf9y_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
); }

155 
m\xack_d\x9\xf9y
(\xe8
	gn\xdbx\xfb\xb1
 {
	gd\x9\xf9y_
.
\xa1\xdce
(
\x8cue
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
); }

157 
m\xack_\x\xe3\x97n
(\xe8
	gn\xdbx\xfb\xb1
 {
	gd\x9\xf9y_
.
\xa1\xdce
(
\xe7l\xa3
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
); }

159 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91_block_ty\xb3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gBlockTy\xb3
 {

160 
	gblock_ty\xb3_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

163 
\xa3t_block_ty\xb3
(
BlockTy\xb3

ty\xb3
\xe8
	gn\xdbx\xfb\xb1
 {

164
	gblock_ty\xb3_
.
\xa1\xdce
(
ty\xb3
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
);

167 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbb\xe3\xbbn\xfb_cou\xc1
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
u\x9\xa932_t
 {

168 
\xbb\xe3\xbbn\xfb_cou\xc1_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

171 
z\x94o_d\xa9a
(\xe8
	gn\xdbx\xfb\xb1
 {

172
	gd\xa9a_
.
z\x94o
();

173
m\xack_d\x9\xf9y
();

176
	g\xb4iv\xa9e
:

177 
\x9a\xfcem\x92t_\xbb\xe3\xbbn\xfbs
(\xe8
n\xdbx\xfb\xb1
 {

178
\xbb\xe3\xbbn\xfb_cou\xc1_
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_acq_\xbbl
);

181 
de\xf\xfbm\x92t_\xbb\xe3\xbbn\xfbs
(\xe8
	gn\xdbx\xfb\xb1
 {

182
	g\xbb\xe3\xbbn\xfb_cou\xc1_
.
\xe3tch_sub
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_acq_\xbbl
);

190 \xfeas\xa0
	cBuf\xe3rPo\xde
 {

191
	g\xb4iv\xa9e
:

192 
cڡex\xb4

\xa1d
::
size_t

kPo\xdeSize
 =
De\xe7u\xc9FsCڡ\x\xafts
::
kNrBufs
;

193 
cڡex\xb4

	g\xa1d
::
size_t

kHashSize
 =
De\xe7u\xc9FsCڡ\x\xafts
::
kNrBufHash
;

195
	g\xa1d
::
\xac\xbfy
<
Buf\xe3r
,
	gkPo\xdeSize
>
	gbuf\xe3rs_
{};

196
	g\xa1d
::
\xac\xbfy
<
Buf\xe3r
 *,
	gkHashSize
>
	ghash_\x8fb\xcb_
{};

198
Buf\xe3r
 *
	g\xccu_\xe4\xd\xa9_
{
	gnuαr
};

199
Buf\xe3r
 *
	g\xccu_\xbb\xac_
{
	gnuαr
};

201
	g\xa1d
::
\xa9omic
<
\xa1d
::
size_t
>
buf\xe3rs_\x9a_u\xa3_
{0};

203 [[
nodis\xf\xe4d
]] aut\xd8
hash_block
(
block_\xc4

block
\xe8
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
size_t
 {

204 
\xa1d
::
to_und\x94ly\x9ag
(
block
\xe8& (
kHashSize
 - 1);

207 
move_to_\xe4\xd\xa9
(
Buf\xe3r
 *
buf\xe3r
\xe8
	gn\xdbx\xfb\xb1
;

208 
move_to_\xbb\xac
(
Buf\xe3r
 *
buf\xe3r
\xe8
	gn\xdbx\xfb\xb1
;

209 
\xbbmove_\xe4om_\xccu
(
Buf\xe3r
 *
buf\xe3r
\xe8
	gn\xdbx\xfb\xb1
;

211 
add_to_hash
(
Buf\xe3r
 *
buf\xe3r
\xe8
	gn\xdbx\xfb\xb1
;

212 
\xbbmove_\xe4om_hash
(
Buf\xe3r
 *
buf\xe3r
\xe8
	gn\xdbx\xfb\xb1
;

213 [[
nodis\xf\xe4d
]]\x87ut\xd8
f\x9ad_\x9a_hash
(
dev_\xc4

devi\xfb
,
block_\xc4

block
\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gBuf\xe3r
 *;

215
	gpublic
:

216
Buf\xe3rPo\xde
();

217 ~
Buf\xe3rPo\xde
() = ;

219
Buf\xe3rPo\xde
(cڡ Buf\xe3rPo\xde &\xe8\xf0
d\x96\x91e
;

220
	gBuf\xe3rPo\xde
 &
	gݔ\xa9\xdc
=(cڡ
Buf\xe3rPo\xde
 &\xe8\xf0
d\x96\x91e
;

221
Buf\xe3rPo\xde
(BufferPool &&) = ;

222
	gBuf\xe3rPo\xde
 &
	gݔ\xa9\xdc
=(
Buf\xe3rPo\xde
 &&) = ;

224 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91_buf\xe3r
(
dev_\xc4

devi\xfb
,
block_\xc4

block
,
IoMode

mode
)

225 ->
	g\xa1d
::
ex\xb3\xf9ed
<
Buf\xe3rH\x\xafd\xcb
,
	gBuf\xe3rE\xbc\xdc
>;

227 
put_buf\xe3r
(
Buf\xe3r
 *
buf\xe3r
,
BlockTy\xb3

ty\xb3
\xe8
	gn\xdbx\xfb\xb1
;

229 
\x9av\xaeid\xa9e_devi\xfb
(
dev_\xc4

devi\xfb
\xe8
	gn\xdbx\xfb\xb1
;

231 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xe6ush_d\x9cty_buf\xe3rs
(\xe8->
	g\xa1d
::
size_t
;

233 [[
nodis\xf\xe4d
]]\x87ut\xd8
buf\xe3rs_\x9a_u\xa3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
size_t
 {

234 
buf\xe3rs_\x9a_u\xa3_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

237 [[
nodis\xf\xe4d
]]\x87ut\xd8
ava\x9\x97b\xcb_buf\xe3rs
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
size_t
 {

238 
kPo\xdeSize
 -
buf\xe3rs_\x9a_u\xa3
();

241 [[
nodis\xf\xe4d
]]\x87ut\xd8
beg\x9a
(\xe8
	gn\xdbx\xfb\xb1
 ->
	gBuf\xe3r
 * { 
	gbuf\xe3rs_
.
d\xa9a
(); }

242 [[
nodis\xf\xe4d
]]\x87ut\xd8
\x92d
(\xe8
	gn\xdbx\xfb\xb1
 ->
	gBuf\xe3r
 * { 
	gbuf\xe3rs_
.
d\xa9a
(\xe8+
	gkPo\xdeSize
; }

243 [[
nodis\xf\xe4d
]]\x87ut\xd8
beg\x9a
(\xe8cڡ
	gn\xdbx\xfb\xb1
 -> cڡ
	gBuf\xe3r
 * { 
	gbuf\xe3rs_
.
d\xa9a
(); }

244 [[
nodis\xf\xe4d
]]\x87ut\xd8
\x92d
(\xe8cڡ
	gn\xdbx\xfb\xb1
 -> cڡ
	gBuf\xe3r
 * {

245 
	gbuf\xe3rs_
.
d\xa9a
(\xe8+
	gkPo\xdeSize
;

253 \xfeas\xa0
	cBuf\xe3rGu\xacd
 {

254
	g\xb4iv\xa9e
:

255
Buf\xe3rH\x\xafd\xcb

h\x\xafd\xcb_
;

256
BlockTy\xb3

	gblock_ty\xb3_
;

258
	gpublic
:

259
Buf\xe3rGu\xacd
(
Buf\xe3rH\x\xafd\xcb

h\x\xafd\xcb
,
BlockTy\xb3

ty\xb3
)

260 :
h\x\xafd\xcb_
{
\xa1d
::
move
(
h\x\xafd\xcb
)},
	gblock_ty\xb3_
{
	gty\xb3
} {}

262 ~
Buf\xe3rGu\xacd
() {

263 i\xe0(
	gh\x\xafd\xcb_
.
v\x\xabid
()) {

264
\xbb\xcba\xa3_buf\xe3r
(
\xa1d
::
move
(
h\x\xafd\xcb_
),
block_ty\xb3_
);

268 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91
(\xe8->
	gBuf\xe3r
 * { 
	gh\x\xafd\xcb_
.get(); }

269 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
->(\xe8->
	gBuf\xe3r
 * { 
	gh\x\xafd\xcb_
.
g\x91
(); }

270 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
*(\xe8->
	gBuf\xe3r
 & {  *
	gh\x\xafd\xcb_
.
g\x91
(); }

272 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbb\xcba\xa3
(\xe8->
	gBuf\xe3rH\x\xafd\xcb
 { 
	g\xa1d
::
move
(
h\x\xafd\xcb_
); }

274
	g\xb4iv\xa9e
:

275 
\xbb\xcba\xa3_buf\xe3r
(
Buf\xe3rH\x\xafd\xcb

h\x\xafd\xcb
,
BlockTy\xb3

ty\xb3
);

	@include/minix/fs/const.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~<c\xda\xfb\xb1s
>

9 
	~<c\xa1ddef
>

10 
	~<c\xa1d\x9\xa9
>

11 
	~<lim\x99s
>

12 
	~<ty\xb3_\x8\xff\x99s
>

14
\xc7me\xa5a\xfb

	gm\x9aix
::
fs
 {

19 \xfeas\xa0
	cblock_\xc4
 :
\xa1d
::
u\x9\xa932_t
 {};

24 \xfeas\xa0
	c\x9aode_\xc4
 :
\xa1d
::
u\x9\xa932_t
 {};

29 \xfeas\xa0
	cz\xd\xab_\xc4
 :
\xa1d
::
u\x9\xa932_t
 {};

34 \xfeas\xa0
	cdev_\xc4
 :
\xa1d
::
u\x9\xa916_t
 {};

39 \xfeas\xa0
	cb\x99_\xc4
 :
\xa1d
::
u\x9\xa932_t
 {};

44 \xfeas\xa0
	cuid
 :
\xa1d
::
u\x9\xa916_t
 {};

49 \xfeas\xa0
	cgid
 :
\xa1d
::
u\x9\xa98_t
 {};

54 \xfeas\xa0
	cf\x9\x93_pos
 :
\xa1d
::
\x9at32_t
 {};

59 \xfeas\xa0
	cf\x9\x93_pos64
 :
\xa1d
::
\x9at64_t
 {};

64 \xfeas\xa0
	cmask_b\x99s
 :
\xa1d
::
u\x9\xa916_t
 {};

69 \xfeas\xa0
	cl\x9aks
 :
\xa1d
::
u\x9\xa98_t
 {};

74 \xfeas\xa0
	c\xbb\x\xab_time
 :
\xa1d
::
\x9at64_t
 {};

76
\x9al\x9ae

cڡex\xb4

block_\xc4

	gkNoBlock
{0};

77
\x9al\x9ae

cڡex\xb4

z\xd\xab_\xc4

	gkNoZ\xd\xab
{0};

78
\x9al\x9ae

cڡex\xb4

dev_\xc4

	gkNoDev
{0};

79
\x9al\x9ae

cڡex\xb4

b\x99_\xc4

	gkNoB\x99
{0};

80
\x9al\x9ae

cڡex\xb4

\x9aode_\xc4

	gkNoInode
{0};

86
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>

87
c\xda\xfb\xb1

	gPow\x94OfTwo
 =
	$\xbbqu\x9\xfbs
(
T

v\x\xabue
) {

88
\xa1d
::
is_\x9a\x8bg\xb\xe6_v
<
T
>;

89 ((
v\x\xabue
 & (value - 1)) == 0) && (value > 0);

90
	}
};

97
	g\x8bm\xb6\xa9e
 <
	g\xa1d
::
size_t

BlockSize
>

98
\xbbqu\x9ces

Pow\x94OfTwo
<
BlockSize
>

99 
	sFsCڡ\x\xafts
 {

100 
cڡex\xb4

\xa1d
::
size_t

kBlockSize
 =
BlockSize
;

101 
cڡex\xb4

	g\xa1d
::
size_t

kZ\xd\xabNumSize
 = (
z\xd\xab_\xc4
);

102 
cڡex\xb4

	g\xa1d
::
size_t

kNrZ\xd\xabNums
 = 9;

103 
cڡex\xb4

	g\xa1d
::
size_t

kNrBufs
 = 20;

104 
cڡex\xb4

	g\xa1d
::
size_t

kNrBufHash
 = 32;

105 
cڡex\xb4

	g\xa1d
::
size_t

kNrFds
 = 20;

106 
cڡex\xb4

	g\xa1d
::
size_t

kNrF\x9\x95s
 = 64;

107 
cڡex\xb4

	g\xa1d
::
size_t

kNrInodes
 = 32;

108 
cڡex\xb4

	g\xa1d
::
size_t

kNrSu\xb3rs
 = 5;

109 
cڡex\xb4

	g\xa1d
::
size_t

kNameSize
 = 14;

110 
cڡex\xb4

	g\xa1d
::
size_t

kFsS\x8fckBy\x8bs
 = 512;

111 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

kSu\xb3rMagic
 = 0x137F;

112 
cڡex\xb4

uid

	gkSuUid
{0};

113 
cڡex\xb4

uid

	gkSysUid
{0};

114 
cڡex\xb4

gid

	gkSysGid
{0};

119 \xfeas\xa0
	cIoMode
 :
\xa1d
::
u\x9\xa98_t
 {
N\xdcm\x\xab
 = 0,
	gNoR\x97d
 = 1 };

124 \xfeas\xa0
	cD\x9cOp
 :
\xa1d
::
u\x9\xa98_t
 {
LookUp
 = 0,
	gE\xc1\x94
 = 1,
	gD\x96\x91e
 = 2 };

129 \xfeas\xa0
	cBuf\xe3rS\x8f\x8b
 :
\xa1d
::
u\x9\xa98_t
 {
C˪
 = 0,
	gD\x9\xf9y
 = 1 };

131 
cڡex\xb4

	g\xa1d
::
size_t

kNrDz\xd\xabNum
 =
kNrZ\xd\xabNums
 - 2;

132 
cڡex\xb4

	g\xa1d
::
size_t

kD\x9cE\xc1rySize
 = (
d\x9c_\xa1ru\xf9
);

133 
cڡex\xb4

	g\xa1d
::
size_t

kInodeSize
 = (
d_\x9aode
);

134 
cڡex\xb4

	g\xa1d
::
size_t

kInodesP\x94Block
 =
kBlockSize
 /
kInodeSize
;

135 
cڡex\xb4

	g\xa1d
::
size_t

kNrD\x9cE\xc1r\x9bs
 =
kBlockSize
 /
kD\x9cE\xc1rySize
;

136 
cڡex\xb4

	g\xa1d
::
size_t

kNrInd\x9\xfb\xf9s
 =
kBlockSize
 /
kZ\xd\xabNumSize
;

137 
cڡex\xb4

	g\xa1d
::
size_t

kI\xc1sP\x94Block
 =
kBlockSize
 / (
\xa1d
::
\x9at32_t
);

138 
cڡex\xb4

	g\xa1d
::
size_t

kP\x9deSize
 =
kNrDz\xd\xabNum
 *
kBlockSize
;

140
\xa1\xa9ic_as\xa3\xb9
(
kBlockSize
 %
kInodeSize
 == 0, "Block size must be divisible by inode size");

141
\xa1\xa9ic_as\xa3\xb9
(
kNrBufHash
 > 0 &&
Pow\x94OfTwo
<kNrBufHash>,

143
\xa1\xa9ic_as\xa3\xb9
(
kNrFds
 <= 127, "File descriptor\x86imit constraint");

144
\xa1\xa9ic_as\xa3\xb9
(
kNrBufs
 >= 6, "Minimum buffer\x84equirement");

147
us\x9ag

	gDe\xe7u\xc9FsCڡ\x\xafts
 =
FsCڡ\x\xafts
<1024>;

152
\xc7me\xa5a\xfb

	gF\x9\x93Ty\xb3s
 {

153
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkRegu\xc\xe4
{0
	go100000
};

154
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkD\x9\xfb\xf9\xdcy
{0
	go040000
};

155
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkBlockS\xb3c\x9\xe6
{0
	go060000
};

156
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkCh\xacS\xb3c\x9\xe6
{0
	go020000
};

157
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkP\x9de
{0
	go010000
};

158
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkTy\xb3Mask
{0
	go170000
};

164
\xc7me\xa5a\xfb

	gP\x94missi\xdas
 {

165
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkR\x97dB\x99
{0
	go4
};

166
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkWr\x99eB\x99
{0
	go2
};

167
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkExecB\x99
{0
	go1
};

168
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkA\x\xfbModes
{0
	go777
};

169
\x9al\x9ae

cڡex\xb4

mask_b\x99s

	gkRwxModes
{0
	go700
};

175 \xfeas\xa0
	cBlockTy\xb3
 :
\xa1d
::
u\x9\xa98_t
 {

176
InodeBlock
 = 0,

177
	gD\x9\xfb\xf9\xdcyBlock
 = 1,

178
	gInd\x9\xfb\xf9Block
 = 2,

179
	gIm\xadBlock
 = 3,

180
	gZm\xadBlock
 = 4,

181
	gSu\xb3rBlock
 = 5,

182
	gFu\x\xfbD\xa9aBlock
 = 6,

183
	gP\xa\xf9\x9\xe6D\xa9aBlock
 = 7

189
\xc7me\xa5a\xfb

	gBlockF\xcfgs
 {

190
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
u\x9\xa98_t

kWr\x99eImmed
 = 0100;

191
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
u\x9\xa98_t

kO\xc3Sh\xd9
 = 0200;

198
	g\x8bm\xb6\xa9e
 <
	g\xa1d
::
size_t

Z\xd\xabSize
>
cڡex\xb4
\x87ut\xd8
z\xd\xabs_to_blocks
(
z\xd\xab_\xc4

z\xd\xab
\xe8->
block_\xc4
 {

199 
block_\xc4
{
\xa1d
::
to_und\x94ly\x9ag
(
z\xd\xab
\xe8*
Z\xd\xabSize
};

206
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>
cڡex\xb4

T

	$max_v\x\xabue
() {

207 
T
{
\xa1d
::
num\x94ic_lim\x99s
<\xa1d::
und\x94ly\x9ag_ty\xb3_t
<T>>::
	`max
()};

208
	}
}

212
\xc7me\xa5a\xfb

	g\xcbgacy
 {

213
	gus\x9ag
 ::
m\x9aix
::
fs
::
De\xe7u\xc9FsCڡ\x\xafts
;

	@include/minix/fs/inode.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"buf\xe3r.h\xb5
"

9 
	~"cڡ.h\xb5
"

10 
	~"ex\x8b\xc1.h\xb5
"

11 
	~<\xa9omic
>

12 
	~<chr\xdao
>

13 
	~<c\xda\xfb\xb1s
>

14 
	~<ex\xb3\xf9ed
>

15 
	~<mem\xdcy
>

16 
	~<\xddtiڮ
>

17 
	~<\xa5\x\xaf
>

18 
	~<\xa1r\x9ag_v\x9bw
>

20
\xc7me\xa5a\xfb

	gm\x9aix
::
fs
 {

26 \xfeas\xa0
	cInodeE\xbc\xdc
 {

27
Tab\xcbFu\x\xfb
,

28
	gN\xd9Found
,

29
	gA̗dyExi\xa1s
,

30
	gP\x94missi\xdaD\x92\x9bd
,

31
	gInv\x\xabidO\xb3\xb\xe1i\xda
,

32
	gDiskE\xbc\xdc
,

33
	gC\xd\xfcu\xb1edD\xa9a
,

34
	gOutOfS\xb7\xfb
,

35
	gInv\x\xabidArgum\x92t
,

36
	gResour\xfbBusy


43
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
>

44
c\xda\xfb\xb1

	gF\x9\x93Ty\xb3
 =
\xbbqu\x9ces
 {

45
\xa1d
::
is_\x92um_v
<
T
>;

46
	gT
::
Regu\xc\xe4
;

47
	gT
::
D\x9\xfb\xf9\xdcy
;

48
	gT
::
Ch\xacS\xb3c\x9\xe6
;

49
	gT
::
BlockS\xb3c\x9\xe6
;

50
	gT
::
P\x9de
;

57 \xfeas\xa0
	cInodeTy\xb3
 :
mask_b\x99s
 {

58
Regu\xc\xe4
 =
\xa1d
::
to_und\x94ly\x9ag
(
F\x9\x93Ty\xb3s
::
kRegu\xc\xe4
),

59
	gD\x9\xfb\xf9\xdcy
 =
\xa1d
::
to_und\x94ly\x9ag
(
F\x9\x93Ty\xb3s
::
kD\x9\xfb\xf9\xdcy
),

60
	gCh\xacS\xb3c\x9\xe6
 =
\xa1d
::
to_und\x94ly\x9ag
(
F\x9\x93Ty\xb3s
::
kCh\xacS\xb3c\x9\xe6
),

61
	gBlockS\xb3c\x9\xe6
 =
\xa1d
::
to_und\x94ly\x9ag
(
F\x9\x93Ty\xb3s
::
kBlockS\xb3c\x9\xe6
),

62
	gP\x9de
 =
\xa1d
::
to_und\x94ly\x9ag
(
F\x9\x93Ty\xb3s
::
kP\x9de
)

69 \xfeas\xa0
	cP\x94missi\xdas
 {

70
	g\xb4iv\xa9e
:

71
mask_b\x99s

b\x99s_
;

73
	gpublic
:

74
cڡex\xb4

ex\xb6ic\x99

P\x94missi\xdas
(
mask_b\x99s

b\x99s
 = mask_b\x99s{0}\xe8:
b\x99s_
{bits} {}

76 [[
nodis\xf\xe4d
]] 
cڡex\xb4
\x87ut\xd8
ow\xc3r_\xbbad_wr\x99e
(\xe8->
P\x94missi\xdas
 {

77 
P\x94missi\xdas
{
mask_b\x99s
{0600}};

80 [[
nodis\xf\xe4d
]] 
cڡex\xb4
\x87ut\xd8
ow\xc3r_\x\xabl
(\xe8->
	gP\x94missi\xdas
 {

81 
	gP\x94missi\xdas
{
	gmask_b\x99s
{0700}};

84 [[
nodis\xf\xe4d
]] 
cڡex\xb4
\x87ut\xd8
\xael_\xbbad
(\xe8->
	gP\x94missi\xdas
 {

85 
	gP\x94missi\xdas
{
	gmask_b\x99s
{0444}};

88 [[
nodis\xf\xe4d
]] 
cڡex\xb4
\x87ut\xd8
\xael_\xbbad_wr\x99e
(\xe8->
	gP\x94missi\xdas
 {

89 
	gP\x94missi\xdas
{
	gmask_b\x99s
{0666}};

92 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

\xffn_\xbbad
(bo\xde
ow\xc3r
, bo\xde
group
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

93 cڡ\x87ut\xd8
	gshi\xe1
 =
ow\xc3r
 ? 6 : (
group
 ? 3 : 0);

94  (
	g\xa1d
::
to_und\x94ly\x9ag
(
b\x99s_
\xe8>>
shi\xe1
\xe8&
\xa1d
::to_und\x94ly\x9ag(
P\x94missi\xdas
::
kR\x97dB\x99
);

97 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

\xffn_wr\x99e
(bo\xde
ow\xc3r
, bo\xde
group
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

98 cڡ\x87ut\xd8
	gshi\xe1
 =
ow\xc3r
 ? 6 : (
group
 ? 3 : 0);

99  (
	g\xa1d
::
to_und\x94ly\x9ag
(
b\x99s_
\xe8>>
shi\xe1
\xe8&
\xa1d
::to_und\x94ly\x9ag(
P\x94missi\xdas
::
kWr\x99eB\x99
);

102 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

\xffn_execu\x8b
(bo\xde
ow\xc3r
, bo\xde
group
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

103 cڡ\x87ut\xd8
	gshi\xe1
 =
ow\xc3r
 ? 6 : (
group
 ? 3 : 0);

104  (
	g\xa1d
::
to_und\x94ly\x9ag
(
b\x99s_
\xe8>>
shi\xe1
\xe8&
\xa1d
::to_und\x94ly\x9ag(
P\x94missi\xdas
::
kExecB\x99
);

107 [[
nodis\xf\xe4d
]]
cڡex\xb4
\x87ut\xd8
	gݔ\xa9\xdc
|(cڡ
	gP\x94missi\xdas
 &
	g\xd9h\x94
) const -> Permissions {

108 
	gP\x94missi\xdas
{
	gmask_b\x99s
{
	g\xa1d
::
to_und\x94ly\x9ag
(
b\x99s_
\xe8|
\xa1d
::to_und\x94ly\x9ag(
\xd9h\x94
.bits_)}};

111 [[
nodis\xf\xe4d
]]
cڡex\xb4
\x87ut\xd8
	gݔ\xa9\xdc
&(cڡ
	gP\x94missi\xdas
 &
	g\xd9h\x94
) const -> Permissions {

112 
	gP\x94missi\xdas
{
	gmask_b\x99s
{
	g\xa1d
::
to_und\x94ly\x9ag
(
b\x99s_
\xe8&
\xa1d
::to_und\x94ly\x9ag(
\xd9h\x94
.bits_)}};

115 [[
nodis\xf\xe4d
]]
cڡex\xb4
\x87ut\xd8
\xbfw
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gmask_b\x99s
 { 
	gb\x99s_
; }

122 \xfeas\xa0
	cF\x9\x93Time
 {

123
	g\xb4iv\xa9e
:

124
\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::
time_po\x9\xa9

time_po\x9\xa9_
;

126
	gpublic
:

127
F\x9\x93Time
(\xe8:
time_po\x9\xa9_
{
\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::
now
()} {}

129
ex\xb6ic\x99

F\x9\x93Time
(
\xbb\xae_time

\xcbgacy_time
)

130 :
time_po\x9\xa9_
{
\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::
\xe4om_time_t
(

131
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
time_t
>(\xa1d::
to_und\x94ly\x9ag
(
\xcbgacy_time
)))} {}

133 [[
nodis\xf\xe4d
]]\x87ut\xd8
to_\xcbgacy
(\xe8cڡ ->
\xbb\xae_time
 {

134 
\xbb\xae_time
{
\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::
to_time_t
(
time_po\x9\xa9_
)};

137 [[
nodis\xf\xe4d
]]\x87ut\xd8
time_po\x9\xa9
(\xe8cڡ ->
	g\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::time_point {

138 
time_po\x9\xa9_
;

141 
upd\xa9e
(\xe8{
	gtime_po\x9\xa9_
 =
\xa1d
::
chr\xdao
::
sy\xa1em_\x\xe3ock
::
now
(); }

143 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
<=>(cڡ
F\x9\x93Time
 &) const = ;

146
\xfeass

	gInodeTab\xcb
;

152 \xfeas\xa0
	cInodeH\x\xafd\xcb
 {

153
	g\xb4iv\xa9e
:

154
\xfeass

Inode
 *
\x9aode_
;

155
bo\xde

	gow\xc3d_
;

157
	gpublic
:

158
ex\xb6ic\x99

InodeH\x\xafd\xcb
(
Inode
 *
\x9aode
 =
nuαr
,
bo\xde

ow\xc3d
 =
\x8cue
)

159 :
\x9aode_
{
\x9aode
},
	gow\xc3d_
{
	gow\xc3d
} {}

161 ~
InodeH\x\xafd\xcb
();

163
InodeH\x\xafd\xcb
(cڡ InodeH\xaad\xcb &\xe8\xf0
d\x96\x91e
;

164
	gInodeH\x\xafd\xcb
 &
	gݔ\xa9\xdc
=(cڡ
InodeH\x\xafd\xcb
 &\xe8\xf0
d\x96\x91e
;

166
InodeH\x\xafd\xcb
(InodeH\xaad\xcb &&
\xd9h\x94
\xe8
	gn\xdbx\xfb\xb1


167 :
\x9aode_
{
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.\x9aode_,
nuαr
)},
	gow\xc3d_
{
	g\xa1d
::exch\xaage(\xd9h\x94.
ow\xc3d_
,
\xe7l\xa3
)} {

170
	gInodeH\x\xafd\xcb
 &
	gݔ\xa9\xdc
=(
InodeH\x\xafd\xcb
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

171 i\xe0(
this
 !\xf0&
\xd9h\x94
) {

172
\xbb\xa3t
();

173
	g\x9aode_
 =
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.
\x9aode_
,
nuαr
);

174
	gow\xc3d_
 =
\xa1d
::
exch\x\xafge
(
\xd9h\x94
.
ow\xc3d_
,
\xe7l\xa3
);

176  *
	gthis
;

179 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91
(\xe8->
	gInode
 * { 
	g\x9aode_
; }

180 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91
(\xe8cڡ -> cڡ
	gInode
 * { 
	g\x9aode_
; }

182 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
->(\xe8->
	gInode
 * { 
	g\x9aode_
; }

183 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
->(\xe8cڡ -> cڡ
	gInode
 * { 
	g\x9aode_
; }

185 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
*(\xe8->
	gInode
 & {  *
	g\x9aode_
; }

186 [[
nodis\xf\xe4d
]]\x87ut\xd8
	gݔ\xa9\xdc
*(\xe8cڡ -> cڡ
	gInode
 & {  *
	g\x9aode_
; }

188 [[
nodis\xf\xe4d
]]
bo\xde

v\x\xabid
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\x9aode_
 !\xf0
nuαr
; }

189
ex\xb6ic\x99

ݔ\xa9\xdc

bo\xde
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
v\x\xabid
(); }

191 
\xbb\xa3t
();

192 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbb\xcba\xa3
(\xe8->
	gInode
 *;

199 \xfeas\xa0
	cInode
 {

200
	g\xb4iv\xa9e
:

201
\xe4\x9bnd

\xfeass

InodeTab\xcb
;

202
\xe4\x9bnd

\xfeass

	gInodeH\x\xafd\xcb
;

204
InodeTy\xb3

	gty\xb3_
{
	gInodeTy\xb3
::
Regu\xc\xe4
};

205
uid

	gow\xc3r_
{
	guid
{0}};

206
f\x9\x93_pos

	gsize_
{
	gf\x9\x93_pos
{0}};

207
f\x9\x93_pos64

	gsize64_
{
	gf\x9\x93_pos64
{0}};

208
F\x9\x93Time

	gmodifi\xf\xe1i\xda_time_
{};

209
gid

	ggroup_
{
	ggid
{0}};

210
l\x9aks

	gl\x9ak_cou\xc1_
{
	gl\x9aks
{1}};

211
	g\xa1d
::
\xac\xbfy
<
z\xd\xab_\xc4
,
	gDe\xe7u\xc9FsCڡ\x\xafts
::
kNrZ\xd\xabNums
>
z\xd\xabs_
{};

213
dev_\xc4

	gdevi\xfb_
{
	gkNoDev
};

214
\x9aode_\xc4

	gnumb\x94_
{
	gkNoInode
};

215
	g\xa1d
::
\xa9omic
<
\xa1d
::
\x9at32_t
>
\xbb\xe3\xbbn\xfb_cou\xc1_
{0};

216
	g\xa1d
::
\xa9omic
<
bo\xde
>
d\x9\xf9y_
{
\xe7l\xa3
};

217
	g\xa1d
::
\xa9omic
<
bo\xde
>
p\x9de_
{
\xe7l\xa3
};

218
	g\xa1d
::
\xa9omic
<
bo\xde
>
mou\xc1ed_
{
\xe7l\xa3
};

219
	g\xa1d
::
\xa9omic
<
bo\xde
>
\xa3ek_\xe6ag_
{
\xe7l\xa3
};

221
	g\xa1d
::
unique_\xb1r
<
Ex\x8b\xc1Tab\xcb
>
ex\x8b\xc1s_
;

223
	gpublic
:

224
Inode
() = ;

226
ex\xb6ic\x99

Inode
(
InodeTy\xb3

ty\xb3
,
uid

ow\xc3r
,
gid

group
)

227 :
ty\xb3_
{
ty\xb3
},
	gow\xc3r_
{
	gow\xc3r
},
	ggroup_
{
	ggroup
} {

228
	gmodifi\xf\xe1i\xda_time_
.
upd\xa9e
();

229
	g\xa1d
::
f\x9\x96
(
z\xd\xabs_
.
beg\x9a
(), z\xdaes_.
\x92d
(),
kNoZ\xd\xab
);

232 [[
nodis\xf\xe4d
]]\x87ut\xd8
ty\xb3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gInodeTy\xb3
 { 
	gty\xb3_
; }

234 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

is_\xbbgu\xc\xe4_f\x9\x93
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

235 
	gty\xb3_
 =\xf0
InodeTy\xb3
::
Regu\xc\xe4
;

238 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

is_d\x9\xfb\xf9\xdcy
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

239 
	gty\xb3_
 =\xf0
InodeTy\xb3
::
D\x9\xfb\xf9\xdcy
;

242 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

is_\xa5ec\x9\xe6_f\x9\x93
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

243 
	gty\xb3_
 =\xf0
InodeTy\xb3
::
Ch\xacS\xb3c\x9\xe6
 ||
ty\xb3_
 =\xf0InodeTy\xb3::
BlockS\xb3c\x9\xe6
;

246 [[
nodis\xf\xe4d
]]
cڡex\xb4

bo\xde

is_p\x9de
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

247 
	gp\x9de_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

250 [[
nodis\xf\xe4d
]]\x87ut\xd8
ow\xc3r
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	guid
 { 
	gow\xc3r_
; }

251 [[
nodis\xf\xe4d
]]\x87ut\xd8
group
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	ggid
 { 
	ggroup_
; }

253 
\xa3t_ow\xc3r
(
uid

\xc3w_ow\xc3r
\xe8
	gn\xdbx\xfb\xb1
 {

254
	gow\xc3r_
 =
\xc3w_ow\xc3r
;

255
m\xack_d\x9\xf9y
();

258 
\xa3t_group
(
gid

\xc3w_group
\xe8
	gn\xdbx\xfb\xb1
 {

259
	ggroup_
 =
\xc3w_group
;

260
m\xack_d\x9\xf9y
();

263 [[
nodis\xf\xe4d
]]\x87ut\xd8
size
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gf\x9\x93_pos64
 {

264 
	gsize64_
 !\xf0
f\x9\x93_pos64
{0} ?
size64_
 : f\x9ee_pos64{
\xa1d
::
to_und\x94ly\x9ag
(
size_
)};

267 
\xa3t_size
(
f\x9\x93_pos64

\xc3w_size
\xe8
	gn\xdbx\xfb\xb1
 {

268
	gsize64_
 =
\xc3w_size
;

269
	gsize_
 =
f\x9\x93_pos
{
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\x9at32_t
>(\xa1d::
to_und\x94ly\x9ag
(
\xc3w_size
))};

270
	gmodifi\xf\xe1i\xda_time_
.
upd\xa9e
();

271
m\xack_d\x9\xf9y
();

274 [[
nodis\xf\xe4d
]]\x87ut\xd8
l\x9ak_cou\xc1
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gl\x9aks
 { 
	gl\x9ak_cou\xc1_
; }

276 
\x9a\xfcem\x92t_l\x9aks
(\xe8
	gn\xdbx\xfb\xb1
 {

277
	gl\x9ak_cou\xc1_
 =
l\x9aks
{
\xa1d
::
to_und\x94ly\x9ag
(
l\x9ak_cou\xc1_
) + 1};

278
m\xack_d\x9\xf9y
();

281 
de\xf\xfbm\x92t_l\x9aks
(\xe8
	gn\xdbx\xfb\xb1
 {

282 i\xe0(
	g\xa1d
::
to_und\x94ly\x9ag
(
l\x9ak_cou\xc1_
) > 0) {

283
l\x9ak_cou\xc1_
 =
l\x9aks
{
\xa1d
::
to_und\x94ly\x9ag
(link_count_) - 1};

284
m\xack_d\x9\xf9y
();

288 [[
nodis\xf\xe4d
]]\x87ut\xd8
modifi\xf\xe1i\xda_time
(\xe8cڡ ->
	gF\x9\x93Time
 { 
	gmodifi\xf\xe1i\xda_time_
; }

290 
touch
() {

291
	gmodifi\xf\xe1i\xda_time_
.
upd\xa9e
();

292
m\xack_d\x9\xf9y
();

295 [[
nodis\xf\xe4d
]]\x87ut\xd8
z\xd\xab
(
\xa1d
::
size_t

\x9adex
\xe8cڡ -> std::
ex\xb3\xf9ed
<
z\xd\xab_\xc4
,
	gInodeE\xbc\xdc
> {

296 i\xe0(
	g\x9adex
 >\xf0
z\xd\xabs_
.
size
()) {

297 
\xa1d
::
u\xc3x\xb3\xf9ed
(
InodeE\xbc\xdc
::
Inv\x\xabidArgum\x92t
);

299 
	gz\xd\xabs_
[
\x9adex
];

302 aut\xd8
\xa3t_z\xdae
(
\xa1d
::
size_t

\x9adex
,
z\xd\xab_\xc4

z\xd\xab
\xe8->
	g\xa1d
::
ex\xb3\xf9ed
<,
	gInodeE\xbc\xdc
> {

303 i\xe0(
	g\x9adex
 >\xf0
z\xd\xabs_
.
size
()) {

304 
\xa1d
::
u\xc3x\xb3\xf9ed
(
InodeE\xbc\xdc
::
Inv\x\xabidArgum\x92t
);

306
	gz\xd\xabs_
[
\x9adex
] =
z\xd\xab
;

307
m\xack_d\x9\xf9y
();

311 [[
nodis\xf\xe4d
]]\x87ut\xd8
devi\xfb
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	gdev_\xc4
 { 
	gdevi\xfb_
; }

312 [[
nodis\xf\xe4d
]]\x87ut\xd8
numb\x94
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\x9aode_\xc4
 { 
	gnumb\x94_
; }

314 [[
nodis\xf\xe4d
]]
bo\xde

is_d\x9\xf9y
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gd\x9\xf9y_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
); }

316 
m\xack_d\x9\xf9y
(\xe8
	gn\xdbx\xfb\xb1
 {
	gd\x9\xf9y_
.
\xa1\xdce
(
\x8cue
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
); }

318 
m\xack_\x\xe3\x97n
(\xe8
	gn\xdbx\xfb\xb1
 {
	gd\x9\xf9y_
.
\xa1\xdce
(
\xe7l\xa3
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
); }

320 [[
nodis\xf\xe4d
]]
bo\xde

is_mou\xc1ed
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

321 
	gmou\xc1ed_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

324 
\xa3t_mou\xc1ed
(
bo\xde

mou\xc1ed
 =
\x8cue
\xe8
n\xdbx\xfb\xb1
 {

325
mou\xc1ed_
.
\xa1\xdce
(
mou\xc1ed
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
);

328 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xbb\xe3\xbbn\xfb_cou\xc1
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
\x9at32_t
 {

329 
\xbb\xe3\xbbn\xfb_cou\xc1_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

332 [[
nodis\xf\xe4d
]]\x87ut\xd8
check_\xb3rmissi\xda
(
uid

\xbbque\xa1\x9ag_uid
,
gid

\xbbque\xa1\x9ag_gid
,

333
P\x94missi\xdas

\xbbqu\x9ced
) const

334 ->
	g\xa1d
::
ex\xb3\xf9ed
<,
	gInodeE\xbc\xdc
>;

336 [[
nodis\xf\xe4d
]]\x87ut\xd8
ex\x8b\xc1_\x8fb\xcb
(\xe8cڡ -> cڡ
	gEx\x8b\xc1Tab\xcb
 * { 
	gex\x8b\xc1s_
.
g\x91
(); }

338 aut\xd8
\xaelo\xff\x8b_ex\x8b\xc1_\x8fb\xcb
(
\xa1d
::
size_t

\x9a\x99\x9fl_\xff\xb7c\x99y
\xe8-> std::
ex\xb3\xf9ed
<,
	gInodeE\xbc\xdc
>;

340
	g\xb4iv\xa9e
:

341 
\x9a\xfcem\x92t_\xbb\xe3\xbbn\xfbs
(\xe8
n\xdbx\xfb\xb1
 {

342
\xbb\xe3\xbbn\xfb_cou\xc1_
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_acq_\xbbl
);

345 
de\xf\xfbm\x92t_\xbb\xe3\xbbn\xfbs
(\xe8
	gn\xdbx\xfb\xb1
 {

346
	g\xbb\xe3\xbbn\xfb_cou\xc1_
.
\xe3tch_sub
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_acq_\xbbl
);

349 
\xa3t_devi\xfb_\xaad_numb\x94
(
dev_\xc4

devi\xfb
,
\x9aode_\xc4

numb\x94
\xe8
	gn\xdbx\xfb\xb1
 {

350
	gdevi\xfb_
 =
devi\xfb
;

351
	gnumb\x94_
 =
numb\x94
;

359 \xfeas\xa0
	cInodeTab\xcb
 {

360
	g\xb4iv\xa9e
:

361 
cڡex\xb4

\xa1d
::
size_t

kTab\xcbSize
 =
De\xe7u\xc9FsCڡ\x\xafts
::
kNrInodes
;

363
	g\xa1d
::
\xac\xbfy
<
Inode
,
	gkTab\xcbSize
>
	g\x9aodes_
{};

364
	g\xa1d
::
\xa9omic
<
\xa1d
::
size_t
>
\x9aodes_\x9a_u\xa3_
{0};

366 [[
nodis\xf\xe4d
]]\x87ut\xd8
f\x9ad_\xe4\x93_\xa6\xd9
(\xe8->
	g\xa1d
::
\xddtiڮ
<
\xa1d
::
size_t
>;

368 [[
nodis\xf\xe4d
]]\x87ut\xd8
f\x9ad_\x9aode
(
dev_\xc4

devi\xfb
,
\x9aode_\xc4

numb\x94
\xe8->
	gInode
 *;

370
	gpublic
:

371
InodeTab\xcb
() = ;

372 ~
InodeTab\xcb
() = ;

374
InodeTab\xcb
(cڡ InodeTab\xcb &\xe8\xf0
d\x96\x91e
;

375
	gInodeTab\xcb
 &
	gݔ\xa9\xdc
=(cڡ
InodeTab\xcb
 &\xe8\xf0
d\x96\x91e
;

376
InodeTab\xcb
(InodeTable &&) = ;

377
	gInodeTab\xcb
 &
	gݔ\xa9\xdc
=(
InodeTab\xcb
 &&) = ;

379 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91_\x9aode
(
dev_\xc4

devi\xfb
,
\x9aode_\xc4

numb\x94
)

380 ->
	g\xa1d
::
ex\xb3\xf9ed
<
InodeH\x\xafd\xcb
,
	gInodeE\xbc\xdc
>;

382 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xaelo\xff\x8b_\x9aode
(
dev_\xc4

devi\xfb
,
InodeTy\xb3

ty\xb3
,
uid

ow\xc3r
,
gid

group
)

383 ->
	g\xa1d
::
ex\xb3\xf9ed
<
InodeH\x\xafd\xcb
,
	gInodeE\xbc\xdc
>;

385 
\xbb\xcba\xa3_\x9aode
(
Inode
 *
\x9aode
\xe8
	gn\xdbx\xfb\xb1
;

387 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xe6ush_d\x9cty_\x9aodes
(\xe8->
	g\xa1d
::
size_t
;

389 [[
nodis\xf\xe4d
]]\x87ut\xd8
\x9aodes_\x9a_u\xa3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
size_t
 {

390 
\x9aodes_\x9a_u\xa3_
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
);

393 [[
nodis\xf\xe4d
]]\x87ut\xd8
ava\x9\x97b\xcb_\x9aodes
(\xe8cڡ
	gn\xdbx\xfb\xb1
 ->
	g\xa1d
::
size_t
 {

394 
kTab\xcbSize
 -
\x9aodes_\x9a_u\xa3
();

397 [[
nodis\xf\xe4d
]]\x87ut\xd8
beg\x9a
(\xe8
	gn\xdbx\xfb\xb1
 ->
	gInode
 * { 
	g\x9aodes_
.
d\xa9a
(); }

398 [[
nodis\xf\xe4d
]]\x87ut\xd8
\x92d
(\xe8
	gn\xdbx\xfb\xb1
 ->
	gInode
 * { 
	g\x9aodes_
.
d\xa9a
(\xe8+
	gkTab\xcbSize
; }

399 [[
nodis\xf\xe4d
]]\x87ut\xd8
beg\x9a
(\xe8cڡ
	gn\xdbx\xfb\xb1
 -> cڡ
	gInode
 * { 
	g\x9aodes_
.
d\xa9a
(); }

400 [[
nodis\xf\xe4d
]]\x87ut\xd8
\x92d
(\xe8cڡ
	gn\xdbx\xfb\xb1
 -> cڡ
	gInode
 * { 
	g\x9aodes_
.
d\xa9a
(\xe8+
	gkTab\xcbSize
; }

403
InodeTab\xcb

g_\x9aode_\x8fb\xcb
;

405 [[
nodis\xf\xe4d
]]\x87ut\xd8
g\x91_\x9aode
(
dev_\xc4

devi\xfb
,
\x9aode_\xc4

numb\x94
)

406 ->
	g\xa1d
::
ex\xb3\xf9ed
<
InodeH\x\xafd\xcb
,
	gInodeE\xbc\xdc
>;

408 [[
nodis\xf\xe4d
]]\x87ut\xd8
\xaelo\xff\x8b_\x9aode
(
dev_\xc4

devi\xfb
,
InodeTy\xb3

ty\xb3
,
uid

ow\xc3r
,
gid

group
)

409 ->
	g\xa1d
::
ex\xb3\xf9ed
<
InodeH\x\xafd\xcb
,
	gInodeE\xbc\xdc
>;

	@include/minix/fs_error.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~"../../h/\x94r\xdc.h\xb5
"

4 
	~<sy\xa1em_\x94r\xdc
>

5 
	~<\xa1r\x9ag
>

12 \xfeas\xa0
	cM\x9aixFsE\xbc\xdcC\xa9eg\xdcy
 :
public

\xa1d
::
\x94r\xdc_\xff\x8bg\xdcy
 {

13
public
:

14 cڡ *
	$\xc7me
(\xe8cڡ
n\xdbx\xfb\xb1

ov\x94ride
 {

18
\xa1d
::
\xa1r\x9ag

	$mes\xa7ge
(
c\xdad\x99i\xda
\xe8cڡ
ov\x94ride
 {

19 
\xa1\xa9ic_\xff\xa1
<
E\xbc\xdcCode
>(
c\xdad\x99i\xda
)) {

21 
E\xbc\xdcCode
::
EPERM
:

23 
E\xbc\xdcCode
::
ENOENT
:

25 
E\xbc\xdcCode
::
ESRCH
:

27 
E\xbc\xdcCode
::
EINTR
:

29 
E\xbc\xdcCode
::
EIO
:

31 
E\xbc\xdcCode
::
ENXIO
:

33 
E\xbc\xdcCode
::
E2BIG
:

35 
E\xbc\xdcCode
::
ENOEXEC
:

37 
E\xbc\xdcCode
::
EBADF
:

39 
E\xbc\xdcCode
::
ECHILD
:

41 
E\xbc\xdcCode
::
EAGAIN
:

43 
E\xbc\xdcCode
::
ENOMEM
:

45 
E\xbc\xdcCode
::
EACCES
:

47 
E\xbc\xdcCode
::
EFAULT
:

49 
E\xbc\xdcCode
::
ENOTBLK
:

51 
E\xbc\xdcCode
::
EBUSY
:

53 
E\xbc\xdcCode
::
EEXIST
:

55 
E\xbc\xdcCode
::
EXDEV
:

57 
E\xbc\xdcCode
::
ENODEV
:

59 
E\xbc\xdcCode
::
ENOTDIR
:

61 
E\xbc\xdcCode
::
EISDIR
:

63 
E\xbc\xdcCode
::
EINVAL
:

65 
E\xbc\xdcCode
::
ENFILE
:

67 
E\xbc\xdcCode
::
EMFILE
:

69 
E\xbc\xdcCode
::
ENOTTY
:

71 
E\xbc\xdcCode
::
ETXTBSY
:

73 
E\xbc\xdcCode
::
EFBIG
:

75 
E\xbc\xdcCode
::
ENOSPC
:

77 
E\xbc\xdcCode
::
ESPIPE
:

79 
E\xbc\xdcCode
::
EROFS
:

81 
E\xbc\xdcCode
::
EMLINK
:

83 
E\xbc\xdcCode
::
EPIPE
:

85 
E\xbc\xdcCode
::
EDOM
:

87 
E\xbc\xdcCode
::
ERANGE
:

91 
E\xbc\xdcCode
::
E_LOCKED
:

93 
E\xbc\xdcCode
::
E_BAD_CALL
:

95 
E\xbc\xdcCode
::
E_LONG_STRING
:

97 
E\xbc\xdcCode
::
EOF_ERROR
:

114
	}
}

118
\x9al\x9ae
 cڡ
	g\xa1d
::
\x94r\xdc_\xff\x8bg\xdcy
&
	$m\x9aix_fs_\xff\x8bg\xdcy
() {

119 
M\x9aixFsE\xbc\xdcC\xa9eg\xdcy

\x9a\xa1\xaa\xfb
;

120 
\x9a\xa1\xaa\xfb
;

121
	}
}

126
\x9al\x9ae

	g\xa1d
::
\x94r\xdc_code

	$make_\x94r\xdc_code
(
E\xbc\xdcCode

e
) {

127  {
\xa1\xa9ic_\xff\xa1
<>(
e
),
	`m\x9aix_fs_\xff\x8bg\xdcy
()};

128
	}
}

130
\xc7me\xa5a\xfb

	g\xa1d
 {

132
	g\x8bm\xb6\xa9e
 <>

133 
	gis_\x94r\xdc_code_\x92um
<
	gE\xbc\xdcCode
> :
\x8cue_ty\xb3
 {};

	@include/minix/io/file_operations.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"\xa1\xbbam.h\xb5
"

9 
	~<\xa1r\x9ag_v\x9bw
>

11
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

14 \xfeas\xa0
	cO\xb3nMode
 : {

15
\xbbad
 = 1 << 0,

16
	gwr\x99e
 = 1 << 1,

17
	g\xfc\x97\x8b
 = 1 << 2,

18
	gex\x\xe3usive
 = 1 << 3,

19
	g\x8cun\xff\x8b
 = 1 << 4,

20
	g\xad\xb3nd
 = 1 << 5

23
\x9al\x9ae

O\xb3nMode

	gݔ\xa9\xdc
|(O\xb3nMod\x90
	ga
, O\xb3nMod\x90
	gb
) {

24 
	g\xa1\xa9ic_\xff\xa1
<
	gO\xb3nMode
>(\xa1\xa9ic_\xff\xa1<>(
	ga
\xe8| s\x8ftic_\xff\xa1<>(
	gb
));

27
\x9al\x9ae

bo\xde

	gݔ\xa9\xdc
&(
O\xb3nMode

	ga
, O\xb3nMod\x90
	gb
) {

28  (
	g\xa1\xa9ic_\xff\xa1
<>(
	ga
\xe8& s\x8ftic_\xff\xa1<>(
	gb
)) != 0;

32 
	sP\x94missi\xdas
 {

33 
	gmode
{0644};

44
	gResu\xc9
<
	gS\x8c\x97mP\x8c
>
ݒ_\xa1\xbbam
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
,
O\xb3nMode

mode
,
P\x94missi\xdas

\xb3rms
 = {});

53
	gResu\xc9
<
	gS\x8c\x97mP\x8c
>
\xfc\x97\x8b_\xa1\xbbam
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
,
P\x94missi\xdas

\xb3rms
 = {});

	@include/minix/io/file_stream.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"\xa1\xbbam.h\xb5
"

10
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

15 \xfeas\xa0
	cF\x9\x93S\x8c\x97m
 :
public

S\x8c\x97m
 {

16
public
:

20
ex\xb6ic\x99

F\x9\x93S\x8c\x97m
(
fd
,
bo\xde

wr\x99e
\xe8:
fd_
(fd),
wr\x99ab\xcb_
(write) {}

21 ~
F\x9\x93S\x8c\x97m
(\xe8
	gov\x94ride
 = ;

24
	gResu\xc9
<
	gsize_t
>
\xbbad
(
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
\xe8
	gov\x94ride
;

26
	gResu\xc9
<
	gsize_t
>
wr\x99e
(cڡ
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
\xe8
	gov\x94ride
;

28
	g\xa1d
::
\x94r\xdc_code

\xfeo\xa3
(\xe8
ov\x94ride
;

30 
des\xfc\x9dt\xdc
(\xe8cڡ
	gov\x94ride
 { 
	gfd_
; }

32
	g\xb4iv\xa9e
:

33 
fd_
{-1};

34
bo\xde

	gwr\x99ab\xcb_
{
	g\xe7l\xa3
};

	@include/minix/io/memory_stream.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"\xa1\xbbam.h\xb5
"

10 
	~<\x\xabgܙhm
>

11 
	~<c\xa1ddef
>

12 
	~<ve\xf9\xdc
>

14
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

17 \xfeas\xa0
	cMem\xdcyS\x8c\x97m
 :
public

S\x8c\x97m
 {

18
public
:

19
Mem\xdcyS\x8c\x97m
() = ;

20 ~
Mem\xdcyS\x8c\x97m
(\xe8
	gov\x94ride
 = ;

23
	gResu\xc9
<
	gsize_t
>
\xbbad
(
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
\xe8
	gov\x94ride
;

26
	gResu\xc9
<
	gsize_t
>
wr\x99e
(cڡ
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
\xe8
	gov\x94ride
;

29 
\xa3ek
(
size_t

pos
);

32 cڡ
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
> &
d\xa9a
(\xe8cڡ { 
buf\xe3r_
; }

34 
des\xfc\x9dt\xdc
(\xe8cڡ
	gov\x94ride
 {  -1; }

36
	g\xb4iv\xa9e
:

37
\xa1d
::
ve\xf9\xdc
<\xa1d::
by\x8b
>
buf\xe3r_
{};

38
size_t

	gpos_
{0};

	@include/minix/io/standard_streams.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"f\x9\x93_ݔ\xa9i\xdas.h\xb5
"

10
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

13
S\x8c\x97m
 &
\xa1d\x9a
();

15
	gS\x8c\x97m
 &
\xa1dout
();

17
	gS\x8c\x97m
 &
\xa1d\x94r
();

	@include/minix/io/stdio_compat.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~"f\x9\x93_ݔ\xa9i\xdas.h\xb5
"

9 
	~"\xa1\x\xafd\xacd_\xa1\xbbams.h\xb5
"

10 
	~"../../\xa1dio.h\xb5
"

11 
	~<\xa5\x\xaf
>

13
\xc7me\xa5a\xfb

	gm\x9aix
::
io
::
com\xb7t
 {

16 
\xbbgi\xa1\x94_f\x9ee_\xa1\xbbam
(
FILE
 *
f\x9\x93
,
S\x8c\x97m
 *
\xa1\xbbam
);

18
S\x8c\x97m
 *
g\x91_\xa1\xbbam
(
FILE
 *
f\x9\x93
);

22
FILE
 *
fݒ_com\xb7t
(cڡ *
\xb7th
, cڡ *
mode
);

24 
f\x\xe3o\xa3_com\xb7t
(
FILE
 *
\xe5
);

26
size_t

\xe4\x97d_com\xb7t
(*
\xb1r
, size_\x88
size
, size_\x88
nmemb
,
FILE
 *
\xe5
);

28
size_t

fwr\x99e_com\xb7t
(cڡ *
\xb1r
, size_\x88
size
, size_\x88
nmemb
,
FILE
 *
\xe5
);

30 
\xe5r\x9atf_com\xb7t
(
FILE
 *
\xe5
, cڡ *
f\xdcm\xa9
, ...);

	@include/minix/io/stream.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
	~<c\xa1ddef
>

9 
	~<mem\xdcy
>

11 
	~<ex\xb3\xf9ed
>

12 
	~<\xa5\x\xaf
>

13 
	~<sy\xa1em_\x94r\xdc
>

14 
	~<ve\xf9\xdc
>

16
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

24
\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

T
>
us\x9ag

Resu\xc9
 =
\xa1d
::
ex\xb3\xf9ed
<T,
	g\xa1d
::
\x94r\xdc_code
>;

32 \xfeas\xa0
	cS\x8c\x97m
 {

33
	gpublic
:

34
v\x9\xf9u\x\xab
 ~
S\x8c\x97m
() = ;

38
v\x9\xf9u\x\xab

	g\xa1d
::
ex\xb3\xf9ed
<
size_t
, std::
\x94r\xdc_code
>
\xbbad
(
\xa1d
::
by\x8b
 *
buf\xe3r
, size_\x88
\xcbngth
) = 0;

40
v\x9\xf9u\x\xab

	g\xa1d
::
ex\xb3\xf9ed
<
size_t
, std::
\x94r\xdc_code
>
\xbbad
(
\xa1d
::
\xa5\xaa
<\xa1d::
by\x8b
>
buf\xe3r
) {

41 
\xbbad
(
buf\xe3r
.
d\xa9a
(), buf\xe3r.
size
());

46
v\x9\xf9u\x\xab

	g\xa1d
::
ex\xb3\xf9ed
<
size_t
, std::
\x94r\xdc_code
>
wr\x99e
(cڡ
\xa1d
::
by\x8b
 *
buf\xe3r
,

47
size_t

\xcbngth
) = 0;

49
v\x9\xf9u\x\xab

	g\xa1d
::
ex\xb3\xf9ed
<
size_t
, std::
\x94r\xdc_code
>
wr\x99e
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
buf\xe3r
) {

50 
wr\x99e
(
buf\xe3r
.
d\xa9a
(), buf\xe3r.
size
());

54
v\x9\xf9u\x\xab

	g\xa1d
::
\x94r\xdc_code

\xe6ush
() {  {}; }

57
v\x9\xf9u\x\xab

	g\xa1d
::
\x94r\xdc_code

\xfeo\xa3
() {  {}; }

60
v\x9\xf9u\x\xab
 
des\xfc\x9dt\xdc
() const = 0;

64
us\x9ag

	gS\x8c\x97mP\x8c
 =
\xa1d
::
unique_\xb1r
<
S\x8c\x97m
>;

	@include/number_parse.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~<c\xf9y\xb3
>

14 [[
nodis\xf\xe4d
]]
cڡex\xb4
 
	$\xb7r\xa3_sig\xc3d_decim\x\xab
(cڡ *
\xa1r
\xe8
n\xdbx\xfb\xb1
 {

16 cڡ *
s
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xa1r
);

18 
tٮ
 = 0;

19 
m\x9aus
 = 0;

22 
\xa1d
::
	`is\xa5a\xfb
(*
s
)) {

23 ++
s
;

27 i\xe0(*
s
 == '-') {

28
m\x9aus
 = 1;

29 ++
s
;

33 
dig\x99
;

34 (
dig\x99
 = *
s
 - '0') < 10) {

35
tٮ
 =\x81ٮ * 10 +
dig\x99
;

36 ++
s
;

39 
m\x9aus
 ? -
tٮ
 :\x81otal;

40
	}
}

	@include/paging.hpp

7 #i\xe2de\xe0
PAGING_H


8 
	#PAGING_H


	)

10 
	~"../h/cڡ.h\xb5
"

11 
	~"../h/ty\xb3.h\xb5
"

12 
	~<c\xa1ddef
>

17
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

PAGE_SIZE_4K
 = 4096;

20
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

PT_ENTRIES
 = 512;

24 
	gPT_F\xcfg
 : {

25
PT_PRESENT
 = 0x001,

26
	gPT_WRITABLE
 = 0x002,

27
	gPT_USER
 = 0x004

30
us\x9ag

	gphys_addr64
 =
u64_t
;

31
us\x9ag

	gv\x9\xf9_addr64
 =
u64_t
;

33 
	s\xb1_\x92\x8cy
 {

34
phys_addr64

	maddr
;

35 
	m\xe6ags
;

38 
	s\xb7ge_\x8fb\xcb
 {

39 
\xb1_\x92\x8cy

	m\x92\x8c\x9bs
[
PT_ENTRIES
];

42 
	s\xb7ge_d\x9\xfb\xf9\xdcy
 {

43 
\xb7ge_\x8fb\xcb
 *
	m\x8fb\xcbs
[
PT_ENTRIES
];

46 
	s\xb7ge_d\x9c_\xb1r
 {

47 
\xb7ge_d\x9ce\xf9\xdcy
 *
	md\x9cs
[
PT_ENTRIES
];

50 
	spml4
 {

51 
\xb7ge_d\x9c_\xb1r
 *
	m\xb1rs
[
PT_ENTRIES
];

55 
\xb7g\x9ag_\x9a\x99
();

56 *
\xaeloc_v\x9ctu\xae
(
u64_t

by\x8bs
, 
\xe6ags
);

57 
m\xad_\xb7ge
(
v\x9\xf9_addr64

va
,
phys_addr64

\xb7
, 
\xe6ags
);

	@include/pqcrypto.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~"kyb\x94_im\xb6/\xadi.h
"

4 
	~<\xac\xbfy
>

5 
	~<c\xa1d\x9\xa9
>

6 
	~<\xa5\x\xaf
>

8
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

13 
	sKeyPa\x9c
 {

14
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
	gpublic_key
;

15
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
	g\xa3\xfc\x91_key
;

26 [[
nodis\xf\xe4d
]]
KeyPa\x9c

g\x92\x94\xa9e_key\xb7\x9c
();

35 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>

36
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
public_key
,

37
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xa3\xfc\x91_key
);

	@include/psd/vm/semantic_memory.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~<\xac\xbfy
>

4 
	~<c\xa1d\x9\xa9
>

5 
	~<\xddtiڮ
>

6 
	~<ty\xb3_\x8\xff\x99s
>

8
\xc7me\xa5a\xfb

	gpsd
::
vm
 {

14 
	s\xa3m\x\xaftic_code_\x8fg
 {};

16 
	s\xa3m\x\xaftic_d\xa9a_\x8fg
 {};

18 
	s\xa3m\x\xaftic_\xa1ack_\x8fg
 {};

20 
	s\xa3m\x\xaftic_h\x97p_\x8fg
 {};

22 
	s\xa3m\x\xaftic_mes\xa7ge_\x8fg
 {};

24 
	s\xa3m\x\xaftic_m\xa9rix_\x8fg
 {};

28
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gTag
> 
	s\xa3m\x\xaftic_\x8\xff\x99s
 {

29 
cڡex\xb4

bo\xde

	gis_execu\x8fb\xcb
 =
\xe7l\xa3
;

30 
cڡex\xb4

bo\xde

	gis_sh\xac\x97b\xcb
 =
\xe7l\xa3
;

31 
cڡex\xb4

bo\xde

	gis_z\x94o_c\xddy_\xff\xb7b\xcb
 =
\xe7l\xa3
;

32 
cڡex\xb4

bo\xde

	ggrows_down
 =
\xe7l\xa3
;

33 
cڡex\xb4

	g\xa1d
::
size_t

\xaeignm\x92t
 = 8;

38
	g\x8bm\xb6\xa9e
 <> 
	g\xa3m\x\xaftic_\x8\xff\x99s
<
	g\xa3m\x\xaftic_code_\x8fg
> {

39 
cڡex\xb4

bo\xde

	gis_execu\x8fb\xcb
 =
\x8cue
;

40 
cڡex\xb4

bo\xde

	gis_sh\xac\x97b\xcb
 =
\x8cue
;

41 
cڡex\xb4

bo\xde

	gis_z\x94o_c\xddy_\xff\xb7b\xcb
 =
\x8cue
;

42 
cڡex\xb4

bo\xde

	ggrows_down
 =
\xe7l\xa3
;

43 
cڡex\xb4

	g\xa1d
::
size_t

\xaeignm\x92t
 = 16;

48
	g\x8bm\xb6\xa9e
 <> 
	g\xa3m\x\xaftic_\x8\xff\x99s
<
	g\xa3m\x\xaftic_\xa1ack_\x8fg
> {

49 
cڡex\xb4

bo\xde

	gis_execu\x8fb\xcb
 =
\xe7l\xa3
;

50 
cڡex\xb4

bo\xde

	gis_sh\xac\x97b\xcb
 =
\xe7l\xa3
;

51 
cڡex\xb4

bo\xde

	gis_z\x94o_c\xddy_\xff\xb7b\xcb
 =
\xe7l\xa3
;

52 
cڡex\xb4

bo\xde

	ggrows_down
 =
\x8cue
;

53 
cڡex\xb4

	g\xa1d
::
size_t

\xaeignm\x92t
 = 16;

58
	g\x8bm\xb6\xa9e
 <> 
	g\xa3m\x\xaftic_\x8\xff\x99s
<
	g\xa3m\x\xaftic_mes\xa7ge_\x8fg
> {

59 
cڡex\xb4

bo\xde

	gis_execu\x8fb\xcb
 =
\xe7l\xa3
;

60 
cڡex\xb4

bo\xde

	gis_sh\xac\x97b\xcb
 =
\x8cue
;

61 
cڡex\xb4

bo\xde

	gis_z\x94o_c\xddy_\xff\xb7b\xcb
 =
\x8cue
;

62 
cڡex\xb4

bo\xde

	ggrows_down
 =
\xe7l\xa3
;

63 
cڡex\xb4

	g\xa1d
::
size_t

\xaeignm\x92t
 = 64;

67
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gSem\x\xafticTag
> c\xcfs\xa0
	c\xa3m\x\xaftic_\xbbgi\xda
 {

68
	gpublic
:

69
us\x9ag

\x8fg_ty\xb3
 =
Sem\x\xafticTag
;

70
us\x9ag

	g\x8\xff\x99s
 =
\xa3m\xaatic_\x8ca\x99s
<
Sem\x\xafticTag
>;

72
cڡex\xb4

\xa3m\xaatic_\xbbgi\xda
(
\xa1d
::
u\x9a\x8d\x8c_t

ba\xa3
, std::
size_t

size
\xe8
n\xdbx\xfb\xb1


73 :
ba\xa3_
{
\xaeign_to
(
ba\xa3
,
\x8ca\x99s
::
\xaeignm\x92t
)},
	gsize_
{
	gsize
} {

74
\xa1\xa9ic_as\xa3\xb9
(
\x8ca\x99s
::
\xaeignm\x92t
 > 0 && (traits::alignment & (traits::alignment - 1)) == 0,

79
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
 =
Sem\x\xafticTag
>

80
\xa1d
::
\x92ab\xcb_if_t
<
\xa3m\xaatic_\x8ca\x99s
<
T
>::
is_z\x94o_c\xddy_\xff\xb7b\xcb
, *>

81
z\x94o_c\xddy_m\xad
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

82 
	g\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
	gba\xa3_
);

86 *
m\xad
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
	gba\xa3_
); }

88
cڡex\xb4

	g\xa1d
::
u\x9a\x8d\x8c_t

ba\xa3
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
ba\xa3_
; }

89
cڡex\xb4

	g\xa1d
::
size_t

size
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
size_
; }

92
cڡex\xb4

bo\xde

\xaeig\xc3d
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gba\xa3_
 %
	g\x8\xff\x99s
::
\xaeignm\x92t
 == 0; }

95
cڡex\xb4

bo\xde

cڏ\x9as
(
\xa1d
::
u\x9a\x8d\x8c_t

addr
\xe8cڡ
n\xdbx\xfb\xb1
 {

96 
addr
 >\xf0
ba\xa3_
 &&\x87dd\xb8< ba\xa3_ +
size_
;

99
	g\xb4iv\xa9e
:

101 
cڡex\xb4

\xa1d
::
u\x9a\x8d\x8c_t

\xaeign_to
(\xa1d::u\x9a\x8d\x8c_\x88
addr
, std::
size_t

\xaeignm\x92t
\xe8
n\xdbx\xfb\xb1
 {

102  (
addr
 +
\xaeignm\x92t
 - 1) & ~(alignment - 1);

105
	g\xa1d
::
u\x9a\x8d\x8c_t

ba\xa3_
{};

106
	g\xa1d
::
size_t

size_
{};

	@include/pwd.hpp

1 #\xb4agm\xa8
\xda\xfb


10 
	s\xb7sswd
 {

11 *
	mpw_\xc7me
;

12 *
	mpw_\xb7sswd
;

13 
	mpw_uid
;

14 
	mpw_gid
;

15 *
	mpw_gecos
;

16 *
	mpw_d\x9c
;

17 *
	mpw_sh\x96l
;

	@include/regexp.hpp

13 
	#\xa1rchr

\x9adex


	)

16
\x9al\x9ae

cڡex\xb4
 
	gCHARBITS
 = 0377;

19
\x9al\x9ae

cڡex\xb4
 
	gNSUBEXP
 = 10;

26 
	s\xbbgexp
 {

27 *
	m\xa1\xac\x8d
[
NSUBEXP
];

28 *
	m\x92dp
[
NSUBEXP
];

29 
	m\xbbg\xa1\xa\xf9
;

30 
	m\xbbg\x\xafch
;

31 *
	m\xbbgmu\xa1
;

32 
	m\xbbgm\xcbn
;

33 
	m\xb4og\xbfm
[1];

36
\xbbgexp
 *
\xbbgcomp
(cڡ *
exp
);

37 
\xbbgexec
(
\xbbgexp
 *
\xb4og
, cڡ *
\xa1r\x9ag
,
bo\xde

b\xde\xe6ag
);

38 
\xbbgsub
(
\xbbgexp
 *
\xb4og
, cڡ *
sour\xfb
, *
de\xa1
);

39 
\xbbg\x94r\xdc
(cڡ *
s
);

	@include/setjmp.hpp

7 #i\xe2de\xe0
SETJMP_H


8 
	#SETJMP_H


	)

17 
	~<c\xa3tjmp
>

19
us\x9ag

	gjmp_buf
 =
\xa1d
::
jmp_buf
;

25
\x9al\x9ae
 
	$\xa3tjmp
(
jmp_buf

\x92v
\xe8{ 
\xa1d
::
	`\xa3tjmp
\xd3nv);
	}
}

26 [[
nܑu\xba
]]
\x9al\x9ae
 
	$l\xdagjmp
(
jmp_buf

\x92v
, 
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

27
\xa1d
::
	`l\xdagjmp
(
\x92v
,
v\x\xab
);

28
	}
}

	@include/sgtty.hpp

7 #\xb4agm\xa8
\xda\xfb


11 
	ssg\x89yb
 {

12 
	msg_i\xa5\x93d
;

13 
	msg_o\xa5\x93d
;

14 
	msg_\x94a\xa3
;

15 
	msg_k\x9\x96
;

16 
	msg_\xe6ags
;

19 
	stch\xacs
 {

20 
	mt_\x9a\x8cc
;

21 
	mt_qu\x99c
;

22 
	mt_\xa1\xa\xf9c
;

23 
	mt_\xa1\xddc
;

24 
	mt_eofc
;

25 
	mt_brkc
;

29 \xfeas\xa0
	cSgF\xcfgs
 : {

30
XTABS
 = 0006000,

31
	mRAW
 = 0000040,

32
	mCRMOD
 = 0000020,

33
	mECHO
 = 0000010,

34
	mCBREAK
 = 0000002,

35
	mCOOKED
 = 0000000

38
cڡex\xb4
 
	gTIOCGETP
 = ('t' << 8) | 8;

39
cڡex\xb4
 
	gTIOCSETP
 = ('t' << 8) | 9;

40
cڡex\xb4
 
	gTIOCGETC
 = ('t' << 8) | 18;

41
cڡex\xb4
 
	gTIOCSETC
 = ('t' << 8) | 17;

	@include/sh.hpp

12 
	#NULL
 0

	)

13
\x9al\x9ae

cڡex\xb4
 
	gLINELIM
 = 1000;

14
\x9al\x9ae

cڡex\xb4
 
	gNPUSH
 = 8;

16
\x9al\x9ae

cڡex\xb4
 
	gNOFILE
 = 20;

17
\x9al\x9ae

cڡex\xb4
 
	gNUFILE
 = 10;

18
\x9al\x9ae

cڡex\xb4
 
	gFDBASE
 = 10;

23
cڡex\xb4
 
	$Wa\x99Sig
(
s
\xe8{  s & 0177;
	}
}

24
cڡex\xb4
 
	$Wa\x99V\x\xab
(
s
\xe8{  (\xa0>> 8\xe8& 0377;
	}
}

25
cڡex\xb4

bo\xde

	$Wa\x99C\xd\xfb
(
s
\xe8{  (\xa0& 0200\xe8!\xf00;
	}
}

30
us\x9ag

	gx\x9\xa9
 = ;

40
\x9al\x9ae

cڡex\xb4
 
	gQUOTE
 = 0200;

46 
	eOpTy\xb3
 {

47
	mTCOM
 = 1,

48
	mTPAREN
,

49
	mTPIPE
,

50
	mTLIST
,

51
	mTOR
,

52
	mTAND
,

53
	mTFOR
,

54
	mTDO
,

55
	mTCASE
,

56
	mTIF
,

57
	mTWHILE
,

58
	mTUNTIL
,

59
	mTELIF
,

60
	mTPAT
,

61
	mTBRACE
,

62
	mTASYNC


66 
	s\xdd
 {

67
OpTy\xb3

	mty\xb3
;

68 **
	mw\xdcds
;

69 
iow\xdcd
 **
	mi\xdf\xf9
;

70 
\xdd
 *
	m\xcb\xe1
;

71 
\xdd
 *
	mright
;

72 *
	m\xa1r
;

78
cڡex\xb4
 
	$BIT
(
i
\xe8{  1 << i;
	}
}

79
\x9al\x9ae

cڡex\xb4
 
	gFEXEC
 =
BIT
(0);

84
\x9al\x9ae

cڡex\xb4
 
	gDOSUB
 = 1;

85
\x9al\x9ae

cڡex\xb4
 
	gDOBLANK
 = 2;

86
\x9al\x9ae

cڡex\xb4
 
	gDOGLOB
 = 4;

87
\x9al\x9ae

cڡex\xb4
 
	gDOKEY
 = 8;

88
\x9al\x9ae

cڡex\xb4
 
	gDOTRIM
 = 16;

90
\x9al\x9ae

cڡex\xb4
 
	gDOALL
 =
DOSUB
 |
DOBLANK
 |
DOGLOB
 |
DOKEY
 |
DOTRIM
;

92 **
	gd\xdev
;

93 
	gd\xdec
;

94 
	gex\xa1\xa9
;

95 
	gg\xe6g
;

96 
	g\x8\xe6k\x9ag
;

97 
	gexec\xe6g
;

98 
	gmuɞ\x9\xab
;

99 
\xdd
 *
	gou\x89\xbbe
;

101
jmp_buf
 *
	g瞱
;

102
jmp_buf
 *
	g\x94\xbdt
;

105 
	sbrkc\xda
 {

106
jmp_buf

	mbrk\xb1
;

107 
brkc\xda
 *
	m\xc3x\x8\x93v
;

108 } *
	gbrkli\xa1
;

109 
	gisb\xbbak
;

115 
	siow\xdcd
 {

116 
	mio_un\x99
;

117 
	mio_\xe6ag
;

119 *
	mio_\xc7me
;

120 
block
 *
	mio_h\x94e
;

121 }
	mio_un
;

123 
	eIoF\xcfg
 {

124
	mIOREAD
 = 1,

125
	mIOHERE
 = 2,

126
	mIOWRITE
 = 4,

127
	mIOCAT
 = 8,

128
	mIOXHERE
 = 16,

129
	mIODUP
 = 32,

130
	mIOCLOSE
 = 64

133
\x9al\x9ae

cڡex\xb4
 
	gIODEFAULT
 = -1;

135 
wdblock
 *
	gwdli\xa1
;

136 
wdblock
 *
	gi\xdei\xa1
;

142 
	s\x92v
 {

143 *
l\x9a\x95
;

144 
io
 *
ioba\xa3
;

145 
io
 *
i\xdd
;

146
jmp_buf
 *
\x94\xbdt
;

147 
iofd
;

148 
\x92v
 *
\xdbnv
;

149 }
e
;

161 *
	g\xe6ag
;

163 *
	gnu\x\xfb
;

164 
	g\x9a\x8c
;

166 *
	g\x8c\xad
[
NSIG
];

167 
	gou\xb9\xb\xe5
[
NSIG
];

168 
	g\x8c\xad\xa3t
;

170 
	g\x9aw\xdcd
;

172 
	gyyüs
;

174 
	gl\x9\xab
[
LINELIM
];

175 *
	g\x96\x9a\x95
;

180 (*
\x9abu\x9et
())();

181 *
\xbbxecve
();

182 *
\xa5a\xfb
();

183 *
g\x91wd
();

184 *
\xa1r\xa7ve
();

185 *
ev\x\xab\xa1r
();

186 *
pu\x8a
();

187 *
\x99\xdf
();

188 *
unqu\xd9e
();

189 
v\xac
 *
lookup
();

190 
wdblock
 *
add2\xacgs
();

191 
wdblock
 *
glob
();

192 **
mak\x92v
();

193 
iow\xdcd
 *
addio
();

194 **
ev\x\xab
();

195 
\xa3t\xa1\xa9us
();

196 
wa\x99f\xdc
();

198 
ښ\x8c
();

203 
\xcbave
();

204 
\xe7\x9e
();

205 
sig
();

210 
l\xa3ek
();

211 *
\xa1\xba\xfdy
();

212 
\xa1\xbe\x92
();

213 
\x94\xbao
;

218 
	sv\xac
 {

219 *
	mv\x\xabue
;

220 *
	m\xc7me
;

221 
v\xac
 *
	m\xc3xt
;

222 
	m\xa1\xa9us
;

224 
	eV\xacF\xcfg
 {

225
	mCOPYV
 = 1,

226
	mRONLY
 = 01,

227
	mEXPORT
 = 02,

228
	mGETCELL
 = 04

231 
v\xac
 *
	gvli\xa1
;

233 
v\xac
 *
	ghomed\x9c
;

234 
v\xac
 *
	g\xb4om\xb1
;

235 
v\xac
 *
	g\xfdrom\xb1
;

236 
v\xac
 *
	g\xb7th
;

237 
v\xac
 *
	gsh\x96l
;

238 
v\xac
 *
	gifs
;

240 
v\xac
 *
lookup
( );

241 
\xa3tv\xae
( );

242 
\xc7mev\xae
( );

243 
exp\xd\xf9
( );

244 
r\xd\xaey
( );

245 
i\xa7ssign
( );

246 
check\xc7me
( );

247 
assign
( );

248 
putvli\xa1
( );

249 
eq\xc7me
( );

254 
	si\xd\xe4g
 {

255 *
	maw\xdcd
;

256 **
	maw\xdcdli\xa1
;

257 
	maf\x9\x93
;

262 
	sio
 {

263 (*
	mio\xe2
)();

264 
i\xd\xe4g

	m\xacg
;

265 
	m\xb3ekc
;

266 
	m\xc6cou\xc1
;

267 
	mxch\xac
;

268 
	m\x8fsk
;

270 
io

	gio\xa1ack
[
NPUSH
];

271 
	eIoTask
 {

272
	mXOTHER
 = 0,

273
	mXDOLL
,

274
	mXGRAVE
,

275
	mXIO


279
\x9al\x9ae

bo\xde

	$INSUB
(\xe8{ 
e
.
i\xdd
->
\x8fsk
 =\xf0
XGRAVE
 ||\x83.i\xdd->\x8fsk =\xf0
XDOLL
;
	}
}

284 
\xc6ch\xac
();

285 
\xa1rch\xac
();

286 
f\x9\x93ch\xac
();

287 
l\x9\xabch\xac
();

288 
\xc3xtch\xac
();

289 
g\xbfvech\xac
();

290 
qg\xbfvech\xac
();

291 
d\xdech\xac
();

292 
wdch\xac
();

297 
g\x91c
();

298 
\xbbadc
();

299 
ung\x91
();

300 
i\xdbcho
();

301 
\xb4s
();

302 
putc
();

303 
\xb4n
();

304 
\xfeo\xa3f
();

305 
\xfeo\xa3\xael
();

310 
pushio
( );

311 
\xbbm\xad
();

312 
ݒp\x9de
();

313 
\xfeo\xa3p\x9de
();

314 
io
 *
\xa3tba\xa3
( );

316 
i\xd\xe4g

	g\x8bm\xb7rg
;

317 
	#PUSHIO
(
wh\xa9
,
\xacg
,
g\x92
\xe8((
\x8bm\xb7rg
.wh\xa9 = (\xacg)),
	`pushio
\xd1em\xb7rg, (g\x92)))

	)

318 
	#RUN
(
wh\xa9
,
\xacg
,
g\x92
\xe8((
\x8bm\xb7rg
.wh\xa9 = (\xacg)),
	`run
\xd1em\xb7rg, (g\x92)))

	)

321 #i\xe2de\xe0
WORD_H


322 
	#WORD_H
 1

	)

324 
	swdblock
 {

325 
	mw_bsize
;

326 
	mw_nw\xdcd
;

328 *
	mw_w\xdcds
[1];

331 
wdblock
 *
addw\xdcd
();

332 
wdblock
 *
\xc3ww\xdcd
();

333 **
g\x91w\xdcds
();

341 *
g\x91\xfb\x\xfb
( );

342 
g\xacbage
();

343 
\xa3\x8f\xbba
( );

344 
䓬\x97
( );

345 
\xe4\x93\xfb\xce
( );

347 
	g\xac\x97num
;

349 
	#NEW
(
ty\xb3
\xe8\xd1y\xb3 *)
	`g\x91\xfb\x\xfb
(\xd1y\xb3))

	)

350 
	#DELETE
(
obj
\xe8
	`\xe4\x93\xfb\x\xfb
((*)obj)

	)

	@include/shared/number_to_ascii.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~<c\xa1ddef
>

9 
\x9al\x9ae
 
	$numb\x94_to_ascii
(
num
, 
\xbfdix
, *
out
) {

10
cڡex\xb4
 
kMaxDig\x99s
 = 12;

11 
buf
[
kMaxDig\x99s
];

12 
h\x99
 = 0;

13 
\xc3g\xa9ive
 = 0;

14 
n
 = 0;

16 i\xe0(
num
 == 0) {

17
out
[0] = '0';

18
out
[1] = '\0';

22 i\xe0(
\xbfdix
 =\xf010 &&
num
 < 0) {

23
num
 = -num;

24
\xc3g\xa9ive
 = 1;

27 
i
 = 0; i <
kMaxDig\x99s
; ++i) {

28
buf
[
i
] = 0;

32 i\xe0(
\xbfdix
 == 10) {

33
buf
[
n
] =
num
 % 10;

34
num
 = (num -
buf
[
n
]) / 10;

36 i\xe0(
\xbfdix
 == 8) {

37
buf
[
n
] =
num
 & 0x7;

38
num
 = (num >> 3) & 0x1FFFFFFF;

40 i\xe0(
\xbfdix
 == 16) {

41
buf
[
n
] =
num
 & 0xF;

42
num
 = (num >> 4) & 0x0FFFFFFF;

44 ++
n
;

45 } 
num
 != 0);

47 
i
 =
n
 - 1; i >= 0; --i) {

48 i\xe0(
buf
[
i
] =\xf00 &&
h\x99
 == 0) {

49
buf
[
i
] = ' ';

51 i\xe0(
buf
[
i
] < 10)

52
buf
[
i
] += '0';

54
buf
[
i
] += 'A' - 10;

55 ++
h\x99
;

58 i\xe0(
\xc3g\xa9ive
)

59
buf
[
n
++] = '-';

61 
out_\xcbn
 =
n
;

62 
i
 =
n
 - 1; i >= 0; --i) {

63 *
out
++ =
buf
[
i
];

65 *
out
 = '\0';

66 
out_\xcbn
;

67
	}
}

	@include/shared/signal_constants.hpp

1 #\xb4agm\xa8
\xda\xfb


6 
	~<c\xa1ddef
>

8
\x9al\x9ae

cڡex\xb4
 
	gNR_SIGS
 = 16;

9
\x9al\x9ae

cڡex\xb4
 
	gNSIG
 = 16;

11
\x9al\x9ae

cڡex\xb4
 
	gSIGHUP
 = 1;

12
\x9al\x9ae

cڡex\xb4
 
	gSIGINT
 = 2;

13
\x9al\x9ae

cڡex\xb4
 
	gSIGQUIT
 = 3;

14
\x9al\x9ae

cڡex\xb4
 
	gSIGILL
 = 4;

15
\x9al\x9ae

cڡex\xb4
 
	gSIGTRAP
 = 5;

16
\x9al\x9ae

cڡex\xb4
 
	gSIGIOT
 = 6;

17
\x9al\x9ae

cڡex\xb4
 
	gSIGEMT
 = 7;

18
\x9al\x9ae

cڡex\xb4
 
	gSIGFPE
 = 8;

19
\x9al\x9ae

cڡex\xb4
 
	gSIGKILL
 = 9;

20
\x9al\x9ae

cڡex\xb4
 
	gSIGBUS
 = 10;

21
\x9al\x9ae

cڡex\xb4
 
	gSIGSEGV
 = 11;

22
\x9al\x9ae

cڡex\xb4
 
	gSIGSYS
 = 12;

23
\x9al\x9ae

cڡex\xb4
 
	gSIGPIPE
 = 13;

24
\x9al\x9ae

cڡex\xb4
 
	gSIGALRM
 = 14;

25
\x9al\x9ae

cڡex\xb4
 
	gSIGTERM
 = 15;

27
\x9al\x9ae

cڡex\xb4
 
	gSTACK_FAULT
 = 16;

29
us\x9ag

	gsigh\x\xafd\xcbr_t
 = (*)(\xe8
n\xdbx\xfb\xb1
;

33 "C"
sigh\x\xafd\xcbr_t

	`sig\xc7l
(
signum
, sigh\xaad\xcbr_\x88
h\x\xafd\xcbr
);

35
\x9al\x9ae

cڡex\xb4

sigh\x\xafd\xcbr_t

SIG_DFL
 =
nuαr
;

36
\x9al\x9ae
 cڡ
sigh\x\xafd\xcbr_t

SIG_IGN
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<sighandler_t>(1);

	@include/shared/stat_struct.hpp

1 #\xb4agm\xa8
\xda\xfb


6 
	~<x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
>

8 
	s\xa1\xa9
 {

9
	mx\x9aim
::
dev_t

\xa1_dev
;

10
	mx\x9aim
::
\x9ao_t

\xa1_\x9ao
;

11
	mx\x9aim
::
mode_t

\xa1_mode
;

12
	mx\x9aim
::
ƚk_t

\xa1_ƚk
;

13
	mx\x9aim
::
uid_t

\xa1_uid
;

14
	mx\x9aim
::
gid_t

\xa1_gid
;

15
	mx\x9aim
::
dev_t

\xa1_rdev
;

16
	mx\x9aim
::
off_t

\xa1_size
;

17
	mx\x9aim
::
time_t

\xa1_\xa9ime
;

18
	mx\x9aim
::
time_t

\xa1_mtime
;

19
	mx\x9aim
::
time_t

\xa1_\xf9ime
;

	@include/signal.hpp

7 #\xb4agm\xa8
\xda\xfb


10 
	~"sh\xa\xfbd/sig\xc7l_cڡ\x\xafts.h\xb5
"

	@include/stat.hpp

7 #\xb4agm\xa8
\xda\xfb


11 
	~"sh\xa\xfbd/\xa1\xa9_\xa1ru\xf9.h\xb5
"

12 
	~<x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
>

16
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFMT
 = 0170000;

17
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFDIR
 = 0040000;

18
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFCHR
 = 0020000;

19
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFBLK
 = 0060000;

20
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IFREG
 = 0100000;

21
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISUID
 = 04000;

22
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISGID
 = 02000;

23
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_ISVTX
 = 01000;

24
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IREAD
 = 00400;

25
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IWRITE
 = 00200;

26
\x9al\x9ae

cڡex\xb4

	gx\x9aim
::
mode_t

S_IEXEC
 = 00100;

	@include/stdio.hpp

1 #\xb4agm\xa8
\xda\xfb


2 
	~<c\xa1ddef
>

3 
	~<uni\xa1d.h
>

12
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

BUFSIZ
 = 1024;

13
\x9al\x9ae

cڡex\xb4
 
	gNFILES
 = 20;

15
\x9al\x9ae

cڡex\xb4
 
	gSTDIO_EOF
 = -1;

16
\x9al\x9ae

cڡex\xb4
 
	gCMASK
 = 0377;

18
cڡex\xb4
 
	gREADMODE
 = 1;

19
cڡex\xb4
 
	gWRITEMODE
 = 2;

20
cڡex\xb4
 
	gUNBUFF
 = 4;

21
cڡex\xb4
 
	g_EOF
 = 8;

22
cڡex\xb4
 
	gERR
 = 16;

23
cڡex\xb4
 
	g_ERR
 =
ERR
;

24
cڡex\xb4
 
	gIOMYBUF
 = 32;

25
cڡex\xb4
 
	gPERPRINTF
 = 64;

26
cڡex\xb4
 
	gSTRINGS
 = 128;

28 #i\xe2de\xe0
FILE


32 
	s_io_buf
 {

33 
_fd
;

34 
_cou\xc1
;

35 
_\xe6ags
;

36 *
_buf
;

37 *
_\xb1r
;

38 } *
_io_\x8fb\xcb
[
NFILES
];

42 
	#FILE
 
_io_buf


	)

44 
	#\xa1d\x9a
 (
_io_\x8fb\xcb
[0])

	)

45 
	#\xa1dout
 (
_io_\x8fb\xcb
[1])

	)

46 
	#\xa1d\x94r
 (
_io_\x8fb\xcb
[2])

	)

49 "C" 
f\xe6ush
(
FILE
 *
\xa1\xbbam
);

50 "C" 
\xe5uts
(cڡ *
s
,
FILE
 *
\xa1\xbbam
);

52 
	#g\x91ch\xac
(\xe8
	`g\x91c
(
\xa1d\x9a
)

	)

55
\x9al\x9ae
 
	$putch\xac
(
c
) {

57  ::
	`wr\x99e
(1, &
c
,
\xa1\xa9ic_\xff\xa1
<
size_t
>(1)\xe8=\xf01 ? c :
STDIO_EOF
;

58
	}
}

60 
	#puts
(
s
\xe8
	`\xe5uts
(s,
\xa1dout
)

	)

61 
	#fg\x91c
(
f
\xe8
	`g\x91c
(f)

	)

62 
	#\xe5utc
(
c
,
f
\xe8
	`putc
(c, f)

	)

63 
	#\xe3of
(
p
\xe8((\xd5)->
_\xe6ags
 &
_EOF
\xe8!\xf00)

	)

64 
	#\xe3\xbc\xdc
(
p
\xe8((\xd5)->
_\xe6ags
 &
_ERR
\xe8!\xf00)

	)

65 
	#f\x9e\x92o
(
p
\xe8(\xd5)->
_fd
)

	)

66 
	#\xbbw\x9ad
(
f
\xe8
	`f\xa3ek
(f, 0L, 0)

67 
	#\x8b\xa1\xe6ag
(
p
,
x
\xe8(\xd5)->
_\xe6ags
 & (x))

	)

78 
	#nݔ\xb4\x9\xa9f
(
p
\xe8(\xd5)->
_\xe6ags
 &\xf0~
PERPRINTF
)

	)

79 
	#\xb3\xbdr\x9\xa9f
(
p
\xe8(\xd5)->
_\xe6ags
 |\xf0
PERPRINTF
)

	)

82
\x9al\x9ae
 
	$g\x91c
(
FILE
 *
i\xdd
) {

83 
c_unbuf
;

84 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
, (
_EOF
 |
ERR
)))

85 
STDIO_EOF
;

86 i\xe0(!
	`\x8b\xa1\xe6ag
(
i\xdd
,
READMODE
))

87 
STDIO_EOF
;

88 i\xe0(--
i\xdd
->
_cou\xc1
 < 0) {

89 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
)) {

90
ssize_t

ėd
 = ::
	`\xbbad
(
i\xdd
->
_fd
, &
c_unbuf
,
\xa1\xa9ic_\xff\xa1
<
size_t
>(1));

91 i\xe0(
ėd
 <= 0) {

92
i\xdd
->
_\xe6ags
 |\xf0(
ėd
 =\xf00 ?
_EOF
 :
ERR
);

93 
STDIO_EOF
;

95
i\xdd
->
_cou\xc1
 = 0;

96 
c_unbuf
 &
CMASK
;

98
ssize_t

ėd
 = ::
	`\xbbad
(
i\xdd
->
_fd
, i\xdd->
_buf
,
BUFSIZ
);

99 i\xe0(
ėd
 <= 0) {

100
i\xdd
->
_\xe6ags
 |\xf0(
ėd
 =\xf00 ?
_EOF
 :
ERR
);

101 
STDIO_EOF
;

103
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

104
i\xdd
->
_cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<>(
ėd
 - 1);

107  *
i\xdd
->
_\xb1r
++ &
CMASK
;

108
	}
}

110
\x9al\x9ae
 
	$putc
(
ch
,
FILE
 *
i\xdd
) {

111
ssize_t

n
 = 0;

112
bo\xde

didwr\x99e
 =
\xe7l\xa3
;

113 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
, (
ERR
 |
_EOF
)))

114 
STDIO_EOF
;

115 i\xe0(!
	`\x8b\xa1\xe6ag
(
i\xdd
,
WRITEMODE
))

116 
STDIO_EOF
;

117 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
)) {

118 
c_v\x\xab
 =
\xa1\xa9ic_\xff\xa1
<>(
ch
);

119
n
 = ::
	`wr\x99e
(
i\xdd
->
_fd
, &
c_v\x\xab
,
\xa1\xa9ic_\xff\xa1
<
size_t
>(1));

122
didwr\x99e
 =
\x8cue
;

124 *
i\xdd
->
_\xb1r
++ =
\xa1\xa9ic_\xff\xa1
<>(
ch
);

125 i\xe0(++
i\xdd
->
_cou\xc1
 >\xf0
\xa1\xa9ic_\xff\xa1
<>(
BUFSIZ
) &&

126 !
	`\x8b\xa1\xe6ag
(
i\xdd
,
STRINGS
)) {

127
n
 = ::
	`wr\x99e
(
i\xdd
->
_fd
, i\xdd->
_buf
,
\xa1\xa9ic_\xff\xa1
<
size_t
>(i\xdd->
_cou\xc1
));

128
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

129
didwr\x99e
 =
\x8cue
;

132 i\xe0(
didwr\x99e
) {

133 i\xe0(
n
 <\xf00 ||
i\xdd
->
_cou\xc1
 !\xf0
\xa1\xa9ic_\xff\xa1
<>(n)) {

134 i\xe0(
n
 < 0)

135
i\xdd
->
_\xe6ags
 |\xf0
ERR
;

137
i\xdd
->
_\xe6ags
 |\xf0
_EOF
;

138 
STDIO_EOF
;

140
i\xdd
->
_cou\xc1
 = 0;

142 
ch
 &
CMASK
;

143
	}
}

	@include/vm.hpp

7 #i\xe2de\xe0
VM_H


8 
	#VM_H


	)

10 
	~"../h/cڡ.h\xb5
"

11 
	~"\xb7g\x9ag.h\xb5
"

12 
	~<ve\xf9\xdc
>

17 \xfeas\xa0
	cVmF\xcfgs
 : {

18
VM_READ
 = 0x1,

19
	mVM_WRITE
 = 0x2,

20
	mVM_EXEC
 = 0x4,

21
	mVM_PRIVATE
 = 0x8,

22
	mVM_SHARED
 = 0x10,

23
	mVM_ANON
 = 0x20

27
\x9al\x9ae

cڡex\xb4

VmF\xcfgs

	gݔ\xa9\xdc
|(VmF\xcfg\xa0
	gl
, VmF\xcfg\xa0
	gr
) {

28 
	g\xa1\xa9ic_\xff\xa1
<
	gVmF\xcfgs
>(\xa1\xa9ic_\xff\xa1<>(
	gl
\xe8| s\x8ftic_\xff\xa1<>(
	gr
));

31
\x9al\x9ae

cڡex\xb4

VmF\xcfgs

	gݔ\xa9\xdc
&(VmF\xcfg\xa0
	gl
, VmF\xcfg\xa0
	gr
) {

32 
	g\xa1\xa9ic_\xff\xa1
<
	gVmF\xcfgs
>(\xa1\xa9ic_\xff\xa1<>(
	gl
\xe8& s\x8ftic_\xff\xa1<>(
	gr
));

35
\x9al\x9ae

	gVmF\xcfgs
 &
	gݔ\xa9\xdc
|=(
VmF\xcfgs
 &
l
, VmF\xcfg\xa0
	gr
) {

36
	gl
 =
l
 |
r
;

37 
	gl
;

39
\x9al\x9ae

	gVmF\xcfgs
 &
	gݔ\xa9\xdc
&=(
VmF\xcfgs
 &
l
, VmF\xcfg\xa0
	gr
) {

40
	gl
 =
l
 &
r
;

41 
	gl
;

45
\x9al\x9ae

cڡex\xb4
 
	gVM_MAX_AREAS
 = 16;

50 
	svm_\xac\x97
 {

51
v\x9\xf9_addr64

	m\xa1\xa\xf9
;

52
v\x9\xf9_addr64

	m\x92d
;

53
VmF\xcfgs

	m\xe6ags
;

59 
	svm_\xb4oc
 {

60
	m\xa1d
::
ve\xf9\xdc
<
vm_\xac\x97
>
\xac\x97s
;

61 
	m\xac\x97_cou\xc1
{};

64
vm_\xb4oc
(\xe8:
\xac\x97s
(
VM_MAX_AREAS
) {}

67 
	$vm_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
;

68 *
	$vm_\x\xabloc
(
u64_t

by\x8bs
,
VmF\xcfgs

\xe6ags
\xe8
n\xdbx\xfb\xb1
;

69 
	$vm_h\x\xafd\xcb_\xe7u\xc9
(
\xb4oc
,
v\x9\xf9_addr64

addr
\xe8
n\xdbx\xfb\xb1
;

70 
	$vm_f\xdck
(
\xb7\xbb\xc1
, 
ch\x9ed
\xe8
n\xdbx\xfb\xb1
;

71 *
	$vm_mm\xad
(
\xb4oc
, *
addr
,
u64_t

\xcbngth
,
VmF\xcfgs

\xe6ags
\xe8
n\xdbx\xfb\xb1
;

	@include/xinim/core_types.hpp

1 #i\xe2de\xe0
XINIM_CORE_TYPES_HPP


2 
	#XINIM_CORE_TYPES_HPP


	)

4 
	~<c\xa1d\x9\xa9
>

5 
	~<c\xa1ddef
>

7
\xc7me\xa5a\xfb

	gx\x9aim
 {

10
us\x9ag

	gphys_addr_t
 =
\xa1d
::
u\x9\xa964_t
;

11
us\x9ag

	gv\x9\xf9_addr_t
 =
\xa1d
::
u\x9\xa964_t
;

14
us\x9ag

	gphys_by\x8bs_t
 =
phys_addr_t
;

15
us\x9ag

	gv\x9\xf9_by\x8bs_t
 =
v\x9\xf9_addr_t
;

18
us\x9ag

	gpid_t
 =
\xa1d
::
\x9at32_t
;

19
us\x9ag

	guid_t
 =
\xa1d
::
\x9at32_t
;

20
us\x9ag

	ggid_t
 =
\xa1d
::
\x9at32_t
;

23
us\x9ag

	gdev_t
 =
\xa1d
::
u\x9\xa932_t
;

24
us\x9ag

	g\x9ao_t
 =
\xa1d
::
u\x9\xa964_t
;

25
us\x9ag

	gmode_t
 =
\xa1d
::
u\x9\xa932_t
;

26
us\x9ag

	goff_t
 =
\xa1d
::
\x9at64_t
;

29
us\x9ag

	gtime_t
 =
\xa1d
::
\x9at64_t
;

32
us\x9ag

	gssize_t
 =
\xa1d
::
\xb1rdiff_t
;

36
\xc7me\xa5a\xfb

	ghw
 {

38
us\x9ag

	gp\xd\xf9_t
 =
\xa1d
::
u\x9\xa916_t
;

45
us\x9ag

	gdma_addr_t
 =
\xa1d
::
u\x9a\x8d\x8c_t
;

49
us\x9ag

	g\xa1\xa9us_t
 = ;

50
cڡex\xb4

\xa1\xa9us_t

	gOK
 = 0;

57 
	#NIL_PTR

nuαr


	)

	@kernel.cpp

1 
	~"c\xdas\xd\x93.h
"

2 
	~"pmm.h
"

3 
	~"vmm.h
"

4 
	~"mu\xc9ibo\xd9.h
"

5 
	~<\xa1ddef.h
>

6 
	~<\xa1d\x9\xa9.h
>

10 "C"
u\x9\xa98_t

_k\x94\xc3l_physi\xf\xe6_\xa1\xa\xf9
[];

11 "C"
u\x9\xa98_t

_k\x94\xc3l_physi\xf\xe6_\x92d
[];

14 "C"
u\x9\xa98_t

_k\x94\xc3l_v\x9\xf9u\x\xab_\xa1\xa\xf9
[];

15 "C"
u\x9\xa98_t

_k\x94\xc3l_v\x9\xf9u\x\xab_\x92d
[];

19 
u\x9a\x8d\x8c_t

	gmu\xc9ibo\xd9_\x9afo_physi\xf\xe6_addr
 = 0;

20 
mu\xc9ibo\xd9_\x8fg_mm\xad
*
	gmem\xdcy_m\xad_\x8fg
 =
NULL
;

23 
	smu\xc9ibo\xd9_\x8fg_\xa1r\x9ag
 {

24
u\x9\xa932_t

	mty\xb3
;

25
u\x9\xa932_t

	msize
;

26 
	m\xa1r\x9ag
[];

30 
	$\xb7r\xa3_mu\xc9ibo\xd9_\x9afo
(
u\x9a\x8d\x8c_t

mb_\x9afo_addr
) {

31
mu\xc9ibo\xd9_\x9afo_physi\xf\xe6_addr
 =
mb_\x9afo_addr
;

32 
mu\xc9ibo\xd9_\x8fg
*
\x8fg
;

38
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Mu\xc9ibo\xd9 inf\xd8@ 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
mb_\x9afo_addr
, DEFAULT_COLOR);

42 
\x8fg
 = (
mu\xc9ibo\xd9_\x8fg
*)(
mb_\x9afo_addr
 + 8);

43
\x8fg
->
ty\xb3
 !\xf0
MULTIBOOT_TAG_TYPE_END
;

44
\x8fg
 = (
mu\xc9ibo\xd9_\x8fg
*)((
u\x9\xa98_t
*\xe9ag +
	`mu\xc9ibo\xd9_\x8fg_\x\xabign
\xd1ag->
size
))) {

46 i\xe0(
\x8fg
->
ty\xb3
 =\xf0
MULTIBOOT_TAG_TYPE_MMAP
) {

47
mem\xdcy_m\xad_\x8fg
 = (
mu\xc9ibo\xd9_\x8fg_mm\xad
*)
\x8fg
;

48
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Found Mu\xc9ibo\xd9 Mem\xdcy M\xad Tag @ 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
((
u\x9a\x8d\x8c_t
)
mem\xdcy_m\xad_\x8fg
, DEFAULT_COLOR);

49
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("\\xc0 E\xc1ry size: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
mem\xdcy_m\xad_\x8fg
->
\x92\x8cy_size
, DEFAULT_COLOR);

50
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(", Num E\xc1r\x9b\xa0׵rox): ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
((
mem\xdcy_m\xad_\x8fg
->
size
 - ((
u\x9\xa932_t
)*4)\xe8/ mem\xdcy_m\xad_\x8fg->
\x92\x8cy_size
, DEFAULT_COLOR);

51
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n',
DEFAULT_COLOR
);

52 } i\xe0(
\x8fg
->
ty\xb3
 =\xf0
MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
) {

53 
mu\xc9ibo\xd9_\x8fg_\xa1r\x9ag
*
bo\xd9l\xdfd\x94_\x8fg
 = (mu\xc9ibo\xd9_\x8fg_\xa1r\x9ag*)
\x8fg
;

54
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Bo\xd9l\xdfd\x94: ",
DEFAULT_COLOR
);

55
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(
bo\xd9l\xdfd\x94_\x8fg
->
\xa1r\x9ag
,
DEFAULT_COLOR
);

56
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n',
DEFAULT_COLOR
);

60
	}
}

63 "C" 
	$kma\x9a
(
mu\xc9ibo\xd9_magic
, 
mu\xc9ibo\xd9_addr
) {

65
	`c\xdas\xd\x93_\x9a\x99
(
VGA_COLOR_BLACK
,
VGA_COLOR_WHITE
);

66
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("C\xdasސIn\x99\x9flized.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

71
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("K\x94\xc3\xc8Physi\xff\xc8S\x8f\xb9 (L\x9ak\x94 Symb\xde): 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
((
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_physi\xf\xe6_\xa1\xa\xf9
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

72
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("K\x94\xc3\xc8Physi\xff\xc8End (L\x9ak\x94 Symb\xde): 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
((
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_physi\xf\xe6_\x92d
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

73
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("K\x94\xc3\xc8V\x9ctu\xae S\x8f\xb9 (L\x9ak\x94 Symb\xde): 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
((
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_v\x9\xf9u\x\xab_\xa1\xa\xf9
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

74
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("K\x94\xc3\xc8V\x9ctu\xae End (L\x9ak\x94 Symb\xde): 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
((
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_v\x9\xf9u\x\xab_\x92d
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

77 cڡ 
MULTIBOOT2_BOOTLOADER_MAGIC
 = 0x36d76289;

78 i\xe0(
mu\xc9ibo\xd9_magic
 !\xf0
MULTIBOOT2_BOOTLOADER_MAGIC
) {

79
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("ERROR: Inv\xaeid Mu\xc9ibo\xd92 magi\xf8numb\x94: 0x",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

80
	`c\xdas\xd\x93_wr\x99e_hex
(
mu\xc9ibo\xd9_magic
,
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

81
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("\nSy\xa1em H\xae\x8bd du\x90tؚv\xaeid Mu\xc9ibo\xd9 magic.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

83 
\x8cue
) {

84
asm
 volatile("cli; hlt");

87
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Mu\xc9ibo\xd92 magi\xf8v\x94if\x9bd.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

89
bo\xde

bo\xd9_suc\xfbss
 =
\x8cue
;

91
u\x9a\x8d\x8c_t

pd_phys_addr
 = 0;

92
u\x9a\x8d\x8c_t

\x8b\xa1_\xb7ge_phys
 = 0;

96
	`\xb7r\xa3_mu\xc9ibo\xd9_\x9afo
(
mu\xc9ibo\xd9_addr
);

98 i\xe0(!
mem\xdcy_m\xad_\x8fg
) {

99
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("ERROR: Mu\xc9ibo\xd9 Mem\xdcy M\xad\x82\xd9 found!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

100
bo\xd9_suc\xfbss
 =
\xe7l\xa3
; ;

104
	`pmm_\x9a\x99
(
mem\xdcy_m\xad_\x8fg
, (
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_physi\xf\xe6_\xa1\xa\xf9
, (u\x9a\x8d\x8c_t)
_k\x94\xc3l_physi\xf\xe6_\x92d
,
mu\xc9ibo\xd9_\x9afo_physi\xf\xe6_addr
);

105
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("PMM in\x99\x9flized.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

106
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Tٮ RAM: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
	`pmm_g\x91_tٮ_\xb7ges
(\xe8*
PAGE_SIZE
 / (1024*1024), DEFAULT_COLOR); console_write_string(" MB\n", DEFAULT_COLOR);

107
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("U\xa3d RAM: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
	`pmm_g\x91_u\xa3d_\xb7ges
(\xe8*
PAGE_SIZE
 / (1024*1024), DEFAULT_COLOR); console_write_string(" MB\n", DEFAULT_COLOR);

108
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("F\xbb\x90RAM: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
	`pmm_g\x91_\xe4\x93_\xb7ges
(\xe8*
PAGE_SIZE
 / (1024*1024), DEFAULT_COLOR); console_write_string(" MB\n", DEFAULT_COLOR);

111
	`vmm_\x9a\x99
((
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_physi\xf\xe6_\xa1\xa\xf9
, (u\x9a\x8d\x8c_t)
_k\x94\xc3l_physi\xf\xe6_\x92d
,

112 (
u\x9a\x8d\x8c_t
)
_k\x94\xc3l_v\x9\xf9u\x\xab_\xa1\xa\xf9
, (u\x9a\x8d\x8c_t)
_k\x94\xc3l_v\x9\xf9u\x\xab_\x92d
);

113
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM in\x99\x9flized.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

116
pd_phys_addr
 =
	`vmm_g\x91_\xb7ge_d\x9\xfb\xf9\xdcy_physi\xf\xe6_addr
();

117 i\xe0(
pd_phys_addr
 == 0) {

118
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("ERROR: Pag\x90D\x9ce\xf9\xdcy\x85hysi\xff\xc8add\xbbs\xa0i\xa0NULL\x87\xe1\x94 VMM in\x99!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

119
bo\xd9_suc\xfbss
 =
\xe7l\xa3
; ;

121
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("L\xdfd\x9ag Pag\x90D\x9ce\xf9\xdcy from Phy\xa0Addr: 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
pd_phys_addr
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

122
	`vmm_l\xdfd_\xb7ge_d\x9\xfb\xf9\xdcy
(
pd_phys_addr
);

123
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Pag\x90D\x9ce\xf9\xdcy L\xdfded (CR3 s\x91).\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

126
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("E\xc7bl\x9ag Pag\x9ag...\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_CYAN
,
VGA_COLOR_BLACK
));

127
	`vmm_\x92ab\xcb_\xb7g\x9ag
();

129
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Pag\x9ag E\xc7b\xcbd! Hݐthi\xa0\xa1\x9e\xc8w\xdcks!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_GREEN
,
VGA_COLOR_BLACK
));

130
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("I\xe0you s\x93\x81his, VMM\x87nd c\xdasސm\xadp\x9ag\x87\xbb (\xb4obably\xe8w\xdck\x9ag.\n",
DEFAULT_COLOR
);

132
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Te\xa1\x9ag PMM\x87\xceo\xfftiڇᔅag\x9ag: ",
DEFAULT_COLOR
);

133
\x8b\xa1_\xb7ge_phys
 =
	`pmm_\x\xabloc_\xb7ge
();

134 i\xe0(
\x8b\xa1_\xb7ge_phys
) {

135
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("A\xceo\xff\x8bd\x85ag\x90\xa9 Phy\xa00x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
\x8b\xa1_\xb7ge_phys
, DEFAULT_COLOR);

136
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(". F\xbbe\x9ag it.\n",
DEFAULT_COLOR
);

137
	`pmm_\xe4\x93_\xb7ge
(
\x8b\xa1_\xb7ge_phys
);

139
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Fa\x9eed\x81خlo\xff\x8b\x81e\xa1\x85age.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

143 } 
\xe7l\xa3
);

145 i\xe0(!
bo\xd9_suc\xfbss
) {

146
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("H\xaet\x9ag du\x90t\xd8\xfc\x99i\xffȔr\xdc dur\x9ag bo\xd9 sequ\x92\xfb.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

150
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("Sy\xa1em H\xae\x8bd.\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_LIGHT_RED
,
VGA_COLOR_BLACK
));

151 
\x8cue
) {

152
asm
 volatile("cli; hlt");

154
	}
}

	@kernel/at_wini.cpp

21 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

22 
	~"../h/com.h\xb5
"

23 
	~"../h/cڡ.h\xb5
"

24 
	~"../h/\x94r\xdc.h\xb5
"

25 
	~"../h/ty\xb3.h\xb5
"

26 
	~"cڡ.h\xb5
"

27 
	~"\xb4oc.h\xb5
"

28 
	~"ty\xb3.h\xb5
"

33 \xfeas\xa0
	cSc\xddedP\xd\xf9Lock
 {

34
	mpublic
:

35
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`lock
(); }

36 ~
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`u\xc6ock
();
	}
}

40
	g\xc7me\xa5a\xfb
 {

41
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG1
 = 0x1F0;

42
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG2
 = 0x1F1;

43
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG3
 = 0x1F2;

44
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG4
 = 0x1F3;

45
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG5
 = 0x1F4;

46
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG6
 = 0x1F5;

47
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG7
 = 0x1F6;

48
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG8
 = 0x1F7;

49
\x9al\x9ae

cڡex\xb4

u\x9\xa916_t

	gWIN_REG9
 = 0x3F6;

52
\x9al\x9ae

cڡex\xb4

u\x9\xa98_t

	gWIN_RECALIBRATE
 = 0x10;

53
\x9al\x9ae

cڡex\xb4

u\x9\xa98_t

	gWIN_READ
 = 0x20;

54
\x9al\x9ae

cڡex\xb4

u\x9\xa98_t

	gWIN_WRITE
 = 0x30;

55
\x9al\x9ae

cڡex\xb4

u\x9\xa98_t

	gWIN_SPECIFY
 = 0x91;

58
\x9al\x9ae

cڡex\xb4
 
	gSECTOR_SIZE
 = 512;

61
\x9al\x9ae

cڡex\xb4
 
	gERR
 = -1;

64
\x9al\x9ae

cڡex\xb4
 
	gMAX_ERRORS
 = 4;

65
\x9al\x9ae

cڡex\xb4
 
	gNR_DEVICES
 = 10;

66
\x9al\x9ae

cڡex\xb4
 
	gMAX_WIN_RETRY
 = 10000;

67
\x9al\x9ae

cڡex\xb4
 
	gPART_TABLE
 = 0x1C6;

68
\x9al\x9ae

cڡex\xb4
 
	gDEV_PER_DRIVE
 = 5;

75
PRIVATE
 
	sw\x9ai
 {

76 
	mwn_\xddcode
;

77 
	mwn_\xb4o\x\xe7r
;

78 
	mwn_drive
;

79 
	mwn_cyl\x9ad\x94
;

80 
	mwn_\xa3\xf9\xdc
;

81 
	mwn_h\x97d
;

82 
	mwn_h\x97ds
;

83 
	mwn_max\xa3c
;

84 
	mwn_\xf9lby\x8b
;

85 
	mwn_\xb4ecomp
;

86 
	mwn_low
;

87 
	mwn_size
;

88 
	mwn_cou\xc1
;

89
v\x9c_by\x8bs

	mwn_add\xbbss
;

90 }
	gw\x9ai
[
NR_DEVICES
];

92
PRIVATE
 
	gw_\xc3ed_\xbb\xa3t
 =
FALSE
;

93
PRIVATE
 
	g\xc4_drives
;

95
PRIVATE

mes\xa7ge

	gw_mess
;

97
PRIVATE
 
	gbuf
[
BLOCK_SIZE
];

103
PUBLIC

	$w\x9ache\xa1\x94_\x8fsk
() {

106
	`\x9a\x99_\xb7\xbfm
();

112 
TRUE
) {

114
	`\xbb\xfbive
(
ANY
, &
w_mess
);

115 i\xe0(
w_mess
.
m_sour\xfb
 < 0) {

116
	`\xb4\x9\xa9f
("w\x9ache\xa1\x94\x81ask g\xd9 mes\xa7g\x90\xe4om %d ",
w_mess
.
m_sour\xfb
);

119
\xffΔ
 =
w_mess
.
m_sour\xfb
;

120
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(
w_mess
);

123 
w_mess
.
m_ty\xb3
) {

124 
DISK_READ
:

125 
DISK_WRITE
:

126
r
 =
	`w_do_rdwt
(&
w_mess
);

129
r
 =
E\xbc\xdcCode
::
EINVAL
;

134
w_mess
.
m_ty\xb3
 =
TASK_REPLY
;

135
	`\xbbp_\xb4oc_\xc4
(
w_mess
\xe8\xf0
\xb4oc_\xc4
;

137
	`\xbbp_\xa1\xa9us
(
w_mess
\xe8\xf0
r
;

138
	`\xa3nd
(
\xffΔ
, &
w_mess
);

146 
	`w_do_rdwt
(
mes\xa7ge
 *
m_\xb1r
) {

149 
w\x9ai
 *
wn
;

150 
r
,
devi\xfb
,
\x94r\xdcs
 = 0;

151 
\xa3\xf9\xdc
;

154
devi\xfb
 =
	`devi\xfb
(*
m_\xb1r
);

155 i\xe0(
devi\xfb
 < 0 || devi\xfb >\xf0
NR_DEVICES
)

156  (
E\xbc\xdcCode
::
EIO
);

157 i\xe0(
	`cou\xc1
(*
m_\xb1r
\xe8!\xf0
BLOCK_SIZE
)

158  (
E\xbc\xdcCode
::
EINVAL
);

159
wn
 = &
w\x9ai
[
devi\xfb
];

160
wn
->
wn_drive
 =
devi\xfb
 /
DEV_PER_DRIVE
;

161 i\xe0(
wn
->
wn_drive
 >\xf0
\xc4_drives
)

162  (
E\xbc\xdcCode
::
EIO
);

163
wn
->
wn_\xddcode
 =
m_\xb1r
->
m_ty\xb3
;

164 i\xe0(
	`pos\x99i\xda
(*
m_\xb1r
\xe8%
BLOCK_SIZE
 != 0)

165  (
E\xbc\xdcCode
::
EINVAL
);

166
\xa3\xf9\xdc
 =
	`pos\x99i\xda
(*
m_\xb1r
\xe8/
SECTOR_SIZE
;

167 i\xe0((
\xa3\xf9\xdc
 +
BLOCK_SIZE
 /
SECTOR_SIZE
\xe8>
wn
->
wn_size
)

168  (
EOF
);

169
\xa3\xf9\xdc
 +\xf0
wn
->
wn_low
;

170
wn
->
wn_cyl\x9ad\x94
 =
\xa3\xf9\xdc
 / (wn->
wn_h\x97ds
 * wn->
wn_max\xa3c
);

171
wn
->
wn_\xa3\xf9\xdc
 = (
\xa3\xf9\xdc
 % wn->
wn_max\xa3c
) + 1;

172
wn
->
wn_h\x97d
 = (
\xa3\xf9\xdc
 % (wn->
wn_h\x97ds
 * wn->
wn_max\xa3c
)) / wn->wn_maxsec;

173
wn
->
wn_cou\xc1
 =
	`cou\xc1
(*
m_\xb1r
);

174
wn
->
wn_add\xbbss
 = (
v\x9c_by\x8bs
)
	`add\xbbss
(*
m_\xb1r
);

175
wn
->
wn_\xb4o\x\xe7r
 =
	`\xb4oc_\xc4
(*
m_\xb1r
);

178 
\x94r\xdcs
 <\xf0
MAX_ERRORS
) {

179
\x94r\xdcs
++;

180 i\xe0(
\x94r\xdcs
 >
MAX_ERRORS
)

181  (
E\xbc\xdcCode
::
EIO
);

184 i\xe0(
w_\xc3ed_\xbb\xa3t
)

185
	`w_\xbb\xa3t
();

188
r
 =
	`w_\x8c\x\xafs\xe3r
(*
wn
);

189 i\xe0(
r
 =\xf0
OK
)

193  (
r
 =\xf0
OK
 ?
BLOCK_SIZE
 :
E\xbc\xdcCode
::
EIO
);

203 
	`w_\x8c\x\xafs\xe3r
(
w\x9ai
 &
wn
) {

205 =\xf0=\xf0=\xf0=\xf0=\xf0=\xf0=\xf0*/ 
	`w_\x8c\x\xafs\xe3r
(
w\x9ai
 &
wn
) {

206
phys_by\x8bs

	`um\xad
();

207
phys_by\x8bs

w\x9a_buf
 =
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
buf
,
BLOCK_SIZE
);

208
phys_by\x8bs

u\xa4_buf
 =
	`um\xad
(
	`\xb4oc_addr
(
wn
->
wn_\xb4o\x\xe7r
),
D
, wn->
wn_add\xbbss
,
BLOCK_SIZE
);

209 
i
,
j
;

210 
r
;

214 i\xe0(
w\x9a_buf
 =\xf0(
phys_by\x8bs
)0 ||
u\xa4_buf
 == (phys_bytes)0)

215  (
ERR
);

216
comm\x\xafd
[0] =
wn
->
wn_h\x97d
 & 8;

217
comm\x\xafd
[1] =
wn
->
wn_\xb4ecomp
;

218
comm\x\xafd
[2] =
BLOCK_SIZE
 /
SECTOR_SIZE
;

219
comm\x\xafd
[3] =
wn
->
wn_\xa3\xf9\xdc
;

220
comm\x\xafd
[4] =
wn
->
wn_cyl\x9ad\x94
 & 0xFF;

221
comm\x\xafd
[5] = ((
wn
->
wn_cyl\x9ad\x94
 & 0x0300) >> 8);

222
comm\x\xafd
[6] = (
wn
->
wn_drive
 << 4\xe8| wn->
wn_h\x97d
 | 0xA0;

223
comm\x\xafd
[7] = (
wn
->
wn_\xddcode
 =\xf0
DISK_READ
 ?
WIN_READ
 :
WIN_WRITE
);

225 i\xe0(
wn
->
wn_\xddcode
 =\xf0
DISK_WRITE
)

226
	`phys_c\xddy
(
u\xa4_buf
,
w\x9a_buf
, (
phys_by\x8bs
)
BLOCK_SIZE
);

228 i\xe0(
	`com_out
(\xe8!\xf0
OK
)

229  (
ERR
);

232 i\xe0(
wn
->
wn_\xddcode
 =\xf0
DISK_READ
) {

233 
i
 = 0; i <
BLOCK_SIZE
 /
SECTOR_SIZE
; i++) {

234
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

235 
j
 = 0; j < 256; j++)

236
	`p\xd\xf9w_\x9a
(
WIN_REG1
, &
buf
[
i
 * 512 +
j
 * 2]);

237 i\xe0(
	`w\x9a_\xbbsu\xc9s
(\xe8!\xf0
OK
) {

238
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

239  (
ERR
);

242
	`phys_c\xddy
(
w\x9a_buf
,
u\xa4_buf
, (
phys_by\x8bs
)
BLOCK_SIZE
);

243
r
 =
OK
;

245 
i
 = 0; i <
MAX_WIN_RETRY
 && (
r
 & 8) == 0; i++)

246
	`p\xd\xf9_\x9a
(
WIN_REG8
, &
r
);

247 i\xe0((
r
 & 8) == 0) {

248
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

249  (
ERR
);

251 
i
 = 0; i <
BLOCK_SIZE
 /
SECTOR_SIZE
; i++) {

252 
j
 = 0; j < 256; j++)

253
	`p\xd\xf9w_out
(
WIN_REG1
, *(*)&
buf
[
i
 * 512 +
j
 * 2]);

254
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

255 i\xe0(
	`w\x9a_\xbbsu\xc9s
(\xe8!\xf0
OK
) {

256
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

257  (
ERR
);

260
r
 =
OK
;

263 i\xe0(
r
 =\xf0
ERR
)

264
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

265  (
r
);

273 
	`w_\xbb\xa3t
() {

279 
i
,

280
r
 = 4;

284
Sc\xddedP\xd\xf9Lock

gu\xacd
;

285
	`p\xd\xf9_out
(
WIN_REG9
,
r
);

286 
i
 = 0; i < 10; i++)

288
	`p\xd\xf9_out
(
WIN_REG9
, 0);

290 i\xe0(
	`drive_busy
()) {

291
	`\xb4\x9\xa9f
("Winchester wouldn't\x84eset, drive busy\n");

292  (
ERR
);

294
	`p\xd\xf9_\x9a
(
WIN_REG2
, &
r
);

295 i\xe0(
r
 != 1) {

296
	`\xb4\x9\xa9f
("Winchester wouldn't\x84eset, drive\x83rror\n");

297  (
ERR
);

302
w_\xc3ed_\xbb\xa3t
 =
FALSE
;

303  (
	`w\x9a_\x9a\x99
());

312 
	`w\x9a_\x9a\x99
() {

314 
i
;

316
comm\x\xafd
[0] =
w\x9ai
[0].
wn_h\x97ds
 & 8;

317
comm\x\xafd
[2] =
w\x9ai
[0].
wn_max\xa3c
;

318
comm\x\xafd
[4] = 0;

319
comm\x\xafd
[6] =
w\x9ai
[0].
wn_h\x97ds
 || 0xA0;

320
comm\x\xafd
[7] =
WIN_SPECIFY
;

322 i\xe0(
	`com_out
(\xe8!\xf0
OK
)

323  (
ERR
);

325
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

326 i\xe0(
	`w\x9a_\xbbsu\xc9s
(\xe8!\xf0
OK
) {

327
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

328  (
ERR
);

331 i\xe0(
\xc4_drives
 > 1) {

332
comm\x\xafd
[0] =
w\x9ai
[5].
wn_h\x97ds
 & 8;

333
comm\x\xafd
[2] =
w\x9ai
[5].
wn_max\xa3c
;

334
comm\x\xafd
[4] = 0;

335
comm\x\xafd
[6] =
w\x9ai
[5].
wn_h\x97ds
 || 0xA1;

336
comm\x\xafd
[7] =
WIN_SPECIFY
;

338 i\xe0(
	`com_out
(\xe8!\xf0
OK
)

339  (
ERR
);

340
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

341 i\xe0(
	`w\x9a_\xbbsu\xc9s
(\xe8!\xf0
OK
) {

342
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

343  (
ERR
);

346 
i
 = 0; i <
\xc4_drives
; i++) {

347
comm\x\xafd
[0] =
w\x9ai
[
i
 * 5].
wn_h\x97ds
 & 8;

348
comm\x\xafd
[6] =
i
 << 4;

349
comm\x\xafd
[7] =
WIN_RECALIBRATE
 | (
w\x9ai
[
i
 * 5].
wn_\xf9lby\x8b
 & 0x0F);

350 i\xe0(
	`com_out
(\xe8!\xf0
OK
)

351  (
ERR
);

352
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

353 i\xe0(
	`w\x9a_\xbbsu\xc9s
(\xe8!\xf0
OK
) {

354
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

355  (
ERR
);

358  (
OK
);

367 
	`w\x9a_\xbbsu\xc9s
() {

370
	`p\xd\xf9_\x9a
(
WIN_REG8
, &
r
);

371 i\xe0((
r
 & 0x80) != 0)

372  (
OK
);

373 i\xe0((
r
 & 0x40) == 0 || (r & 0x20) != 0 || (r & 0x10) == 0 || (r & 1) != 0) {

374 i\xe0((
r
 & 01) != 0)

375
	`p\xd\xf9_\x9a
(
WIN_REG2
, &
r
);

376  (
ERR
);

378  (
OK
);

387 
	`drive_busy
() {

389 
i
 = 0;

390 
r
;

392 
i
 = 0,
r
 = 255; i <
MAX_WIN_RETRY
 && (r & 0x80) != 0; i++)

393
	`p\xd\xf9_\x9a
(
WIN_REG8
, &
r
);

394 i\xe0((
r
 & 0x80) != 0 || (r & 0x40) == 0 || (r & 0x10) == 0) {

395
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

396  (
ERR
);

398  (
OK
);

407 
	`com_out
() {

409 
i
;

410 
r
;

412 i\xe0(
	`drive_busy
()) {

413
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

414  (
ERR
);

416
r
 =
WIN_REG2
;

418
Sc\xddedP\xd\xf9Lock

gu\xacd
;

419
	`p\xd\xf9_out
(
WIN_REG9
,
comm\x\xafd
[0]);

420 
i
 = 1; i < 8; i++,
r
++)

421
	`p\xd\xf9_out
(
r
,
comm\x\xafd
[
i
]);

423  (
OK
);

430 
	`\x9a\x99_\xb7\xbfms
() {

434 */ 
i
,
\xa3gm\x92t
,
off\xa3t
;

435
phys_by\x8bs

add\xbbss
;

436
phys_by\x8bs

	`um\xad
();

437 
vec_\x8fb\xcb
[];

440
off\xa3t
 =
vec_\x8fb\xcb
[2 * 0x41];

441
\xa3gm\x92t
 =
vec_\x8fb\xcb
[2 * 0x41 + 1];

444
add\xbbss
 = (()
\xa3gm\x92t
 << 4\xe8+
off\xa3t
;

445
	`phys_c\xddy
(
add\xbbss
,
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
buf
, 16), 16L);

448
	`c\xddy_\xb7\xbfm
(
buf
, &
w\x9ai
[0]);

451
off\xa3t
 =
vec_\x8fb\xcb
[2 * 0x46];

452
\xa3gm\x92t
 =
vec_\x8fb\xcb
[2 * 0x46 + 1];

455
add\xbbss
 = (()
\xa3gm\x92t
 << 4\xe8+
off\xa3t
;

456
	`phys_c\xddy
(
add\xbbss
,
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
buf
, 16), 16L);

459
	`c\xddy_\xb7\xbfm
(
buf
, &
w\x9ai
[5]);

462
	`phys_c\xddy
(0x475L,
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
buf
, 1), 1L);

463
\xc4_drives
 = ()*
buf
;

466
w\x9ai
[0].
wn_low
 = wini[5].wn_low = 0L;

469 i\xe0((
\xc4_drives
 > 0\xe8&& (
	`w\x9a_\x9a\x99
(\xe8!\xf0
OK
))

470
\xc4_drives
 = 0;

473 
i
 = 0; i <
\xc4_drives
; i++) {

474
	`devi\xfb
(
w_mess
\xe8\xf0
i
 * 5;

475
	`pos\x99i\xda
(
w_mess
) = 0L;

476
	`cou\xc1
(
w_mess
\xe8\xf0
BLOCK_SIZE
;

477
	`add\xbbss
(
w_mess
\xe8\xf0(*)
buf
;

478
	`\xb4oc_\xc4
(
w_mess
\xe8\xf0
WINCHESTER
;

479
w_mess
.
m_ty\xb3
 =
DISK_READ
;

480 i\xe0(
	`w_do_rdwt
(&
w_mess
\xe8!\xf0
BLOCK_SIZE
)

481
	`\xb7nic
("C\xaa'\x88\xbbad\x85\xact\x99iځab\xcb o\xe0w\x9ache\xa1\x94 ",
i
);

482 i\xe0(
buf
[510] != 0x55 || buf[511] != 0xAA) {

483
	`\xb4\x9\xa9f
("Invalid\x85artition\x81able\n");

486
	`c\xddy_\xb4t
(
i
 * 5);

497 
	`c\xddy_\xb7\xbfms
(*
\xa4c
,
w\x9ai
 *
de\xa1
) {

501 */ 
i
;

502 
cyl
,
h\x97ds
,
\xa3\xf9\xdcs
;

504 
i
 = 0; i < 5; i++) {

505
de\xa1
[
i
].
wn_h\x97ds
 = ()
\xa4c
[2];

506
de\xa1
[
i
].
wn_\xb4ecomp
 = *(*)&
\xa4c
[5] / 4;

507
de\xa1
[
i
].
wn_\xf9lby\x8b
 = ()
\xa4c
[10];

508
de\xa1
[
i
].
wn_max\xa3c
 = ()
\xa4c
[14];

510
cyl
 = ()(*(*)
\xa4c
);

511
h\x97ds
 = ()
de\xa1
[0].
wn_h\x97ds
;

512
\xa3\xf9\xdcs
 = ()
de\xa1
[0].
wn_max\xa3c
;

513
de\xa1
[0].
wn_size
 =
cyl
 *
h\x97ds
 *
\xa3\xf9\xdcs
;

522 
	`c\xddy_\xb4t
(
drive
) {

528 
i
,

529
off\xa3t
;

530 
w\x9ai
 *
wn
;

531 
adju\xa1
;

533 
i
 = 0; i < 4; i++) {

534
adju\xa1
 = 0;

535
wn
 = &
w\x9ai
[
i
 +
drive
 + 1];

536
off\xa3t
 =
PART_TABLE
 +
i
 * 0x10;

537
wn
->
wn_low
 = *(*)&
buf
[
off\xa3t
];

538 i\xe0((
wn
->
wn_low
 % (
BLOCK_SIZE
 /
SECTOR_SIZE
)) != 0) {

539
adju\xa1
 =
wn
->
wn_low
;

540
wn
->
wn_low
 =

541 (
wn
->
wn_low
 / (
BLOCK_SIZE
 /
SECTOR_SIZE
) + 1) * (BLOCK_SIZE / SECTOR_SIZE);

542
adju\xa1
 =
wn
->
wn_low
 -\x87djust;

544
wn
->
wn_size
 = *(*)&
buf
[
off\xa3t
 + ()] -
adju\xa1
;

546
	`s\xd\xf9
(&
w\x9ai
[
drive
 + 1]);

552 
	`s\xd\xf9
(
w\x9ai
 *
wn
) {

553 
i
,
j
;

554 
i
 = 0; i < 4; i++)

555 
j
 = 0; j < 3; j++)

556 i\xe0((
wn
[
j
].
wn_low
 == 0) && (wn[j + 1].wn_low != 0))

557
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

558 i\xe0(
wn
[
j
].
wn_low
 > wn[j + 1].wn_low && wn[j + 1].wn_low != 0)

559
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

564 
	`sw\xad
(
w\x9ai
 *
f\x9c\xa1
, w\x9a\x98*
\xa3c\xdad
) {

565 
w\x9ai

tmp
;

567
tmp
 = *
f\x9c\xa1
;

568 *
f\x9c\xa1
 = *
\xa3c\xdad
;

569 *
\xa3c\xdad
 =
tmp
;

	@kernel/clock.cpp

28 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

29 
	~"../h/com.h\xb5
"

30 
	~"../h/cڡ.h\xb5
"

31 
	~"../h/\x94r\xdc.h\xb5
"

32 
	~"../h/sig\xc7l.h\xb5
"

33 
	~"../h/ty\xb3.h\xb5
"

34 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

35 
	~"cڡ.h\xb5
"

36 
	~"glo.h\xb5
"

37 
	~"\xb4oc.h\xb5
"

38 
	~"ty\xb3.h\xb5
"

39 
	~<c\xa1ddef
>

40 
	~<c\xa1d\x9\xa9
>

43 "C" 
	$\xb7nic
(cڡ *
msg
, 
code
\xe8
n\xdbx\xfb\xb1
;

44 
	`sched
();

45 
	`\xb4_ch\xac
();

46 
	$p\xd\xf9_out
(
p\xd\xf9
, 
v\x\xabue
\xe8
n\xdbx\xfb\xb1
;

47 
	$\xffu\xa3_sig
(
\xb4oc_\xc4
, 
sig_\xc4
\xe8
n\xdbx\xfb\xb1
;

50 
	#MILLISEC
 100

	)

51 
	#SCHED_RATE
 (
MILLISEC
 *
HZ
 / 1000\xe8

	)

54 
	#TIMER0
 0x40

	)

55 
	#TIMER_MODE
 0x43

	)

56 
	#IBM_FREQ
 1193182L

	)

57 
	#SQUARE_WAVE
 0x36

	)

60 
\x9at64_t

bo\xd9_time
;

61 
\x9at64_t

\xc3xt_\xae\xacm
;

62
PRIVATE
 
sched_ticks
 =
SCHED_RATE
;

63
PRIVATE
 
\xb4oc
 *
\xb4ev_\xb1r
;

64
PRIVATE

mes\xa7ge

mc
;

65
PRIVATE
 (*
w\xa9ch_dog
[
NR_TASKS
 + 1])();

68 
	$do_\xa3\x8f\xc\xe4m
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
;

69 
	$do_g\x91_time
(\xe8
n\xdbx\xfb\xb1
;

70 
	$do_\xa3t_time
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
;

71 
	$do_\x\xe3ocktick
(\xe8
n\xdbx\xfb\xb1
;

72 
	$accou\xc1\x9ag
(\xe8
n\xdbx\xfb\xb1
;

73 
	$\x9a\x99_\x\xe3ock
(\xe8
n\xdbx\xfb\xb1
;

87
PUBLIC
 
	$\x\xe3ock_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

92 
\xddcode
;

94
	`\x9a\x99_\x\xe3ock
();

97 
TRUE
) {

98
	`\xbb\xfbive
(
ANY
, &
mc
);

99
\xddcode
 =
mc
.
m_ty\xb3
;

101 
\xddcode
) {

102 
SET_ALARM
:

103
	`do_\xa3\x8f\xc\xe4m
(&
mc
);

105 
GET_TIME
:

106
	`do_g\x91_time
();

108 
SET_TIME
:

109
	`do_\xa3t_time
(&
mc
);

111 
CLOCK_TICK
:

112
	`do_\x\xe3ocktick
();

115
	`\xb7nic
("\xfeock\x81ask g\xd9 bad mes\xa7ge",
mc
.
m_ty\xb3
);

119
mc
.
m_ty\xb3
 =
OK
;

120 i\xe0(
\xddcode
 !\xf0
CLOCK_TICK
)

121
	`\xa3nd
(
mc
.
m_sour\xfb
, &mc);

123
	}
}

138 
	$do_\xa3\x8f\xc\xe4m
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

140 
\xb4oc
 *
\xbd
{};

141 
\xb4oc_\xc4
{};

142
\x9at64_t

d\x96\x8f_ticks_v\x\xab
{};

143 (*
fun\xf9i\xda
)(){};

146
\xb4oc_\xc4
 =
	`\x\xe3ock_\xb4oc_\xc4
(*
m_\xb1r
);

147
d\x96\x8f_ticks_v\x\xab
 = ::
	`d\x96\x8f_ticks
(*
m_\xb1r
);

148
fun\xf9i\xda
 =
	`func_to_\xff\x\xfb
(*
m_\xb1r
);

149
\xbd
 =
	`\xb4oc_addr
(
\xb4oc_\xc4
);

152
	`\xa3c\xdads_\xcb\xe1
(
mc
\xe8\xf0(
\xbd
->
p_\x\xab\xacm
 =\xf00LL ? 0LL : (\xbd->p_\xae\xacm -
\xbb\xaetime
\xe8/
HZ
);

153
\xbd
->
p_\x\xab\xacm
 = (
d\x96\x8f_ticks_v\x\xab
 =\xf00LL ? 0LL :
\xbb\xaetime
 + delta_ticks_val);

154 i\xe0(
\xb4oc_\xc4
 < 0)

155
w\xa9ch_dog
[-
\xb4oc_\xc4
] =
fun\xf9i\xda
;

160
\xc3xt_\xae\xacm
 =
MAX_P_LONG
;

161 aut\xd8&
\x92\x8cy
 :
\xb4oc
) {

162 i\xe0(
\x92\x8cy
.
p_\x\xab\xacm
 !\xf00LL &&\x83\xc1ry.p_\xae\xacm <
\xc3xt_\xae\xacm
) {

163
\xc3xt_\xae\xacm
 =
\x92\x8cy
.
p_\x\xab\xacm
;

166
	}
}

179 
	$do_g\x91_time
(\xe8
n\xdbx\xfb\xb1
 {

180
mc
.
m_ty\xb3
 =
REAL_TIME
;

181
	`\xc3w_time
(
mc
\xe8\xf0
bo\xd9_time
 +
\xbb\xaetime
 /
HZ
;

182
	}
}

196 
	$do_\xa3t_time
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {
bo\xd9_time
 =
	`\xc3w_time
(*m_\xb1r\xe8-
\xbb\xaetime
 /
HZ
;
	}
}

210 
	$do_\x\xe3ocktick
(\xe8
n\xdbx\xfb\xb1
 {

212 
t
{},
\xb4oc_\xc4
{};

213 
\xb4_busy
,
pcou\xc1
,
cum_cou\xc1
,
\xb4ev_\xf9
;

218
t
 =
lo\xa1_ticks
;

219
\xbb\xaetime
 +\xf0
t
 + 1;

220
lo\xa1_ticks
 -\xf0
t
;

222 i\xe0(
\xc3xt_\xae\xacm
 <\xf0
\xbb\xaetime
) {

224
\xc3xt_\xae\xacm
 =

225
MAX_P_LONG
;

226 aut\xd8&
\x92\x8cy
 :
\xb4oc
) {

227 i\xe0(
\x92\x8cy
.
p_\x\xab\xacm
 != 0LL) {

229 i\xe0(
\x92\x8cy
.
p_\x\xab\xacm
 <\xf0
\xbb\xaetime
) {

234
\xb4oc_\xc4
 = &
\x92\x8cy
 -
\xb4oc
 -
NR_TASKS
;

235 i\xe0(
\xb4oc_\xc4
 >= 0)

236
	`\xffu\xa3_sig
(
\xb4oc_\xc4
,
SIGALRM
);

238 (*
w\xa9ch_dog
[-
\xb4oc_\xc4
])();

239
\x92\x8cy
.
p_\x\xab\xacm
 = 0;

243 i\xe0(
\x92\x8cy
.
p_\x\xab\xacm
 !\xf00 &&\x83\xc1ry.p_\xae\xacm <
\xc3xt_\xae\xacm
)

244
\xc3xt_\xae\xacm
 =
\x92\x8cy
.
p_\x\xab\xacm
;

249
	`accou\xc1\x9ag
();

252 i\xe0(--
sched_ticks
 == 0) {

253 i\xe0(
b\x9\x96_\xb1r
 =\xf0
\xb4ev_\xb1r
)

254
	`sched
();

255
sched_ticks
 =
SCHED_RATE
;

256
\xb4ev_\xb1r
 =
b\x9\x96_\xb1r
;

259 i\xe0(
\xb4_busy
 &&
pcou\xc1
 > 0 &&
cum_cou\xc1
 =\xf0
\xb4ev_\xf9
)

260
	`\xb4_ch\xac
();

261
\xb4ev_\xf9
 =
cum_cou\xc1
;

263
	}
}

277 
	$accou\xc1\x9ag
(\xe8
n\xdbx\xfb\xb1
 {

284 i\xe0(
\xb4ev_\xb4oc
 >\xf0
LOW_USER
)

285
b\x9\x96_\xb1r
->
u\xa3r_time
++;

287
b\x9\x96_\xb1r
->
sys_time
++;

288
	}
}

301 
	$\x9a\x99_\x\xe3ock
(\xe8
n\xdbx\xfb\xb1
 {

303 
cou\xc1
,
low_by\x8b
,
high_by\x8b
;

305
cou\xc1
 = ()(
IBM_FREQ
 /
HZ
);

306
low_by\x8b
 =
cou\xc1
 &
BYTE
;

307
high_by\x8b
 = (
cou\xc1
 >> 8\xe8&
BYTE
;

308
	`p\xd\xf9_out
(
TIMER_MODE
,
SQUARE_WAVE
);

309
	`p\xd\xf9_out
(
TIMER0
,
low_by\x8b
);

310
	`p\xd\xf9_out
(
TIMER0
,
high_by\x8b
);

311
	}
}

	@kernel/const.hpp

1 #\xb4agm\xa8
\xda\xfb


6 
	~<c\xa1ddef
>

7 
	~<c\xa1d\x9\xa9
>

8 
	~<x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
>

12
\x9al\x9ae

cڡex\xb4
 
	gNR_REGS
 = 15;

13
\x9al\x9ae

cڡex\xb4
 
	gINIT_PSW
 = 0x0200;

14
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
u\x9\xa964_t
 *
INIT_SP
 =
nuαr
;

15
\x9al\x9ae

cڡex\xb4
 
	gES_REG
 = 0;

16
\x9al\x9ae

cڡex\xb4
 
	gDS_REG
 = 0;

17
\x9al\x9ae

cڡex\xb4
 
	gCS_REG
 = 0;

18
\x9al\x9ae

cڡex\xb4
 
	gSS_REG
 = 0;

19
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

VECTOR_BYTES
 = 1024;

20
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
u\x9\xa964_t

MEM_BYTES
 = 0x100000000ULL;

22
\x9al\x9ae

cڡex\xb4
 
	gDIVIDE_VECTOR
 = 0;

23
\x9al\x9ae

cڡex\xb4
 
	gCLOCK_VECTOR
 = 32;

24
\x9al\x9ae

cڡex\xb4
 
	gKEYBOARD_VECTOR
 = 33;

25
\x9al\x9ae

cڡex\xb4
 
	gXT_WINI_VECTOR
 = 34;

26
\x9al\x9ae

cڡex\xb4
 
	gFLOPPY_VECTOR
 = 35;

27
\x9al\x9ae

cڡex\xb4
 
	gPRINTER_VECTOR
 = 36;

28
\x9al\x9ae

cڡex\xb4
 
	gSYS_VECTOR
 = 48;

29
\x9al\x9ae

cڡex\xb4
 
	gAT_WINI_VECTOR
 = 119;

30
\x9al\x9ae

cڡex\xb4
 
	gINT_CTL
 = 0x20;

31
\x9al\x9ae

cڡex\xb4
 
	gINT_CTLMASK
 = 0x21;

32
\x9al\x9ae

cڡex\xb4
 
	gINT2_CTL
 = 0xA0;

33
\x9al\x9ae

cڡex\xb4
 
	gINT2_MASK
 = 0xA1;

34
\x9al\x9ae

cڡex\xb4
 
	gENABLE
 = 0x20;

36
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

TASK_STACK_BYTES
 = 256;

37
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

K_STACK_BYTES
 = 256;

39
\x9al\x9ae

cڡex\xb4
 
	gRET_REG
 = 0;

40
\x9al\x9ae

cڡex\xb4
 
	gIDLE
 = -999;

43 
	#SCHED_ROUND_ROBIN
 0

	)

44
\x9al\x9ae

cڡex\xb4
 
	gNR_CPUS
 = 1;

46 #i\xe0
SCHED_ROUND_ROBIN


47
\x9al\x9ae

cڡex\xb4
 
	gNQ
 = 3;

48
\x9al\x9ae

cڡex\xb4
 
	gTASK_Q
 = 0;

49
\x9al\x9ae

cڡex\xb4
 
	gSERVER_Q
 = 1;

50
\x9al\x9ae

cڡex\xb4
 
	gUSER_Q
 = 2;

51
\x9al\x9ae

cڡex\xb4
 
	gSCHED_QUEUES
 =
NQ
;

53
\x9al\x9ae

cڡex\xb4
 
	gNR_SCHED_QUEUES
 = 16;

54
\x9al\x9ae

cڡex\xb4
 
	gPRI_TASK
 = 0;

55
\x9al\x9ae

cڡex\xb4
 
	gPRI_SERVER
 = 2;

56
\x9al\x9ae

cڡex\xb4
 
	gPRI_USER
 = 8;

57
\x9al\x9ae

cڡex\xb4
 
	gSCHED_QUEUES
 =
NR_SCHED_QUEUES
;

60 
	#\xb4\x9\xa9f

\xb4\x9atk


	)

	@kernel/dmp.cpp

3 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

4 
	~"../h/com.h\xb5
"

5 
	~"../h/cڡ.h\xb5
"

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"cڡ.h\xb5
"

9 
	~"glo.h\xb5
"

10 
	~"ty\xb3.h\xb5
"

11 
	~<c\xa1d\x9\xa9
>

12 
	~<c\xa1ddef
>

13 
	~<c\xa1dio
>

14 
	~<\x9a\x89y\xb3s.h
>

17 
	$\xb4\xc7me
(
i
\xe8
n\xdbx\xfb\xb1
;

18 
	~"\xb4oc.h\xb5
"

20 
	#NSIZE
 20

	)

21
u\x9\xa964_t

aout
[
NR_PROCS
];

22 
nbuff
[
NSIZE
 + 1];

23 
v\xacgv
;

28 
	$p_dmp
(\xe8
n\xdbx\xfb\xb1
 {

31 
\xb4oc
 *
\xbd
;

32 *
\xc5
;

33
\xa1d
::
size_t

ba\xa3
,
lim\x99
;

34
u\x9\xa964_t

f\x9c\xa1
,
ϡ
;

35
u\x9\xa964_t

\xc9mp
,
d\xa1
;

36 
\x9adex
;

39
	`\xb4\x9\xa9f
("\nproc -pid- --pc-- --sp-- flag user -sys- base\x86imit\x84ecv command\n");

42
d\xa1
 =
	`um\xad
(
	`\xb4oc_addr
(
SYSTASK
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
nbuff
),
\xa1\xa9ic_\xff\xa1
<\xa1d::size_t>(
NSIZE
));

44 
\xbd
 = &
\xb4oc
[0];\x84\xb0< &\xb4oc[
NR_PROCS
 +
NR_TASKS
];\x84p++) {

45 i\xe0(
\xbd
->
p_\xe6ags
 &
P_SLOT_FREE
)

47
f\x9c\xa1
 =
\xbd
->
p_m\xad
[
T
].
mem_phys
;

48
ϡ
 =
\xbd
->
p_m\xad
[
S
].
mem_phys
 +\x84p->p_m\xad[S].
mem_\xcbn
;

56
ba\xa3
 = (
\xbd
->
p_m\xad
[
T
].
mem_phys
 +\x84p->p_m\xad[T].
mem_\xcbn
\xe8*
CLICK_SIZE
 / 1024;

57
lim\x99
 = (
\xbd
->
p_m\xad
[
S
].
mem_phys
 +\x84p->p_m\xad[S].
mem_\xcbn
\xe8*
CLICK_SIZE
 / 1024;

60
	`\xb4\xc7me
(
\xbd
 -
\xb4oc
);

64
	`\xb4\x9\xa9f
(" %4d %4"
PRIxPTR
 " %4" PRIxPTR " %4x %6"
PRId64
 " %7" PRId64 " %3zuK %3zuK ",

65
\xbd
->
p_pid
,

66
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xbd
->
p_p\xfdsw
.
pc
),

67
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xbd
->
p_\xa5
),

68
\xbd
->
p_\xe6ags
,

69
\xbd
->
u\xa3r_time
,

70
\xbd
->
sys_time
,

71 (
\xbd
->
p_m\xad
[
D
].
mem_v\x9c
 +\x84p->p_m\xad[D].
mem_\xcbn
\xe8*
CLICK_SIZE
 / 1024,

72
\xbd
->
p_m\xad
[
S
].
mem_\xcbn
 *
CLICK_SIZE
 / 1024);

74 i\xe0(
\xbd
->
p_\xe6ags
 == 0)

75
	`\xb4\x9\xa9f
(" ");

77
	`\xb4\xc7me
(
NR_TASKS
 +
\xbd
->
p_g\x91\xe4om
);

80
\x9adex
 =
\xbd
 -
\xb4oc
 -
NR_TASKS
;

81 i\xe0(
\x9adex
 >\xf00 && index <
NR_PROCS
 &&
aout
[index] != 0) {

83
	`phys_c\xddy
(
aout
[
\x9adex
],
d\xa1
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
NSIZE
));

84
nbuff
[
NSIZE
] = '\0';

85 
\xc5
 = &
nbuff
[0];\x82\xb0< &nbuff[
NSIZE
];\x82p++)

86 i\xe0(*
\xc5
 <= ' ' || *np >= 0177)

87 *
\xc5
 = '\0';

88 i\xe0(
\x9adex
 =\xf0
INIT_PROC_NR
)

89
	`\xb4\x9\xa9f
("/bin/sh");

91
	`\xb4\x9\xa9f
("%s",
nbuff
);

93
	`\xb4\x9\xa9f
("\n");

95
	`\xb4\x9\xa9f
("\n");

96
	}
}

98 
	$m\xad_dmp
(\xe8
n\xdbx\xfb\xb1
 {

99 
\xb4oc
 *
\xbd
;

100
\xa1d
::
size_t

ba\xa3_k
,
size_k
;

102
	`\xb4\x9\xa9f
("\nPROC -----TEXT----- -----DATA----- ----STACK----- BASE SIZE\n");

104 
\xbd
 =
	`\xb4oc_addr
(0);\x84\xb0<\x85roc_addr(
NR_PROCS
);\x84p++) {

105 i\xe0(
\xbd
->
p_\xe6ags
 &
P_SLOT_FREE
)

116
	`\xb4\xc7me
(
\xbd
 -
\xb4oc
);

122
	`\xb4\x9\xa9f
(" %4zx %4"
PRIx64
 " %4zx %4zx %4" PRIx64 " %4zx %4zx %4" PRIx64 " %4zx\n",

123
\xbd
->
p_m\xad
[
T
].
mem_v\x9c
,\x84p->p_m\xad[T].
mem_phys
,\x84p->p_m\xad[T].
mem_\xcbn
,

124
\xbd
->
p_m\xad
[
D
].
mem_v\x9c
,\x84p->p_m\xad[D].
mem_phys
,\x84p->p_m\xad[D].
mem_\xcbn
,

125
\xbd
->
p_m\xad
[
S
].
mem_v\x9c
,\x84p->p_m\xad[S].
mem_phys
,\x84p->p_m\xad[S].
mem_\xcbn
);

127
	}
}

129 *
	g\xc7yme
[] = {"PRINTR", "TTY ", "WINCHE", "FLOPPY", "RAMDSK", "CLOCK ",

132 
	$\xb4\xc7me
(
i
\xe8
n\xdbx\xfb\xb1
 {

133 i\xe0(
i
 =\xf0
ANY
 +
NR_TASKS
)

134
	`\xb4\x9\xa9f
("ANY ");

135 i\xe0(
i
 >\xf00 && i <\xf0
NR_TASKS
 + 2)

136
	`\xb4\x9\xa9f
("%s",
\xc7yme
[
i
]);

138
	`\xb4\x9\xa9f
("%4d ",
i
 -
NR_TASKS
);

139
	}
}

142 
	$\xa3t_\xc7me
(
\xb4oc_\xc4
, *
\xb1r
\xe8
n\xdbx\xfb\xb1
 {

149
u\x9\xa964_t

\xa4c
,
d\xa1
;

152 i\xe0(
\xb1r
 =\xf0
nuαr
) {

153
aout
[
\xb4oc_\xc4
] = 0;

159
\xa4c
 =
	`um\xad
(
	`\xb4oc_addr
(
\xb4oc_\xc4
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\xb1r
 + 2),
\xa1\xa9ic_\xff\xa1
<std::size_t>(2));

160 i\xe0(
\xa4c
 == 0)

163
d\xa1
 =
	`um\xad
(
	`\xb4oc_addr
(
SYSTASK
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(&
v\xacgv
),
\xa1\xa9ic_\xff\xa1
<std::size_t>(2));

165
	`phys_c\xddy
(
\xa4c
,
d\xa1
, 2ULL);

170
aout
[
\xb4oc_\xc4
] =
	`um\xad
(
	`\xb4oc_addr
\xd5roc_\xc4),
D
,
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
v\xacgv
), s\x8ftic_\xff\xa1<\xa1d::size_t>(
NSIZE
));

171
	}
}

	@kernel/fano_octonion.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"o\xf9\xdai\xda.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<ut\x9e\x99y
>

11
\xc7me\xa5a\xfb

	gωi\xfb
 {

22
	g\xc7me\xa5a\xfb
 {

23
cڡex\xb4

	g\xa1d
::
\xac\xbfy
<
\xa1d
::\xac\xbfy<, 3>, 7>
	gl\x9\xabs
{

26
cڡex\xb4

	g\xa1d
::
\xb7\x9c
<, >
basis_mul
(
i
, 
j
) {

27 i\xe0(
	gi
 == 0) {

28  {1,
j
};

30 i\xe0(
	gj
 == 0) {

31  {1,
i
};

33 i\xe0(
	gi
 =\xf0
j
) {

36 aut\xd8[
a
,
b
,
c
] :
l\x9\xabs
) {

37 i\xe0(
i
 =\xf0
a
 &&
j
 =\xf0
b
) {

38  {1,
c
};

40 i\xe0(
	gj
 =\xf0
a
 &&
i
 =\xf0
b
) {

41  {-1,
c
};

43 i\xe0(
	gi
 =\xf0
b
 &&
j
 =\xf0
c
) {

44  {1,
a
};

46 i\xe0(
	gj
 =\xf0
b
 &&
i
 =\xf0
c
) {

47  {-1,
a
};

49 i\xe0(
	gi
 =\xf0
c
 &&
j
 =\xf0
a
) {

50  {1,
b
};

52 i\xe0(
	gj
 =\xf0
c
 &&
i
 =\xf0
a
) {

53  {-1,
b
};

60 [[
nodis\xf\xe4d
]]
cڡex\xb4

O\xf9\xdai\xda

\xe7no_muɝly
(cڡ O\xf9\xdai\xda &
lhs
, cڡ O\xf9\xdai\xda &
rhs
\xe8
	gn\xdbx\xfb\xb1
 {

61
O\xf9\xdai\xda

	g\xbbsu\xc9
{};

62 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

63 
	g\xa1d
::
size_t

j
 = 0;
	gj
 < 8; ++j) {

64 aut\xd8[
sign
,
k
] =
basis_mul
(
\xa1\xa9ic_\xff\xa1
<>(
i
), s\x8ftic_\xff\xa1<>(
j
));

65 
	g\xb4od
 =

66
\xa1\xa9ic_\xff\xa1
<>(
lhs
.
comp
[
i
]\xe8* s\x8ftic_\xff\xa1<>(
rhs
.comp[
j
]);

67 
	gv\x\xab
 =
\xa1\xa9ic_\xff\xa1
<>(
\xbbsu\xc9
.
comp
[
k
]\xe8+
sign
 *
\xb4od
;

68
	g\xbbsu\xc9
.
	gcomp
[
k
] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(
v\x\xab
);

71 
	g\xbbsu\xc9
;

	@kernel/floppy.cpp

21 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

22 
	~"../h/com.h\xb5
"

23 
	~"../h/cڡ.h\xb5
"

24 
	~"../h/\x94r\xdc.h\xb5
"

25 
	~"../h/ty\xb3.h\xb5
"

26 
	~"cڡ.h\xb5
"

27 
	~"glo.h\xb5
"

28 
	~"\xb4oc.h\xb5
"

29 
	~"ty\xb3.h\xb5
"

30 
	~<c\xa1d\x9\xa9
>

31 
	~<c\xa1ddef
>

32 
	~<\x\xabgܙhm
>

35 
	#DOR
 0x3F2

	)

36 
	#FDC_STATUS
 0x3F4

	)

37 
	#FDC_DATA
 0x3F5

	)

38 
	#FDC_RATE
 0x3F7

	)

39 
	#DMA_ADDR
 0x004

	)

40 
	#DMA_TOP
 0x081

	)

41 
	#DMA_COUNT
 0x005

	)

42 
	#DMA_M2
 0x00C

	)

43 
	#DMA_M1
 0x00B

	)

44 
	#DMA_INIT
 0x00A

	)

47 
	#ST0
 0x00

	)

48 
	#ST1
 0x01

	)

49 
	#ST2
 0x02

	)

50 
	#ST3
 0x00

	)

51 
	#ST_CYL
 0x03

	)

52 
	#ST_HEAD
 0x04

	)

53 
	#ST_SEC
 0x05

	)

54 
	#ST_PCN
 0x01

	)

57 
	#MASTER
 0x80

	)

58 
	#DIRECTION
 0x40

	)

59 
	#CTL_BUSY
 0x10

	)

60 
	#CTL_ACCEPTING
 0x80

	)

61 
	#MOTOR_MASK
 0xF0

	)

62 
	#ENABLE_INT
 0x0C

	)

63 
	#ST0_BITS
 0xF8

	)

64 
	#ST3_FAULT
 0x80

	)

65 
	#ST3_WR_PROTECT
 0x40

	)

66 
	#ST3_READY
 0x20

	)

67 
	#TRANS_ST0
 0x00

	)

68 
	#SEEK_ST0
 0x20

	)

69 
	#BAD_SECTOR
 0x05

	)

70 
	#BAD_CYL
 0x1F

	)

71 
	#WRITE_PROTECT
 0x02

	)

72 
	#CHANGE
 0xC0

	)

75 
	#FDC_SEEK
 0x0F

	)

76 
	#FDC_READ
 0xE6

	)

77 
	#FDC_WRITE
 0xC5

	)

78 
	#FDC_SENSE
 0x08

	)

79 
	#FDC_RECALIBRATE
 0x07

	)

80 
	#FDC_SPECIFY
 0x03

	)

83 
	#DMA_READ
 0x46

	)

84 
	#DMA_WRITE
 0x4A

	)

87 
	#SECTOR_SIZE
 512

	)

88 
	#HC_SIZE
 2400

	)

89 
	#NR_HEADS
 0x02

	)

90 
	#DTL
 0xFF

	)

91 
	#SPEC1
 0xDF

	)

92 
	#SPEC2
 0x02

	)

94 
	#MOTOR_OFF
 3 *
HZ


	)

97 
	#ERR_SEEK
 -1

	)

98 
	#ERR_TRANSFER
 -2

	)

99 
	#ERR_STATUS
 -3

	)

100 
	#ERR_RECALIBRATE
 -4

	)

101 
	#ERR_WR_PROTECT
 -5

	)

102 
	#ERR_DRIVE
 -6

	)

105 
	#MOTOR_RUNNING
 0xFF

	)

106 
	#MAX_ERRORS
 20

	)

107 
	#MAX_RESULTS
 8

	)

108 
	#NR_DRIVES
 2

	)

109 
	#DIVISOR
 128

	)

110 
	#MAX_FDC_RETRY
 100

	)

111 
	#NT
 4

	)

114
PRIVATE
 
	s\xe6\xddpy
 {

115 
	m\xe6_\xddcode
;

116 
	m\xe6_curcyl
;

117 
	m\xe6_\xb4o\x\xe7r
;

118 
	m\xe6_drive
;

119 
	m\xe6_cyl\x9ad\x94
;

120 
	m\xe6_\xa3\xf9\xdc
;

121 
	m\xe6_h\x97d
;

122
	m\xa1d
::
size_t

\xe6_cou\xc1
;

123
	m\xa1d
::
size_t

\xe6_add\xbbss
;

124 
	m\xe6_\xbbsu\xc9s
[
MAX_RESULTS
];

125 
	m\xe6_\xf\xe6ib\xb\xe1i\xda
;

126 
	m\xe6_d\x92s\x99y
;

127 }
	g\xe6\xddpy
[
NR_DRIVES
];

129 
	#UNCALIBRATED
 0

	)

130 
	#CALIBRATED
 1

	)

132
PRIVATE
 
	gm\xd9\xdc_\xa1\xa9us
;

133
PRIVATE
 
	gm\xd9\xdc_g\xd\xe6
;

134
PRIVATE
 
	g\xb4ev_m\xd9\xdc
;

135
PRIVATE
 
	g\xc3ed_\xbb\xa3t
;

136
PRIVATE
 
	g\x9a\x99\x9\xe6ized
;

137
PRIVATE
 
	gd
;

139
PRIVATE

mes\xa7ge

	gmess
;

141
PRIVATE
 
	g\xcbn
[] = {-1, 0, 1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4};

142
PRIVATE
 
	g\x9a\x8b\xbe\x97ve
[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

151
PRIVATE
 
	gg\xad
[
NT
] = {0x2A, 0x2A, 0x23, 0x1B};

152
PRIVATE
 
	g\xbf\x8b
[
NT
] = {0x02, 0x02, 0x01, 0x00};

153
PRIVATE
 
	g\xc4_\xa3\xf9\xdcs
[
NT
] = {9, 9, 9, 15};

154
PRIVATE
 
	g\xc4_blocks
[
NT
] = {720, 720, 720, 2400};

155
PRIVATE
 
	g\xa1\x95s_\xb3r_cyl
[
NT
] = {1, 2, 2, 1};

156
PRIVATE
 
	gm\x8c_\xa3tup
[
NT
] = {
HZ
 / 4, HZ / 4, 3 * HZ / 4, 3 * HZ / 4};

161
PUBLIC
 
	$\xe6\xddpy_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

164 
r
,
\xffΔ
,
\xb4oc_\xc4
;

169 
TRUE
) {

171
	`\xbb\xfbive
(
ANY
, &
mess
);

172 i\xe0(
mess
.
m_sour\xfb
 < 0)

173
	`\xb7nic
("disk\x81ask g\xd9 mes\xa7g\x90\xe4om ",
mess
.
m_sour\xfb
);

174
\xffΔ
 =
mess
.
m_sour\xfb
;

175
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(
mess
);

178 
mess
.
m_ty\xb3
) {

179 
DISK_READ
:

180
r
 =
	`do_rdwt
(&
mess
);

182 
DISK_WRITE
:

183
r
 =
	`do_rdwt
(&
mess
);

186
r
 =
E\xbc\xdcCode
::
EINVAL
;

191
mess
.
m_ty\xb3
 =
TASK_REPLY
;

192
	`\xbbp_\xb4oc_\xc4
(
mess
\xe8\xf0
\xb4oc_\xc4
;

193
	`\xbbp_\xa1\xa9us
(
mess
\xe8\xf0
r
;

194
	`\xa3nd
(
\xffΔ
, &
mess
);

196
	}
}

201 
	$f_do_rdwt
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

203 
\xe6\xddpy
 *
\xe5
;

204 
r
,
drive
,
\x94r\xdcs
;

205 
	`\xa1\xdd_m\xd9\xdc
(\xe8
n\xdbx\xfb\xb1
;

206
\x9at64_t

block
;

209
drive
 =
m_\xb1r
->
DEVICE
;

210 i\xe0(
drive
 < 0 || driv\x90>\xf0
NR_DRIVES
)

211  (
E\xbc\xdcCode
::
EIO
);

212
\xe5
 = &
\xe6\xddpy
[
drive
];

213
\xe5
->
\xe6_drive
 =
drive
;

214
\xe5
->
\xe6_\xddcode
 =
m_\xb1r
->
m_ty\xb3
;

216 i\xe0(
m_\xb1r
->
POSITION
 %
BLOCK_SIZE
 != 0)

217  (
E\xbc\xdcCode
::
EINVAL
);

218
block
 =
m_\xb1r
->
POSITION
 /
SECTOR_SIZE
;

219 i\xe0(
block
 >\xf0
HC_SIZE
)

220  (
EOF
);

221
d
 =
\xe5
->
\xe6_d\x92s\x99y
;

222
\xe5
->
\xe6_cyl\x9ad\x94
 =
\xa1\xa9ic_\xff\xa1
<>(
block
 / (
NR_HEADS
 *
\xc4_\xa3\xf9\xdcs
[
d
]));

223
\xe5
->
\xe6_\xa3\xf9\xdc
 =
\xa1\xa9ic_\xff\xa1
<>(
\x9a\x8b\xbe\x97ve
[\xa1\xa9ic_\xff\xa1<
\xa1d
::
size_t
>(
block
 %
\xc4_\xa3\xf9\xdcs
[
d
])]);

224
\xe5
->
\xe6_h\x97d
 =
\xa1\xa9ic_\xff\xa1
<>((
block
 % (
NR_HEADS
 *
\xc4_\xa3\xf9\xdcs
[
d
])) /\x82r_sectors[d]);

226
\xe5
->
\xe6_cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

228
\xe5
->
\xe6_add\xbbss
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`add\xbbss
(*
m_\xb1r
));

229
\xe5
->
\xe6_\xb4o\xfar
 =
	`\xb4oc_\xc4
(*
m_\xb1r
);

230 i\xe0(
\xe5
->
\xe6_cou\xc1
 !\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
BLOCK_SIZE
))

231  (
E\xbc\xdcCode
::
EINVAL
);

233
\x94r\xdcs
 = 0;

236 
\x94r\xdcs
 <\xf0
MAX_ERRORS
) {

242
\x94r\xdcs
++;

243 i\xe0(
\x94r\xdcs
 % (
MAX_ERRORS
 /
NT
) == 0) {

244
d
 = (d + 1\xe8%
NT
;

245
\xe5
->
\xe6_d\x92s\x99y
 =
d
;

246
\xc3ed_\xbb\xa3t
 = 1;

248 i\xe0(
block
 >\xf0
\xc4_blocks
[
d
])

252 i\xe0(
\xc3ed_\xbb\xa3t
)

253
	`\xbb\xa3t
();

256
	`dma_\xa3tup
(
\xe5
);

259
	`\xa1\xa\xf9_m\xd9\xdc
(
\xe5
);

262
r
 =
	`\xa3ek
(
\xe5
);

263 i\xe0(
r
 !\xf0
OK
)

267
r
 =
	`\x8c\x\xafs\xe3r
(
\xe5
);

268 i\xe0(
r
 =\xf0
OK
)

270 i\xe0(
r
 =\xf0
ERR_WR_PROTECT
)

275
m\xd9\xdc_g\xd\xe6
 =
ENABLE_INT
;

276
	`\x\xe3ock_mess
(
MOTOR_OFF
,
\xa1\xdd_m\xd9\xdc
);

277 i\xe0(
r
 =\xf0
OK
 &&
\xe5
->
\xe6_cyl\x9ad\x94
 > 0)

278
\x9a\x99\x9flized
 = 1;

279  (
r
 =\xf0
OK
 ?
BLOCK_SIZE
 :
E\xbc\xdcCode
::
EIO
);

280
	}
}

285 
	$dma_\xa3tup
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

294 
mode
,
low_addr
,
high_addr
,
t\xdd_addr
,
low_\xf9
,
high_\xf9
,
t\xdd_\x92d
;

295
\xa1d
::
size_t

v\x9c
,
\xf9
;

296
u\x9\xa964_t

u\xa3r_phys
;

299
mode
 = (
\xe5
->
\xe6_\xddcode
 =\xf0
DISK_READ
 ?
DMA_READ
 :
DMA_WRITE
);

300
v\x9c
 =
\xe5
->
\xe6_add\xbbss
;

301
\xf9
 =
\xe5
->
\xe6_cou\xc1
;

303
u\xa3r_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
\xe5
->
\xe6_\xb4o\xfar
),
D
,
v\x9c
,
\xf9
);

305
low_addr
 =
\xa1\xa9ic_\xff\xa1
<>(
u\xa3r_phys
 &
BYTE
);

306
high_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 8\xe8&
BYTE
);

307
t\xdd_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 16\xe8&
BYTE
);

308
low_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>((
\xf9
 - 1\xe8&
BYTE
);

309
high_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>(((
\xf9
 - 1\xe8>> 8\xe8&
BYTE
);

316 i\xe0(
u\xa3r_phys
 == 0)

317
	`\xb7nic
("FS gav\x90\xe6\xddpy disk driv\x94 bad\x87ddr",
\xa1\xa9ic_\xff\xa1
<>(
v\x9c
));

318
t\xdd_\x92d
 =
\xa1\xa9ic_\xff\xa1
<>(((
u\xa3r_phys
 +
\xf9
 - 1\xe8>> 16\xe8&
BYTE
);

319 i\xe0(
t\xdd_\x92d
 !\xf0
t\xdd_addr
)

320
	`\xb7nic
("Try\x9ag\x81\xd8DMA\x87\xfcos\xa064K bound\xacy",
t\xdd_addr
);

323
	`lock
();

324
	`p\xd\xf9_out
(
DMA_M2
,
mode
);

325
	`p\xd\xf9_out
(
DMA_M1
,
mode
);

326
	`p\xd\xf9_out
(
DMA_ADDR
,
low_addr
);

327
	`p\xd\xf9_out
(
DMA_ADDR
,
high_addr
);

328
	`p\xd\xf9_out
(
DMA_TOP
,
t\xdd_addr
);

329
	`p\xd\xf9_out
(
DMA_COUNT
,
low_\xf9
);

330
	`p\xd\xf9_out
(
DMA_COUNT
,
high_\xf9
);

331
	`u\xc6ock
();

332
	`p\xd\xf9_out
(
DMA_INIT
, 2);

333
	}
}

338 
	$\xa1\xa\xf9_m\xd9\xdc
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

351 
m\xd9\xdc_b\x99
,
rug
;

352 
	`\xa3nd_mess
(\xe8
n\xdbx\xfb\xb1
;

354
	`lock
();

355
m\xd9\xdc_b\x99
 = 1 << (
\xe5
->
\xe6_drive
 + 4);

356
m\xd9\xdc_g\xd\xe6
 =
m\xd9\xdc_b\x99
 |
ENABLE_INT
 |
\xe5
->
\xe6_drive
;

357 i\xe0(
m\xd9\xdc_\xa1\xa9us
 &
\xb4ev_m\xd9\xdc
)

358
m\xd9\xdc_g\xd\xe6
 |\xf0
\xb4ev_m\xd9\xdc
;

359
rug
 =
m\xd9\xdc_\xa1\xa9us
 &
m\xd9\xdc_b\x99
;

360
	`p\xd\xf9_out
(
DOR
,
m\xd9\xdc_g\xd\xe6
);

361
m\xd9\xdc_\xa1\xa9us
 =
m\xd9\xdc_g\xd\xe6
;

362
\xb4ev_m\xd9\xdc
 =
m\xd9\xdc_b\x99
;

363
	`u\xc6ock
();

366 i\xe0(
rug
)

368
	`\x\xe3ock_mess
(
m\x8c_\xa3tup
[
d
],
\xa3nd_mess
);

369
	`\xbb\xfbive
(
CLOCK
, &
mess
);

370
	}
}

375 
	$\xa1\xdd_m\xd9\xdc
(\xe8
n\xdbx\xfb\xb1
 {

381 i\xe0((
m\xd9\xdc_g\xd\xe6
 &
MOTOR_MASK
\xe8!\xf0(
m\xd9\xdc_\xa1\xa9us
 & MOTOR_MASK)) {

382
	`p\xd\xf9_out
(
DOR
,
m\xd9\xdc_g\xd\xe6
);

383
m\xd9\xdc_\xa1\xa9us
 =
m\xd9\xdc_g\xd\xe6
;

385
	}
}

390 
	$\xa3ek
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

395 
r
;

398 i\xe0(
\xe5
->
\xe6_\xfflib\xbfti\xda
 =\xf0
UNCALIBRATED
)

399 i\xe0(
	`\xbb\xf\xe6ib\xbf\x8b
(
\xe5
\xe8!\xf0
OK
)

400  (
ERR_SEEK
);

401 i\xe0(
\xe5
->
\xe6_curcyl
 =\xf0\xe5->
\xe6_cyl\x9ad\x94
)

402  (
OK
);

405
	`fdc_out
(
FDC_SEEK
);

406
	`fdc_out
((
\xe5
->
\xe6_h\x97d
 << 2\xe8| fp->
\xe6_drive
);

407
	`fdc_out
(
\xe5
->
\xe6_cyl\x9ad\x94
 *
\xa1\x95s_\xb3r_cyl
[
d
]);

408 i\xe0(
\xc3ed_\xbb\xa3t
)

409  (
ERR_SEEK
);

410
	`\xbb\xfbive
(
HARDWARE
, &
mess
);

413
	`fdc_out
(
FDC_SENSE
);

414
r
 =
	`fdc_\xbbsu\xc9s
(
\xe5
);

415 i\xe0((
\xe5
->
\xe6_\xbbsu\xc9s
[
ST0
] &
ST0_BITS
\xe8!\xf0
SEEK_ST0
)

416
r
 =
ERR_SEEK
;

417 i\xe0(
\xe5
->
\xe6_\xbbsu\xc9s
[
ST1
] !\xf0\xe5->
\xe6_cyl\x9ad\x94
 *
\xa1\x95s_\xb3r_cyl
[
d
])

418
r
 =
ERR_SEEK
;

419 i\xe0(
r
 !\xf0
OK
)

420 i\xe0(
	`\xbb\xf\xe6ib\xbf\x8b
(
\xe5
\xe8!\xf0
OK
)

421  (
ERR_SEEK
);

422  (
r
);

423
	}
}

428 
	$\x8c\x\xafs\xe3r
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

431 
r
,
s
,
\xdd
;

432 
\xdeiv\x91ti
;

435 i\xe0(
\xe5
->
\xe6_\xfflib\xbfti\xda
 =\xf0
UNCALIBRATED
)

436  (
ERR_TRANSFER
);

437 i\xe0(((
m\xd9\xdc_\xa1\xa9us
 >> (
\xe5
->
\xe6_drive
 + 4)) & 1) == 0)

438  (
ERR_TRANSFER
);

441 i\xe0(
pc_\xa9
)

442
	`p\xd\xf9_out
(
FDC_RATE
,
\xbf\x8b
[
d
]);

445
\xdd
 = (
\xe5
->
\xe6_\xddcode
 =\xf0
DISK_READ
 ?
FDC_READ
 :
FDC_WRITE
);

446
	`fdc_out
(
\xdd
);

447
	`fdc_out
((
\xe5
->
\xe6_h\x97d
 << 2\xe8| fp->
\xe6_drive
);

448
	`fdc_out
(
\xe5
->
\xe6_cyl\x9ad\x94
);

449
	`fdc_out
(
\xe5
->
\xe6_h\x97d
);

450
	`fdc_out
(
\xe5
->
\xe6_\xa3\xf9\xdc
);

451
	`fdc_out
(
\xa1\xa9ic_\xff\xa1
<>(
\xcbn
[
SECTOR_SIZE
 /
DIVISOR
]));

452
	`fdc_out
(
\xc4_\xa3\xf9\xdcs
[
d
]);

453
	`fdc_out
(
g\xad
[
d
]);

454
	`fdc_out
(
DTL
);

457 i\xe0(
\xc3ed_\xbb\xa3t
)

458  (
ERR_TRANSFER
);

459
	`\xbb\xfbive
(
HARDWARE
, &
mess
);

462
r
 =
	`fdc_\xbbsu\xc9s
(
\xe5
);

463 i\xe0(
r
 !\xf0
OK
)

464  (
r
);

465 i\xe0((
\xe5
->
\xe6_\xbbsu\xc9s
[
ST1
] &
BAD_SECTOR
\xe8|| (\xe5->\xe6_\xbbsu\xc9s[
ST2
] &
BAD_CYL
))

466
\xe5
->
\xe6_\xfflib\xbfti\xda
 =
UNCALIBRATED
;

467 i\xe0(
\xe5
->
\xe6_\xbbsu\xc9s
[
ST1
] &
WRITE_PROTECT
) {

468
	`\xb4\x9\xa9f
("Disk\x91\x8b i\xc0driv\x90%d i\xa0wr\x99\x90\xb4\xd9e\xf9ed.\n",
\xe5
->
\xe6_drive
);

469  (
ERR_WR_PROTECT
);

471 i\xe0((
\xe5
->
\xe6_\xbbsu\xc9s
[
ST0
] &
ST0_BITS
\xe8!\xf0
TRANS_ST0
)

472  (
ERR_TRANSFER
);

473 i\xe0(
\xe5
->
\xe6_\xbbsu\xc9s
[
ST1
] | fp->\xe6_\xbbsu\xc9s[
ST2
])

474  (
ERR_TRANSFER
);

477
s
 = (
\xe5
->
\xe6_\xbbsu\xc9s
[
ST_CYL
] - fp->
\xe6_cyl\x9ad\x94
\xe8*
NR_HEADS
 *
\xc4_\xa3\xf9\xdcs
[
d
];

478
s
 +\xf0(
\xe5
->
\xe6_\xbbsu\xc9s
[
ST_HEAD
] - fp->
\xe6_h\x97d
\xe8*
\xc4_\xa3\xf9\xdcs
[
d
];

479
s
 +\xf0(
\xe5
->
\xe6_\xbbsu\xc9s
[
ST_SEC
] - fp->
\xe6_\xa3\xf9\xdc
);

481 i\xe0(
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
s
 *
SECTOR_SIZE
\xe8!\xf0
\xe5
->
\xe6_cou\xc1
)

482  (
ERR_TRANSFER
);

483  (
OK
);

484
	}
}

489 
	$fdc_\xbbsu\xc9s
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

492 
i
,
j
,
\xa1\xa9us
,
\xbbady
;

495 
i
 = 0; i <
MAX_RESULTS
; i++) {

496
\xbbady
 =
FALSE
;

497 
j
 = 0; j <
MAX_FDC_RETRY
; j++) {

498
	`p\xd\xf9_\x9a
(
FDC_STATUS
, &
\xa1\xa9us
);

499 i\xe0(
\xa1\xa9us
 &
MASTER
) {

500
\xbbady
 =
TRUE
;

504 i\xe0(
\xbbady
 =\xf0
FALSE
)

505  (
ERR_STATUS
);

507 i\xe0((
\xa1\xa9us
 &
CTL_BUSY
) == 0)

508  (
OK
);

509 i\xe0((
\xa1\xa9us
 &
DIRECTION
) == 0)

510  (
ERR_STATUS
);

511
	`p\xd\xf9_\x9a
(
FDC_DATA
, &
\xa1\xa9us
);

512
\xe5
->
\xe6_\xbbsu\xc9s
[
i
] =
\xa1\xa9ic_\xff\xa1
<>(
\xa1\xa9us
 &
BYTE
);

516
\xc3ed_\xbb\xa3t
 =
TRUE
;

517  (
ERR_STATUS
);

518
	}
}

523 
	$fdc_out
(
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

529 
\xbb\x8c\x9bs
,
r
;

531 i\xe0(
\xc3ed_\xbb\xa3t
)

533
\xbb\x8c\x9bs
 =
MAX_FDC_RETRY
;

536 
\xbb\x8c\x9bs
-- > 0) {

537
	`p\xd\xf9_\x9a
(
FDC_STATUS
, &
r
);

538
r
 &\xf0(
MASTER
 |
DIRECTION
);

539 i\xe0(
r
 !\xf0
CTL_ACCEPTING
)

541
	`p\xd\xf9_out
(
FDC_DATA
,
v\x\xab
);

546
\xc3ed_\xbb\xa3t
 =
TRUE
;

547
	}
}

552 
	$\xbb\xf\xe6ib\xbf\x8b
(
\xe6\xddpy
 *
\xe5
\xe8
n\xdbx\xfb\xb1
 {

562 
r
;

564
	`\xa1\xa\xf9_m\xd9\xdc
(
\xe5
);

565
	`fdc_out
(
FDC_RECALIBRATE
);

566
	`fdc_out
(
\xe5
->
\xe6_drive
);

567 i\xe0(
\xc3ed_\xbb\xa3t
)

568  (
ERR_SEEK
);

569
	`\xbb\xfbive
(
HARDWARE
, &
mess
);

572
	`fdc_out
(
FDC_SENSE
);

573
r
 =
	`fdc_\xbbsu\xc9s
(
\xe5
);

574
\xe5
->
\xe6_curcyl
 = -1;

575 i\xe0(
r
 !\xf0
OK
 ||

576 (
\xe5
->
\xe6_\xbbsu\xc9s
[
ST0
] &
ST0_BITS
\xe8!\xf0
SEEK_ST0
 || fp->\xe6_\xbbsu\xc9s[
ST_PCN
] != 0) {

578
\xc3ed_\xbb\xa3t
 =
TRUE
;

579
\xe5
->
\xe6_\xfflib\xbfti\xda
 =
UNCALIBRATED
;

580  (
ERR_RECALIBRATE
);

583
\xe5
->
\xe6_\xfflib\xbfti\xda
 =
CALIBRATED
;

584  (
OK
);

586
	}
}

591 
	$\xbb\xa3t
(\xe8
n\xdbx\xfb\xb1
 {

596 
i
,
r
,
\xa1\xa9us
;

597 
\xe6\xddpy
 *
\xe5
;

599
\xc3ed_\xbb\xa3t
 =
FALSE
;

600
	`lock
();

601
m\xd9\xdc_\xa1\xa9us
 = 0;

602
m\xd9\xdc_g\xd\xe6
 = 0;

603
	`p\xd\xf9_out
(
DOR
, 0);

604
	`p\xd\xf9_out
(
DOR
,
ENABLE_INT
);

605
	`u\xc6ock
();

606
	`\xbb\xfbive
(
HARDWARE
, &
mess
);

609
\xe5
 = &
\xe6\xddpy
[0];

610
\xe5
->
\xe6_\xbbsu\xc9s
[0] = 0;

611
	`fdc_out
(
FDC_SENSE
);

612
r
 =
	`fdc_\xbbsu\xc9s
(
\xe5
);

613
\xa1\xa9us
 =
\xe5
->
\xe6_\xbbsu\xc9s
[0] &
BYTE
;

616
	`fdc_out
(
FDC_SPECIFY
);

617
	`fdc_out
(
SPEC1
);

618
	`fdc_out
(
SPEC2
);

620 
i
 = 0; i <
NR_DRIVES
; i++)

621
\xe6\xddpy
[
i
].
\xe6_\xfflib\xbfti\xda
 =
UNCALIBRATED
;

622
	}
}

627 
	$\x\xe3ock_mess
(
ticks
, (*
func
)()\xe8
n\xdbx\xfb\xb1
 {

630
mess
.
m_ty\xb3
 =
SET_ALARM
;

631
	`\x\xe3ock_\xb4oc_\xc4
(
mess
\xe8\xf0
FLOPPY
;

632
	`d\x96\x8f_ticks
(
mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
ticks
);

633
	`func_to_\xff\x\xfb
(
mess
\xe8\xf0
func
;

634
	`\xa3nd\xbbc
(
CLOCK
, &
mess
);

635
	}
}

640 
	$\xa3nd_mess
(\xe8
n\xdbx\xfb\xb1
 {

643
mess
.
m_ty\xb3
 =
MOTOR_RUNNING
;

644
	`\xa3nd
(
FLOPPY
, &
mess
);

645
	}
}

	@kernel/glo.hpp

1 #\xb4agm\xa8
\xda\xfb


4 #i\xe2de\xe0
EXTERN


5 
	#EXTERN


	)

10 
	~"../h/ty\xb3.h\xb5
"

11 
	~"cڡ.h\xb5
"

15
EXTERN

\xbb\xae_time

\xbb\xaetime
;

16
EXTERN

\xbb\xae_time


17
	glo\xa1_ticks
;

20
EXTERN

	gx\x9aim
::
pid_t

cur_\xb4oc
;

21
EXTERN

	gx\x9aim
::
pid_t

\xb4ev_\xb4oc
;

22
EXTERN
 
	gsig_\xb4ocs
;

23
EXTERN

mes\xa7ge

	g\x9\xa9_mess
;

26
EXTERN

bo\xde

	g\xdeiv\x91ti
;

27
EXTERN

bo\xde

	gpc_\xa9
;

29
EXTERN
 
	gcu\xbc\x92t_\xfdu
;

32
EXTERN
 
	st_\xa1ack
 {

34 
	m\xa1k
[
TASK_STACK_BYTES
 / ()];

35 }
	gt_\xa1ack
[
NR_TASKS
 - 1];

37
EXTERN
 
	gk_\xa1ack
[
K_STACK_BYTES
];

	@kernel/idt64.cpp

1 
	~"../\x9a\x\xe3ude/defs.h
"

2 
	~"cڡ.h\xb5
"

3 
	~"ty\xb3.h\xb5
"

4 
	~<c\xa1ddef
>

5 
	~<c\xa1d\x9\xa9
>

13 
	sidt_\x92\x8cy
 {

14
u16_t

	moff\xa3t_low
;

15
u16_t

	m\xa3\xcb\xf9\xdc
;

16
u8_t

	mi\xa1
;

17
u8_t

	mty\xb3_\xa9\x8c
;

18
u16_t

	moff\xa3t_mid
;

19
u32_t

	moff\xa3t_high
;

20
u32_t

	mz\x94o
;

21 }
	gPACKED
;

23 
	sidt_\xb1r
 {

24
u16_t

	mlim\x99
;

25
u64_t

	mba\xa3
;

26 }
	gPACKED
;

28 
	stss64
 {

29
u32_t

	m\xbb\xa3rved0
;

30
u64_t

	mr\xa50
;

31
u64_t

	mr\xa51
;

32
u64_t

	mr\xa52
;

33
u64_t

	m\xbb\xa3rved1
;

34
u64_t

	mi\xa11
;

35
u64_t

	mi\xa12
;

36
u64_t

	mi\xa13
;

37
u64_t

	mi\xa14
;

38
u64_t

	mi\xa15
;

39
u64_t

	mi\xa16
;

40
u64_t

	mi\xa17
;

41
u64_t

	m\xbb\xa3rved2
;

42
u16_t

	m\xbb\xa3rved3
;

43
u16_t

	mio_m\xad_ba\xa3
;

44 }
	gPACKED
;

47 
u8_t

	g\x9\xa9_\xa1ack
[4096];

49 
tss64

	gk\x94\xc3l_tss
;

50 
idt_\x92\x8cy

	gidt
[256];

51 
idt_\xb1r

	gidt_desc
;

54 
	$i\xa4_de\xe7u\xc9
(\xe8
n\xdbx\xfb\xb1
;

55 
	$i\xa4_\x\xe3ock
(\xe8
n\xdbx\xfb\xb1
;

56 
	$i\xa4_keyb\xd\xe4d
(\xe8
n\xdbx\xfb\xb1
;

65 
	$idt_\xa3t_g\xa9e
(
n
, (*
h\x\xafd\xcbr
)(\xe8
n\xdbx\xfb\xb1
, 
i\xa1
)\x82oexcept {

67
u\x9\xa964_t

addr
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<u\x9at64_t>\xd4e\x9a\x8b\xbd\xbbt_\xff\xa1<
u\x9a\x8d\x8c_t
>(
h\x\xafd\xcbr
));

68
idt
[
n
].
off\xa3t_low
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
addr
 & 0xFFFF);

69
idt
[
n
].
\xa3\xcb\xf9\xdc
 = 0x08;

70
idt
[
n
].
i\xa1
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa98_t
>(ist & 0x7);

71
idt
[
n
].
ty\xb3_\xa9\x8c
 = 0x8E;

72
idt
[
n
].
off\xa3t_mid
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((
addr
 >> 16) & 0xFFFF);

73
idt
[
n
].
off\xa3t_high
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa932_t
>((
addr
 >> 32) & 0xFFFFFFFF);

74
idt
[
n
].
z\x94o
 = 0;

75
	}
}

80 
	$idt_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

81 
i
;

85
k\x94\xc3l_tss
.
i\xa11
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa964_t
>(

86
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\x9at_\xa1ack
 + (int_stack)));

87
k\x94\xc3l_tss
.
io_m\xad_ba\xa3
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((
tss64
));

89 
i
 = 0; i < 256; i++)

90
	`idt_\xa3t_g\xa9e
(
i
,
i\xa4_de\xe7u\xc9
, 1);

92
	`idt_\xa3t_g\xa9e
(
CLOCK_VECTOR
,
i\xa4_\x\xe3ock
, 1);

93
	`idt_\xa3t_g\xa9e
(
KEYBOARD_VECTOR
,
i\xa4_keyb\xd\xe4d
, 1);

95
idt_desc
.
lim\x99
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>((
idt
) - 1);

96
idt_desc
.
ba\xa3
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa964_t
>\xd4e\x9a\x8b\xbd\xbbt_\xff\xa1<
u\x9a\x8d\x8c_t
>(
idt
));

98
asm
 vީ\x9ee("lid\x88%0" : : "m"(
idt_desc
));

99
asm
 volatile("ltr %%ax" : : "a"(0x28));

100
	}
}

	@kernel/klib64.cpp

1 
	~"../h/cڡ.h\xb5
"

2 
	~"../h/ty\xb3.h\xb5
"

3 
	~"../\x9a\x\xe3ude/defs.h
"

4 
	~"cڡ.h\xb5
"

5 
	~"glo.h\xb5
"

6 
	~"\xb4oc.h\xb5
"

7 
	~"ty\xb3.h\xb5
"

8 
	~<c\xa1d\x9\xa9
>

9 
	~<c\xa1ddef
>

22 
	$phys_c\xddy
(*
d\xa1
, cڡ *
\xa4c
,
size_t

n
\xe8
n\xdbx\xfb\xb1
 {

34 *
d\xa1_out
 =
d\xa1
;

35 cڡ *
\xa4c_out
 =
\xa4c
;

36
size_t

n_out
 =
n
;

37
asm
 volatile("rep movsb"

38 : "+S"(
\xa4c_out
), "+D"(
d\xa1_out
), "+c"(
n_out
)

41
	}
}

54 
	$\xfd_mess
(
\xa4c_\xb4oc_\xc4
, cڡ *
\xa4c_\xb7yl\xdfd_\xb1r
, *
d\xa1_\xb7yl\xdfd_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

60
mes\xa7ge
*
d\xa1_msg
 =
\xa1\xa9ic_\xff\xa1
<mes\xa7ge*>(
d\xa1_\xb7yl\xdfd_\xb1r
);

61 cڡ
mes\xa7ge
*
\xa4c_msg
 =
\xa1\xa9ic_\xff\xa1
<cڡ mes\xa7ge*>(
\xa4c_\xb7yl\xdfd_\xb1r
);

63
d\xa1_msg
->
m_sour\xfb
 =
\xa4c_\xb4oc_\xc4
;

73 *
d_by\x8bs
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
d\xa1_msg
) + ();

74 cڡ *
s_by\x8bs
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xa4c_msg
) + ();

75
size_t

by\x8bs_to_c\xddy
 = (
mes\xa7ge
) - ();

77
asm
 volatile("rep movsb"

78 : "+S"(
s_by\x8bs
), "+D"(
d_by\x8bs
), "+c"(
by\x8bs_to_c\xddy
)

81
	}
}

90 
	$p\xd\xf9_out
(
p\xd\xf9
, 
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

91
asm
 vީ\x9ee("outb %b0, (%w1)" : : "a"(
v\x\xab
), "d"(
p\xd\xf9
));

92
	}
}

101 
	$p\xd\xf9_\x9a
(
p\xd\xf9
, *
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

102 
tmp
;

103
asm
 vީ\x9ee("\x9ab (%w1), %b0" : "\xf7"(
tmp
\xe8: "d"(
p\xd\xf9
));

104 *
v\x\xab
 =
tmp
;

105
	}
}

114 
	$p\xd\xf9w_out
(
p\xd\xf9
, 
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

115
asm
 vީ\x9ee("outw %w0, (%w1)" : : "a"(
v\x\xab
), "d"(
p\xd\xf9
));

116
	}
}

125 
	$p\xd\xf9w_\x9a
(
p\xd\xf9
, *
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

126 
tmp
;

127
asm
 vީ\x9ee("\x9aw (%w1), %w0" : "\xf7"(
tmp
\xe8: "d"(
p\xd\xf9
));

128 *
v\x\xab
 =
tmp
;

129
	}
}

135 
u64_t

	glockv\xac
;

136 
	$lock
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("pushfq\n\t\xfei\n\\x8d\xdd %0" : "=m"(
lockv\xac
)::"mem\xdcy");
	}
}

142 
	$u\xc6ock
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("\xa1i");
	}
}

148 
	$\xbb\xa1\xd\xfb
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("pushfq\n\\x8d\xddfq" : : "m"(
lockv\xac
\xe8: "mem\xdcy");
	}
}

158 
	$bu\x9ed_sig
(
sig_\x9afo
 *
d\xa1
, 
\xb4oc
 *
\xbd
, 
sig
\xe8
n\xdbx\xfb\xb1
 {

159
d\xa1
->
signo
 =
sig
;

160
d\xa1
->
sigp\xfdsw
.
r\x9d
 =
\xbd
->
p_p\xfdsw
.rip;

161
d\xa1
->
sigp\xfdsw
.
r\xe6ags
 =
\xbd
->
p_p\xfdsw
.rflags;

162
	}
}

168 
	$g\x91_chrome
(\xe8
n\xdbx\xfb\xb1
 {  0;
	}
}

179 
	$vid_c\xddy
(*
buf
, 
ba\xa3_\xa3g
, 
off
,
size_t

w\xdcds
\xe8
n\xdbx\xfb\xb1
 {

186
u\x9\xa916_t
 *
d\xa1
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<u\x9at16_t*>\xd4e\x9a\x8b\xbd\xbbt_\xff\xa1<
u\x9a\x8d\x8c_t
>(
ba\xa3_\xa3g
\xe8+
off
);

188 i\xe0(!
buf
) {

190
u\x9\xa916_t

b\xc\xe2k_ch\xac
 = 0x0700;

191
size_t

i
;

192 
i
 = 0; i <
w\xdcds
; ++i) {

193
d\xa1
[
i
] =
b\xc\xe2k_ch\xac
;

198 cڡ
u\x9\xa916_t
 *
\xa4c
 =
\xa1\xa9ic_\xff\xa1
<cڡ u\x9at16_t*>(
buf
);

201
asm
 volatile("rep movsw"

202 : "+S"(
\xa4c
), "+D"(
d\xa1
), "+c"(
w\xdcds
)

205
	}
}

214 
	$g\x91_by\x8b
(
\xa3g
,
u\x9a\x8d\x8c_t

off
\xe8
n\xdbx\xfb\xb1
 {

215 *
p
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
off
);

216 ()
\xa3g
;

217  *
p
;

218
	}
}

224 
	$\xbbbo\xd9
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("h\xc9");
	}
}

230 
	$w\xbbbo\xd9
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("h\xc9");
	}
}

231 ()
	g\xa4c_\x\xe3ick
;

232 ()
	gd\xa1_\x\xe3ick
;

233 *
	gd
 =
d\xa1_off
;

234 cڡ *
	gs
 =
\xa4c_off
;

235
	gd
[0] =
\xa4c
;

236
asm
 volatile("lea 4(%[dst]), %%rdi\n\t"

241 : [
d\xa1
] "r"(
d
), [
\xa4c
] "r"(
	gs
), [
cou\xc1
] "i"(
	gMESS_SIZE
 - 4)

252 
	$p\xd\xf9_out
(
p\xd\xf9
, 
v\x\xab
) {

253
asm
 vީ\x9ee("outb %b0, (%w1)" : : "a"(
v\x\xab
), "d"(
p\xd\xf9
));

254
	}
}

263 
	$p\xd\xf9_\x9a
(
p\xd\xf9
, *
v\x\xab
) {

264 
tmp
;

265
asm
 vީ\x9ee("\x9ab (%w1), %b0" : "\xf7"(
tmp
\xe8: "d"(
p\xd\xf9
));

266 *
v\x\xab
 =
tmp
;

267
	}
}

276 
	$p\xd\xf9w_out
(
p\xd\xf9
, 
v\x\xab
) {

277
asm
 vީ\x9ee("outw %w0, (%w1)" : : "a"(
v\x\xab
), "d"(
p\xd\xf9
));

278
	}
}

287 
	$p\xd\xf9w_\x9a
(
p\xd\xf9
, *
v\x\xab
) {

288 
tmp
;

289
asm
 vީ\x9ee("\x9aw (%w1), %w0" : "\xf7"(
tmp
\xe8: "d"(
p\xd\xf9
));

290 *
v\x\xab
 =
tmp
;

291
	}
}

297 
u64_t

	glockv\xac
;

298 
	$lock
(\xe8{
asm
 vީ\x9ee("pushfq\n\t\xfei\n\\x8d\xdd %0" : "=m"(
lockv\xac
)::"mem\xdcy");
	}
}

304 
	$u\xc6ock
(\xe8{
asm
 vީ\x9ee("\xa1i");
	}
}

310 
	$\xbb\xa1\xd\xfb
(\xe8{
asm
 vީ\x9ee("push %0\n\\x8d\xddfq" : : "m"(
lockv\xac
\xe8: "mem\xdcy");
	}
}

320 
	$bu\x9ed_sig
(
sig_\x9afo
 *
d\xa1
, 
\xb4oc
 *
\xbd
, 
sig
) {

321
d\xa1
->
signo
 =
sig
;

322
d\xa1
->
sigp\xfdsw
.
r\x9d
 =
\xbd
->
p_p\xfdsw
.rip;

323
d\xa1
->
sigp\xfdsw
.
r\xe6ags
 =
\xbd
->
p_p\xfdsw
.rflags;

324
	}
}

330 
	$g\x91_chrome
(\xe8{  0;
	}
}

341 
	$vid_c\xddy
(*
buf
, 
ba\xa3
, 
off
, 
w\xdcds
) {

342 i\xe0(!
buf
)

344
u16_t
 *
d\xa1
 = (u16_\x88*)(
u\xb1r_t
)(
ba\xa3
 +
off
);

345
u16_t
 *
\xa4c
 =
buf
;

346
asm
 volatile("rep movsw"

347 : "=S"(
\xa4c
), "=D"(
d\xa1
), "=c"(
w\xdcds
)

348 : "0"(
\xa4c
), "1"(
d\xa1
), "2"(
w\xdcds
)

350
	}
}

359 
	$g\x91_by\x8b
(
\xa3g
, 
off
) {

360 *
p
 = (*)(
u\xb1r_t
)
off
;

361 ()
\xa3g
;

362  *
p
;

363
	}
}

369 
	$\xbbbo\xd9
(\xe8{
asm
 vީ\x9ee("h\xc9");
	}
}

375 
	$w\xbbbo\xd9
(\xe8{
asm
 vީ\x9ee("h\xc9");
	}
}

378
u64_t

	g\xa5lim\x99
;

	@kernel/klib88.cpp

1 
	~"../\x9a\x\xe3ude/defs.h
"

2 
	~"cڡ.h\xb5
"

3 
	~"glo.h\xb5
"

4 
	~"\xb4oc.h\xb5
"

5 
	~"ty\xb3.h\xb5
"

6 
	~<c\xa1d\x9\xa9
>

7 
	~<c\xa1ddef
>

17
PUBLIC
 
	glockv\xac
 = 0;

19
PUBLIC
 
	g\xa5lim\x99
 = 0;

21
PUBLIC
 
	gtmp
 = 0;

23
PUBLIC
 
	g_vec_\x8fb\xcb
[142];

29
PUBLIC
 
	$phys_c\xddy
(*
d\xa1
, cڡ *
\xa4c
,
\xa1d
::
size_t

num_by\x8bs
\xe8
n\xdbx\xfb\xb1
 {

34 *
d
 =
\xa1\xa9ic_\xff\xa1
<*>(
d\xa1
);

35 cڡ *
s
 =
\xa1\xa9ic_\xff\xa1
<cڡ *>(
\xa4c
);

36 
num_by\x8bs
-- > 0) {

37 *
d
++ = *
s
++;

39
	}
}

44
PUBLIC
 
	$\xfd_mess
(
\xa4c_\xb4oc_\xc4
,
u\x9\xa964_t

\xa4c_phys_addr
,
mes\xa7ge
 *
\xa4c_msg_\xb1r
, u\x9at64_\x88
d\xa1_phys_addr
,

45
mes\xa7ge
 *
d\xa1_msg_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

47 ()
\xa4c_phys_addr
;

48 ()
d\xa1_phys_addr
;

50
d\xa1_msg_\xb1r
->
m_sour\xfb
 =
\xa4c_\xb4oc_\xc4
;

56 *
s
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(&
\xa4c_msg_\xb1r
->
m_ty\xb3
);

57 *
d
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(&
d\xa1_msg_\xb1r
->
m_ty\xb3
);

58
\xa1d
::
size_t

by\x8bs_to_c\xddy
 = (
mes\xa7ge
) - ();

59 
by\x8bs_to_c\xddy
-- > 0)

60 *
d
++ = *
s
++;

62
	}
}

67
PUBLIC
 
	$p\xd\xf9_out
(
p\xd\xf9
, 
v\x\xabue
\xe8
n\xdbx\xfb\xb1
 {

69
asm
 vީ\x9ee("outb %b0, %w1" : : "a"(
v\x\xabue
), "Nd"(
p\xd\xf9
));

70
	}
}

72
PUBLIC
 
	$p\xd\xf9_\x9a
(
p\xd\xf9
, *
v\x\xabue
\xe8
n\xdbx\xfb\xb1
 {

73 
v
;

74
asm
 vީ\x9ee("\x9ab %w1, %0" : "\xf7"(
v
\xe8: "Nd"(
p\xd\xf9
));

75 *
v\x\xabue
 =
v
;

76
	}
}

78
PUBLIC
 
	$p\xd\xf9w_out
(
p\xd\xf9
, 
v\x\xabue
\xe8
n\xdbx\xfb\xb1
 {

79
asm
 vީ\x9ee("outw %w0, %w1" : : "a"(
v\x\xabue
), "Nd"(
p\xd\xf9
));

80
	}
}

82
PUBLIC
 
	$p\xd\xf9w_\x9a
(
p\xd\xf9
, *
v\x\xabue
\xe8
n\xdbx\xfb\xb1
 {

83 
v
;

84
asm
 vީ\x9ee("\x9aw %w1, %0" : "\xf7"(
v
\xe8: "Nd"(
p\xd\xf9
));

85 *
v\x\xabue
 =
v
;

86
	}
}

91
PUBLIC
 
	$lock
(\xe8
n\xdbx\xfb\xb1
 {

93
asm
 vީ\x9ee("pushf\n\t\xfei\n\\x8d\xdd %0" : "\xf4"(
lockv\xac
)::"memory");

94
	}
}

96
PUBLIC
 
	$u\xc6ock
(\xe8
n\xdbx\xfb\xb1
 {

98
asm
 volatile("sti");

99
	}
}

101
PUBLIC
 
	$\xbb\xa1\xd\xfb
(\xe8
n\xdbx\xfb\xb1
 {

103
asm
 vީ\x9ee("push %0\n\\x8d\xddf" ::"r"(
lockv\xac
) : "memory");

104
	}
}

109
PUBLIC
 
	$bu\x9ed_sig
(
u16_t
 *
d\xa1
, 
\xb4oc
 *
\xbd
, 
sig
\xe8
n\xdbx\xfb\xb1
 {

113
d\xa1
[0] = (
u16_t
)
sig
;

114
d\xa1
[1] = (
u16_t
)
\xbd
->
p_p\xfdsw
.
r\x9d
;

115
d\xa1
[2] = 0;

116
d\xa1
[3] = (
u16_t
)
\xbd
->
p_p\xfdsw
.
r\xe6ags
;

117
	}
}

122
PUBLIC
 
	$csv
(
by\x8bs
\xe8
n\xdbx\xfb\xb1
 {

124 i\xe0(
\xa5lim\x99
 && ()(&
by\x8bs
) < splimit)

125
	`\xb7nic
("K\x94\xc3ȡack ov\x94run",
cur_\xb4oc
);

126
	}
}

128
PUBLIC
 
	$\xfc\x91
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

133
PUBLIC
 
	$g\x91_chrome
(\xe8
n\xdbx\xfb\xb1
 {

135 
v
;

136
asm
 vީ\x9ee("\x9a\x88$0x11; movb %%\xae, %0" : "\xf4"(
v
)::"ax");

137  (
v
 & 0x30) == 0x30 ? 0 : 1;

138
	}
}

143
PUBLIC
 
	$vid_c\xddy
(
u16_t
 *
buf
, 
ba\xa3
, 
off
, 
w\xdcds
\xe8
n\xdbx\xfb\xb1
 {

148
u16_t
 *
d\xa1
 = (u16_\x88*)((
u\xb1r_t
)
ba\xa3
 << 4\xe8+
off
;

149 i\xe0(
buf
 =\xf0
NIL_PTR
) {

150 
w\xdcds
-- > 0)

151 *
d\xa1
++ = 0x0700;

153 
w\xdcds
-- > 0)

154 *
d\xa1
++ = *
buf
++;

156
	}
}

161
PUBLIC
 
	$g\x91_by\x8b
(
\xa3g
, 
off
\xe8
n\xdbx\xfb\xb1
 {

163
u8_t
 *
p
 = (u8_\x88*)(((
u32_t
)
\xa3g
 << 4\xe8+
off
);

164  *
p
;

165
	}
}

170
PUBLIC
 
	$\xbbbo\xd9
(\xe8
n\xdbx\xfb\xb1
 {

172
asm
 volatile("cli; int $0x19" ::: "memory");

173
	}
}

175
PUBLIC
 
	$w\xbbbo\xd9
(\xe8
n\xdbx\xfb\xb1
 {
asm
 vީ\x9ee("\xfei; i\xc1 $0x16; i\xc1 $0x19" ::: "mem\xdcy");
	}
}

	@kernel/lattice_ipc.cpp

6 
	~"ωi\xfb_\x9dc.h\xb5
"

8 
	~"../h/cڡ.h\xb5
"

9 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

10 
	~"glo.h\xb5
"

11 
	~"\xc3t_driv\x94.h\xb5
"

12 
	~"schedu\xcb.h\xb5
"

13 
	~<sodium.h
>

15 
	~<\x\xabgܙhm
>

16 
	~<\xac\xbfy
>

17 
	~<\xfb\xb\xfao
>

18 
	~<chr\xdao
>

19 
	~<c\xdad\x99i\xda_v\xac\x9fb\xcb
>

20 
	~<c\xa1ddef
>

21 
	~<c\xa1r\x9ag
>

22 
	~<deque
>

23 
	~<mu\x8bx
>

24 
	~<\xa5\x\xaf
>

25 
	~<\xa1dex\xfb\xb1
>

26 
	~<sy\xa1em_\x94r\xdc
>

27 
	~<tu\xb6e
>

28 
	~<un\xdcd\x94ed_m\xad
>

29 
	~<ve\xf9\xdc
>

31 
	~"../h/\x94r\xdc.h\xb5
"

33
	g\xc7me\xa5a\xfb
 {

36
cڡex\xb4

	g\xa1d
::
size_t

NONCE_SIZE
 =
ωi\xfb
::
AEAD_NONCE_SIZE
;

39
cڡex\xb4

	g\xa1d
::
size_t

TAG_SIZE
 =
ωi\xfb
::
AEAD_TAG_SIZE
;

49 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

50
\xabad_\x92\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
\xb6a\x9a
,

51
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
ωi\xfb
::
AEAD_KEY_SIZE
>
key
,

52
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
,
NONCE_SIZE
> &
n\xda\xfb
) {

53 i\xe0(
sodium_\x9a\x99
() < 0) {

54
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium_init failed"};

56
\xbfndomby\x8bs_buf
(
n\xda\xfb
.
d\xa9a
(),\x82\xda\xfb.
size
());

58
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
c\x9dh\x94
(
\xb6a\x9a
.
size
(\xe8+
TAG_SIZE
);

59 
	gout_\xcbn
 = 0U;

60
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(

61
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x94
.
d\xa9a
()), &
out_\xcbn
,

62
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xb6a\x9a
.
d\xa9a
()),\x85Ϛ.
size
(),
nuαr
, 0,\x82ullptr,

63
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
()),
key
.data());

64
	gc\x9dh\x94
.
\xbbsize
(
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
out_\xcbn
));

65 
	gc\x9dh\x94
;

76 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>

77
\xabad_de\xfcy\xb1
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
c\x9dh\x94
,

78
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
ωi\xfb
::
AEAD_KEY_SIZE
>
key
,

79
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
) {

80 i\xe0(
sodium_\x9a\x99
() < 0) {

81
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
{"sodium_init failed"};

83
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xb6a\x9a
(
c\x9dh\x94
.
size
(\xe8-
TAG_SIZE
);

84 
	gout_\xcbn
 = 0U;

85 i\xe0(
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_de\xfcy\xb1
(

86
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xb6a\x9a
.
d\xa9a
()), &
out_\xcbn
,
nuαr
,

87
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
c\x9dh\x94
.
d\xa9a
()), c\x9dh\x94.
size
(),
nuαr
, 0,

88
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
n\xda\xfb
.
d\xa9a
()),
key
.data()) != 0) {

91
	g\xb6a\x9a
.
\xbbsize
(
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
out_\xcbn
));

92 
	g\xb6a\x9a
;

97
\xc7me\xa5a\xfb

	gωi\xfb
 {

103
G\xb\xe5h

	gg_g\xb\xe5h
;

106 
	g\xa1d
::
mu\x8bx

g_\x9dc_mu\x8bx
;

108 
	g\xa1d
::
c\xdad\x99i\xda_v\xac\x9fb\xcb

g_\x9dc_cv
;

114
	gCh\x\xaf\xc3l
 &
	gG\xb\xe5h
::
c\xda\xc3\xf9
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
) {

115 aut\xd8
key
 =
\xa1d
::
make_tu\xb6e
(
\xa4c
,
d\xa1
,
node_id
);

116 aut\xd8
	g\x99
 =
edges_
.
f\x9ad
(
key
);

117 i\xe0(
	g\x99
 !\xf0
edges_
.
\x92d
()) {

118 
\x99
->
\xa3c\xdad
;

120
Ch\x\xaf\xc3l

	gch
{};

121
	gch
.
	g\xa4c
 =
\xa4c
;

122
	gch
.
	gd\xa1
 =
d\xa1
;

123
	gch
.
	gnode_id
 =
node_id
;

124
	gedges_
.
em\xb6a\xfb
(
key
,
\xa1d
::
move
(
ch
));

125 
	gedges_
[
key
];

128
Ch\x\xaf\xc3l
 *
	gG\xb\xe5h
::
f\x9ad
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
\xe8
n\xdbx\xfb\xb1
 {

129 i\xe0(
node_id
 !\xf0
ANY_NODE
) {

130 aut\xd8
key
 =
\xa1d
::
make_tu\xb6e
(
\xa4c
,
d\xa1
,
node_id
);

131 aut\xd8
	g\x99
 =
edges_
.
f\x9ad
(
key
);

132 i\xe0(
	g\x99
 !\xf0
edges_
.
\x92d
()) {

133  &
\x99
->
\xa3c\xdad
;

136 aut\xd8&[
k
,
ch
] :
edges_
) {

137 i\xe0(
\xa1d
::
g\x91
<0>(
k
\xe8=\xf0
\xa4c
 && std::g\x91<1>(k\xe8=\xf0
d\xa1
) {

138  &
ch
;

142 
	gnuαr
;

145
bo\xde

	gG\xb\xe5h
::
is_li\xa1\x92\x9ag
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
 {

146 aut\xd8
\x99
 =
li\xa1\x92\x9ag_
.
f\x9ad
(
pid
);

147 
	g\x99
 !\xf0
li\xa1\x92\x9ag_
.
\x92d
(\xe8&&
\x99
->
\xa3c\xdad
;

150 
	gG\xb\xe5h
::
\xa3t_li\xa1\x92\x9ag
(
x\x9aim
::
pid_t

pid
,
bo\xde

\xe6ag
\xe8
	gn\xdbx\xfb\xb1
 {
	gli\xa1\x92\x9ag_
[pid] = flag; }

159 
ωi\xfb_c\xda\xc3\xf9
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
) {

160 aut\xd8
kp_a
 =
pq\xfcy\xb1o
::
g\x92\x94\xa9e_key\xb7\x9c
();

161 aut\xd8
	gkp_b
 =
pq\xfcy\xb1o
::
g\x92\x94\xa9e_key\xb7\x9c
();

162 aut\xd8
	g\xa3\xfc\x91_by\x8bs
 =
pq\xfcy\xb1o
::
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
kp_a
,
kp_b
);

164 aut\xd8&
	gfwd
 =
g_g\xb\xe5h
.
c\xda\xc3\xf9
(
\xa4c
,
d\xa1
,
node_id
);

165 aut\xd8&
	gbwd
 =
g_g\xb\xe5h
.
c\xda\xc3\xf9
(
d\xa1
,
\xa4c
,
node_id
);

166
	g\xa1d
::
c\xddy
(
\xa3\xfc\x91_by\x8bs
.
beg\x9a
(), se\xfc\x91_by\x8bs.
\x92d
(),
fwd
.
key
.begin());

167
	g\xa1d
::
c\xddy
(
\xa3\xfc\x91_by\x8bs
.
beg\x9a
(), se\xfc\x91_by\x8bs.
\x92d
(),
bwd
.
key
.begin());

168 
	gOK
;

174 
ωi\xfb_li\xa1\x92
(
x\x9aim
::
pid_t

pid
\xe8{
g_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
\xd5id,
\x8cue
); }

185 
ωi\xfb_\xa3nd
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
, cڡ
mes\xa7ge
 &
msg
,
IpcF\xcfgs

\xe6ags
) {

186
Ch\x\xaf\xc3l
 *
	gch
 =
g_g\xb\xe5h
.
f\x9ad
(
\xa4c
,
d\xa1
,
ANY_NODE
);

187 i\xe0(!
	gch
) {

188
	gch
 = &
g_g\xb\xe5h
.
c\xda\xc3\xf9
(
\xa4c
,
d\xa1
,
\xc3t
::
lo\xf\xe6_node
());

192 i\xe0(
	gch
->
	gnode_id
 !\xf0
\xc3t
::
lo\xf\xe6_node
()) {

193
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
,
NONCE_SIZE
>
n\xda\xfb
{};

194
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xb6a\x9a
((
msg
));

195
	g\xa1d
::
mem\xfdy
(
\xb6a\x9a
.
d\xa9a
(), &
msg
, (msg));

196 aut\xd8
	gc\x9dh\x94
 =
\xabad_\x92\xfcy\xb1
(
\xb6a\x9a
,
ch
->
key
,
n\xda\xfb
);

198
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
pkt
((
x\x9aim
::
pid_t
\xe8* 2 +
n\xda\xfb
.
size
(\xe8+
c\x9dh\x94
.size());

199 aut\xd8*
	gids
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
x\x9aim
::
pid_t
 *>(
pkt
.
d\xa9a
());

200
	gids
[0] =
\xa4c
;

201
	gids
[1] =
d\xa1
;

202
	g\xa1d
::
mem\xfdy
(
pkt
.
d\xa9a
(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2,
n\xda\xfb
.d\xa9a(),\x82\xda\xfb.
size
());

203
	g\xa1d
::
mem\xfdy
(
pkt
.
d\xa9a
(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2 +
n\xda\xfb
.
size
(),
c\x9dh\x94
.data(),

204
c\x9dh\x94
.
size
());

206 i\xe0(
	g\xc3t
::
\xa3nd
(
ch
->
node_id
,
pkt
\xe8!\xf0
\xa1d
::
\x94rc
{}) {

207 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
EIO
);

209 
	gOK
;

213 i\xe0(
	gg_g\xb\xe5h
.
is_li\xa1\x92\x9ag
(
d\xa1
)) {

214
	g\xa1d
::
lock_gu\xacd

lk
(
g_\x9dc_mu\x8bx
);

215
	gg_g\xb\xe5h
.
	g\x9abox_
[
d\xa1
] =
msg
;

216
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
d\xa1
,
\xe7l\xa3
);

217
	gsched
::
schedu\xcbr
.
unblock
(
d\xa1
);

218
	gg_\x9dc_cv
.
n\xd9ify_\x\xabl
();

219
	gsched
::
schedu\xcbr
.
y\x9bld_to
(
d\xa1
);

220 
	gOK
;

224 i\xe0(
	g\xe6ags
 =\xf0
IpcF\xcfgs
::
NONBLOCK
) {

225 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E_TRY_AGAIN
);

229
	gch
->
	gqueue
.
push_back
(
msg
);

230 i\xe0(
	gg_g\xb\xe5h
.
is_li\xa1\x92\x9ag
(
d\xa1
)) {

231
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
d\xa1
,
\xe7l\xa3
);

232
	gsched
::
schedu\xcbr
.
unblock
(
d\xa1
);

233
	gg_\x9dc_cv
.
n\xd9ify_\x\xabl
();

235 
	gOK
;

246 
ωi\xfb_\xbbcv
(
x\x9aim
::
pid_t

pid
,
mes\xa7ge
 *
out
,
IpcF\xcfgs

\xe6ags
) {

248 aut\xd8
	gib
 =
g_g\xb\xe5h
.
\x9abox_
.
f\x9ad
(
pid
);

249 i\xe0(
	gib
 !\xf0
g_g\xb\xe5h
.
\x9abox_
.
\x92d
()) {

250 *
out
 =
ib
->
\xa3c\xdad
;

251
	gg_g\xb\xe5h
.
	g\x9abox_
.
\x94a\xa3
(
ib
);

252 
	gOK
;

256 aut\xd8&[
key
,
ch
] :
g_g\xb\xe5h
.
edges_
) {

257 i\xe0(
\xa1d
::
g\x91
<1>(
key
\xe8=\xf0
pid
 && std::g\x91<2>(key\xe8=\xf0
\xc3t
::
lo\xf\xe6_node
(\xe8&& !
ch
.
queue
.
em\xb1y
()) {

258 *
out
 =
ch
.
queue
.
\xe4\xdat
();

259
	gch
.
	gqueue
.
p\xdd_\xe4\xd\xa9
();

260 
	gOK
;

265 i\xe0(
	g\xe6ags
 =\xf0
IpcF\xcfgs
::
NONBLOCK
) {

266 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E_NO_MESSAGE
);

270
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

271
	g\xa1d
::
unique_lock

lk
(
g_\x9dc_mu\x8bx
);

272
ωi\xfb_li\xa1\x92
(
pid
);

273
	gsched
::
schedu\xcbr
.
block_\xda
(
pid
, -1);

274 aut\xd8
	gd\x97dl\x9\xab
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
(\xe8+ 100
ms
;

276 aut\xd8
	gib2
 =
g_g\xb\xe5h
.
\x9abox_
.
f\x9ad
(
pid
);

277 i\xe0(
	gib2
 !\xf0
g_g\xb\xe5h
.
\x9abox_
.
\x92d
()) {

278 *
out
 =
ib2
->
\xa3c\xdad
;

279
	gg_g\xb\xe5h
.
	g\x9abox_
.
\x94a\xa3
(
ib2
);

280
	gsched
::
schedu\xcbr
.
unblock
(
pid
);

281
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
pid
,
\xe7l\xa3
);

282 
	gOK
;

284 aut\xd8&[
key
,
ch
] :
g_g\xb\xe5h
.
edges_
) {

285 i\xe0(
\xa1d
::
g\x91
<1>(
key
\xe8=\xf0
pid
 && std::g\x91<2>(key\xe8=\xf0
\xc3t
::
lo\xf\xe6_node
() &&

286 !
ch
.
queue
.
em\xb1y
()) {

287 *
out
 =
ch
.
queue
.
\xe4\xdat
();

288
	gch
.
	gqueue
.
p\xdd_\xe4\xd\xa9
();

289
	gsched
::
schedu\xcbr
.
unblock
(
pid
);

290
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
pid
,
\xe7l\xa3
);

291 
	gOK
;

294 i\xe0(
	gg_\x9dc_cv
.
wa\x99_u\xc1\x9e
(
lk
,
d\x97dl\x9\xab
\xe8=\xf0
\xa1d
::
cv_\xa1\xa9us
::
timeout
) {

295
sched
::
schedu\xcbr
.
unblock
(
pid
);

296
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
pid
,
\xe7l\xa3
);

297 
	g\xa1\xa9ic_\xff\xa1
<>(
	gE\xbc\xdcCode
::
E_NO_MESSAGE
);

307 
p\xd\x96_\xc3tw\xdck
() {

308
	g\xc3t
::
Pack\x91

pkt
;

309 
	g\xc3t
::
\xbbcv
(
pkt
)) {

310 cڡ\x87ut\xd8&
p
 =
pkt
.
\xb7yl\xdfd
;

311 i\xe0(
	gp
.
size
(\xe8< (
	gx\x9aim
::
pid_t
\xe8* 2 +
NONCE_SIZE
 +
TAG_SIZE
) {

314 aut\xd8
	gids
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
x\x9aim
::
pid_t
 *>(
p
.
d\xa9a
());

315
	gx\x9aim
::
pid_t

\xa4c
 =
ids
[0],
	gd\xa1
 = ids[1];

316
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
,
	gNONCE_SIZE
>
	gn\xda\xfb
{};

317
	g\xa1d
::
mem\xfdy
(
n\xda\xfb
.
d\xa9a
(),
p
.d\xa9a(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2,\x82\xda\xfb.
size
());

318
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
by\x8b
>
c\x9dh\x94
{
p
.
d\xa9a
(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2 +
n\xda\xfb
.
size
(),

319
	gp
.
size
(\xe8- (
	gx\x9aim
::
pid_t
\xe8* 2 -
n\xda\xfb
.size()};

321
Ch\x\xaf\xc3l
 *
	gch
 =
g_g\xb\xe5h
.
f\x9ad
(
\xa4c
,
d\xa1
,
pkt
.
\xa4c_node
);

322 i\xe0(!
	gch
) {

323
	gch
 = &
g_g\xb\xe5h
.
c\xda\xc3\xf9
(
\xa4c
,
d\xa1
,
pkt
.
\xa4c_node
);

325 aut\xd8
	g\xb6a\x9a
 =
\xabad_de\xfcy\xb1
(
c\x9dh\x94
,
ch
->
key
,
n\xda\xfb
);

326 i\xe0(
	g\xb6a\x9a
.
size
(\xe8!\xf0(
mes\xa7ge
)) {

329
mes\xa7ge

	gmsg
;

330
	g\xa1d
::
mem\xfdy
(&
msg
,
\xb6a\x9a
.
d\xa9a
(), (msg));

331
	gch
->
	gqueue
.
push_back
(
\xa1d
::
move
(
msg
));

332 i\xe0(
	gg_g\xb\xe5h
.
is_li\xa1\x92\x9ag
(
d\xa1
)) {

333
	gg_g\xb\xe5h
.
\xa3t_li\xa1\x92\x9ag
(
d\xa1
,
\xe7l\xa3
);

334
	gsched
::
schedu\xcbr
.
unblock
(
d\xa1
);

335
	gg_\x9dc_cv
.
n\xd9ify_\x\xabl
();

	@kernel/lattice_ipc.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

8 
	~"\xc3t_driv\x94.h\xb5
"

9 
	~"pq\xfcy\xb1o.h\xb5
"

10 
	~"\xb4oc.h\xb5
"

11 
	~<\xac\xbfy
>

12 
	~<deque
>

13 
	~<m\xad
>

14 
	~<un\xdcd\x94ed_m\xad
>

15 
	~<ve\xf9\xdc
>

17
\xc7me\xa5a\xfb

	gωi\xfb
 {

22
\x9al\x9ae

cڡex\xb4

	g\xc3t
::
node_t

ANY_NODE
 = -1;

25
	gus\x9ag
 ::
mes\xa7ge
;

28
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

AEAD_KEY_SIZE
 = 32;

30
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

AEAD_NONCE_SIZE
 = 24;

32
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

AEAD_TAG_SIZE
 = 16;

37 \xfeas\xa0
	cIpcF\xcfgs
 : {

38
NONE
 = 0,

39
	gNONBLOCK
 = 1,

45 
	sCh\x\xaf\xc3l
 {

46
	gx\x9aim
::
pid_t

\xa4c
;

47
	gx\x9aim
::
pid_t

d\xa1
;

51
	g\xc3t
::
node_t

node_id
{0};

55
	g\xa1d
::
deque
<
mes\xa7ge
>
queue
;

59
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gAEAD_KEY_SIZE
>
	gkey
{};

65 \xfeas\xa0
	cG\xb\xe5h
 {

66
	gpublic
:

71
Ch\x\xaf\xc3l
 &
c\xda\xc3\xf9
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
 = 0);

73
Ch\x\xaf\xc3l
 *
f\x9ad
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
 =
ANY_NODE
\xe8
n\xdbx\xfb\xb1
;

74 [[
d\x95\xbb\xff\x8bd
("Use find() with ANY_NODE")]]

75
Ch\x\xaf\xc3l
 *
f\x9ad_\x\xafy
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
\xe8
n\xdbx\xfb\xb1
 {

76 
f\x9ad
(
\xa4c
,
d\xa1
,
ANY_NODE
);

79 
\xa3t_li\xa1\x92\x9ag
(
x\x9aim
::
pid_t

pid
,
bo\xde

\xe6ag
\xe8
	gn\xdbx\xfb\xb1
;

81 [[
nodis\xf\xe4d
]]
bo\xde

is_li\xa1\x92\x9ag
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
;

83
	g\xa1d
::
m\xad
<
\xa1d
::
tu\xb6e
<
x\x9aim
::
pid_t
,
	gx\x9aim
::pid_t,
	g\xc3t
::
node_t
>,
	gCh\x\xaf\xc3l
>

84
	gedges_
;

85
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
,
	gbo\xde
>
	gli\xa1\x92\x9ag_
;

86
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
,
	gmes\xa7ge
>
	g\x9abox_
;

89
G\xb\xe5h

g_g\xb\xe5h
;

103 
ωi\xfb_c\xda\xc3\xf9
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
,
\xc3t
::
node_t

node_id
 = 0);

113 
ωi\xfb_li\xa1\x92
(
x\x9aim
::
pid_t

pid
);

132 
ωi\xfb_\xa3nd
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
, cڡ
mes\xa7ge
 &
msg
,

133
IpcF\xcfgs

\xe6ags
 = IpcF\xcfgs::
NONE
);

148 
ωi\xfb_\xbbcv
(
x\x9aim
::
pid_t

pid
,
mes\xa7ge
 *
msg
,
IpcF\xcfgs

\xe6ags
 = IpcF\xcfgs::
NONE
);

156 
p\xd\x96_\xc3tw\xdck
();

	@kernel/main.cpp

8 
	~"c\xdas\xd\x93.h\xb5
"

9 
	~"glo.h\xb5
"

10 
	~"h\xacdw\xa\xfb.h\xb5
"

11 
	~"idt.h\xb5
"

12 
	~"\xb7g\x9ag.h\xb5
"

13 
	~"\xb6\xa9f\xdcm_\x8\xff\x99s.h\xb5
"

14 
	~"\xb4o\xfbss_\x8fb\xcb.h\xb5
"

15 
	~"qu\xa9\x94ni\xda_\xa5\x9\xaeock.h\xb5
"

16 
	~"schedu\xcbr.h\xb5
"

18 
	~<\xac\xbfy
>

19 
	~<c\xa1ddef
>

20 
	~<c\xa1d\x9\xa9
>

21 
	~<\x9a\x89y\xb3s.h
>

26 \xfeas\xa0
	cArch\x99e\xf9u\xbb
 :
u\x9\xa98_t
 {

27 #i\xe0
	$def\x9\xabd
(
__x86_64__
)

28
X86_64
,

29 #\x96i\xe0
	$def\x9\xabd
(
__i686__
)

30
I686
,

31 #\x96i\xe0
	$def\x9\xabd
(
__i586__
)

32
I586
,

33 #\x96i\xe0
	$def\x9\xabd
(
__i486__
)

34
I486
,

35 #\x96i\xe0
	$def\x9\xabd
(
__i386__
)

36
I386
,

41 
cڡex\xb4

Arch\x99e\xf9u\xbb

\xacch
 =

42 #i\xe0
	`def\x9\xabd
(
__x86_64__
)

43
Arch\x99e\xf9u\xbb
::
X86_64
;

44 #\x96i\xe0
	`def\x9\xabd
(
__i686__
)

45
Arch\x99e\xf9u\xbb
::
I686
;

46 #\x96i\xe0
	`def\x9\xabd
(
__i586__
)

47
Arch\x99e\xf9u\xbb
::
I586
;

48 #\x96i\xe0
	`def\x9\xabd
(
__i486__
)

49
Arch\x99e\xf9u\xbb
::
I486
;

50 #\x96i\xe0
	`def\x9\xabd
(
__i386__
)

51
Arch\x99e\xf9u\xbb
::
I386
;

54 #ifde\xe0
__x86_64__


55 "C" 
	$\x9a\x99_sys\xff\x\xfb_m\xa4s
(\xe8
n\xdbx\xfb\xb1
;

58
us\x9ag

T\xbf\x99s
 =
P\xc\xe1f\xdcmT\xbf\x99s
;

59
us\x9ag

phys_\x\xe3icks_t
 =
T\xbf\x99s
::phys_clicks_t;

60
us\x9ag

v\x9\xf9_\x\xe3icks_t
 =
T\xbf\x99s
::virt_clicks_t;

61 
cڡex\xb4

\xa1d
::
size_t

STACK_SAFETY
 =
T\xbf\x99s
::
SAFETY
;

62 
cڡex\xb4

phys_\x\xe3icks_t

KERNEL_BASE
 =
T\xbf\x99s
::
BASE
 >> T\xbf\x99s::
CLICK_SHIFT
;

77 
	$ma\x9a
(\xe8
n\xdbx\xfb\xb1
 {

79
hy\xb3r
::
Qu\xa9\x94ni\xdaSp\x9\xaeock

\x9cq_lock
;

80 cڡ
hy\xb3r
::
Qu\xa9\x94ni\xda

tick\x91
 = hy\xb3r::Qu\xa9\x94ni\xda::
	`id
();

82
hy\xb3r
::
Qu\xa9\x94ni\xdaLockGu\xacd

lk
{
\x9cq_lock
,
tick\x91
};

83
\xfdu
::
	`\xa3t_cu\xbc\x92t_\xfdu
(0);

84
Pag\x9ag
::
	`\x9a\x99
();

85
IDT
::
	`\x9a\x99
();

89 cڡ
phys_\x\xe3icks_t

ba\xa3_\x\xe3ick
 =
KERNEL_BASE
;

90 cڡ
\xa1d
::
size_t

k\x94\xc3l_\x8bxt
 =
T\xbf\x99s
::
k\x94\xc3l_\x8bxt_\x\xe3icks
;

91 cڡ
\xa1d
::
size_t

k\x94\xc3l_d\xa9a
 =
T\xbf\x99s
::
k\x94\xc3l_d\xa9a_\x\xe3icks
;

92 cڡ
phys_\x\xe3icks_t

mm_ba\xa3
 =
ba\xa3_\x\xe3ick
 + (
k\x94\xc3l_\x8bxt
 +
k\x94\xc3l_d\xa9a
);

95 aut\xd8&
\xb1ab\xcb
 =
Pro\xfbssTab\xcb
::
	`\x9a\xa1\x\xaf\xfb
();

96
\xb1ab\xcb
.
	`\x9a\x99\x9\xe6ize_\x\xabl
(
mm_ba\xa3
);

99
C\xdas\xd\x93
::
	`\xa3t_c\xde\xdc
(C\xdas\xdee::
	`d\x91e\xf9_c\xde\xdc
());

100 i\xe0(
C\xdas\xd\x93
::
	`\xbbad_bios_\xfdu_ty\xb3
(\xe8=\xf0
T\xbf\x99s
::
PC_AT
) {

101
glo
::
pc_\xa9
 =
\x8cue
;

104 #ifde\xe0
__x86_64__


105
	`\x9a\x99_sys\xff\x\xfb_m\xa4s
();

109
Schedu\xcbr
::
	`pick
();

110
H\xacdw\xa\xfb
::
	`\x92ab\xcb_\x9cqs
();

111
Schedu\xcbr
::
	`\xbb\xa1\xa\xf9
();

114
	}
}

120 "C" 
	$u\xc3x\xb3\xf9ed_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

121
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("Unexpected interrupt (vector < 16)\n");

122
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("p\xf8\xf00x%"
PRIxPTR
 "\n",
\xfdu
::
	`cu\xbc\x92t_pc
());

123
	}
}

125 "C" 
	$\x8c\xad_h\x\xafd\xcbr
(\xe8
n\xdbx\xfb\xb1
 {

126
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("\nUnexpected\x81rap (vector >= 16)\n");

127
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("p\xf8\xf00x%"
PRIxPTR
 "\n",
\xfdu
::
	`cu\xbc\x92t_pc
());

128
	}
}

130 "C" 
	$div_\x8c\xad
(\xe8
n\xdbx\xfb\xb1
 {

131
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("Divide overflow\x81rap\n");

132
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("p\xf8\xf00x%"
PRIxPTR
 "\n",
\xfdu
::
	`cu\xbc\x92t_pc
());

133
	}
}

135 "C" 
	$\xb7nic
(cڡ *
msg
, 
code
\xe8
n\xdbx\xfb\xb1
 {

136 i\xe0(
msg
 && *msg) {

137
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("K\x94\xc3ȷnic: %s",
msg
);

138 i\xe0(
code
 !\xf0
T\xbf\x99s
::
NO_NUM
) {

139
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
(" %d",
code
);

141
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("\n");

143
C\xdas\xd\x93
::
	`\xb4\x9\xa9f
("Type space\x81o\x84eboot\n");

144
H\xacdw\xa\xfb
::
	`\xbbbo\xd9
();

145
	}
}

	@kernel/memory.cpp

25 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

26 
	~"../h/com.h\xb5
"

27 
	~"../h/cڡ.h\xb5
"

28 
	~"../h/\x94r\xdc.h\xb5
"

29 
	~"../h/ty\xb3.h\xb5
"

30 
	~"cڡ.h\xb5
"

31 
	~"\xb4oc.h\xb5
"

32 
	~"ty\xb3.h\xb5
"

33 
	~<\xac\xbfy
>

34 
	~<c\xa1ddef
>

35 
	~<c\xa1d\x9\xa9
>

36 
	~<ut\x9e\x99y
>

39
cڡex\xb4

	g\xa1d
::
size_t

NR_RAMS
 = 4;

42 
mes\xa7ge

	gmess
;

45 
	g\xa1d
::
\xac\xbfy
<
u\x9\xa964_t
,
	gNR_RAMS
>
	g\xbfm_\xdcig\x9a
{};

47 
	g\xa1d
::
\xac\xbfy
<
u\x9\xa964_t
,
	gNR_RAMS
>
	g\xbfm_lim\x99
{};

53 \xfeas\xa0
	cMes\xa7geR\x95ly
 {

54
	mpublic
:

55
	$Mes\xa7geR\x95ly
(
\xffΔ
, 
\xb4oc
\xe8
n\xdbx\xfb\xb1
 :
\xffΔ_
{\xffΔ},
\xb4oc_
{
	}
\xb4oc} {}

56 ~
	$Mes\xa7geR\x95ly
(\xe8
n\xdbx\xfb\xb1
 {

57
mess
.
m_ty\xb3
 =
TASK_REPLY
;

58
	`\xbbp_\xb4oc_\xc4
(
mess
\xe8\xf0
\xb4oc_
;

59
	`\xbbp_\xa1\xa9us
(
mess
\xe8\xf0
\xbbsu\xc9
;

60
	`\xa3nd
(
\xffΔ_
, &
mess
);

61
	}
}

63 
	g\xbbsu\xc9
{
	gOK
};

65
	g\xb4iv\xa9e
:

66 
\xffΔ_
;

67 
	g\xb4oc_
;

76
PUBLIC
 
	$mem_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

78 
r
,
\xffΔ
,
\xb4oc_\xc4
;

79 
sizes
[8];

80
u\x9\xa964_t


81
	`g\x91_ba\xa3
(\xe8
n\xdbx\xfb\xb1
;

85
\xbfm_\xdcig\x9a
[
KMEM_DEV
] =
	`g\x91_ba\xa3
(\xe8<<
CLICK_SHIFT
;

87
\xbfm_lim\x99
[
KMEM_DEV
] = (
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
sizes
[0]) + static_cast<uint64_t>(sizes[1]))

88 <<
CLICK_SHIFT
;

89
\xbfm_lim\x99
[
MEM_DEV
] =
MEM_BYTES
;

94 
TRUE
) {

96
	`\xbb\xfbive
(
ANY
, &
mess
);

97 i\xe0(
mess
.
m_sour\xfb
 < 0)

98
	`\xb7nic
("mem\x81ask g\xd9 mes\xa7g\x90\xe4om ",
mess
.
m_sour\xfb
);

99
\xffΔ
 =
mess
.
m_sour\xfb
;

100
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(
mess
);

101
Mes\xa7geR\x95ly

\xbb\xb6y
{
\xffΔ
,
\xb4oc_\xc4
};

104 
mess
.
m_ty\xb3
) {

105 
DISK_READ
:

106
r
 =
	`do_mem
(&
mess
);

108 
DISK_WRITE
:

109
r
 =
	`do_mem
(&
mess
);

111 
DISK_IOCTL
:

112
r
 =
	`do_\xa3tup
(&
mess
);

115
r
 =
E\xbc\xdcCode
::
EINVAL
;

119
\xbb\xb6y
.
\xbbsu\xc9
 =
r
;

121
	}
}

128 [[
nodis\xf\xe4d
]] 
	$do_mem
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

131 
devi\xfb
;

132
\xa1d
::
size_t

cou\xc1
;

133
u\x9\xa964_t

mem_phys
,
u\xa3r_phys
;

134 
\xb4oc
 *
\xbd
;

139
devi\xfb
 =
	`devi\xfb
(*
m_\xb1r
);

140 i\xe0(
devi\xfb
 < 0 || devi\xfb >\xf0
NR_RAMS
)

141  (
E\xbc\xdcCode
::
ENXIO
);

142 i\xe0(
devi\xfb
 =\xf0
NULL_DEV
)

143  (
m_\xb1r
->
m_ty\xb3
 =\xf0
DISK_READ
 ?
EOF
 :
\xa1\xa9ic_\xff\xa1
<>(
	`cou\xc1
(*m_ptr)));

147 i\xe0(
	`pos\x99i\xda
(*
m_\xb1r
) < 0)

148  (
E\xbc\xdcCode
::
ENXIO
);

149
mem_phys
 =
\xbfm_\xdcig\x9a
[
devi\xfb
] +
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
	`pos\x99i\xda
(*
m_\xb1r
));

150 i\xe0(
mem_phys
 >\xf0
\xbfm_lim\x99
[
devi\xfb
])

151  (
EOF
);

153
cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

154 i\xe0(
mem_phys
 +
cou\xc1
 >
\xbfm_lim\x99
[
devi\xfb
]) {

155
cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xbfm_lim\x99
[
devi\xfb
] -
mem_phys
);

159
\xbd
 =
	`\xb4oc_addr
(
	`\xb4oc_\xc4
(*
m_\xb1r
));

162
u\xa3r_phys
 =
	`um\xad
(
\xbd
,
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`add\xbbss
(*
m_\xb1r
)),
cou\xc1
);

163 i\xe0(
u\xa3r_phys
 == 0)

164  (
E\xbc\xdcCode
::
E_BAD_ADDR
);

170 i\xe0(
m_\xb1r
->
m_ty\xb3
 =\xf0
DISK_READ
) {

171
	`phys_c\xddy
(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
u\xa3r_phys
), s\x8ftic_\xff\xa1<u\x9a\x8d\x8c_t>(
mem_phys
),
cou\xc1
);

173
	`phys_c\xddy
(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
mem_phys
), s\x8ftic_\xff\xa1<u\x9a\x8d\x8c_t>(
u\xa3r_phys
),
cou\xc1
);

175 
\xa1\xa9ic_\xff\xa1
<>(
cou\xc1
);

176
	}
}

183 [[
nodis\xf\xe4d
]] 
	$do_\xa3tup
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

184 
devi\xfb
;

186
devi\xfb
 =
	`devi\xfb
(*
m_\xb1r
);

187 i\xe0(
devi\xfb
 < 0 || devi\xfb >\xf0
NR_RAMS
)

188  (
E\xbc\xdcCode
::
ENXIO
);

190
\xbfm_\xdcig\x9a
[
devi\xfb
] =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
	`pos\x99i\xda
(*
m_\xb1r
));

192
\xbfm_lim\x99
[
devi\xfb
] =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
	`pos\x99i\xda
(*
m_\xb1r
)) +

193
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(\xa1\xa9ic_\xff\xa1<
\x9at64_t
>(
	`cou\xc1
(*
m_\xb1r
)\xe8*
BLOCK_SIZE
);

194  (
OK
);

195
	}
}

	@kernel/mpx64.cpp

1 
	~"../h/cڡ.h\xb5
"

2 
	~"../h/ty\xb3.h\xb5
"

3 
	~"../\x9a\x\xe3ude/defs.h
"

4 
	~"cڡ.h\xb5
"

5 
	~"glo.h\xb5
"

6 
	~"\xb4oc.h\xb5
"

7 
	~"ty\xb3.h\xb5
"

11 
	#RAX_OFF
 0

	)

12 
	#RBX_OFF
 8

	)

13 
	#RCX_OFF
 16

	)

14 
	#RDX_OFF
 24

	)

15 
	#RSI_OFF
 32

	)

16 
	#RDI_OFF
 40

	)

17 
	#RBP_OFF
 48

	)

18 
	#R8_OFF
 56

	)

19 
	#R9_OFF
 64

	)

20 
	#R10_OFF
 72

	)

21 
	#R11_OFF
 80

	)

22 
	#R12_OFF
 88

	)

23 
	#R13_OFF
 96

	)

24 
	#R14_OFF
 104

	)

25 
	#R15_OFF
 112

	)

26 
	#SP_OFF
 120

	)

27 
	#PC_OFF
 128

	)

28 
	#PSW_OFF
 136

	)

30 
k_\xa1ack
[
K_STACK_BYTES
];

36 
	$\xa7ve
(\xe8
NAKED
;

37 
	$\xa7ve
() {

38
__asm__
 volatile("push %%rax\n\t"

94 : "i"(
PC_OFF
), "i"(
PSW_OFF
), "i"(
SP_OFF
), "i"(
RAX_OFF
), "i"(
RBX_OFF
),

95 "i"(
RCX_OFF
), "i"(
RDX_OFF
), "i"(
RSI_OFF
), "i"(
RDI_OFF
), "i"(
RBP_OFF
),

96 "i"(
R8_OFF
), "i"(
R9_OFF
), "i"(
R10_OFF
), "i"(
R11_OFF
), "i"(
R12_OFF
),

97 "i"(
R13_OFF
), "i"(
R14_OFF
), "i"(
R15_OFF
), "i"(
K_STACK_BYTES
)

99
	}
}

105 
	$\xbb\xa1\xa\xf9
(\xe8
NAKED
;

106 
	$\xbb\xa1\xa\xf9
() {

107
__asm__
 volatile("movq _proc_ptr(%%rip), %%r15\n\t"

128 : "i"(
SP_OFF
), "i"(
R15_OFF
), "i"(
R14_OFF
), "i"(
R13_OFF
), "i"(
R12_OFF
),

129 "i"(
R11_OFF
), "i"(
R10_OFF
), "i"(
R9_OFF
), "i"(
R8_OFF
), "i"(
RBP_OFF
),

130 "i"(
RDI_OFF
), "i"(
RSI_OFF
), "i"(
RDX_OFF
), "i"(
RCX_OFF
), "i"(
RBX_OFF
),

131 "i"(
RAX_OFF
), "i"(
PSW_OFF
), "i"(
PC_OFF
)

133
	}
}

139 
	$i\xa4_de\xe7u\xc9
(\xe8
NAKED
;

140 
	$i\xa4_de\xe7u\xc9
() {

141
__asm__
 volatile("call save\n\t"

144
	}
}

150 
	$i\xa4_\x\xe3ock
(\xe8
NAKED
;

151 
	$i\xa4_\x\xe3ock
() {

152
__asm__
 volatile("call save\n\t"

155
	}
}

161 
	$i\xa4_keyb\xd\xe4d
(\xe8
NAKED
;

162 
	$i\xa4_keyb\xd\xe4d
() {

163
__asm__
 volatile("call save\n\t"

166
	}
}

172 
	$s_\xff\x\xfb
(\xe8
NAKED
;

173 
	$s_\xff\x\xfb
() {

174
__asm__
 volatile("call save\n\t"

181
	}
}

187 
	$\xcdr_\x9\xa9
(\xe8
NAKED
;

188 
	$\xcdr_\x9\xa9
() {

189
__asm__
 volatile("call save\n\t"

192
	}
}

198 
	$disk_\x9\xa9
(\xe8
NAKED
;

199 
	$disk_\x9\xa9
() {

200
__asm__
 volatile("call save\n\t"

205
	}
}

211 
	$divide
(\xe8
NAKED
;

212 
	$divide
() {

213
__asm__
 volatile("call save\n\t"

216
	}
}

222 
	$\x8\xfd
(\xe8
NAKED
;

223 
	$\x8\xfd
() {

224
__asm__
 volatile("call save\n\t"

227
	}
}

	@kernel/mpx88.cpp

1 
	~"cڡ.h\xb5
"

2 
	~"glo.h\xb5
"

3 
	~"\xb4oc.h\xb5
"

4 
	~"ty\xb3.h\xb5
"

12 
sys_\xff\x\xfb
(
fun\xf9i\xda
, 
\xffΔ
, 
\xa4c_de\xa1
,
mes\xa7ge
 *
m_\xb1r
);

13 
	$keyb\xd\xe4d
(\xe8
n\xdbx\xfb\xb1
;

14 
	$\xb4_ch\xac
(\xe8
n\xdbx\xfb\xb1
;

15 
	`\x9a\x8b\xbcu\xb1
(
\x8fsk
,
mes\xa7ge
 *
m_\xb1r
);

16 
	$u\xc3x\xb3\xf9ed_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
;

17 
	$\x8c\xad
(\xe8
n\xdbx\xfb\xb1
;

18 
	$div_\x8c\xad
(\xe8
n\xdbx\xfb\xb1
;

24
PUBLIC
 
	$\xa7ve
(\xe8
n\xdbx\xfb\xb1
 {

29
	}
}

35
PUBLIC
 
	$\xbb\xa1\xa\xf9
(\xe8
n\xdbx\xfb\xb1
 {

39
	}
}

49
PUBLIC
 
	$s_\xff\x\xfb
(
fun\xf9i\xda
, 
\xa4c_de\xa1
,
mes\xa7ge
 *
m_\xb1r
) {

50
	`\xa7ve
();

51
	`sys_\xff\x\xfb
(
fun\xf9i\xda
,
cur_\xb4oc
,
\xa4c_de\xa1
,
m_\xb1r
);

52
	`\xbb\xa1\xa\xf9
();

53
	}
}

59
PUBLIC
 
	$\x89y_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

60
	`\xa7ve
();

61
	`keyb\xd\xe4d
();

62
	`\xbb\xa1\xa\xf9
();

63
	}
}

69
PUBLIC
 
	$\xcdr_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

70
	`\xa7ve
();

71
	`\xb4_ch\xac
();

72
	`\xbb\xa1\xa\xf9
();

73
	}
}

79
PUBLIC
 
	$disk_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

80
mes\xa7ge

m
;

81
	`\xa7ve
();

82
m
.
m_ty\xb3
 =
DISKINT
;

83
	`\x9a\x8b\xbcu\xb1
(
FLOPPY
, &
m
);

84
	`\xbb\xa1\xa\xf9
();

85
	}
}

91
PUBLIC
 
	$w\x9ai_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

92
mes\xa7ge

m
;

93
	`\xa7ve
();

94
m
.
m_ty\xb3
 =
DISKINT
;

95
	`\x9a\x8b\xbcu\xb1
(
WINI
, &
m
);

96
	`\xbb\xa1\xa\xf9
();

97
	}
}

103
PUBLIC
 
	$\x\xe3ock_\x9\xa9
(\xe8
n\xdbx\xfb\xb1
 {

104
mes\xa7ge

m
;

105
	`\xa7ve
();

106
m
.
m_ty\xb3
 =
CLOCK_TICK
;

107
	`\x9a\x8b\xbcu\xb1
(
CLOCK
, &
m
);

108
	`\xbb\xa1\xa\xf9
();

109
	}
}

115
PUBLIC
 
	$su\xbdri\xa3
(\xe8
n\xdbx\xfb\xb1
 {

116
	`\xa7ve
();

117
	`u\xc3x\xb3\xf9ed_\x9\xa9
();

118
	`\xbb\xa1\xa\xf9
();

119
	}
}

125
PUBLIC
 
	$\x8\xfd
(\xe8
n\xdbx\xfb\xb1
 {

126
	`\xa7ve
();

127
	`\x8c\xad
();

128
	`\xbb\xa1\xa\xf9
();

129
	}
}

135
PUBLIC
 
	$divide
(\xe8
n\xdbx\xfb\xb1
 {

136
	`\xa7ve
();

137
	`div_\x8c\xad
();

138
	`\xbb\xa1\xa\xf9
();

139
	}
}

145
PUBLIC
 
	$id\xcb
(\xe8
n\xdbx\xfb\xb1
 {

148
asm
 volatile("hlt");

150
	}
}

	@kernel/net_driver.cpp

6 
	~"\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xb7/\x9a\x91.h
>

9 
	~<i\xe7ddrs.h
>

10 
	~<\xc3t/if.h
>

11 
	~<\xc3tdb.h
>

12 
	~<Íack\x91/\xb7ck\x91.h
>

13 
	~<sys/sock\x91.h
>

14 
	~<uni\xa1d.h
>

16 
	~<\xac\xbfy
>

17 
	~<\xa9omic
>

18 
	~<\xfb\xb\xfao
>

19 
	~<c\xa1dlib
>

20 
	~<c\xa1r\x9ag
>

21 
	~<deque
>

22 
	~<f\x9\x93sy\xa1em
>

23 
	~<f\xa1\xbbam
>

24 
	~<mu\x8bx
>

25 
	~<\xa5\x\xaf
>

26 
	~<sy\xa1em_\x94r\xdc
>

27 
	~<th\xbbad
>

28 
	~<un\xdcd\x94ed_m\xad
>

29 
	~<ve\xf9\xdc
>

31
\xc7me\xa5a\xfb

	g\xc3t
 {

32
	g\xc7me\xa5a\xfb
 {

34 
C\xdafig

	gg_cfg
{};

35 
	gg_udp_sock
 = -1;

36 
	gg_t\xfd_li\xa1\x92
 = -1;

38 
	sRem\xd9e
 {

39
sockaddr_\xa1\xd\xffge

	gaddr
{};

40
sock\xcbn_t

	gaddr_\xcbn
{};

41
Pr\xd9oc\xde

	g\xb4\xd9o
{};

42 
	gt\xfd_fd
 = -1;

45 
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
node_t
,
	gRem\xd9e
>
	gg_\xbbm\xd9es
;

46 
	g\xa1d
::
mu\x8bx

g_\xbbm\xd9es_mu\x8bx
;

48 
	g\xa1d
::
deque
<
Pack\x91
>
g_queue
;

49 
	g\xa1d
::
mu\x8bx

g_mu\x8bx
;

50 
RecvC\x\xablback

	gg_\xff\x\xfbback
;

51 
	g\xa1d
::
\xa9omic
<
bo\xde
>
g_rug
{
\xe7l\xa3
};

52 
	g\xa1d
::
jth\xbbad

g_udp_th\xbbad
,
	gg_t\xfd_th\xbbad
;

54 [[
nodis\xf\xe4d
]] 
	g\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

node_id_f\x9\x93
() {

55 i\xe0(!
g_cfg
.
node_id_d\x9c
.
em\xb1y
())  g_cfg.node_id_dir / "node_id";

56 i\xe0(::
g\x91euid
() == 0)  "/etc/xinim/node_id";

57 i\xe0(cڡ *
	gxdg
 =
\xa1d
::
g\x91\x92v
("XDG_STATE_HOME"))

58 
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th
{
xdg
} / "xinim" / "node_id";

59 i\xe0(cڡ *
	ghome
 =
\xa1d
::
g\x91\x92v
("HOME"))

60 
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th
{
home
} / ".xinim" / "node_id";

64 [[
nodis\xf\xe4d
]] 
bo\xde

c\xda\xc3\xf9i\xda_lo\xa1
(
\x94r
\xe8
	gn\xdbx\xfb\xb1
 {

65 
	g\x94r
 =\xf0
EPIPE
 ||
\x94r
 =\xf0
ECONNRESET
 ||\x83\xbc =\xf0
ENOTCONN
 ||\x83\xbc =\xf0
ECONNABORTED
;

68 
\xbbc\xda\xc3\xf9_t\xfd
(
Rem\xd9e
 &
\xbbm
) {

69 i\xe0(
	g\xbbm
.
	gt\xfd_fd
 >\xf00\xe8::
\xfeo\xa3
(
\xbbm
.
t\xfd_fd
);

70
	g\xbbm
.
	gt\xfd_fd
 = ::
sock\x91
(
\xbbm
.
addr
.
ss_\xe7m\x9ey
,
SOCK_STREAM
, 0);

71 i\xe0(
	g\xbbm
.
	gt\xfd_fd
 < 0\xe8
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94\xbao
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "TCP socket");

72 i\xe0(::
c\xda\xc3\xf9
(
\xbbm
.
t\xfd_fd
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&\xbbm.
addr
),\x84em.
addr_\xcbn
) != 0) {

73 
\x94r
 =
\x94\xbao
;

74 ::
\xfeo\xa3
(
\xbbm
.
t\xfd_fd
);

75
	g\xbbm
.
	gt\xfd_fd
 = -1;

76
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94r
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "TCP connect");

80 [[
nodis\xf\xe4d
]] 
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xe4ame_\xb7yl\xdfd
(\xa1d::
\xa5\xaa
<cڡ std::by\x8b>
d\xa9a
) {

81
node_t

nid
 =
lo\xf\xe6_node
();

82
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
buf
((
nid
\xe8+
d\xa9a
.
size
());

83
	g\xa1d
::
mem\xfdy
(
buf
.
d\xa9a
(), &
nid
, (nid));

84
	g\xa1d
::
mem\xfdy
(
buf
.
d\xa9a
(\xe8+ (
nid
), d\xa9a.d\xa9a(), d\xa9a.
size
());

85 
	gbuf
;

88 
\x92queue_\xb7ck\x91
(
Pack\x91
 &&
pkt
) {

89
	g\xa1d
::
lock_gu\xacd

lock
{
g_mu\x8bx
};

90 i\xe0(
	gg_cfg
.
	gmax_queue_\xcbngth
 > 0 &&
	gg_queue
.
size
(\xe8>\xf0
g_cfg
.
max_queue_\xcbngth
) {

91 i\xe0(
g_cfg
.
ov\x94\xe6ow
 =\xf0
Ov\x94\xe6owP\xdeicy
::
Dr\xddNewe\xa1
) ;

92
	gg_queue
.
p\xdd_\xe4\xd\xa9
();

94
	gg_queue
.
push_back
(
\xa1d
::
move
(
pkt
));

95 i\xe0(
	gg_\xff\x\xfbback
\xe8
g_\xff\x\xfbback
(
g_queue
.
back
());

98 
udp_\xbbcv_lo\xdd
() {

99
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 2048>
	gbuf
;

100 
	gg_rug
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
)) {

101
sockaddr_\xa1\xd\xffge

\xb3\x94
{};

102
sock\xcbn_t

	g\xcbn
 = (
\xb3\x94
);

103
ssize_t

	gn
 = ::
\xbbcv\xe4om
(
g_udp_sock
,
buf
.
d\xa9a
(), buf.
size
(), 0,

104
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
\xb3\x94
), &
\xcbn
);

105 i\xe0(
	gn
 <\xf0
\xa1\xa9ic_\xff\xa1
<
ssize_t
>((
node_t
))) ;

106
Pack\x91

	gpkt
;

107
	g\xa1d
::
mem\xfdy
(&
pkt
.
\xa4c_node
,
buf
.
d\xa9a
(), (pkt.src_node));

108
	gpkt
.
	g\xb7yl\xdfd
.
assign
(
buf
.
beg\x9a
(\xe8+ (
pkt
.
\xa4c_node
), buf.beg\x9a(\xe8+
n
);

109
\x92queue_\xb7ck\x91
(
\xa1d
::
move
(
pkt
));

113 
t\xfd_ac\xfb\xb1_lo\xdd
() {

114 ::
li\xa1\x92
(
g_t\xfd_li\xa1\x92
,
SOMAXCONN
);

115 
	gg_rug
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
)) {

116
sockaddr_\xa1\xd\xffge

\xb3\x94
{};

117
sock\xcbn_t

	g\xcbn
 = (
\xb3\x94
);

118 
	g\x\xe3\x9b\xc1
 = ::
ac\xfb\xb1
(
g_t\xfd_li\xa1\x92
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
\xb3\x94
), &
\xcbn
);

119 i\xe0(
	g\x\xe3\x9b\xc1
 < 0) ;

120
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 2048>
	gbuf
;

121 
	g\x8cue
) {

122
ssize_t

	gn
 = ::
\xbbcv
(
\xfe\x9b\xc1
,
buf
.
d\xa9a
(), buf.
size
(), 0);

123 i\xe0(
	gn
 <\xf0
\xa1\xa9ic_\xff\xa1
<
ssize_t
>((
node_t
))) ;

124
Pack\x91

	gpkt
;

125
	g\xa1d
::
mem\xfdy
(&
pkt
.
\xa4c_node
,
buf
.
d\xa9a
(), (pkt.src_node));

126
	gpkt
.
	g\xb7yl\xdfd
.
assign
(
buf
.
beg\x9a
(\xe8+ (
pkt
.
\xa4c_node
), buf.beg\x9a(\xe8+
n
);

127
\x92queue_\xb7ck\x91
(
\xa1d
::
move
(
pkt
));

129 ::
\xfeo\xa3
(
\xfe\x9b\xc1
);

135 
\x9a\x99
(cڡ
C\xdafig
 &
cfg
) {

136
	gg_cfg
 =
cfg
;

138 i\xe0(
	gg_cfg
.
	gnode_id
 == 0) {

139
\xa1d
::
if\xa1\xbbam

\x9a
{
node_id_f\x9\x93
()};

140 i\xe0(
	g\x9a
\xe8\x9a >>
	gg_cfg
.
	gnode_id
;

143
	gg_udp_sock
 = ::
sock\x91
(
AF_INET6
,
SOCK_DGRAM
, 0);

144 i\xe0(
	gg_udp_sock
 < 0\xe8
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94\xbao
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "UDP socket");

145 
	goff
 = 0;

146 ::
\xa3tsock\xddt
(
g_udp_sock
,
IPPROTO_IPV6
,
IPV6_V6ONLY
, &
off
, (off));

147
sockaddr_\x9a6

	gaddr6
{};

148
	gaddr6
.
	gs\x9a6_\xe7m\x9ey
 =
AF_INET6
;

149
	gaddr6
.
	gs\x9a6_p\xd\xf9
 =
ht\xdas
(
cfg
.
p\xd\xf9
);

150
	gaddr6
.
	gs\x9a6_addr
 =
\x9a6addr_\xaay
;

151 i\xe0(::
b\x9ad
(
g_udp_sock
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
addr6
), (addr6)) < 0)

152
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94\xbao
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "UDP bind");

154
	gg_t\xfd_li\xa1\x92
 = ::
sock\x91
(
AF_INET6
,
SOCK_STREAM
, 0);

155 i\xe0(
	gg_t\xfd_li\xa1\x92
 < 0\xe8
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94\xbao
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "TCP socket");

156 ::
\xa3tsock\xddt
(
g_t\xfd_li\xa1\x92
,
SOL_SOCKET
,
SO_REUSEADDR
, &
off
, (off));

157 ::
\xa3tsock\xddt
(
g_t\xfd_li\xa1\x92
,
IPPROTO_IPV6
,
IPV6_V6ONLY
, &
off
, (off));

158 i\xe0(::
b\x9ad
(
g_t\xfd_li\xa1\x92
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
addr6
), (addr6)) < 0)

159
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\x94\xbao
,
\xa1d
::
g\x92\x94ic_\xff\x8bg\xdcy
(), "TCP bind");

161
	gg_rug
.
\xa1\xdce
(
\x8cue
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

162
	gg_udp_th\xbbad
 =
\xa1d
::
jth\xbbad
{
udp_\xbbcv_lo\xdd
};

163
	gg_t\xfd_th\xbbad
 =
\xa1d
::
jth\xbbad
{
t\xfd_ac\xfb\xb1_lo\xdd
};

166 
shutdown
(\xe8
	gn\xdbx\xfb\xb1
 {

167
	gg_rug
.
\xa1\xdce
(
\xe7l\xa3
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

168 i\xe0(
	gg_udp_sock
 !\xf0-1\xe8::
\xfeo\xa3
(
g_udp_sock
);

169 i\xe0(
	gg_t\xfd_li\xa1\x92
 !\xf0-1\xe8{ ::
shutdown
(
g_t\xfd_li\xa1\x92
,
SHUT_RDWR
); ::
\xfeo\xa3
(g_tcp_listen); }

170 i\xe0(
	gg_udp_th\xbbad
.
jo\x9\xafb\xcb
()\xe8g_udp_th\xbbad.
jo\x9a
();

171 i\xe0(
	gg_t\xfd_th\xbbad
.
jo\x9\xafb\xcb
()\xe8g_t\xfd_th\xbbad.
jo\x9a
();

173
	g\xa1d
::
lock_gu\xacd

lock
{
g_mu\x8bx
};

174
	gg_queue
.
\xfe\x97r
();

177
	g\xa1d
::
lock_gu\xacd

\xbeock
{
g_\xbbm\xd9es_mu\x8bx
};

178 aut\xd8&[
_
,
\xbbm
] :
g_\xbbm\xd9es
)

179 i\xe0(
\xbbm
.
\xb4\xd9o
 =\xf0
Pr\xd9oc\xde
::
TCP
 &&\x84em.
t\xfd_fd
 >\xf00\xe8::
\xfeo\xa3
(rem.tcp_fd);

180
	gg_\xbbm\xd9es
.
\xfe\x97r
();

182
	gg_\xff\x\xfbback
 =
nuαr
;

185 
add_\xbbm\xd9e
(
node_t

node
, cڡ
\xa1d
::
\xa1r\x9ag
 &
ho\xa1
,
u\x9\xa916_t

p\xd\xf9
,
Pr\xd9oc\xde

\xb4\xd9o
) {

186
Rem\xd9e

	g\xbbm
{};

187
	g\xbbm
.
	g\xb4\xd9o
 =
\xb4\xd9o
;

189
addr\x9afo

	gh\x9\xa9s
{};

190
	gh\x9\xa9s
.
	gai_\xe7m\x9ey
 =
AF_UNSPEC
;

191
	gh\x9\xa9s
.
	gai_sockty\xb3
 = (
\xb4\xd9o
 =\xf0
Pr\xd9oc\xde
::
TCP
\xe8?
SOCK_STREAM
 :
SOCK_DGRAM
;

192
	gh\x9\xa9s
.
	gai_\xe6ags
 =
AI_V4MAPPED
 |
AI_ADDRCONFIG
;

194 
	gp\xd\xf9_\xa1r
[16];

195
	g\xa1d
::
\xa2\xb4\x9atf
(
p\xd\xf9_\xa1r
, \xd5\xdct_\xa1r), "%u",
p\xd\xf9
);

196
addr\x9afo
 *
	g\xbbs
 =
nuαr
;

197 i\xe0(::
g\x91addr\x9afo
(
ho\xa1
.
c_\xa1r
(),
p\xd\xf9_\xa1r
, &
h\x9\xa9s
, &
\xbbs
) != 0)

198
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("invalid host\x87ddress");

200 aut\xd8*
	gp
 =
\xbbs
;\x85;\x85 =
p
->
ai_\xc3xt
) {

201 i\xe0(
p
->
ai_\xe7m\x9ey
 =\xf0
AF_INET
 ||\x85->ai_\xe7m\x9ey =\xf0
AF_INET6
) {

202
\xbbm
.
addr_\xcbn
 =
\xa1\xa9ic_\xff\xa1
<
sock\xcbn_t
>(
p
->
ai_add\xbe\x92
);

203
	g\xa1d
::
mem\xfdy
(&
\xbbm
.
addr
,
p
->
ai_addr
,\x85->
ai_add\xbe\x92
);

207 ::
\xe4\x93addr\x9afo
(
\xbbs
);

208 i\xe0(
	g\xbbm
.
	gaddr_\xcbn
 =\xf00\xe8
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("host\x87ddress\x84esolution failed");

210 i\xe0(
	g\xb4\xd9o
 =\xf0
Pr\xd9oc\xde
::
TCP
\xe8
\xbbc\xda\xc3\xf9_t\xfd
(
\xbbm
);

212
	g\xa1d
::
lock_gu\xacd

lock
{
g_\xbbm\xd9es_mu\x8bx
};

213
	gg_\xbbm\xd9es
[
node
] =
\xbbm
;

216 
\xa3t_\xbbcv_\xff\xceback
(
RecvC\x\xablback

cb
\xe8{
	gg_\xff\x\xfbback
 =
\xa1d
::
move
(cb); }

218
node_t

lo\xf\xe6_node
(\xe8
	gn\xdbx\xfb\xb1
 {

219 i\xe0(
	gg_cfg
.
	gnode_id
 !\xf00\xe8
g_cfg
.
node_id
;

220
	g\xa1d
::
if\xa1\xbbam

\x9a
{
node_id_f\x9\x93
()};

221 i\xe0(
	g\x9a
 && (\x9a >>
	gg_cfg
.
	gnode_id
\xe8&& g_cfg.node_id !\xf00\xe8
g_cfg
.
node_id
;

223
i\xe7ddrs
 *
	gi\xe7
 =
nuαr
;

224 i\xe0(::
g\x91i\xe7ddrs
(&
i\xe7
) == 0) {

225 aut\xd8*
cur
 =
i\xe7
;
	gcur
 !\xf0
nuαr
; cu\xb8\xf0cur->
i\xe7_\xc3xt
) {

226 i\xe0(!(
cur
->
i\xe7_\xe6ags
 &
IFF_UP
\xe8|| (cur->i\xe7_\xe6ag\xa0&
IFF_LOOPBACK
)) ;

228 i\xe0(
	gcur
->
	gi\xe7_addr
 && cur->i\xe7_addr->
	g\xa7_\xe7m\x9ey
 =\xf0
AF_PACKET
) {

229 aut\xd8*
\xce
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x\xfb
 *>(
cur
->
i\xe7_addr
);

230
	g\xa1d
::
size_t

v\x\xab
 = 0;

231 
	gi
 = 0; i <
	g\x\xfb
->
	g\xa6l_h\x\xab\x92
; ++i)

232
	gv\x\xab
 =
v\x\xab
 * 131 +
\xce
->
\xa6l_addr
[
i
];

233 ::
\xe4\x93i\xe7ddrs
(
i\xe7
);

234
	gg_cfg
.
	gnode_id
 =
\xa1\xa9ic_\xff\xa1
<
node_t
>(
v\x\xab
 & 0x7fffffff);

235
	g\xa1d
::
f\x9\x93sy\xa1em
::
\xfc\x97\x8b_d\x9ce\xf9ܛs
(
node_id_f\x9\x93
().
\xb7\xbb\xc1_\xb7th
());

236
	g\xa1d
::
of\xa1\xbbam
{
node_id_f\x9\x93
()} <<
g_cfg
.
node_id
;

237 
	gg_cfg
.
	gnode_id
;

240 i\xe0(
	gcur
->
	gi\xe7_addr
 && cur->i\xe7_addr->
	g\xa7_\xe7m\x9ey
 =\xf0
AF_INET
) {

241 aut\xd8*
s\x9a
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x9a
 *>(
cur
->
i\xe7_addr
);

242 cڡ\x87ut\xd8*
	gb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
u\x9\xa98_t
 *>(&
s\x9a
->
s\x9a_addr
);

243
	g\xa1d
::
size_t

v\x\xab
 = 0;

244 
	gi
 = 0; i < 4; ++i\xe8
	gv\x\xab
 =
v\x\xab
 * 131 +
b
[
i
];

245 ::
\xe4\x93i\xe7ddrs
(
i\xe7
);

246
	gg_cfg
.
	gnode_id
 =
\xa1\xa9ic_\xff\xa1
<
node_t
>(
v\x\xab
 & 0x7fffffff);

247
	g\xa1d
::
f\x9\x93sy\xa1em
::
\xfc\x97\x8b_d\x9ce\xf9ܛs
(
node_id_f\x9\x93
().
\xb7\xbb\xc1_\xb7th
());

248
	g\xa1d
::
of\xa1\xbbam
{
node_id_f\x9\x93
()} <<
g_cfg
.
node_id
;

249 
	gg_cfg
.
	gnode_id
;

252 ::
\xe4\x93i\xe7ddrs
(
i\xe7
);

255 
	gho\xa1
[256]{};

256 i\xe0(::
g\x91ho\xa1\xc7me
(
ho\xa1
, (host)) == 0) {

257
g_cfg
.
node_id
 =
\xa1\xa9ic_\xff\xa1
<
node_t
>(
\xa1d
::
hash
<\xa1d::
\xa1r\x9ag_v\x9bw
>{}(
ho\xa1
) & 0x7fffffff);

258
	g\xa1d
::
f\x9\x93sy\xa1em
::
\xfc\x97\x8b_d\x9ce\xf9ܛs
(
node_id_f\x9\x93
().
\xb7\xbb\xc1_\xb7th
());

259
	g\xa1d
::
of\xa1\xbbam
{
node_id_f\x9\x93
()} <<
g_cfg
.
node_id
;

260 
	gg_cfg
.
	gnode_id
;

266
	g\xa1d
::
\x94rc

\xa3nd
(
node_t

node
,
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
d\xa9a
) {

267
Rem\xd9e

\xbbm
;

269
	g\xa1d
::
lock_gu\xacd

lock
{
g_\xbbm\xd9es_mu\x8bx
};

270 aut\xd8
	g\x99
 =
g_\xbbm\xd9es
.
f\x9ad
(
node
);

271 i\xe0(
	g\x99
 =\xf0
g_\xbbm\xd9es
.
\x92d
()\xe8
\xa1d
::
\x94rc
::
ho\xa1_uėchab\xcb
;

272
	g\xbbm
 =
\x99
->
\xa3c\xdad
;

275 aut\xd8
	gbuf
 =
\xe4ame_\xb7yl\xdfd
(
d\xa9a
);

277 i\xe0(
	g\xbbm
.
	g\xb4\xd9o
 =\xf0
Pr\xd9oc\xde
::
TCP
) {

278 
fd
 =
\xbbm
.
t\xfd_fd
;

279
bo\xde

	g\x8c\x\xafs\x9b\xc1
 =
fd
 < 0;

280 
	g\x94r
 = 0;

282 aut\xd8
	g\x8cy_\xa3nd
 = [&](
sock
\xe8->
\xa1d
::
\x94rc
 {

283
\xa1d
::
size_t

\xa3\xc1
 = 0;

284 
	g\xa3\xc1
 <
	gbuf
.
size
()) {

285
ssize_t

	gn
 = ::
\xa3nd
(
sock
,
buf
.
d\xa9a
(\xe8+
\xa3\xc1
, buf.
size
() - sent, 0);

286 i\xe0(
	gn
 < 0) {

287
	g\x94r
 =
\x94\xbao
;

288 
	g\xa1d
::
\x94rc
::
io_\x94r\xdc
;

290
	g\xa3\xc1
 +\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
n
);

292 
	g\xa1d
::
\x94rc
{};

295 i\xe0(
	g\x8c\x\xafs\x9b\xc1
) {

296
	gfd
 = ::
sock\x91
(
\xbbm
.
addr
.
ss_\xe7m\x9ey
,
SOCK_STREAM
, 0);

297 i\xe0(
	gfd
 < 0 || ::
c\xda\xc3\xf9
(
fd
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
\xbbm
.
addr
),\x84em.
addr_\xcbn
) != 0) {

298 i\xe0(
fd
 >\xf00\xe8::
\xfeo\xa3
(fd);

299 
	g\xa1d
::
\x94rc
::
c\xda\xc3\xf9i\xda_\xbbfu\xa3d
;

303 aut\xd8
	grc
 =
\x8cy_\xa3nd
(
fd
);

304 i\xe0(
	grc
 !\xf0
\xa1d
::
\x94rc
{} && !
\x8c\xaas\x9b\xc1
 &&
c\xda\xc3\xf9i\xda_lo\xa1
(
\x94r
\xe8&&
\xbbm
.
t\xfd_fd
 >= 0) {

305
\x8cy
 {

306
\xbbc\xda\xc3\xf9_t\xfd
(
\xbbm
);

308
	g\xa1d
::
lock_gu\xacd

lock
{
g_\xbbm\xd9es_mu\x8bx
};

309 aut\xd8
	g\x99
 =
g_\xbbm\xd9es
.
f\x9ad
(
node
);

310 i\xe0(
	g\x99
 !\xf0
g_\xbbm\xd9es
.
\x92d
()\xe8
\x99
->
\xa3c\xdad
.
t\xfd_fd
 =
\xbbm
.tcp_fd;

312
	grc
 =
\x8cy_\xa3nd
(
\xbbm
.
t\xfd_fd
);

313 }
\xfftch
 (...) {

314
	grc
 =
\xa1d
::
\x94rc
::
io_\x94r\xdc
;

318 i\xe0(
	g\x8c\x\xafs\x9b\xc1
\xe8::
\xfeo\xa3
(
fd
);

319 
	grc
;

322
ssize_t

	gn
 = ::
\xa3ndto
(
g_udp_sock
,
buf
.
d\xa9a
(), buf.
size
(), 0,

323
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr
 *>(&
\xbbm
.
addr
),\x84em.
addr_\xcbn
);

324  (
	gn
 < 0 ||
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
size_t
>(
n
\xe8!\xf0
buf
.
size
()\xe8?
\xa1d
::
\x94rc
::
io_\x94r\xdc


325 :
\xa1d
::
\x94rc
{};

328
bo\xde

\xbbcv
(
Pack\x91
 &
out
) {

329
	g\xa1d
::
lock_gu\xacd

lock
{
g_mu\x8bx
};

330 i\xe0(
	gg_queue
.
em\xb1y
()\xe8
	g\xe7l\xa3
;

331
	gout
 =
\xa1d
::
move
(
g_queue
.
\xe4\xdat
());

332
	gg_queue
.
p\xdd_\xe4\xd\xa9
();

333 
	g\x8cue
;

336 
\xbb\xa3t
(\xe8
	gn\xdbx\xfb\xb1
 {

337
	g\xa1d
::
lock_gu\xacd

lock
{
g_mu\x8bx
};

338
	gg_queue
.
\xfe\x97r
();

341 
simuϋ_sock\x91_\xe7\x9eu\xbb
(\xe8
	gn\xdbx\xfb\xb1
 {

342 i\xe0(
	gg_udp_sock
 >\xf00\xe8{ ::
\xfeo\xa3
(
g_udp_sock
); g_udp_sock = -1; }

343 i\xe0(
	gg_t\xfd_li\xa1\x92
 >\xf00\xe8{ ::
\xfeo\xa3
(
g_t\xfd_li\xa1\x92
); g_tcp_listen = -1; }

	@kernel/net_driver.hpp

1 #\xb4agm\xa8
\xda\xfb


15 *
	g\xc3t
::
shutdown
();

17 *
Th\xbbad

	gSa\xe3ty
:
A\x\xfb

APIs

\xace

th\xbbad
-
\xa7\xe3

\xaad

may

be

\xff\xceed

\xe4om

muɝ\xcb

th\xbbads
.

20 
	~<c\xa1ddef
>

21 
	~<c\xa1d\x9\xa9
>

22 
	~<f\x9\x93sy\xa1em
>

23 
	~<fun\xf9iڮ
>

24 
	~<\xc3t\x9a\x91/\x9a.h
>

25 
	~<\xa5\x\xaf
>

26 
	~<\xa1r\x9ag
>

27 
	~<sy\xa1em_\x94r\xdc
>

28 
	~<ve\xf9\xdc
>

29 
	~<sy\xa1em_\x94r\xdc
>

31
\xc7me\xa5a\xfb

\xc3t
 {

34
us\x9ag

node_t
 = ;

42 
	sPack\x91
 {

43
node_t

	g\xa4c_node
;

44
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xb7yl\xdfd
;

50 \xfeas\xa0
	cOv\x94\xe6owP\xdeicy
 {

51
	gDr\xddNewe\xa1
,

52
	gDr\xddOlde\xa1


58 \xfeas\xa0
	cPr\xd9oc\xde
 {

59
	gUDP
,

60
	gTCP


72 
	sC\xdafig
 {

73
node_t

	gnode_id
;

74
	g\xa1d
::
u\x9\xa916_t

p\xd\xf9
;

75
	g\xa1d
::
size_t

max_queue_\xcbngth
;

76
Ov\x94\xe6owP\xdeicy

	gov\x94\xe6ow
;

77
	g\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

node_id_d\x9c
;

79
cڡex\xb4

C\xdafig
(
node_t

node_id_
 = 0,

80
\xa1d
::
u\x9\xa916_t

p\xd\xf9_
 = 0,

81
\xa1d
::
size_t

max_\xcbn
 = 0,

82
Ov\x94\xe6owP\xdeicy

p\xdeicy
 = Ov\x94\xe6owP\xdeicy::
Dr\xddNewe\xa1
,

83
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

node_id_d\x9c_
 = {}\xe8
n\xdbx\xfb\xb1


84 :
node_id
(
node_id_
),

85
p\xd\xf9
(
p\xd\xf9_
),

86
max_queue_\xcbngth
(
max_\xcbn
),

87
ov\x94\xe6ow
(
p\xdeicy
),

88
node_id_d\x9c
(
\xa1d
::
move
(
node_id_d\x9c_
))

93
us\x9ag

	gRecvC\x\xablback
 =
\xa1d
::
fun\xf9i\xda
<(cڡ
Pack\x91
&)>;

104 
\x9a\x99
(cڡ
C\xdafig
&
cfg
);

119 
add_\xbbm\xd9e
(
node_t

node
,

120 cڡ
\xa1d
::
\xa1r\x9ag
&
ho\xa1
,

121
u\x9\xa916_t

p\xd\xf9
,

122
Pr\xd9oc\xde

\xb4\xd9o
 = Pr\xd9oc\xde::
UDP
);

132 
\xa3t_\xbbcv_\xff\xceback
(
RecvC\x\xablback

cb
);

139 
	$shutdown
(\xe8
n\xdbx\xfb\xb1
;

153 [[
nodis\xf\xe4d
]]
node_t

	$lo\xf\xe6_node
(\xe8
n\xdbx\xfb\xb1
;

165 [[
nodis\xf\xe4d
]]
\xa1d
::
\x94rc

	`\xa3nd
(
node_t

node
,

166
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
d\xa9a
);

174 [[
nodis\xf\xe4d
]]
bo\xde

	`\xbbcv
(
Pack\x91
&
out
);

179 
	$\xbb\xa3t
(\xe8
n\xdbx\xfb\xb1
;

184 
	$simuϋ_sock\x91_\xe7\x9eu\xbb
(\xe8
n\xdbx\xfb\xb1
;

186
	}
}

	@kernel/octonion.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~<\xac\xbfy
>

8 
	~<c\xa1d\x9\xa9
>

9 
	~<\xa5\x\xaf
>

11
\xc7me\xa5a\xfb

	gωi\xfb
 {

16 
	sO\xf9\xdai\xda
 {

17
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa932_t
, 8>
	gcomp
;

20
cڡex\xb4

O\xf9\xdai\xda
() = ;

23
ex\xb6ic\x99

cڡex\xb4

O\xf9\xdai\xda
(cڡ
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa932_t
, 8> &
c
\xe8:
comp
(c) {}

26 
cڡex\xb4

O\xf9\xdai\xda

\xe4om_by\x8bs
(cڡ
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
, 32> &
by\x8bs
\xe8
	gn\xdbx\xfb\xb1
 {

27
O\xf9\xdai\xda

	go
{};

28 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

29
	g\xa1d
::
u\x9\xa932_t

v\x\xabue
 = 0;

30
	gv\x\xabue
 |\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(
by\x8bs
[
i
 * 4 + 0]) << 0;

31
	gv\x\xabue
 |\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(
by\x8bs
[
i
 * 4 + 1]) << 8;

32
	gv\x\xabue
 |\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(
by\x8bs
[
i
 * 4 + 2]) << 16;

33
	gv\x\xabue
 |\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(
by\x8bs
[
i
 * 4 + 3]) << 24;

34
	go
.
	gcomp
[
i
] =
v\x\xabue
;

36 
	go
;

40
cڡex\xb4
 
to_by\x8bs
(
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
, 32> &
out
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

41 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

42 aut\xd8
	gv
 =
comp
[
i
];

43
	gout
[
i
 * 4 + 0] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
>((
v
 >> 0) & 0xFF);

44
	gout
[
i
 * 4 + 1] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
>((
v
 >> 8) & 0xFF);

45
	gout
[
i
 * 4 + 2] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
>((
v
 >> 16) & 0xFF);

46
	gout
[
i
 * 4 + 3] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
>((
v
 >> 24) & 0xFF);

51 [[
nodis\xf\xe4d
]]
cڡex\xb4

O\xf9\xdai\xda

	gݔ\xa9\xdc
*(cڡ
	gO\xf9\xdai\xda
 &
	grhs
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

53 aut\xd8
	ga0
 =
comp
[0];

54 aut\xd8
	ga1
 =
comp
[1];

55 aut\xd8
	ga2
 =
comp
[2];

56 aut\xd8
	ga3
 =
comp
[3];

57 aut\xd8
	gb0
 =
comp
[4];

58 aut\xd8
	gb1
 =
comp
[5];

59 aut\xd8
	gb2
 =
comp
[6];

60 aut\xd8
	gb3
 =
comp
[7];

62 aut\xd8
	gc0
 =
rhs
.
comp
[0];

63 aut\xd8
	gc1
 =
rhs
.
comp
[1];

64 aut\xd8
	gc2
 =
rhs
.
comp
[2];

65 aut\xd8
	gc3
 =
rhs
.
comp
[3];

66 aut\xd8
	gd0
 =
rhs
.
comp
[4];

67 aut\xd8
	gd1
 =
rhs
.
comp
[5];

68 aut\xd8
	gd2
 =
rhs
.
comp
[6];

69 aut\xd8
	gd3
 =
rhs
.
comp
[7];

71 aut\xd8
	gqac0
 =
a0
 *
c0
 -
a1
 *
c1
 -
a2
 *
c2
 -
a3
 *
c3
;

72 aut\xd8
	gqac1
 =
a0
 *
c1
 +
a1
 *
c0
 +
a2
 *
c3
 -
a3
 *
c2
;

73 aut\xd8
	gqac2
 =
a0
 *
c2
 -
a1
 *
c3
 +
a2
 *
c0
 +
a3
 *
c1
;

74 aut\xd8
	gqac3
 =
a0
 *
c3
 +
a1
 *
c2
 -
a2
 *
c1
 +
a3
 *
c0
;

76 aut\xd8
	gqdb0
 =
d0
 *
b0
 +
d1
 *
b1
 +
d2
 *
b2
 +
d3
 *
b3
;

77 aut\xd8
	gqdb1
 =
d0
 *
b1
 -
d1
 *
b0
 -
d2
 *
b3
 +
d3
 *
b2
;

78 aut\xd8
	gqdb2
 =
d0
 *
b2
 +
d1
 *
b3
 -
d2
 *
b0
 -
d3
 *
b1
;

79 aut\xd8
	gqdb3
 =
d0
 *
b3
 -
d1
 *
b2
 +
d2
 *
b1
 -
d3
 *
b0
;

81 aut\xd8
	gda0
 =
d0
 *
a0
 +
d1
 *
a1
 +
d2
 *
a2
 +
d3
 *
a3
;

82 aut\xd8
	gda1
 =
d0
 *
a1
 -
d1
 *
a0
 -
d2
 *
a3
 +
d3
 *
a2
;

83 aut\xd8
	gda2
 =
d0
 *
a2
 +
d1
 *
a3
 -
d2
 *
a0
 -
d3
 *
a1
;

84 aut\xd8
	gda3
 =
d0
 *
a3
 -
d1
 *
a2
 +
d2
 *
a1
 -
d3
 *
a0
;

86 aut\xd8
	gbc0
 =
b0
 *
c0
 -
b1
 *
c1
 -
b2
 *
c2
 -
b3
 *
c3
;

87 aut\xd8
	gbc1
 =
b0
 *
c1
 +
b1
 *
c0
 +
b2
 *
c3
 -
b3
 *
c2
;

88 aut\xd8
	gbc2
 =
b0
 *
c2
 -
b1
 *
c3
 +
b2
 *
c0
 +
b3
 *
c1
;

89 aut\xd8
	gbc3
 =
b0
 *
c3
 +
b1
 *
c2
 -
b2
 *
c1
 +
b3
 *
c0
;

91
O\xf9\xdai\xda

	gout
{};

92
	gout
.
	gcomp
[0] =
qac0
 -
qdb0
;

93
	gout
.
	gcomp
[1] =
qac1
 -
qdb1
;

94
	gout
.
	gcomp
[2] =
qac2
 -
qdb2
;

95
	gout
.
	gcomp
[3] =
qac3
 -
qdb3
;

96
	gout
.
	gcomp
[4] =
da0
 +
bc0
;

97
	gout
.
	gcomp
[5] =
da1
 +
bc1
;

98
	gout
.
	gcomp
[6] =
da2
 +
bc2
;

99
	gout
.
	gcomp
[7] =
da3
 +
bc3
;

100 
	gout
;

104 [[
nodis\xf\xe4d
]]
cڡex\xb4

O\xf9\xdai\xda

c\xdajug\xa9e
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

105
O\xf9\xdai\xda

	gout
 = *
this
;

106 
	g\xa1d
::
size_t

i
 = 1;
	gi
 < 8; ++i) {

107
	gout
.
	gcomp
[
i
] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(-\xa1\xa9ic_\xff\xa1<
\x9at32_t
>(
out
.
comp
[i]));

109 
	gout
;

113 [[
nodis\xf\xe4d
]]
O\xf9\xdai\xda

\x9av\x94\xa3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

114 
	gn\xdcm_sq
 = 0;

115 aut\xd8
	gv
 :
comp
) {

116
n\xdcm_sq
 +\xf0
\xa1\xa9ic_\xff\xa1
<>(
v
) * static_cast<>(v);

118 i\xe0(
	gn\xdcm_sq
 == 0) {

119 
O\xf9\xdai\xda
{};

121 aut\xd8
	gc\xdaj
 =
c\xdajug\xa9e
();

122 aut\xd8&
	gv
 :
c\xdaj
.
comp
) {

123
v
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa932_t
>(\xa1\xa9ic_\xff\xa1<>(v\xe8/
n\xdcm_sq
);

125 
	gc\xdaj
;

	@kernel/octonion_math.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"o\xf9\xdai\xda.h\xb5
"

9
\xc7me\xa5a\xfb

	gωi\xfb
 {

14 
	sO\xf9\xdai\xdaTok\x92
 {

15
O\xf9\xdai\xda

	gv\x\xabue
{};

25 [[
nodis\xf\xe4d
]]
cڡex\xb4

O\xf9\xdai\xdaTok\x92

muɝly
(cڡ O\xf9\xdai\xdaTok\x92 &
lhs
,

26 cڡ
O\xf9\xdai\xdaTok\x92
 &
rhs
\xe8
	gn\xdbx\xfb\xb1
 {

27 
	gO\xf9\xdai\xdaTok\x92
{
	glhs
.
v\x\xabue
 *
	grhs
.
	gv\x\xabue
};

36 [[
nodis\xf\xe4d
]]
\x9al\x9ae

O\xf9\xdai\xdaTok\x92

\x9av\x94\xa3
(cڡ O\xf9\xdai\xdaTok\x92 &
tok\x92
\xe8
	gn\xdbx\xfb\xb1
 {

37 
	gO\xf9\xdai\xdaTok\x92
{
	gtok\x92
.
	gv\x\xabue
.
\x9av\x94\xa3
()};

	@kernel/paging.cpp

1 
	~"../../\x9a\x\xe3ude/\xb7g\x9ag.h\xb5
"

2 
	~"cڡ.h\xb5
"

3 
	~"../h/ty\xb3.h\xb5
"

4 
	~<c\xa1d\x9\xa9
>

5 
	~<c\xa1ddef
>

6 
	~<c\xa1r\x9ag
>

13 
pml4

	gk\x94\xc3l_pml4
;

15 
u\x9\xa964_t

	g\xc3xt_k\x94\xc3l_va
;

23
PUBLIC
 
	$\xb7g\x9ag_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

24 
i
;

25 
i
 = 0; i <
PT_ENTRIES
; i++)

26
k\x94\xc3l_pml4
.
\xb1rs
[
i
] =
nuαr
;

28
\xc3xt_k\x94\xc3l_va
 =
	`UINT64_C
(0xffff800000000000);

29
	}
}

42
PUBLIC
 *
	$\x\xabloc_v\x9\xf9u\x\xab
(
u\x9\xa964_t

by\x8bs
, 
\xe6ags
\xe8
n\xdbx\xfb\xb1
 {

43
u\x9\xa964_t

va
 =
\xc3xt_k\x94\xc3l_va
;

46
u\x9\xa964_t

\xb7ges
 = (
by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<u\x9at64_t>(
PAGE_SIZE_4K
) - 1) / static_cast<uint64_t>(PAGE_SIZE_4K);

47
\xc3xt_k\x94\xc3l_va
 +\xf0
\xb7ges
 *
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
PAGE_SIZE_4K
);

48 ()
\xe6ags
;

50 
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
va
));

51
	}
}

65
PUBLIC
 
	$m\xad_\xb7ge
(
u\x9\xa964_t

va
, u\x9at64_\x88
\xb7
, 
\xe6ags
\xe8
n\xdbx\xfb\xb1
 {

67 
idx4
 =
\xa1\xa9ic_\xff\xa1
<>((
va
 >> 39) & 0x1FF);

68 i\xe0(!
k\x94\xc3l_pml4
.
\xb1rs
[
idx4
]) {

71
u\x9\xa964_t

p_addr_\x\xe3icks
 =
	`\x\xabloc_mem
(

72 ((
\xb7ge_d\x9c_\xb1r
\xe8+
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
);

74
u\x9\xa964_t

p_addr_by\x8bs
 =
p_addr_\x\xe3icks
 <<
CLICK_SHIFT
;

75
k\x94\xc3l_pml4
.
\xb1rs
[
idx4
] =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xb7ge_d\x9c_\xb1r
*>(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
p_addr_by\x8bs
));

77
	`mem\xa3t
(
k\x94\xc3l_pml4
.
\xb1rs
[
idx4
], 0, (
\xb7ge_d\x9c_\xb1r
));

80 ()
\xb7
;

81 ()
\xe6ags
;

82 
OK
;

83
	}
}

	@kernel/pqcrypto.cpp

1 
	~"pq\xfcy\xb1o.h\xb5
"

8 
	~"../\xfcy\xb1o/kyb\x94_im\xb6/\xadi.h
"

9 
	~<\xac\xbfy
>

10 
	~<c\xa1d\x9\xa9
>

11 
	~<\xa5\x\xaf
>

14
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

15
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>

16
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
public_key
,

17
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xa3\xfc\x91_key
);

20
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

24
KeyPa\x9c

g\x92\x94\xa9e_key\xb7\x9c
(\xe8
	gn\xdbx\xfb\xb1
 {

25
KeyPa\x9c

	gkp
{};

26
pq\xfcy\xa1\x\xabs_kyb\x94512_\xbbf_key\xb7\x9c
(
kp
.
public_key
.
d\xa9a
(), kp.
\xb4iv\xa9e_key
.data());

27 
	gkp
;

36
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>

37
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(cڡ
KeyPa\x9c
 &
lo\xf\xe6
, cڡ KeyPa\x9c &
\xb3\x94
\xe8
	gn\xdbx\xfb\xb1
 {

38
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
u\x9\xa98_t
>
pk
{
\xb3\x94
.
public_key
};

39
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
u\x9\xa98_t
>
sk
{
lo\xf\xe6
.
\xb4iv\xa9e_key
};

41 i\xe0(
	gpk
.
size
(\xe8!\xf0
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
 ||

42
sk
.
size
(\xe8!\xf0
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
) {

46
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
	gpk_fixed
{
	g\xb3\x94
.
	gpublic_key
};

47
	g\xa1d
::
\xa5\xaa
<cڡ
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
	gsk_fixed
{
	glo\xf\xe6
.
	g\xb4iv\xa9e_key
};

48 
	gpq\xfcy\xb1o
::
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
pk_fixed
,
sk_fixed
);

	@kernel/pqcrypto.hpp

1 #\xb4agm\xa8
\xda\xfb


6 
	~"../\xfcy\xb1o/kyb\x94_im\xb6/\xadi.h
"

7 
	~<\xac\xbfy
>

8 
	~<c\xa1d\x9\xa9
>

10
\xc7me\xa5a\xfb

	gpq\xfcy\xb1o
 {

15 
	sKeyPa\x9c
 {

16
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
	gpublic_key
;

17
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
	g\xb4iv\xa9e_key
;

28 [[
nodis\xf\xe4d
]]
KeyPa\x9c

g\x92\x94\xa9e_key\xb7\x9c
(\xe8
	gn\xdbx\xfb\xb1
;

40 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gpq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
>

41
compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(cڡ
KeyPa\x9c
 &
lo\xf\xe6
, cڡ KeyPa\x9c &
\xb3\x94
\xe8
	gn\xdbx\xfb\xb1
;

	@kernel/printer.cpp

23 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

24 
	~"../h/com.h\xb5
"

25 
	~"../h/cڡ.h\xb5
"

26 
	~"../h/\x94r\xdc.h\xb5
"

27 
	~"../h/ty\xb3.h\xb5
"

28 
	~"cڡ.h\xb5
"

29 
	~"glo.h\xb5
"

30 
	~"\xb4oc.h\xb5
"

31 
	~"ty\xb3.h\xb5
"

32 
	~<c\xa1ddef
>

33 
	~<c\xa1d\x9\xa9
>

35 
	#NORMAL_STATUS
 0xDF

	)

36 
	#BUSY_STATUS
 0x5F

	)

37 
	#ASSERT_STROBE
 0x1D

	)

38 
	#NEGATE_STROBE
 0x1C

	)

39 
	#SELECT
 0x0C

	)

40 
	#INIT_PRINTER
 0x08

	)

41 
	#NO_PAPER
 0x20

	)

42 
	#OFF_LINE
 0x10

	)

43 
	#PR_ERROR
 0x08

	)

44 
	#PR_COLOR_BASE
 0x378

	)

45 
	#PR_MONO_BASE
 0x3BC

	)

46 
	#LOW_FOUR
 0xF

	)

47 
	#CANCELED
 -999

	)

48 
	#DELAY_COUNT
 100

	)

49 
	#DELAY_LOOP
 1000

	)

50 
	#MAX_REP
 1000

	)

52 
	gp\xd\xf9_ba\xa3
;

53 
	g\xf\xe6\xcbr
;

54 
	g\xb4oc_\xc4
;

55 
	g\xa1d
::
size_t

\xdcig_cou\xc1
;

56 
	ges
;

57 
	goff\xa3t
;

58
PUBLIC

	g\xa1d
::
size_t

pcou\xc1
;

59
PUBLIC
 
	g\xb4_busy
;

60
PUBLIC
 
	gcum_cou\xc1
;

61
PUBLIC
 
	g\xb4ev_\xf9
;

66
PUBLIC
 
	$\xb4\x9a\x8br_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

69
mes\xa7ge

\xb4\x9at_mess
;

71
	`\xb4\x9\xa9_\x9a\x99
();

73 
TRUE
) {

74
	`\xbb\xfbive
(
ANY
, &
\xb4\x9at_mess
);

75 
\xb4\x9at_mess
.
m_ty\xb3
) {

76 
TTY_WRITE
:

77
	`do_wr\x99e
(&
\xb4\x9at_mess
);

79 
CANCEL
:

80
	`do_\xf\xe2\xfbl
(&
\xb4\x9at_mess
);

82 
TTY_O_DONE
:

83
	`do_d\xd\xab
(&
\xb4\x9at_mess
);

89
	}
}

94 
	$do_wr\x99e
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

97 
i
,
j
,
r
,
v\x\xabue
;

98 
\xb4oc
 *
\xbd
;

99
u\x9\xa964_t

phys
;

102
r
 =
OK
;

105 i\xe0(
\xb4_busy
)

106
r
 =
E\xbc\xdcCode
::
EAGAIN
;

107 i\xe0(
	`cou\xc1
(*
m_\xb1r
) <= 0)

108
r
 =
E\xbc\xdcCode
::
EINVAL
;

111
\xbd
 =
	`\xb4oc_addr
(
	`\xb4oc_\xc4
(*
m_\xb1r
));

114
phys
 =
	`um\xad
(
\xbd
,
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`add\xbbss
(*
m_\xb1r
)),

115
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
)));

116 i\xe0(
phys
 == 0)

117
r
 =
E\xbc\xdcCode
::
E_BAD_ADDR
;

119 i\xe0(
r
 =\xf0
OK
) {

121
	`lock
();

122
\xffΔ
 =
m_\xb1r
->
m_sour\xfb
;

123
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(*
m_\xb1r
);

124
pcou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

125
\xdcig_cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

127
es
 =
\xa1\xa9ic_\xff\xa1
<>(
phys
 >>
CLICK_SHIFT
);

128
off\xa3t
 =
\xa1\xa9ic_\xff\xa1
<>(
phys
 &
LOW_FOUR
);

131 
i
 = 0; i <
MAX_REP
; i++) {

132
	`p\xd\xf9_\x9a
(
p\xd\xf9_ba\xa3
 + 1, &
v\x\xabue
);

133 i\xe0(
v\x\xabue
 =\xf0
NORMAL_STATUS
) {

134
\xb4_busy
 =
TRUE
;

135
	`\xb4_ch\xac
();

136
r
 =
SUSPEND
;

139 i\xe0(
v\x\xabue
 =\xf0
BUSY_STATUS
) {

140 
j
 = 0; j <
DELAY_LOOP
; j++)

144
	`\xb4_\x94r\xdc
(
v\x\xabue
);

145
r
 =
E\xbc\xdcCode
::
EIO
;

152 i\xe0(
v\x\xabue
 =\xf0
BUSY_STATUS
)

153
r
 =
E\xbc\xdcCode
::
EAGAIN
;

154
	`\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
	`\xb4oc_\xc4
(*m_\xb1r),
r
);

155
	}
}

160 
	$do_d\xd\xab
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

163 
\xa1\xa9us
;

165
\xa1\xa9us
 = (
	`\xbbp_\xa1\xa9us
(*
m_\xb1r
\xe8=\xf0
OK
 ?
\xdcig_cou\xc1
 :
E\xbc\xdcCode
::
EIO
);

166 i\xe0(
\xb4oc_\xc4
 !\xf0
CANCELED
) {

167
	`\xbb\xb6y
(
REVIVE
,
\xffΔ
,
\xb4oc_\xc4
,
\xa1\xa9us
);

168 i\xe0(
\xa1\xa9us
 =\xf0
E\xbc\xdcCode
::
EIO
)

169
	`\xb4_\x94r\xdc
(
	`\xbbp_\xa1\xa9us
(*
m_\xb1r
));

171
\xb4_busy
 =
FALSE
;

172
	}
}

177
PRIVATE

	$do_\xf\xe2\xfbl
(
m_\xb1r
)

178
mes\xa7ge
 *
m_\xb1r
;

184 i\xe0(
\xb4_busy
 =\xf0
FALSE
)

186
\xb4_busy
 =
FALSE
;

187
pcou\xc1
 = 0;

188
\xb4oc_\xc4
 =
CANCELED
;

189
	`\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
	`\xb4oc_\xc4
(*m_\xb1r),
E\xbc\xdcCode
::
EINTR
);

190
	}
}

196 
	$\xbb\xb6y
(
code
, 
\xbb\xb6y\x93
, 
\xb4o\xfbss
, 
\xa1\xa9us
\xe8
n\xdbx\xfb\xb1
 {

199
mes\xa7ge

\xb4_mess
;

201
\xb4_mess
.
m_ty\xb3
 =
code
;

202
	`\xbbp_\xa1\xa9us
(
\xb4_mess
\xe8\xf0
\xa1\xa9us
;

203
	`\xbbp_\xb4oc_\xc4
(
\xb4_mess
\xe8\xf0
\xb4o\xfbss
;

204
	`\xa3nd
(
\xbb\xb6y\x93
, &
\xb4_mess
);

205
	}
}

210 
	$\xb4_\x94r\xdc
(
\xa1\xa9us
\xe8
n\xdbx\xfb\xb1
 {

213 i\xe0(
\xa1\xa9us
 &
NO_PAPER
)

214
	`\xb4\x9\xa9f
("Printer is out of\x85aper\n");

215 i\xe0((
\xa1\xa9us
 &
OFF_LINE
) == 0)

216
	`\xb4\x9\xa9f
("Printer is\x82ot on\x86ine\n");

217 i\xe0((
\xa1\xa9us
 &
PR_ERROR
) == 0)

218
	`\xb4\x9\xa9f
("Printer\x83rror\n");

219
	}
}

224 
	$\xb4\x9\xa9_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

227 
i
;

228 
c\xde\xdc
;

230
p\xd\xf9_ba\xa3
 = (
c\xde\xdc
 ?
PR_COLOR_BASE
 :
PR_MONO_BASE
);

231
\xb4_busy
 =
FALSE
;

232
	`p\xd\xf9_out
(
p\xd\xf9_ba\xa3
 + 2,
INIT_PRINTER
);

233 
i
 = 0; i <
DELAY_COUNT
; i++)

235
	`p\xd\xf9_out
(
p\xd\xf9_ba\xa3
 + 2,
SELECT
);

236
	}
}

241
PUBLIC
 
	$\xb4_ch\xac
(\xe8
n\xdbx\xfb\xb1
 {

248 
v\x\xabue
,
ch
,
i
;

249 
c
;

250 
	`g\x91_by\x8b
(
\xa3g
,

251 
off
\xe8
n\xdbx\xfb\xb1
;

254 i\xe0(
pcou\xc1
 !\xf0
\xdcig_cou\xc1
)

255
	`p\xd\xf9_out
(
INT_CTL
,
ENABLE
);

256 i\xe0(
\xb4_busy
 =\xf0
FALSE
)

259 
pcou\xc1
 > 0) {

260
	`p\xd\xf9_\x9a
(
p\xd\xf9_ba\xa3
 + 1, &
v\x\xabue
);

261 i\xe0(
v\x\xabue
 =\xf0
NORMAL_STATUS
) {

264
c
 =
\xa1\xa9ic_\xff\xa1
<>(

265
	`g\x91_by\x8b
(
\xa1\xa9ic_\xff\xa1
<>(
es
), s\x8ftic_\xff\xa1<>(
off\xa3t
)));

266
ch
 =
c
 &
BYTE
;

267
	`p\xd\xf9_out
(
p\xd\xf9_ba\xa3
,
ch
);

268
	`p\xd\xf9_out
(
p\xd\xf9_ba\xa3
 + 2,
ASSERT_STROBE
);

269
	`p\xd\xf9_out
(
p\xd\xf9_ba\xa3
 + 2,
NEGATE_STROBE
);

270
off\xa3t
++;

271
pcou\xc1
--;

272
cum_cou\xc1
++;

273 
i
 = 0; i <
DELAY_COUNT
; i++)

275 } i\xe0(
v\x\xabue
 =\xf0
BUSY_STATUS
) {

283
\x9at_mess
.
m_ty\xb3
 =
TTY_O_DONE
;

284
	`\xbbp_\xa1\xa9us
(
\x9at_mess
\xe8\xf0(
pcou\xc1
 =\xf00 ?
OK
 :
v\x\xabue
);

285
	`\x9a\x8b\xbcu\xb1
(
PRINTER
, &
\x9at_mess
);

286
	}
}

	@kernel/proc.cpp

16 
	~"\xb4oc.h\xb5
"

17 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

18 
	~"../h/com.h\xb5
"

19 
	~"../h/cڡ.h\xb5
"

20 
	~"../h/\x94r\xdc.h\xb5
"

21 
	~"../h/ty\xb3.h\xb5
"

22 
	~"cڡ.h\xb5
"

23 
	~"glo.h\xb5
"

24 
	~"ty\xb3.h\xb5
"

25 
	~<c\xa1ddef
>

26 
	~<c\xa1d\x9\xa9
>

38
PUBLIC
 
	$\x9a\x8b\xbcu\xb1
(
\x8fsk
,
mes\xa7ge
 *
m_\xb1r
) {

41 
i
,
n
,
\xded_m\xad
,
this_b\x99
;

46
this_b\x99
 = 1 << (-
\x8fsk
);

47 i\xe0(
	`m\x9ai_\xa3nd
(
HARDWARE
,
\x8fsk
,
m_\xb1r
\xe8!\xf0
OK
) {

49
\xded_m\xad
 =
busy_m\xad
;

50 i\xe0(
\x8fsk
 =\xf0
CLOCK
) {

51
lo\xa1_ticks
++;

53
busy_m\xad
 |\xf0
this_b\x99
;

54
\x8fsk_mess
[-
\x8fsk
] =
m_\xb1r
;

58
busy_m\xad
 &\xf0~
this_b\x99
;

59
\xded_m\xad
 =
busy_m\xad
;

63 i\xe0(
\xded_m\xad
 != 0) {

64 
i
 = 2; i <\xf0
NR_TASKS
; i++) {

66 i\xe0((
\xded_m\xad
 >>
i
) & 1) {

68
n
 =
	`m\x9ai_\xa3nd
(
HARDWARE
, -
i
,
\x8fsk_mess
[i]);

69 i\xe0(
n
 =\xf0
OK
)

70
busy_m\xad
 &\xf0~(1 <<
i
);

76 #i\xe0
SCHED_ROUND_ROBIN


77 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
TASK_Q
] !\xf0
nuαr
 &&

78 (
cur_\xb4oc
 >\xf00 || cur_\xb4o\xf8=\xf0
IDLE
))

80 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
PRI_TASK
] !\xf0
nuαr
 &&

81 (
cur_\xb4oc
 >\xf00 || cur_\xb4o\xf8=\xf0
IDLE
))

83
	`pick_\xb4oc
();

84
	`pick_\xb4oc
();

85
	}
}

102
PUBLIC
 
	$sys_\xff\x\xfb
(
fun\xf9i\xda
, 
\xffΔ
, 
\xa4c_de\xa1
,
mes\xa7ge
 *
m_\xb1r
) {

109 
\xb4oc
 *
\xbd
;

110 
n
;

113
\xbd
 =
	`\xb4oc_addr
(
\xffΔ
);

114 i\xe0(
\xa4c_de\xa1
 < -
NR_TASKS
 || (\xa4c_de\xa1 >\xf0
NR_PROCS
 && src_de\xa1 !\xf0
ANY
)) {

115
\xbd
->
p_\xbbg
[
RET_REG
] =
E\xbc\xdcCode
::
E_BAD_SRC
;

118 i\xe0(
fun\xf9i\xda
 !\xf0
BOTH
 &&
\xffΔ
 >\xf0
LOW_USER
) {

119
\xbd
->
p_\xbbg
[
RET_REG
] =
E\xbc\xdcCode
::
E_NO_PERM
;

124 i\xe0(
fun\xf9i\xda
 &
SEND
) {

125
n
 =
	`m\x9ai_\xa3nd
(
\xffΔ
,
\xa4c_de\xa1
,
m_\xb1r
);

126 i\xe0(
fun\xf9i\xda
 =\xf0
SEND
 ||
n
 !\xf0
OK
)

127
\xbd
->
p_\xbbg
[
RET_REG
] =
n
;

128 i\xe0(
n
 !\xf0
OK
)

132 i\xe0(
fun\xf9i\xda
 &
RECEIVE
) {

133
n
 =
	`m\x9ai_\xbbc
(
\xffΔ
,
\xa4c_de\xa1
,
m_\xb1r
);

134
\xbd
->
p_\xbbg
[
RET_REG
] =
n
;

136
	}
}

153
PUBLIC
 
	$m\x9ai_\xa3nd
(
\xffΔ
, 
de\xa1
,
mes\xa7ge
 *
m_\xb1r
) {

159 
\xb4oc
 *
\xffΔ_\xb1r
, *
de\xa1_\xb1r
, *
\xc3xt_\xb1r
;

160
\xa1d
::
size_t

vb
;

161
\xa1d
::
size_t

vlo
,
vhi
;

162
\xa1d
::
size_t

\xcbn
;

165 i\xe0(
\xffΔ
 >\xf0
LOW_USER
 && (
de\xa1
 !\xf0
FS_PROC_NR
 && de\xa1 !\xf0
MM_PROC_NR
))

166  (
E\xbc\xdcCode
::
E_BAD_DEST
);

167
\xffΔ_\xb1r
 =
	`\xb4oc_addr
(
\xffΔ
);

168
de\xa1_\xb1r
 =
	`\xb4oc_addr
(
de\xa1
);

169 i\xe0(
de\xa1_\xb1r
->
p_\xe6ags
 &
P_SLOT_FREE
)

170  (
E\xbc\xdcCode
::
E_BAD_DEST
);

173
\xcbn
 =
\xffΔ_\xb1r
->
p_m\xad
[
D
].
mem_\xcbn
;

174
vb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
m_\xb1r
);

175
vlo
 =
vb
 >>
CLICK_SHIFT
;

176
vhi
 = (
vb
 +
MESS_SIZE
 - 1) >>

177
CLICK_SHIFT
;

179 i\xe0(
vhi
 <
vlo
 || vh\x98-
\xffΔ_\xb1r
->
p_m\xad
[
D
].
mem_v\x9c
 >\xf0
\xcbn
)

180  (
E\xbc\xdcCode
::
E_BAD_ADDR
);

183 i\xe0((
de\xa1_\xb1r
->
p_\xe6ags
 &
RECEIVING
) &&

184 (
de\xa1_\xb1r
->
p_g\x91\xe4om
 =\xf0
ANY
 || de\xa1_\xb1r->p_g\x91\xe4om =\xf0
\xffΔ
)) {

186
	`\xfd_mess
(
\xffΔ
,
\xffΔ_\xb1r
->
p_m\xad
[
D
].
mem_phys
,
m_\xb1r
,
de\xa1_\xb1r
->p_map[D].mem_phys,

187
de\xa1_\xb1r
->
p_messbuf
);

188
de\xa1_\xb1r
->
p_\xe6ags
 &\xf0~
RECEIVING
;

189 i\xe0(
de\xa1_\xb1r
->
p_\xe6ags
 == 0)

190
	`\xbbady
(
de\xa1_\xb1r
);

193 i\xe0(
\xffΔ
 =\xf0
HARDWARE
)

194  (
E\xbc\xdcCode
::
E_OVERRUN
);

195
\xffΔ_\xb1r
->
p_messbuf
 =
m_\xb1r
;

196
\xffΔ_\xb1r
->
p_\xe6ags
 |\xf0
SENDING
;

197
	`uėdy
(
\xffΔ_\xb1r
);

200 i\xe0((
\xc3xt_\xb1r
 =
de\xa1_\xb1r
->
p_\xf\xe6\xcbrq
\xe8=\xf0
nuαr
) {

201
de\xa1_\xb1r
->
p_\xf\xe6\xcbrq
 =
\xffΔ_\xb1r
;

203 
\xc3xt_\xb1r
->
p_\xa3ndl\x9ak
 !\xf0
nuαr
)

204
\xc3xt_\xb1r
 =\x82ext_\xb1r->
p_\xa3ndl\x9ak
;

205
\xc3xt_\xb1r
->
p_\xa3ndl\x9ak
 =
\xffΔ_\xb1r
;

207
\xffΔ_\xb1r
->
p_\xa3ndl\x9ak
 =
nuαr
;

209  (
OK
);

210
	}
}

227 
	$m\x9ai_\xbbc
(
\xffΔ
, 
\xa4c
,
mes\xa7ge
 *
m_\xb1r
) {

235 
\xb4oc
 *
\xffΔ_\xb1r
, *
\xa3nd\x94_\xb1r
, *
\xb4ev_\xb1r
;

236 
\xa3nd\x94
;

238
\xffΔ_\xb1r
 =
	`\xb4oc_addr
(
\xffΔ
);

241
\xa3nd\x94_\xb1r
 =
\xffΔ_\xb1r
->
p_\xf\xe6\xcbrq
;

242 
\xa3nd\x94_\xb1r
 !\xf0
nuαr
) {

243
\xa3nd\x94
 =
\xa3nd\x94_\xb1r
 -
\xb4oc
 -
NR_TASKS
;

244 i\xe0(
\xa4c
 =\xf0
ANY
 || sr\xf8=\xf0
\xa3nd\x94
) {

247
	`\xfd_mess
(
\xa3nd\x94
,
\xa3nd\x94_\xb1r
->
p_m\xad
[
D
].
mem_phys
, s\x92d\x94_\xb1r->
p_messbuf
,

248
\xffΔ_\xb1r
->
p_m\xad
[
D
].
mem_phys
,
m_\xb1r
);

249
\xa3nd\x94_\xb1r
->
p_\xe6ags
 &\xf0~
SENDING
;

250 i\xe0(
\xa3nd\x94_\xb1r
->
p_\xe6ags
 == 0)

251
	`\xbbady
(
\xa3nd\x94_\xb1r
);

252 i\xe0(
\xa3nd\x94_\xb1r
 =\xf0
\xffΔ_\xb1r
->
p_\xf\xe6\xcbrq
)

253
\xffΔ_\xb1r
->
p_\xf\xe6\xcbrq
 =
\xa3nd\x94_\xb1r
->
p_\xa3ndl\x9ak
;

255
\xb4ev_\xb1r
->
p_\xa3ndl\x9ak
 =
\xa3nd\x94_\xb1r
->p_sendlink;

256  (
OK
);

258
\xb4ev_\xb1r
 =
\xa3nd\x94_\xb1r
;

259
\xa3nd\x94_\xb1r
 = s\x92d\x94_\xb1r->
p_\xa3ndl\x9ak
;

263
\xffΔ_\xb1r
->
p_g\x91\xe4om
 =
\xa4c
;

264
\xffΔ_\xb1r
->
p_messbuf
 =
m_\xb1r
;

265
\xffΔ_\xb1r
->
p_\xe6ags
 |\xf0
RECEIVING
;

266
	`uėdy
(
\xffΔ_\xb1r
);

271 i\xe0(
sig_\xb4ocs
 > 0 &&
\xffΔ
 =\xf0
MM_PROC_NR
 &&
\xa4c
 =\xf0
ANY
)

272
	`\x9af\xdcm
(
MM_PROC_NR
);

273  (
OK
);

274
	}
}

284
PUBLIC

	$pick_\xb4oc
() {

287 
q
;

288 #i\xe0
SCHED_ROUND_ROBIN


289 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
TASK_Q
] !\xf0
nuαr
)

290
q
 =
TASK_Q
;

291 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
SERVER_Q
] !\xf0
nuαr
)

292
q
 =
SERVER_Q
;

294
q
 =
USER_Q
;

296 
q
 = 0; q <
SCHED_QUEUES
; q++) {

297 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
q
] !\xf0
nuαr
)

311
\xb4ev_\xb4oc
 =
cur_\xb4oc
;

312 i\xe0(
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
q
] !\xf0
nuαr
) {

314
cur_\xb4oc
 =
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
q
] -
\xb4oc
 -
NR_TASKS
;

315
\xb4oc_\xb1r
 =
rdy_h\x97d
[
cu\xbc\x92t_\xfdu
][
q
];

316 i\xe0(
cur_\xb4oc
 >\xf0
LOW_USER
)

317
b\x9\x96_\xb1r
 =
\xb4oc_\xb1r
;

320
cur_\xb4oc
 =
IDLE
;

321
\xb4oc_\xb1r
 =
	`\xb4oc_addr
(
HARDWARE
);

322
b\x9\x96_\xb1r
 =
\xb4oc_\xb1r
;

324
	}
}

337
PUBLIC
 
	$\xbbady
(
\xb4oc
 *
\xbd
) {

345 
q
;

346 
r
;

347 
\xfdu
 =
\xbd
->
p_\xfdu
;

349
	`lock
();

350 #i\xe0
SCHED_ROUND_ROBIN


351
r
 = (
\xbd
 -
\xb4oc
\xe8-
NR_TASKS
;

352
q
 = (
r
 < 0 ?
TASK_Q
 :\x84 <
LOW_USER
 ?
SERVER_Q
 :
USER_Q
);

354
q
 =
\xbd
->
p_\xb4iܙy
;

355 i\xe0(
q
 < 0)

356
q
 = 0;

357 i\xe0(
q
 >\xf0
SCHED_QUEUES
)

358
q
 =
SCHED_QUEUES
 - 1;

362 i\xe0(
rdy_h\x97d
[
\xfdu
][
q
] =\xf0
nuαr
)

363
r_rdy_h\x97d
[
\xfdu
][
q
] =
\xbd
;

365
rdy_\x8f\x9e
[
\xfdu
][
q
]->
p_\xc3x\x8c\x97dy
 =
\xbd
;

366
rdy_\x8f\x9e
[
\xfdu
][
q
] =
\xbd
;

367
\xbd
->
p_\xc3x\x8c\x97dy
 =
nuαr
;

368
	`\xbb\xa1\xd\xfb
();

369
	}
}

382
PUBLIC
 
	$uėdy
(
\xb4oc
 *
\xbd
) {

385 
\xb4oc
 *
xp
;

386 
r
,
q
;

387 
\xfdu
 =
\xbd
->
p_\xfdu
;

389
	`lock
();

390 #i\xe0
SCHED_ROUND_ROBIN


391
r
 =
\xbd
 -
\xb4oc
 -
NR_TASKS
;

392
q
 = (
r
 < 0 ?
TASK_Q
 :\x84 <
LOW_USER
 ?
SERVER_Q
 :
USER_Q
);

394
q
 =
\xbd
->
p_\xb4iܙy
;

395 i\xe0(
q
 < 0)

396
q
 = 0;

397 i\xe0(
q
 >\xf0
SCHED_QUEUES
)

398
q
 =
SCHED_QUEUES
 - 1;

400 i\xe0((
xp
 =
rdy_h\x97d
[
\xfdu
][
q
]\xe8=\xf0
nuαr
)

402 i\xe0(
xp
 =\xf0
\xbd
) {

404
rdy_h\x97d
[
\xfdu
][
q
] =
xp
->
p_\xc3x\x8c\x97dy
;

405
	`pick_\xb4oc
();

410 
xp
->
p_\xc3x\x8c\x97dy
 !\xf0
\xbd
)

411 i\xe0((
xp
 = xp->
p_\xc3x\x8c\x97dy
\xe8=\xf0
nuαr
)

413
xp
->
p_\xc3x\x8c\x97dy
 = xp->p_nextready->p_nextready;

414 
xp
->
p_\xc3x\x8c\x97dy
 !\xf0
nuαr
)

415
xp
 = xp->
p_\xc3x\x8c\x97dy
;

416
rdy_\x8f\x9e
[
\xfdu
][
q
] =
xp
;

418
	`\xbb\xa1\xd\xfb
();

419
	}
}

429
PUBLIC
 
	$sched
() {

435
	`lock
();

436 #i\xe0
SCHED_ROUND_ROBIN


437 i\xe0(
rdy_h\x97d
[
USER_Q
] =\xf0
nuαr
) {

438
	`\xbb\xa1\xd\xfb
();

443
rdy_\x8f\x9e
[
USER_Q
]->
p_\xc3x\x8c\x97dy
 =
rdy_h\x97d
[USER_Q];

444
rdy_\x8f\x9e
[
USER_Q
] =
rdy_h\x97d
[USER_Q];

445
rdy_h\x97d
[
USER_Q
] =\x84dy_h\x97d[USER_Q]->
p_\xc3x\x8c\x97dy
;

446
rdy_\x8f\x9e
[
USER_Q
]->
p_\xc3x\x8c\x97dy
 =
nuαr
;

448 
q
 =
\xb4oc_\xb1r
->
p_\xb4iܙy
;

449 
\xfdu
 =
\xb4oc_\xb1r
->
p_\xfdu
;

450 i\xe0(
rdy_h\x97d
[
\xfdu
][
q
] =\xf0
nuαr
 ||

451
rdy_h\x97d
[
\xfdu
][
q
]->
p_\xc3x\x8c\x97dy
 =\xf0
nuαr
) {

452
	`\xbb\xa1\xd\xfb
();

455
rdy_\x8f\x9e
[
\xfdu
][
q
]->
p_\xc3x\x8c\x97dy
 =
rdy_h\x97d
[cpu][q];

456
rdy_\x8f\x9e
[
\xfdu
][
q
] =
rdy_h\x97d
[cpu][q];

457
rdy_h\x97d
[
\xfdu
][
q
] =\x84dy_h\x97d[\xfdu][q]->
p_\xc3x\x8c\x97dy
;

458
rdy_\x8f\x9e
[
\xfdu
][
q
]->
p_\xc3x\x8c\x97dy
 =
nuαr
;

460
	`pick_\xb4oc
();

461
	`\xbb\xa1\xd\xfb
();

462
	}
}

	@kernel/proc.hpp

1 #\xb4agm\xa8
\xda\xfb


10 
	~"../h/cڡ.h\xb5
"

11 
	~"../h/ty\xb3.h\xb5
"

12 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

13 
	~"ty\xb3.h\xb5
"

14 
	~"cڡ.h\xb5
"

15 #ifde\xe0
\xb4\x9atf


16 #unde\xe0
\xb4\x9atf


25
EXTERN
 
	s\xb4oc
 {

26
	m\xa1d
::
u\x9\xa964_t

p_\xbbg
[
NR_REGS
];

27
	mx\x9aim
::
v\x9\xf9_addr_t

p_\xa5
;

28 
pc_psw

	mp_p\xfdsw
;

29 
	mp_\xe6ags
;

30 
mem_m\xad

	mp_m\xad
[
NR_SEGS
];

31
	mx\x9aim
::
v\x9\xf9_addr_t

p_\xa5lim\x99
;

32
	mx\x9aim
::
pid_t

p_pid
;

33
	m\xa1d
::
u\x9\xa964_t

p_tok\x92
;

35
\xbb\xae_time

	mu\xa3r_time
;

36
\xbb\xae_time

	msys_time
;

37
\xbb\xae_time

	mch\x9ed_utime
;

38
\xbb\xae_time

	mch\x9ed_\xa1ime
;

39
\xbb\xae_time

	mp_\x\xab\xacm
;

41 
\xb4oc
 *
	mp_\xf\xe6\xcbrq
;

42 
\xb4oc
 *
	mp_\xa3ndl\x9ak
;

43
mes\xa7ge
 *
	mp_messbuf
;

44 
	mp_g\x91\xe4om
;

46 
\xb4oc
 *
	mp_\xc3x\x8c\x97dy
;

47 
	mp_\xb3nd\x9ag
;

48
	mx\x9aim
::
phys_addr_t

\xfc3
;

49 
	mp_\xb4iܙy
;

50 
	mp_\xfdu
;

51 }
	g\xb4oc
[
NR_TASKS
 +
NR_PROCS
];

54
\x9al\x9ae

cڡex\xb4
 
	gP_SLOT_FREE
 = 001;

55
\x9al\x9ae

cڡex\xb4
 
	gNO_MAP
 = 002;

56
\x9al\x9ae

cڡex\xb4
 
	gSENDING
 = 004;

57
\x9al\x9ae

cڡex\xb4
 
	gRECEIVING
 = 010;

59 
	#\xb4oc_addr
(
n
\xe8&
\xb4oc
[
NR_TASKS
 +\x82]

60
\x9al\x9ae

cڡex\xb4
 
\xb4oc
 *
NIL_PROC
 =
nuαr
;

	)

62
EXTERN
 
\xb4oc
 *
	g\xb4oc_\xb1r
;

63
EXTERN
 
\xb4oc
 *
	gb\x9\x96_\xb1r
;

64
EXTERN
 
\xb4oc
 *
	grdy_h\x97d
[
NR_CPUS
][
SCHED_QUEUES
];

65
EXTERN
 
\xb4oc
 *
	grdy_\x8f\x9e
[
NR_CPUS
][
SCHED_QUEUES
];

67
EXTERN
 
	gbusy_m\xad
;

68
EXTERN

mes\xa7ge
 *
	g\x8fsk_mess
[
NR_TASKS
 + 1];

	@kernel/quaternion_spinlock.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~<\xa9omic
>

8 
	~<c\xa1d\x9\xa9
>

10
\xc7me\xa5a\xfb

	ghy\xb3r
 {

15 
	sQu\xa9\x94ni\xda
 {

16 
	gw
{1.0F};

17 
	gx
{0.0F};

18 
	gy
{0.0F};

19 
	gz
{0.0F};

22
cڡex\xb4

Qu\xa9\x94ni\xda
() = ;

25
cڡex\xb4

Qu\xa9\x94ni\xda
(
sw
, 
sx
, 
sy
, 
sz
\xe8
	gn\xdbx\xfb\xb1


26 :
w
(
sw
),
x
(
sx
),
y
(
sy
),
z
(
sz
) {}

29 [[
nodis\xf\xe4d
]] 
cڡex\xb4

Qu\xa9\x94ni\xda

id
(\xe8
	gn\xdbx\xfb\xb1
 {  {}; }

34 [[
nodis\xf\xe4d
]]
cڡex\xb4

Qu\xa9\x94ni\xda

	gݔ\xa9\xdc
*(cڡ
	gQu\xa9\x94ni\xda
 &
	grhs
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

35 
	gQu\xa9\x94ni\xda
{

36
w
 *
	grhs
.
	gw
 -
x
 *\x84hs.
	gx
 -
y
 *\x84hs.
	gy
 -
z
 *\x84hs.
	gz
,

37
w
 *
	grhs
.
	gx
 +
x
 *\x84hs.
	gw
 +
y
 *\x84hs.
	gz
 -
z
 *\x84hs.
	gy
,

38
w
 *
	grhs
.
	gy
 -
x
 *\x84hs.
	gz
 +
y
 *\x84hs.
	gw
 +
z
 *\x84hs.
	gx
,

39
w
 *
	grhs
.
	gz
 +
x
 *\x84hs.
	gy
 -
y
 *\x84hs.
	gx
 +
z
 *\x84hs.
	gw
,

46 [[
nodis\xf\xe4d
]]
cڡex\xb4

Qu\xa9\x94ni\xda

c\xdajug\xa9e
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

47 
	gQu\xa9\x94ni\xda
{
	gw
, -
	gx
, -
	gy
, -
	gz
};

54 \xfeas\xa0
	cQu\xa9\x94ni\xdaSp\x9\xaeock
 {

55
	gpublic
:

56
Qu\xa9\x94ni\xdaSp\x9\xaeock
(\xe8
n\xdbx\xfb\xb1
 = ;

59 
lock
(cڡ
Qu\xa9\x94ni\xda
 &
tick\x91
\xe8
	gn\xdbx\xfb\xb1
 {

60 
	g\xe6ag
.
\x8b\xa1_\xaad_\xa3t
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
)) {

62
ܛ\xc1\xa9i\xda
 = or\x9b\xc1\xa9i\xda *
tick\x91
;

66 
u\xc6ock
(cڡ
Qu\xa9\x94ni\xda
 &
tick\x91
\xe8
	gn\xdbx\xfb\xb1
 {

67
	gܛ\xc1\xa9i\xda
 =
ܛ\xc1\xa9i\xda
 *
tick\x91
.
c\xdajug\xa9e
();

68
	g\xe6ag
.
\xfe\x97r
(
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
);

71
	g\xb4iv\xa9e
:

72
\xa1d
::
\xa9omic_\xe6ag

\xe6ag
{};

73
Qu\xa9\x94ni\xda

	gܛ\xc1\xa9i\xda
{};

79 \xfeas\xa0
	cQu\xa9\x94ni\xdaLockGu\xacd
 {

80
	gpublic
:

81
Qu\xa9\x94ni\xdaLockGu\xacd
(
Qu\xa9\x94ni\xdaSp\x9\xaeock
 &
\xa5\x9a
, cڡ
Qu\xa9\x94ni\xda
 &
t
\xe8
	gn\xdbx\xfb\xb1


82 :
lock
(
\xa5\x9a
),
tick\x91
(
t
) {

83
	glock
.
lock
(
tick\x91
);

85 ~
Qu\xa9\x94ni\xdaLockGu\xacd
(\xe8{
	glock
.
u\xc6ock
(
tick\x91
); }

87
	g\xb4iv\xa9e
:

88
Qu\xa9\x94ni\xdaSp\x9\xaeock
 &
lock
;

89
Qu\xa9\x94ni\xda

	gtick\x91
{};

	@kernel/schedule.cpp

1 
	~"schedu\xcb.h\xb5
"

2 
	~"\xa3rvi\xfb.h\xb5
"

4
\xc7me\xa5a\xfb

	gsched
 {

7
Schedu\xcbr

	gschedu\xcbr
{};

18
	g\xa1d
::
\xddtiڮ
<
x\x9aim
::
pid_t
>
Schedu\xcbr
::
\xb4\x93m\xb1
() {

19 i\xe0(
\xbbady_
.
em\xb1y
()) {

20
cu\xbc\x92t_
 = -1;

21 
	g\xa1d
::
nu\x\xfb\xddt
;

24 i\xe0(
	gcu\xbc\x92t_
 !\xf0-1 && !
blocked_
.
cڏ\x9as
(
cu\xbc\x92t_
)) {

25
\xbbady_
.
push_back
(
cu\xbc\x92t_
);

28
	gcu\xbc\x92t_
 =
\xbbady_
.
\xe4\xdat
();

29
	g\xbbady_
.
p\xdd_\xe4\xd\xa9
();

30 
	gcu\xbc\x92t_
;

41 
	gSchedu\xcbr
::
y\x9bld_to
(
x\x9aim
::
pid_t

\x8frg\x91
) {

42 i\xe0(!
\xa1d
::
\x94a\xa3
(
\xbbady_
,
\x8frg\x91
)) {

45 i\xe0(
	gcu\xbc\x92t_
 != -1) {

46
\xbbady_
.
push_back
(
cu\xbc\x92t_
);

48
	gcu\xbc\x92t_
 =
\x8frg\x91
;

61
bo\xde

	gSchedu\xcbr
::
block_\xda
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
) {

62 i\xe0(
g\xb\xe5h_
.
add_edge
(
\xa4c
,
d\xa1
)) {

63 
	g\xe7l\xa3
;

66
	gwa\x99\x9ag_
[
\xa4c
] =
d\xa1
;

67
	gblocked_
.
\x9a\xa3\xb9
(
\xa4c
);

69
	g\xa1d
::
\x94a\xa3
(
\xbbady_
,
\xa4c
);

71 i\xe0(
	gcu\xbc\x92t_
 =\xf0
\xa4c
) {

72
\xb4\x93m\xb1
();

74 
	g\x8cue
;

84 
	gSchedu\xcbr
::
unblock
(
x\x9aim
::
pid_t

pid
) {

85 i\xe0\xd7ut\xd8
\x99
 =
wa\x99\x9ag_
.
f\x9ad
(
pid
);
	g\x99
 !\xf0wa\x99\x9ag_.
\x92d
()) {

86
g\xb\xe5h_
.
\xbbmove_edge
(
pid
,
\x99
->
\xa3c\xdad
);

87
	gwa\x99\x9ag_
.
\x94a\xa3
(
\x99
);

90 i\xe0(
	gblocked_
.
\x94a\xa3
(
pid
)) {

91
	g\xbbady_
.
push_back
(
pid
);

101
bo\xde

	gSchedu\xcbr
::
is_blocked
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
 { 
blocked_
.
cڏ\x9as
(pid); }

106
	gx\x9aim
::
pid_t

Schedu\xcbr
::
pick
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\xbbady_
.
em\xb1y
(\xe8? -1 :\x84\x97dy_.
\xe4\xdat
(); }

115 
	gSchedu\xcbr
::
d\x9\xfb\xf9_h\x\xafdoff
(
x\x9aim
::
pid_t

\xbb\xfbiv\x94
) {

116 i\xe0(!
\xa1d
::
\x94a\xa3
(
\xbbady_
,
\xbb\xfbiv\x94
)) {

119 i\xe0(
	gcu\xbc\x92t_
 != -1) {

120
\xbbady_
.
push_back
(
cu\xbc\x92t_
);

122
	gcu\xbc\x92t_
 =
\xbb\xfbiv\x94
;

130 
	gSchedu\xcbr
::
\xfcash
(
x\x9aim
::
pid_t

pid
) {

131 i\xe0(!
svc
::
\xa3rvi\xfb_m\xaaag\x94
.
h\x\xafd\xcb_\xf\xffsh
(
pid
\xe8&&
cu\xbc\x92t_
 ==\x85id) {

133
cu\xbc\x92t_
 = -1;

	@kernel/schedule.hpp

1 #\xb4agm\xa8
\xda\xfb


2 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

3 
	~"wa\x99_g\xb\xe5h.h\xb5
"

4 
	~<\x\xabgܙhm
>

5 
	~<deque
>

6 
	~<\xddtiڮ
>

7 
	~<un\xdcd\x94ed_m\xad
>

8 
	~<un\xdcd\x94ed_\xa3t
>

10
\xc7me\xa5a\xfb

	gsched
 {

15 \xfeas\xa0
	cSchedu\xcbr
 {

16
	gpublic
:

18 
\x92queue
(
x\x9aim
::
pid_t

pid
\xe8{
\xbbady_
.
push_back
(pid); }

26
	g\xa1d
::
\xddtiڮ
<
x\x9aim
::
pid_t
>
\xb4\x93m\xb1
();

35 
y\x9bld_to
(
x\x9aim
::
pid_t

\x8frg\x91
);

45 
\xfcash
(
x\x9aim
::
pid_t

pid
);

48 [[
nodis\xf\xe4d
]]
	gx\x9aim
::
pid_t

cu\xbc\x92t
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
cu\xbc\x92t_
; }

60 [[
nodis\xf\xe4d
]]
bo\xde

block_\xda
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
);

70 
unblock
(
x\x9aim
::
pid_t

pid
);

78 [[
nodis\xf\xe4d
]]
bo\xde

is_blocked
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
;

86 [[
nodis\xf\xe4d
]]
	gx\x9aim
::
pid_t

pick
(\xe8cڡ
n\xdbx\xfb\xb1
;

97 
d\x9\xfb\xf9_h\x\xafdoff
(
x\x9aim
::
pid_t

\xbb\xfbiv\x94
);

102 [[
nodis\xf\xe4d
]] cڡ
	gωi\xfb
::
Wa\x99F\xdcG\xb\xe5h
 &
g\xb\xe5h
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
g\xb\xe5h_
; }

104
	g\xb4iv\xa9e
:

105
\xa1d
::
deque
<
x\x9aim
::
pid_t
>
\xbbady_
{};

106
	gx\x9aim
::
pid_t

cu\xbc\x92t_
{-1};

107
	g\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
>
blocked_
{};

108
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
,
	gx\x9aim
::pid_t>

109
wa\x99\x9ag_
{};

110
	gωi\xfb
::
Wa\x99F\xdcG\xb\xe5h

g\xb\xe5h_
{};

114
Schedu\xcbr

schedu\xcbr
;

	@kernel/sedenion.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~<\xac\xbfy
>

8 
	~<c\xa1d\x9\xa9
>

9 
	~<c\xa1dlib
>

10 
	~<\xa5\x\xaf
>

11 
	~<ut\x9e\x99y
>

13
\xc7me\xa5a\xfb

	ghy\xb3r
 {

15
\xc7me\xa5a\xfb

	gd\x91a\x9e
 {

20
	g\x8bm\xb6\xa9e
 <
	g\xa1d
::
size_t

N
>

21
cڡex\xb4

\xa1d
::
\xac\xbfy
<,
	gN
>
cd_mul
(cڡ std::\xac\xbfy<,
N
> &
a
,

22 cڡ
\xa1d
::
\xac\xbfy
<,
N
> &
b
) {

23
\xa1\xa9ic_as\xa3\xb9
((
N
 & (N - 1)) == 0, "dimension must be\x85ower of\x81wo");

24 
cڡex\xb4
 (
N
 == 1) {

25  {
a
[0] *
b
[0]};

27
cڡex\xb4

	g\xa1d
::
size_t

H
 =
N
 / 2;

28
	g\xa1d
::
\xac\xbfy
<,
	gH
>
	gaL
{},
	gaR
{},
	gbL
{},
	gbR
{};

29 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gH
; ++i) {

30
	gaL
[
i
] =
a
[i];

31
	gbL
[
i
] =
b
[i];

32
	gaR
[
i
] =
a
[\x98+
H
];

33
	gbR
[
i
] =
b
[\x98+
H
];

36 aut\xd8
	g\xcb\xe1
 =
cd_mul
<
H
>(
aL
,
	gbL
);

38
	g\xa1d
::
\xac\xbfy
<,
	gH
>
	gc\xdaj_bL
 =
bL
;

39 
	g\xa1d
::
size_t

i
 = 1;
	gi
 <
	gH
; ++i) {

40
	gc\xdaj_bL
[
i
] = -
c\xdaj_bL
[i];

42 aut\xd8
	g\x8bmp
 =
cd_mul
<
H
>(
c\xdaj_bL
,
	gaR
);

43 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gH
; ++i) {

44
	g\xcb\xe1
[
i
] -\xf0
\x8bmp
[i];

47 aut\xd8
	gright
 =
cd_mul
<
H
>(
bR
,
	gaL
);

49
	g\xa1d
::
\xac\xbfy
<,
	gH
>
	gc\xdaj_aL
 =
aL
;

50 
	g\xa1d
::
size_t

i
 = 1;
	gi
 <
	gH
; ++i) {

51
	gc\xdaj_aL
[
i
] = -
c\xdaj_aL
[i];

54 aut\xd8
	gtmp2
 =
cd_mul
<
H
>(
aR
,
	gbL
);

55 aut\xd8
	gright2
 =
cd_mul
<
H
>(
bR
,
	gc\xdaj_aL
);

56 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gH
; ++i) {

57
	gright
[
i
] +\xf0
right2
[i] +
tmp2
[i];

60
	g\xa1d
::
\xac\xbfy
<,
	gN
>
	g\xbbsu\xc9
{};

61 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gH
; ++i) {

62
	g\xbbsu\xc9
[
i
] =
\xcb\xe1
[i];

63
	g\xbbsu\xc9
[
i
 +
H
] =
right
[i];

65 
	g\xbbsu\xc9
;

74 
	sSed\x92i\xda
 {

75
	g\xa1d
::
\xac\xbfy
<, 16>
	gcomp
{};

80 [[
nodis\xf\xe4d
]]
Sed\x92i\xda

	gݔ\xa9\xdc
*(cڡ
	gSed\x92i\xda
 &
	grhs
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

81 
	gSed\x92i\xda
{
	gd\x91a\x9e
::
cd_mul
<16>(
comp
,
	grhs
.
	gcomp
)};

85
ex\xb6ic\x99

cڡex\xb4

Sed\x92i\xda
(
\xa1d
::
\xac\xbfy
<, 16>
c
\xe8
	gn\xdbx\xfb\xb1
 :
comp
(c) {}

87
cڡex\xb4

Sed\x92i\xda
() = ;

92 [[
nodis\xf\xe4d
]] 
n\xdcm_sq
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

93 
	gn
 = 0.0F;

94 
	gv
 :
comp
) {

95
n
 +\xf0
v
 * v;

97 
	gn
;

104 
	sZPa\x9c
 {

105
Sed\x92i\xda

	gpub
{};

106
Sed\x92i\xda

	g\xb4iv
{};

117 [[
nodis\xf\xe4d
]]
\x9al\x9ae

ZPa\x9c

z\xb7\x9c_g\x92\x94\xa9e
() {

118
	g\xa1d
::
\xac\xbfy
<, 16>
	gu
{};

119 &
	gv
 :
u
) {

120
v
 =
\xa1\xa9ic_\xff\xa1
<>(
\xbfnd
()\xe8/
RAND_MAX
;

122
	g\xa1d
::
\xac\xbfy
<, 16>
	ga
{};

123 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

124
	ga
[
i
] =
u
[i];

125
	ga
[
i
 + 8] =
u
[i];

127
	g\xa1d
::
\xac\xbfy
<, 16>
	gb
{};

128 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

129
	gb
[
i
] =
u
[i];

130
	gb
[
i
 + 8] = -
u
[i];

132 
	gZPa\x9c
{
	gSed\x92i\xda
{
	ga
}, Sed\x92i\xda{
	gb
}};

142 [[
nodis\xf\xe4d
]]
\x9al\x9ae

Sed\x92i\xda

zlock_\x92\xfcy\xb1
(cڡ Sed\x92i\xda &
pub
,
\xa1d
::
\xa5\xaa
<cڡ
u\x9\xa98_t
, 16>
m
) {

143
	g\xa1d
::
\xac\xbfy
<, 16>
	gblock
{};

144 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 16 && i <
	gm
.
size
(); ++i) {

145
	gblock
[
i
] =
\xa1\xa9ic_\xff\xa1
<>(
m
[i]);

147
	g\xa1d
::
\xac\xbfy
<, 16>
	gsum
{};

148 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 16; ++i) {

149
	gsum
[
i
] =
pub
.
comp
[i] +
block
[i];

151 
	gSed\x92i\xda
{
	gsum
};

161 [[
nodis\xf\xe4d
]]
\x9al\x9ae

	g\xa1d
::
\xac\xbfy
<
u\x9\xa98_t
, 16>
zlock_de\xfcy\xb1
(cڡ
Sed\x92i\xda
 &
pub
, cڡ Sed\x92i\xda &
c
) {

162
	g\xa1d
::
\xac\xbfy
<
u\x9\xa98_t
, 16>
	gout
{};

163 
	g\xa1d
::
size_t

i
 = 0;
	gi
 < 16; ++i) {

164 
	gv\x\xabue
 =
c
.
comp
[
i
] -
pub
.comp[i];

165
	gout
[
i
] =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa98_t
>(
v\x\xabue
);

167 
	gout
;

173 [[
nodis\xf\xe4d
]]
\x9al\x9ae

bo\xde

is_z\x94o_divis\xdc
(cڡ
Sed\x92i\xda
 &
s
\xe8
	gn\xdbx\xfb\xb1
 {

174 
	gs
.
n\xdcm_sq
() == 0.0F;

180
\x9al\x9ae
 
\x92\xfcy\xb1_\xa3d\x92i\xda
(
\xa1d
::
\xa5\xaa
<cڡ std::
u\x9\xa98_t
>
\x9a
, std::\xa5\xaa<\xa1d::u\x9at8_t>
out
,

181 cڡ
Sed\x92i\xda
 &
key
) {

182 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	g\x9a
.
size
(); ++i) {

183
	gout
[
i
] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
>(
\x9a
[i] ^ s\x8ftic_\xff\xa1<\xa1d::u\x9at8_t>(
key
.
comp
[i % 16]));

	@kernel/service.cpp

1 
	~"\xa3rvi\xfb.h\xb5
"

2 
	~"schedu\xcb.h\xb5
"

4 
	~<\x\xabgܙhm
>

5 
	~<f\xa1\xbbam
>

6 
	~<\xc6ohm\x\xafn/js\xda.h\xb5
>

7 
	~<\xb\xe2ges
>

9
\xc7me\xa5a\xfb

	gsvc
 {

17
bo\xde

	gS\x94vi\xfbM\x\xafag\x94
::
has_\xb7th
(
x\x9aim
::
pid_t

\xa1\xact
, x\x9aim::pid_\x88
\x8frg\x91
,

18
\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
> &
vis\x99ed
) const {

19 i\xe0(
\xa1\xact
 =\xf0
\x8frg\x91
) {

20 
\x8cue
;

22 i\xe0(!
	gvis\x99ed
.
\x9a\xa3\xb9
(
\xa1\xact
).
	g\xa3c\xdad
) {

23 
	g\xe7l\xa3
;

25 aut\xd8
	g\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
\xa1\xact
);

26 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

27 
\xe7l\xa3
;

29 
	gx\x9aim
::
pid_t

d\x95
 :
\x99
->
\xa3c\xdad
.
d\x95s
) {

30 i\xe0(
has_\xb7th
(
d\x95
,
\x8frg\x91
,
vis\x99ed
)) {

31 
	g\x8cue
;

34 
	g\xe7l\xa3
;

42 
	gS\x94vi\xfbM\x\xafag\x94
::
\xbbgi\xa1\x94_\xa3rvi\xfb
(
x\x9aim
::
pid_t

pid
, cڡ
\xa1d
::
ve\xf9\xdc
<x\x9aim::pid_t> &
d\x95s
,

43
\xa1d
::
u\x9\xa932_t

lim\x99
) {

44 aut\xd8&
\x9afo
 =
\xa3rvi\xfbs_
[
pid
];

45 i\xe0(
	g\x9afo
.
	gcڌa\xf9
.
	gid
 == 0) {

46
\x9afo
.
cڌa\xf9
.
id
 =
\xc3xt_cڌa\xf9_id_
++;

48
	g\x9afo
.
	gcڌa\xf9
.
	gp\xdeicy
.
	glim\x99
 =
lim\x99
;

50 aut\xd8
	gd\x95
 :
d\x95s
) {

51
\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
>
vis\x99ed
;

52 i\xe0(!
has_\xb7th
(
d\x95
,
pid
,
vis\x99ed
)) {

53
	g\x9afo
.
	gd\x95s
.
push_back
(
d\x95
);

57
	g\x9afo
.
	grug
 =
\x8cue
;

58
	gsched
::
schedu\xcbr
.
\x92queue
(
pid
);

70 
	gS\x94vi\xfbM\x\xafag\x94
::
add_d\x95\x92d\x92cy
(
x\x9aim
::
pid_t

pid
, x\x9aim::pid_\x88
d\x95
) {

71 aut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);

72 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

76
	g\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
>
vis\x99ed
;

77 i\xe0(!
has_\xb7th
(
d\x95
,
pid
,
vis\x99ed
)) {

78
	g\x99
->
	g\xa3c\xdad
.
	gd\x95s
.
push_back
(
d\x95
);

87 
	gS\x94vi\xfbM\x\xafag\x94
::
\xbbmove_d\x95\x92d\x92cy
(
x\x9aim
::
pid_t

pid
, x\x9aim::pid_\x88
d\x95
) {

88 aut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);

89 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

92
	g\xa1d
::
\x94a\xa3
(
\x99
->
\xa3c\xdad
.
d\x95s
,
d\x95
);

101 
	gS\x94vi\xfbM\x\xafag\x94
::
\xa3t_\xbb\xa1\xact_lim\x99
(
x\x9aim
::
pid_t

pid
,
\xa1d
::
u\x9\xa932_t

lim\x99
) {

102 aut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);

103 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

106
	g\x99
->
	g\xa3c\xdad
.
	gcڌa\xf9
.
	gp\xdeicy
.
	glim\x99
 =
lim\x99
;

115 
	gS\x94vi\xfbM\x\xafag\x94
::
u\xc4egi\xa1\x94_\xa3rvi\xfb
(
x\x9aim
::
pid_t

pid
) {

116 i\xe0(!
\xa3rvi\xfbs_
.
\x94a\xa3
(
pid
)) {

120 aut\xd8&[
\xd9h\x94_pid
,
\x9afo
] :
\xa3rvi\xfbs_
) {

121
\xa1d
::
\x94a\xa3
(
\x9afo
.
d\x95s
,
pid
);

128 
	gS\x94vi\xfbM\x\xafag\x94
::
\xbb\xa1\xact_\x8c\x93
(
x\x9aim
::
pid_t

pid
,
\xa1d
::
un\xdcd\x94ed_\xa3t
<x\x9aim::pid_t> &
vis\x99ed
) {

129 aut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);

130 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

134 i\xe0(!
	gvis\x99ed
.
\x9a\xa3\xb9
(
pid
).
	g\xa3c\xdad
) {

138 aut\xd8&
	g\x9afo
 =
\x99
->
\xa3c\xdad
;

139
	g\x9afo
.
	grug
 =
\x8cue
;

140 ++
	g\x9afo
.
	gcڌa\xf9
.
	g\xbb\xa1\xa\xf9s
;

141
	gsched
::
schedu\xcbr
.
\x92queue
(
pid
);

143 aut\xd8&[
\xd9h\x94_pid
,
\x9afo
] :
\xa3rvi\xfbs_
) {

144 i\xe0(
\xa1d
::
\xbfnges
::
cڏ\x9as
(
\x9afo
.
d\x95s
,
pid
)) {

145
\xbb\xa1\xact_\x8c\x93
(
\xd9h\x94_pid
,
vis\x99ed
);

153
bo\xde

	gS\x94vi\xfbM\x\xafag\x94
::
h\x\xafd\xcb_\xf\xffsh
(
x\x9aim
::
pid_t

pid
) {

154 aut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);

155 i\xe0(
	g\x99
 =\xf0
\xa3rvi\xfbs_
.
\x92d
()) {

156 
\xe7l\xa3
;

159 aut\xd8&
	g\x9afo
 =
\x99
->
\xa3c\xdad
;

160
	g\x9afo
.
	grug
 =
\xe7l\xa3
;

162 i\xe0(
	g\x9afo
.
	gcڌa\xf9
.
	gp\xdeicy
.
	glim\x99
 !\xf00 &&
\x9afo
.
cڌa\xf9
.
\xbb\xa1\xacts
 >\xf0\x9afo.cڌa\xf9.
p\xdeicy
.
lim\x99
) {

163 
\xe7l\xa3
;

166
	g\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
>
vis\x99ed
;

167
\xbb\xa1\xact_\x8c\x93
(
pid
,
vis\x99ed
);

168 
	g\x8cue
;

180 cڡ
	gS\x94vi\xfbM\x\xafag\x94
::
Liv\x92essCڌa\xf9
 &
S\x94vi\xfbM\x\xafag\x94
::
cڌa\xf9
(
x\x9aim
::
pid_t

pid
) const {

181 cڡ
Liv\x92essCڌa\xf9

em\xb1y
{};

182 i\xe0\xd7ut\xd8
	g\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
); i\x88!\xf0\xa3rvi\xfbs_.
\x92d
()) {

183 
\x99
->
\xa3c\xdad
.
cڌa\xf9
;

185 
	gem\xb1y
;

194
bo\xde

	gS\x94vi\xfbM\x\xafag\x94
::
is_rug
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
 {

195 i\xe0\xd7ut\xd8
\x99
 =
\xa3rvi\xfbs_
.
f\x9ad
(
pid
);
	g\x99
 !\xf0\xa3rvi\xfbs_.
\x92d
()) {

196 
\x99
->
\xa3c\xdad
.
rug
;

198 
	g\xe7l\xa3
;

204
	gS\x94vi\xfbM\x\xafag\x94
::
S\x94vi\xfbM\x\xafag\x94
(\xe8{
l\xdfd
(); }

209
	gS\x94vi\xfbM\x\xafag\x94
::~
S\x94vi\xfbM\x\xafag\x94
(\xe8{
\xa7ve
(); }

214 
	gS\x94vi\xfbM\x\xafag\x94
::
\xa7ve
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
) const {

215
\xc6ohm\xaan
::
js\xda

ro\xd9
;

216 cڡ\x87ut\xd8&[
pid
,
\x9afo
] :
\xa3rvi\xfbs_
) {

217
ro\xd9
["\xa3rvi\xfbs"].
push_back
({{"pid",
pid
},

218 {"rug",
\x9afo
.
rug
},

219 {"d\x95s",
\x9afo
.
d\x95s
},

221 {{"id",
\x9afo
.
cڌa\xf9
.
id
},

222 {"lim\x99",
\x9afo
.
cڌa\xf9
.
p\xdeicy
.
lim\x99
},

223 {"\xbb\xa1\xacts",
\x9afo
.
cڌa\xf9
.
\xbb\xa1\xacts
}}}});

225
	g\xa1d
::
of\xa1\xbbam

out
{
\xa1d
::
\xa1r\x9ag
{
\xb7th
}};

226 i\xe0(
	gout
) {

227
	gout
 <<
	gro\xd9
.
dump
(2);

234 
	gS\x94vi\xfbM\x\xafag\x94
::
l\xdfd
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
) {

235
\xa3rvi\xfbs_
.
\xfe\x97r
();

236
	g\xa1d
::
if\xa1\xbbam

\x9a
{
\xa1d
::
\xa1r\x9ag
{
\xb7th
}};

237 i\xe0(!
	g\x9a
) {

240
	g\xc6ohm\x\xafn
::
js\xda

ro\xd9
;

241
	g\x9a
 >>
	gro\xd9
;

242 cڡ\x87ut\xd8&
	gsvc
 :
ro\xd9
["services"]) {

243
S\x94vi\xfbInfo

\x9afo
;

244
	gx\x9aim
::
pid_t

pid
 =
svc
["pid"].
g\x91
<
x\x9aim
::pid_t>();

245
	g\x9afo
.
	grug
 =
svc
["rug"].
g\x91
<
bo\xde
>();

246
	g\x9afo
.
	gd\x95s
 =
svc
["d\x95s"].
g\x91
<
\xa1d
::
ve\xf9\xdc
<
x\x9aim
::
pid_t
>>();

247
	g\x9afo
.
	gcڌa\xf9
.
	gid
 =
svc
["cڌa\xf9"]["id"].
g\x91
<
\xa1d
::
u\x9\xa964_t
>();

248
	g\x9afo
.
	gcڌa\xf9
.
	gp\xdeicy
.
	glim\x99
 =
svc
["cڌa\xf9"]["lim\x99"].
g\x91
<
\xa1d
::
u\x9\xa932_t
>();

249
	g\x9afo
.
	gcڌa\xf9
.
	g\xbb\xa1\xa\xf9s
 =
svc
["cڌa\xf9"]["\xbb\xa1\xacts"].
g\x91
<
\xa1d
::
u\x9\xa932_t
>();

250
	g\xa3rvi\xfbs_
.
em\xb6a\xfb
(
pid
,
\xa1d
::
move
(
\x9afo
));

253
	g\xc3xt_cڌa\xf9_id_
 = 1;

254 cڡ\x87ut\xd8&[
_
,
\x9afo
] :
\xa3rvi\xfbs_
) {

255 aut\xd8
\xc3xt
 =
\x9afo
.
cڌa\xf9
.
id
 + 1;

256
	g\xc3xt_cڌa\xf9_id_
 =
\xa1d
::
max
(
\xc3xt_cڌa\xf9_id_
.
l\xdfd
(),
\xc3xt
);

261
S\x94vi\xfbM\x\xafag\x94

	g\xa3rvi\xfb_m\x\xafag\x94
{};

264
	g\xa1d
::
\xa9omic_u\x9at64_t

S\x94vi\xfbM\x\xafag\x94
::
\xc3xt_cڌa\xf9_id_
{1};

	@kernel/service.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

8 
	~<\xa9omic
>

9 
	~<\xb\xe2ges
>

10 
	~<\xa1r\x9ag_v\x9bw
>

11 
	~<un\xdcd\x94ed_m\xad
>

12 
	~<un\xdcd\x94ed_\xa3t
>

13 
	~<ve\xf9\xdc
>

15
\xc7me\xa5a\xfb

	gsched
 {

16
\xfeass

	gSchedu\xcbr
;

19
\xc7me\xa5a\xfb

	gsvc
 {

27 \xfeas\xa0
	cS\x94vi\xfbM\x\xafag\x94
 {

28
	gpublic
:

32
S\x94vi\xfbM\x\xafag\x94
();

37 ~
S\x94vi\xfbM\x\xafag\x94
();

42 
cڡex\xb4

	g\xa1d
::
\xa1r\x9ag_v\x9bw

kDe\xe7u\xc9P\xa9h
{"/etc/xinim/services.json"};

47 
	sRe\xa1\xa\xf9P\xdeicy
 {

48
	g\xa1d
::
u\x9\xa932_t

lim\x99
{3};

54 
	sLiv\x92essCڌa\xf9
 {

55
	g\xa1d
::
u\x9\xa964_t

id
{0};

56
Re\xa1\xa\xf9P\xdeicy

	gp\xdeicy
{};

57
	g\xa1d
::
u\x9\xa932_t

\xbb\xa1\xacts
{0};

67 
\xbbgi\xa1\x94_\xa3rvi\xfb
(
x\x9aim
::
pid_t

pid
, cڡ
\xa1d
::
ve\xf9\xdc
<x\x9aim::pid_t> &
d\x95s
 = {},

68
\xa1d
::
u\x9\xa932_t

lim\x99
 = 3);

76 
add_d\x95\x92d\x92cy
(
x\x9aim
::
pid_t

pid
, x\x9aim::pid_\x88
d\x95
);

86 
\xbbmove_d\x95\x92d\x92cy
(
x\x9aim
::
pid_t

pid
, x\x9aim::pid_\x88
d\x95
);

94 
\xa3t_\xbb\xa1\xact_lim\x99
(
x\x9aim
::
pid_t

pid
,
\xa1d
::
u\x9\xa932_t

lim\x99
);

103 
u\xc4egi\xa1\x94_\xa3rvi\xfb
(
x\x9aim
::
pid_t

pid
);

111 [[
nodis\xf\xe4d
]]
bo\xde

h\x\xafd\xcb_\xf\xffsh
(
x\x9aim
::
pid_t

pid
);

119 [[
nodis\xf\xe4d
]] cڡ
	gLiv\x92essCڌa\xf9
 &
cڌa\xf9
(
x\x9aim
::
pid_t

pid
) const;

127 [[
nodis\xf\xe4d
]]
bo\xde

is_rug
(
x\x9aim
::
pid_t

pid
\xe8cڡ
n\xdbx\xfb\xb1
;

132 
\xa7ve
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
 =
kDe\xe7u\xc9P\xa9h
) const;

137 
l\xdfd
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
 =
kDe\xe7u\xc9P\xa9h
);

139
	g\xb4iv\xa9e
:

143 
	sS\x94vi\xfbInfo
 {

144
bo\xde

rug
{
\xe7l\xa3
};

145
	g\xa1d
::
ve\xf9\xdc
<
x\x9aim
::
pid_t
>
d\x95s
;

146
Liv\x92essCڌa\xf9

	gcڌa\xf9
{};

161
bo\xde

has_\xb7th
(
x\x9aim
::
pid_t

\xa1\xact
, x\x9aim::pid_\x88
\x8frg\x91
,

162
\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
> &
vis\x99ed
) const;

174 
\xbb\xa1\xact_\x8c\x93
(
x\x9aim
::
pid_t

pid
,
\xa1d
::
un\xdcd\x94ed_\xa3t
<x\x9aim::pid_t> &
vis\x99ed
);

176
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
,
	gS\x94vi\xfbInfo
>
	g\xa3rvi\xfbs_
{};

177 
	g\xa1d
::
\xa9omic_u\x9at64_t

\xc3xt_cڌa\xf9_id_
;

181
S\x94vi\xfbM\x\xafag\x94

\xa3rvi\xfb_m\xaaag\x94
;

	@kernel/syscall.cpp

1 
	~"../\x9a\x\xe3ude/defs.h
"

2 
	~"cڡ.h\xb5
"

3 
	~"glo.h\xb5
"

4 
	~"\xb4oc.h\xb5
"

5 
	~"ty\xb3.h\xb5
"

7 #ifde\xe0
__x86_64__


13 
	$\x9a\x99_sys\xff\x\xfb_m\xa4s
(\xe8
n\xdbx\xfb\xb1
 {

14
asm
 volatile("mov $0xC0000080, %%ecx\n\t"

32
	}
}

38 
	$sys\xff\x\xfb_\x92\x8cy
(\xe8
n\xdbx\xfb\xb1

NAKED
;

39 
	$sys\xff\x\xfb_\x92\x8cy
(\xe8
n\xdbx\xfb\xb1
 {

40
__asm__
 volatile("call save\n\t"

48
	}
}

	@kernel/system.cpp

57 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

58 
	~"../h/com.h\xb5
"

59 
	~"../h/cڡ.h\xb5
"

60 
	~"../h/\x94r\xdc.h\xb5
"

61 
	~"../h/sig\xc7l.h\xb5
"

62 
	~"../h/ty\xb3.h\xb5
"

63 
	~"cڡ.h\xb5
"

64 
	~"glo.h\xb5
"

65 
	~"\xb4oc.h\xb5
"

66 
	~"ty\xb3.h\xb5
"

67 
	~<c\xa1ddef
>

68 
	~<c\xa1d\x9\xa9
>

69 
	~<c\xa1d\x9\xa9
>

71 
	#COPY_UNIT
 65534L

	)

75
PRIVATE

mes\xa7ge

	gm
;

76
PRIVATE
 
	gsig_\xa1uff
[
SIG_PUSH_BYTES
];

87
PUBLIC
 
	$sys_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

90 
r
;

92 
TRUE
) {

93
	`\xbb\xfbive
(
ANY
, &
m
);

95 
m
.
m_ty\xb3
) {

96 
SYS_FORK
:

97
r
 =
	`do_f\xdck
(&
m
);

99 
SYS_NEWMAP
:

100
r
 =
	`do_\xc3wm\xad
(&
m
);

102 
SYS_EXEC
:

103
r
 =
	`do_exec
(&
m
);

105 
SYS_XIT
:

106
r
 =
	`do_x\x99
(&
m
);

108 
SYS_GETSP
:

109
r
 =
	`do_g\x91\xa5
(&
m
);

111 
SYS_TIMES
:

112
r
 =
	`do_times
(&
m
);

114 
SYS_ABORT
:

115
r
 =
	`do_ab\xd\xf9
(&
m
);

117 
SYS_SIG
:

118
r
 =
	`do_sig
(&
m
);

120 
SYS_COPY
:

121
r
 =
	`do_c\xddy
(&
m
);

124
r
 =
E\xbc\xdcCode
::
E_BAD_FCN
;

127
m
.
m_ty\xb3
 =
r
;

128
	`\xa3nd
(
m
.
m_sour\xfb
, &m);

130
	}
}

136 
	$do_f\xdck
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

139 
\xb4oc
 *
\xbdc
;

140 *
\xa5\x8c
, *
d\xb1r
;

141 
k1
;

142 
k2
;

143 
pid
;

144
\xa1d
::
u\x9\xa964_t

tok
;

145 
by\x8bs
;

147
k1
 =
	`\xb4oc1
(*
m_\xb1r
);

148
k2
 =
	`\xb4oc2
(*
m_\xb1r
);

149
pid
 = ::
	`pid
(*
m_\xb1r
);

150
tok
 =
	`tok\x92
(*
m_\xb1r
);

152 i\xe0(
k1
 < 0 || k1 >\xf0
NR_PROCS
 ||
k2
 < 0 || k2 >= NR_PROCS)

153  (
E\xbc\xdcCode
::
E_BAD_PROC
);

154
\xbdc
 =
	`\xb4oc_addr
(
k2
);

157
\xa5\x8c
 = (*)
	`\xb4oc_addr
(
k1
);

158
d\xb1r
 = (*)
	`\xb4oc_addr
(
k2
);

159
by\x8bs
 = (
\xb4oc
);

160 
by\x8bs
--)

161 *
d\xb1r
++ = *
\xa5\x8c
++;

163
\xbdc
->
p_\xe6ags
 |\xf0
NO_MAP
;

164
\xbdc
->
p_pid
 =
pid
;

165
\xbdc
->
p_\xbbg
[
RET_REG
] = 0;

166
\xbdc
->
p_tok\x92
 =
tok
;

168
\xbdc
->
u\xa3r_time
 = 0;

169
\xbdc
->
sys_time
 = 0;

170
\xbdc
->
ch\x9ed_utime
 = 0;

171
\xbdc
->
ch\x9ed_\xa1ime
 = 0;

172  (
OK
);

173
	}
}

178
PRIVATE
 
	$do_\xc3wm\xad
(
mes\xa7ge
 *
m_\xb1r
)

182 
\xb4oc
 *
\xbd
, *
r\xa4c
;

183
u\x9\xa964_t

\xa4c_phys
,
d\xa1_phys
,
\xb2
;

184
\xa1d
::
size_t

vmm
,
vsys
,
vn
;

185 
\xffΔ
;

186 
k
;

187 
\xded_\xe6ags
;

188 
mem_m\xad
 *
m\xad_\xb1r
;

191
\xffΔ
 =
m_\xb1r
->
m_sour\xfb
;

192
k
 =
	`\xb4oc1
(*
m_\xb1r
);

193
m\xad_\xb1r
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
mem_m\xad
 *>(
	`mem_\xb1r
(*
m_\xb1r
));

194 i\xe0(
k
 < -
NR_TASKS
 || k >\xf0
NR_PROCS
)

195  (
E\xbc\xdcCode
::
E_BAD_PROC
);

196
\xbd
 =
	`\xb4oc_addr
(
k
);

197
r\xa4c
 =
	`\xb4oc_addr
(
\xffΔ
);

198
vn
 =
NR_SEGS
 * (
mem_m\xad
);

199
\xb2
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
vn
);

200
vmm
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
m\xad_\xb1r
);

201
vsys
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\xbd
->
p_m\xad
);

203 i\xe0((
\xa4c_phys
 =
	`um\xad
(
r\xa4c
,
D
,
vmm
,
vn
)) == 0)

204
	`\xb7nic
("bad c\xae\xc8t\xd8sys_\xc3wm\xad (\xa4c)",
NO_NUM
);

205 i\xe0((
d\xa1_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
SYSTASK
),
D
,
vsys
,
vn
)) == 0)

206
	`\xb7nic
("bad c\xae\xc8t\xd8sys_\xc3wm\xad (d\xa1)",
NO_NUM
);

208
	`phys_c\xddy
(
\xa4c_phys
,
d\xa1_phys
,
\xb2
);

210
\xded_\xe6ags
 =
\xbd
->
p_\xe6ags
;

211
\xbd
->
p_\xe6ags
 &\xf0~
NO_MAP
;

212 i\xe0(
\xded_\xe6ags
 !\xf00 &&
\xbd
->
p_\xe6ags
 == 0)

213
	`\xbbady
(
\xbd
);

214  (
OK
);

215
	}
}

221 
	$do_exec
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

224 
\xb4oc
 *
\xbd
;

225 
k
;

226
u\x9a\x8d\x8c_t

\xa5_v\xae
;

227
\xa1d
::
u\x9\xa964_t

tok
;

229
k
 =
	`\xb4oc1
(*
m_\xb1r
);

230
\xa5_v\xae
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
	`\xa1ack_\xb1r
(*
m_\xb1r
));

231
tok
 =
	`tok\x92
(*
m_\xb1r
);

232 i\xe0(
k
 < 0 || k >\xf0
NR_PROCS
)

233  (
E\xbc\xdcCode
::
E_BAD_PROC
);

234
\xbd
 =
	`\xb4oc_addr
(
k
);

235
\xbd
->
p_\xa5
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xa5_v\xae
);

236
\xbd
->
p_p\xfdsw
.
pc
 =
nuαr
;

237
\xbd
->
p_\x\xab\xacm
 = 0;

238
\xbd
->
p_\xe6ags
 &\xf0~
RECEIVING
;

239 i\xe0(
\xbd
->
p_\xe6ags
 == 0)

240
	`\xbbady
(
\xbd
);

241
\xbd
->
p_tok\x92
 =
tok
;

242
	`\xa3t_\xc7me
(
k
,
\xa5
);

243  (
OK
);

244
	}
}

250 
	$do_x\x99
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

253 
\xb4oc
 *
\xbd
, *
rc
;

254 
\xb4oc
 *
\xc5
, *
xp
;

255 
\xb7\xbb\xc1
;

256 
\xb4oc_\xc4
;

258
\xb7\xbb\xc1
 =
	`\xb4oc1
(*
m_\xb1r
);

259
\xb4oc_\xc4
 =
	`\xb4oc2
(*
m_\xb1r
);

260 i\xe0(
\xb7\xbb\xc1
 < 0 ||\x85\xac\x92\x88>\xf0
NR_PROCS
 ||
\xb4oc_\xc4
 < 0 ||\x85roc_nr >= NR_PROCS)

261  (
E\xbc\xdcCode
::
E_BAD_PROC
);

262
\xbd
 =
	`\xb4oc_addr
(
\xb7\xbb\xc1
);

263
rc
 =
	`\xb4oc_addr
(
\xb4oc_\xc4
);

264
\xbd
->
ch\x9ed_utime
 +\xf0
rc
->
u\xa3r_time
 +\x84c->child_utime;

265
\xbd
->
ch\x9ed_\xa1ime
 +\xf0
rc
->
sys_time
 +\x84c->child_stime;

266
	`uėdy
(
rc
);

267
rc
->
p_\x\xab\xacm
 = 0;

268
	`\xa3t_\xc7me
(
\xb4oc_\xc4
, (*)0);

274 i\xe0(
rc
->
p_\xe6ags
 &
SENDING
) {

276 
\xbd
 = &
\xb4oc
[0];\x84\xb0< &\xb4oc[
NR_TASKS
 +
NR_PROCS
];\x84p++) {

277 i\xe0(
\xbd
->
p_\xf\xe6\xcbrq
 =\xf0
nuαr
)

279 i\xe0(
\xbd
->
p_\xf\xe6\xcbrq
 =\xf0
rc
) {

281
\xbd
->
p_\xf\xe6\xcbrq
 =
rc
->
p_\xa3ndl\x9ak
;

285
\xc5
 =
\xbd
->
p_\xf\xe6\xcbrq
;

286 (
xp
 =
\xc5
->
p_\xa3ndl\x9ak
\xe8!\xf0
nuαr
)

287 i\xe0(
xp
 =\xf0
rc
) {

288
\xc5
->
p_\xa3ndl\x9ak
 =
xp
->p_sendlink;

291
\xc5
 =
xp
;

296
rc
->
p_\xe6ags
 =
P_SLOT_FREE
;

297  (
OK
);

298
	}
}

304 
	$do_g\x91\xa5
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

307 
\xb4oc
 *
\xbd
;

308 
k
;

310
k
 =
	`\xb4oc1
(*
m_\xb1r
);

311 i\xe0(
k
 < 0 || k >\xf0
NR_PROCS
)

312  (
E\xbc\xdcCode
::
E_BAD_PROC
);

313
\xbd
 =
	`\xb4oc_addr
(
k
);

315
	`\xa1ack_\xb1r
(
m
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xbd
->
p_\xa5
));

316  (
OK
);

317
	}
}

323 
	$do_times
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

326 
\xb4oc
 *
\xbd
;

327 
k
;

329
k
 =
	`\xb4oc1
(*
m_\xb1r
);

330 i\xe0(
k
 < 0 || k >\xf0
NR_PROCS
)

331  (
E\xbc\xdcCode
::
E_BAD_PROC
);

332
\xbd
 =
	`\xb4oc_addr
(
k
);

337
	`u\xa3r_time
(*
m_\xb1r
\xe8\xf0
\xbd
->
u\xa3r_time
;

338
	`sy\xa1em_time
(*
m_\xb1r
\xe8\xf0
\xbd
->
sys_time
;

339
	`ch\x9ed_utime
(*
m_\xb1r
\xe8\xf0
\xbd
->
ch\x9ed_utime
;

340
	`ch\x9ed_\xa1ime
(*
m_\xb1r
\xe8\xf0
\xbd
->
ch\x9ed_\xa1ime
;

341  (
OK
);

342
	}
}

348 
	$do_ab\xd\xf9
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

350 ()
m_\xb1r
;

351
	`\xb7nic
("",
NO_NUM
);

352 
OK
;

353
	}
}

359 
	$do_sig
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

362 
\xb4oc
 *
\xbd
;

363
u\x9\xa964_t

\xa4c_phys
,
d\xa1_phys
;

364
\xa1d
::
size_t

v\x9c_addr
,
sig_size
,
\xc3w_\xa5
;

365 
\xb4oc_\xc4
;

366 
sig
;

367 (*
sig_h\x\xafd\xcbr
)();

368
\xa1d
::
u\x9\xa964_t

tok
;

371
\xb4oc_\xc4
 =
	`\xb4
(*
m_\xb1r
);

372
sig
 =
	`signum
(*
m_\xb1r
);

373
sig_h\x\xafd\xcbr
 =
	`func
(*
m_\xb1r
);

374
tok
 =
	`tok\x92
(*
m_\xb1r
);

375 i\xe0(
\xb4oc_\xc4
 <
LOW_USER
 ||\x85roc_\xc4 >\xf0
NR_PROCS
)

376  (
E\xbc\xdcCode
::
E_BAD_PROC
);

377
\xbd
 =
	`\xb4oc_addr
(
\xb4oc_\xc4
);

378 i\xe0(
tok
 !\xf0
\xbd
->
p_tok\x92
)

379  (
E\xbc\xdcCode
::
EACCES
);

380
v\x9c_addr
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
sig_\xa1uff
);

381
\xc3w_\xa5
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xbd
->
p_\xa5
);

384
	`bu\x9ed_sig
(
sig_\xa1uff
,
\xbd
,
sig
);

387
sig_size
 =
SIG_PUSH_BYTES
;

388
\xc3w_\xa5
 -\xf0
sig_size
;

390
\xa4c_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
SYSTASK
),
D
,
v\x9c_addr
,
sig_size
);

391
d\xa1_phys
 =
	`um\xad
(
\xbd
,
S
,
\xc3w_\xa5
,
sig_size
);

392 i\xe0(
d\xa1_phys
 == 0)

393
	`\xb7nic
("do_sig c\xaa'\x88sig\xc7l; SP bad",
NO_NUM
);

395
	`phys_c\xddy
(
\xa4c_phys
,
d\xa1_phys
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
sig_size
));

398
\xbd
->
p_\xa5
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xc3w_\xa5
);

399
\xbd
->
p_p\xfdsw
.
pc
 =

400
sig_h\x\xafd\xcbr
;

403
\xbd
->
p_p\xfdsw
.
pc
 =

404
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
	`de\x\xe3ty\xb3
(
\xbd
->
p_p\xfdsw
.
pc
)>\xd4e\x9a\x8b\xbd\xbbt_\xff\xa1<
u\x9a\x8d\x8c_t
>(
sig_h\x\xafd\xcbr
));

405  (
OK
);

406
	}
}

412 
	$do_c\xddy
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

415 
\xa4c_\xb4oc
,
d\xa1_\xb4oc
,
\xa4c_\xa5a\xfb
,
d\xa1_\xa5a\xfb
;

416
\xa1d
::
size_t

\xa4c_v\x9c
,
d\xa1_v\x9c
;

417
u\x9\xa964_t

\xa4c_phys
,
d\xa1_phys
,
by\x8bs
;

420
\xa4c_\xb4oc
 =
	`\xa4c_\xb4oc_\xc4
(*
m_\xb1r
);

421
d\xa1_\xb4oc
 =
	`d\xa1_\xb4oc_\xc4
(*
m_\xb1r
);

422
\xa4c_\xa5a\xfb
 =
	`\xa4c_\xa5a\xfb
(*
m_\xb1r
);

423
d\xa1_\xa5a\xfb
 =
	`d\xa1_\xa5a\xfb
(*
m_\xb1r
);

424
\xa4c_v\x9c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`\xa4c_buf\xe3r
(*
m_\xb1r
));

425
d\xa1_v\x9c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`d\xa1_buf\xe3r
(*
m_\xb1r
));

426
by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
	`c\xddy_by\x8bs
(*
m_\xb1r
));

429 i\xe0(
\xa4c_\xb4oc
 =\xf0
ABS
)

430
\xa4c_phys
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
	`\xa4c_buf\xe3r
(*
m_\xb1r
)));

435
\xa4c_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
\xa4c_\xb4oc
),
\xa4c_\xa5a\xfb
,
\xa4c_v\x9c
,
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
by\x8bs
));

437 i\xe0(
d\xa1_\xb4oc
 =\xf0
ABS
)

438
d\xa1_phys
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
	`d\xa1_buf\xe3r
(*
m_\xb1r
)));

440
d\xa1_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
d\xa1_\xb4oc
),
d\xa1_\xa5a\xfb
,
d\xa1_v\x9c
,
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
by\x8bs
));

442 i\xe0(
\xa4c_phys
 =\xf00 ||
d\xa1_phys
 == 0)

443  (
E\xbc\xdcCode
::
EFAULT
);

445
	`phys_c\xddy
(
\xa4c_phys
,
d\xa1_phys
,
by\x8bs
);

446  (
OK
);

447
	}
}

462
PUBLIC
 
	$\xffu\xa3_sig
(
\xb4oc_\xc4
, 
sig_\xc4
\xe8
n\xdbx\xfb\xb1
 {

474 
\xb4oc
 *
\xbd
;

476
\xbd
 =
	`\xb4oc_addr
(
\xb4oc_\xc4
);

477 i\xe0(
\xbd
->
p_\xb3nd\x9ag
 == 0)

478
sig_\xb4ocs
++;

479
\xbd
->
p_\xb3nd\x9ag
 |\xf01 << (
sig_\xc4
 - 1);

480
	`\x9af\xdcm
(
MM_PROC_NR
);

481
	}
}

495
PUBLIC
 
	$\x9af\xdcm
(
\xb4oc_\xc4
\xe8
n\xdbx\xfb\xb1
 {

503 
\xb4oc
 *
\xbd
, *
mmp
;

506
mmp
 =
	`\xb4oc_addr
(
\xb4oc_\xc4
);

507 i\xe0(((
mmp
->
p_\xe6ags
 &
RECEIVING
\xe8=\xf00\xe8|| mmp->
p_g\x91\xe4om
 !\xf0
ANY
)

511 
\xbd
 =
	`\xb4oc_addr
(0);\x84\xb0<\x85roc_addr(
NR_PROCS
);\x84p++)

512 i\xe0(
\xbd
->
p_\xb3nd\x9ag
 != 0) {

513
m
.
m_ty\xb3
 =
KSIG
;

514
m
.
PROC1
 =
\xbd
 -
\xb4oc
 -
NR_TASKS
;

515
	`sig_m\xad
(
m
\xe8\xf0
\xbd
->
p_\xb3nd\x9ag
;

516
sig_\xb4ocs
--;

517 i\xe0(
	`m\x9ai_\xa3nd
(
HARDWARE
,
\xb4oc_\xc4
, &
m
\xe8!\xf0
OK
)

518
	`\xb7nic
("\xffn'\x88\x9af\xdcm MM",
NO_NUM
);

519
\xbd
->
p_\xb3nd\x9ag
 = 0;

522
	}
}

540
PUBLIC

u\x9\xa964_t

	$um\xad
(
\xb4oc
 *
\xbd
, 
\xa3g
,
\xa1d
::
size_t

v\x9c_addr
, std::size_\x88
by\x8bs
\xe8
n\xdbx\xfb\xb1
 {

547 i\xe0(
by\x8bs
 == 0)

549 ()
\xbd
;

550 ()
\xa3g
;

552 
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
v\x9c_addr
);

553
	}
}

	@kernel/table.cpp

26 
	~"../h/cڡ.h\xb5
"

27 
	~"../h/ty\xb3.h\xb5
"

28 
	~"cڡ.h\xb5
"

29 
	~"ty\xb3.h\xb5
"

30 #unde\xe0
EXTERN


31 
	#EXTERN


	)

32 
	~"glo.h\xb5
"

33 
	~"\xb4oc.h\xb5
"

34 
	~<c\xa1ddef
>

37 
	$sys_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

38 
	$\x\xe3ock_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

40 
	$\xe6\xddpy_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

41 
	$w\x9ache\xa1\x94_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

42 
	$\x89y_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

43 
	$\xb4\x9a\x8br_\x8fsk
(\xe8
n\xdbx\xfb\xb1
;

50 (*
\x8fsk
[
NR_TASKS
 +
INIT_PROC_NR
 + 1])(\xe8
n\xdbx\xfb\xb1
 = {

51
\xb4\x9a\x8br_\x8fsk
,

52
\x89y_\x8fsk
,

53
w\x9ache\xa1\x94_\x8fsk
,

54
\xe6\xddpy_\x8fsk
,

55
nuαr
,

56
\xfeock_\x8fsk
,

57
sys_\x8fsk
,

58
nuαr
,

59
nuαr
,

60
nuαr
,

61
nuαr


62
	}
};

	@kernel/tty.cpp

46 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

47 
	~"../h/com.h\xb5
"

48 
	~"../h/cڡ.h\xb5
"

49 
	~"../h/\x94r\xdc.h\xb5
"

50 
	~"../h/sig\xc7l.h\xb5
"

51 
	~"../h/ty\xb3.h\xb5
"

52 
	~"../\x9a\x\xe3ude/sg\x89y.h\xb5
"

53 
	~"cڡ.h\xb5
"

54 
	~"glo.h\xb5
"

55 
	~"\xb4oc.h\xb5
"

56 
	~"ty\xb3.h\xb5
"

57 
	~<\x\xabgܙhm
>

58 
	~<c\xa1ddef
>

59 
	~<c\xa1d\x9\xa9
>

62 
	#NR_TTYS
 1

	)

63 
	#TTY_IN_BYTES
 200

	)

64 
	#TTY_RAM_WORDS
 320

	)

65 
	#TTY_BUF_SIZE
 256

	)

66 
	#TAB_SIZE
 8

	)

67 
	#TAB_MASK
 07

	)

68 
	#MAX_OVERRUN
 16

	)

70 
	#ERASE_CHAR
 '\b'

	)

71 
	#KILL_CHAR
 '@'

	)

72 
	#INTR_CHAR
 ()0177

	)

73 
	#QUIT_CHAR
 ()034

	)

74 
	#XOFF_CHAR
 ()023

	)

75 
	#XON_CHAR
 ()021

	)

76 
	#EOT_CHAR
 ()004

	)

77 
	#MARKER
 ()000

	)

78 
	#DEL_CODE
 ()83

	)

79 
	#AT_SIGN
 0220

	)

81 
	#F1
 59

	)

82 
	#F2
 60

	)

83 
	#F10
 68

	)

84 
	#TOP_ROW
 14

	)

86
PRIVATE
 
	s\x89y_\xa1ru\xf9
 {

88 
	m\x89y_\x9aqueue
[
TTY_IN_BYTES
];

89 *
	m\x89y_\x9ah\x97d
;

90 *
	m\x89y_\x9a\x8f\x9e
;

91 
	m\x89y_\x9acou\xc1
;

92 
	m\x89y_lf\xf9
;

95 
	m\x89y_\xbfmqueue
[
TTY_RAM_WORDS
];

96 
	m\x89y_rw\xdcds
;

97 
	m\x89y_\xdcg
;

98 
	m\x89y_vid
;

99 
	m\x89y_esc_\xa1\xa9e
;

100 
	m\x89y_ech\xac
;

101 
	m\x89y_\xa9\x8cibu\x8b
;

102 (*
	m\x89y_dev\xa1\xa\xf9
)();

105 
	m\x89y_mode
;

106 
	m\x89y_c\xdeumn
;

107 
	m\x89y_row
;

108 
	m\x89y_busy
;

109 
	m\x89y_es\xff\xb3d
;

110 
	m\x89y_\x9ahib\x99ed
;

111 
	m\x89y_makeb\xbbak
;

112 
	m\x89y_wa\x99\x9ag
;

115 
	m\x89y_\x94a\xa3
;

116 
	m\x89y_k\x9\x96
;

117 
	m\x89y_\x9a\x8c
;

118 
	m\x89y_qu\x99
;

119 
	m\x89y_x\xda
;

120 
	m\x89y_xoff
;

121 
	m\x89y_eof
;

124 
	m\x89y_\x9a\xf\xe6\xcbr
;

125 
	m\x89y_\x9a\xb4oc
;

126 *
	m\x89y_\x9a_v\x9c
;

127
	m\xa1d
::
size_t

\x89y_\x9a\xcb\xe1
;

128 
	m\x89y_\xd9\xf\xe6\xcbr
;

129 
	m\x89y_ou\x8droc
;

130 *
	m\x89y_out_v\x9c
;

131
u\x9\xa964_t

	m\x89y_phys
;

132
	m\xa1d
::
size_t

\x89y_ou\x8ee\xe1
;

133
	m\xa1d
::
size_t

\x89y_cum
;

136 
	m\x89y_i\xdd\xd\xf9
;

137 }
	g\x89y_\xa1ru\xf9
[
NR_TTYS
];

140 
	#NOT_ESCAPED
 0

	)

141 
	#ESCAPED
 1

	)

142 
	#RUNNING
 0

	)

143 
	#STOPPED
 1

	)

144 
	#INACTIVE
 0

	)

145 
	#BUSY
 1

	)

146 
	#ONE_INT
 0

	)

147 
	#TWO_INTS
 1

	)

148 
	#NOT_WAITING
 0

	)

149 
	#WAITING
 1

	)

151
PRIVATE
 
	g\x89y_driv\x94_buf
[2 *
MAX_OVERRUN
 + 2];

152
PRIVATE
 
	g\x89y_c\xddy_buf
[2 *
MAX_OVERRUN
];

153
PRIVATE
 
	g\x89y_buf
[
TTY_BUF_SIZE
];

154
PRIVATE
 
	gshi\xe11
,
	gshi\xe12
,
	g\xf\xe5\xa6ock
,
	gnumlock
;

155
PRIVATE
 
	gcڌ\xde
,
	g\x\xabt
;

156
PUBLIC
 
	gc\xde\xdc
;

157
PUBLIC

	gs\xf\xe2_code
;

160
PRIVATE
 
	gunsh
[] = {0, 033, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',

169
PRIVATE
 
	gsh
[] = {0, 033, '!', '@', '#', '$', '%', '^', '&', '*', '(', ')',

178
PRIVATE
 
	gunm24
[] = {

188
PRIVATE
 
	gm24
[] = {0, 033, '!', '"', '#', '$', '%', '&', 047, '(', ')', '_', '=',

200
PUBLIC
 
	$\x89y_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

203
mes\xa7ge

\x89y_mess
;

204 
\x89y_\xa1ru\xf9
 *
\x8d
;

206
	`\x89y_\x9a\x99
();

207 
TRUE
) {

208
	`\xbb\xfbive
(
ANY
, &
\x89y_mess
);

209
\x8d
 = &
\x89y_\xa1ru\xf9
[
	`\x89y_l\x9\xab
(
\x89y_mess
)];

210 
\x89y_mess
.
m_ty\xb3
) {

211 
TTY_CHAR_INT
:

212
	`do_ch\xac\x9\xa9
(&
\x89y_mess
);

214 
TTY_READ
:

215
	`do_\xbbad
(
\x8d
, &
\x89y_mess
);

217 
TTY_WRITE
:

218
	`do_wr\x99e
(
\x8d
, &
\x89y_mess
);

220 
TTY_IOCTL
:

221
	`do_io\xf9l
(
\x8d
, &
\x89y_mess
);

223 
CANCEL
:

224
	`do_\xf\xe2\xfbl
(
\x8d
, &
\x89y_mess
);

226 
TTY_O_DONE
:

228
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
\x89y_mess
.
m_sour\xfb
,
	`\xb4oc_\xc4
\xd1ty_mess),
E\xbc\xdcCode
::
EINVAL
, 0L, 0L);

231
	}
}

237
	$do_ch\xac\x9\xa9
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

244 
m
,
n
,
cou\xc1
,
\xbb\xb6y\x93
,
\xffΔ
;

245 *
\xb1r
, *
c\xddy_\xb1r
,
ch
;

246 
\x89y_\xa1ru\xf9
 *
\x8d
;

248
	`lock
();

249
\xb1r
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
	`add\xbbss
(*
m_\xb1r
));

250
c\xddy_\xb1r
 =
\x89y_c\xddy_buf
;

251
n
 =
\xa1\xa9ic_\xff\xa1
<>(*
\xb1r
);

252
cou\xc1
 =
n
;

253
n
 =\x82 +\x82;

254
\xb1r
 += 2;

255 
n
-- > 0)

256 *
c\xddy_\xb1r
++ = *
\xb1r
++;

257
\xb1r
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
	`add\xbbss
(*
m_\xb1r
));

258 *
\xb1r
 = 0;

259
	`u\xc6ock
();

262
c\xddy_\xb1r
 =
\x89y_c\xddy_buf
;

263 
cou\xc1
-- > 0) {

264
ch
 = *
c\xddy_\xb1r
++;

265
n
 = *
c\xddy_\xb1r
++;

266
	`\x9a_ch\xac
(
n
,
ch
);

269
\x8d
 = &
\x89y_\xa1ru\xf9
[
n
];

270 i\xe0(
\x8d
->
\x89y_\x9a\xcb\xe1
 > 0) {

271
m
 =
\x8d
->
\x89y_mode
 & (
CBREAK
 |
RAW
);

272 i\xe0(
\x8d
->
\x89y_lf\xf9
 > 0 || (
m
 !\xf00 &&\x81p->
\x89y_\x9acou\xc1
 > 0)) {

273
m
 =
	`rd_ch\xacs
(
\x8d
);

276
\xbb\xb6y\x93
 = ()
\x8d
->
\x89y_\x9a\xffΔ
;

277
\xffΔ
 = ()
\x8d
->
\x89y_\x9a\xb4oc
;

278
	`\x89y_\xbb\xb6y
(
REVIVE
,
\xbb\xb6y\x93
,
\xffΔ
,
m
, 0L, 0L);

282
	}
}

287 
	$\x9a_ch\xac
(
l\x9\xab
,

288 
ch
\xe8
n\xdbx\xfb\xb1
 {

291 
\x89y_\xa1ru\xf9
 *
\x8d
;

292 
mode
,
sig
;

293 
	`make_b\xbbak
();

294
\x8d
 = &
\x89y_\xa1ru\xf9
[
l\x9\xab
];

296 i\xe0(
ch
 >\xf0
F1
 && ch <\xf0
F10
) {

297
	`func_key
(
ch
);

300 i\xe0(
\x8d
->
\x89y_\x9acou\xc1
 >\xf0
TTY_IN_BYTES
)

302
mode
 =
\x8d
->
\x89y_mode
 & (
RAW
 |
CBREAK
);

303 i\xe0(
\x8d
->
\x89y_makeb\xbbak
)

304
ch
 =
	`make_b\xbbak
(ch);

305 i\xe0(
mode
 !\xf0
RAW
)

306
ch
 &= 0177;

307 i\xe0(
ch
 == 0)

311 i\xe0(
mode
 =\xf0
COOKED
 || mod\x90=\xf0
CBREAK
) {

313 i\xe0(
mode
 =\xf0
COOKED
) {

315 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_\x94a\xa3
 &&\x81p->
\x89y_es\xff\xb3d
 =\xf0
NOT_ESCAPED
) {

316
	`chuck
(
\x8d
);

317
	`echo
(
\x8d
, '\b');

318
	`echo
(
\x8d
, ' ');

319
	`echo
(
\x8d
, '\b');

324 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_k\x9el
 &&\x81p->
\x89y_es\xff\xb3d
 =\xf0
NOT_ESCAPED
) {

325 
	`chuck
(
\x8d
\xe8=\xf0
OK
)

327
	`echo
(
\x8d
,\x81p->
\x89y_k\x9el
);

328
	`echo
(
\x8d
, '\n');

333 i\xe0(
\x8d
->
\x89y_es\xff\xb3d
 =\xf0
NOT_ESCAPED
) {

335 i\xe0(
ch
 == '\\') {

337
\x8d
->
\x89y_es\xff\xb3d
 =
ESCAPED
;

338
	`echo
(
\x8d
,
ch
);

346 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_eof
)

347
ch
 =
MARKER
;

350
\x8d
->
\x89y_es\xff\xb3d
 =
NOT_ESCAPED
;

351 i\xe0(
ch
 !\xf0
\x8d
->
\x89y_\x94a\xa3
 && ch !\xf0\x8d->
\x89y_k\x9el
 && ch !\xf0\x8d->
\x89y_eof
) {

353 *
\x8d
->
\x89y_\x9ah\x97d
++ = '\\';

354
\x8d
->
\x89y_\x9acou\xc1
++;

355 i\xe0(
\x8d
->
\x89y_\x9ah\x97d
 =\xf0&\x8d->
\x89y_\x9aqueue
[
TTY_IN_BYTES
])

356
\x8d
->
\x89y_\x9ah\x97d
 =\x81p->
\x89y_\x9aqueue
;

361 i\xe0(
ch
 =\xf0'\r' && (
\x8d
->
\x89y_mode
 &
CRMOD
))

362
ch
 = '\n';

365 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_\x9a\x8c
 || ch =\xf0\x8d->
\x89y_qu\x99
) {

366
sig
 = (
ch
 =\xf0
\x8d
->
\x89y_\x9a\x8c
 ?
SIGINT
 :
SIGQUIT
);

367
\x8d
->
\x89y_\x9ahib\x99ed
 =
RUNNING
;

368
	`f\x9aish
(
\x8d
,
E\xbc\xdcCode
::
EINTR
);

369
\x8d
->
\x89y_\x9ah\x97d
 =\x81p->
\x89y_\x9aqueue
;

370
\x8d
->
\x89y_\x9a\x8f\x9e
 =\x81p->
\x89y_\x9aqueue
;

371
\x8d
->
\x89y_\x9acou\xc1
 = 0;

372
\x8d
->
\x89y_lf\xf9
 = 0;

373
	`\xffu\xa3_sig
(
LOW_USER
 + 1 +
l\x9\xab
,
sig
);

378 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_xoff
) {

379
\x8d
->
\x89y_\x9ahib\x99ed
 =
STOPPED
;

384 i\xe0(
ch
 =\xf0
\x8d
->
\x89y_x\xda
) {

385
\x8d
->
\x89y_\x9ahib\x99ed
 =
RUNNING
;

386 (*
\x8d
->
\x89y_dev\xa1\xact
)(tp);

392 i\xe0(
ch
 =\xf0'\n' || ch =\xf0
MARKER
)

393
\x8d
->
\x89y_lf\xf9
++;

394 *
\x8d
->
\x89y_\x9ah\x97d
++ =
ch
;

395 i\xe0(
\x8d
->
\x89y_\x9ah\x97d
 =\xf0&\x8d->
\x89y_\x9aqueue
[
TTY_IN_BYTES
])

396
\x8d
->
\x89y_\x9ah\x97d
 =\x81p->
\x89y_\x9aqueue
;

397
\x8d
->
\x89y_\x9acou\xc1
++;

398
	`echo
(
\x8d
,
ch
);

399
	}
}

404 
	$make_b\xbbak
(
ch
\xe8
n\xdbx\xfb\xb1
 {

410 
c
,
make
,
code
;

412
c
 =
ch
 & 0177;

413
make
 = (
ch
 & 0200 ? 0 : 1);

414 i\xe0(
\xdeiv\x91ti
 =\xf0
FALSE
) {

416
code
 = (
shi\xe11
 ||
shi\xe12
 ||
\xffp\xa6ock
 ?
sh
[
c
] :
unsh
[c]);

417 i\xe0(
cڌ\xde
 &&
c
 <
TOP_ROW
)

418
code
 =
sh
[
c
];

419 i\xe0(
c
 > 70 &&
numlock
)

420
code
 =
sh
[
c
];

423
code
 = (
shi\xe11
 ||
shi\xe12
 ||
\xffp\xa6ock
 ?
m24
[
c
] :
unm24
[c]);

424 i\xe0(
cڌ\xde
 &&
c
 <
TOP_ROW
)

425
code
 =
sh
[
c
];

426 i\xe0(
c
 > 70 &&
numlock
)

427
code
 =
m24
[
c
];

429
code
 &\xf0
BYTE
;

430 i\xe0(
code
 < 0200 || code >= 0206) {

432 i\xe0(
\xaet
)

433
code
 |= 0200;

434 i\xe0(
cڌ\xde
)

435
code
 &= 037;

436 i\xe0(
code
 == 0)

437
code
 =
AT_SIGN
;

438 i\xe0(
make
 == 0)

439
code
 = 0;

440  (
code
);

444 
code
 - 0200) {

446
shi\xe11
 =
make
;

449
shi\xe12
 =
make
;

452
cڌ\xde
 =
make
;

455
\xaet
 =
make
;

458 i\xe0(
make
)

459
\xffp\xa6ock
 = 1 - capslock;

462 i\xe0(
make
)

463
numlock
 = 1 -\x82umlock;

467
	}
}

472 
	$echo
(
\x89y_\xa1ru\xf9
 *
\x8d
,

473 
c
\xe8
n\xdbx\xfb\xb1
 {

476 i\xe0((
\x8d
->
\x89y_mode
 &
ECHO
) == 0)

478 i\xe0(
c
 !\xf0
MARKER
)

479
	`out_ch\xac
(
\x8d
,
c
);

480
	`\xe6ush
(
\x8d
);

481
	}
}

487
	$chuck
(
\x89y_\xa1ru\xf9
 *
\x8d
\xe8
n\xdbx\xfb\xb1
 {

490 *
\xb4ev
;

493 i\xe0(
\x8d
->
\x89y_\x9acou\xc1
 == 0)

497
\xb4ev
 = (
\x8d
->
\x89y_\x9ah\x97d
 !\xf0\x8d->
\x89y_\x9aqueue
 ?\x81p->tty_inhead - 1

498 : &
\x8d
->
\x89y_\x9aqueue
[
TTY_IN_BYTES
 - 1]);

499 i\xe0(*
\xb4ev
 == '\n' || *prev == '\r')

501
\x8d
->
\x89y_\x9ah\x97d
 =
\xb4ev
;

502
\x8d
->
\x89y_\x9acou\xc1
--;

503  (
OK
);

504
	}
}

509 
	$do_\xbbad
(
\x89y_\xa1ru\xf9
 *
\x8d
,

510
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

513 
code
,
\xffΔ
;

515 i\xe0(
\x8d
->
\x89y_\x9a\xcb\xe1
 > 0) {

516
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
	`\xb4oc_\xc4
(*m_\xb1r),
E\xbc\xdcCode
::
E_TRY_AGAIN
, 0L, 0L);

523
\x8d
->
\x89y_\x9a\xffΔ
 =
\xa1\xa9ic_\xff\xa1
<>(
m_\xb1r
->
m_sour\xfb
);

524
\x8d
->
\x89y_\x9a\xb4oc
 =
\xa1\xa9ic_\xff\xa1
<>(
	`\xb4oc_\xc4
(*
m_\xb1r
));

525
\x8d
->
\x89y_\x9a_v\x9c
 =
	`add\xbbss
(*
m_\xb1r
);

526
\x8d
->
\x89y_\x9a\xcb\xe1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

529
code
 =
	`rd_ch\xacs
(
\x8d
);

530
\xffΔ
 =
\xa1\xa9ic_\xff\xa1
<>(
\x8d
->
\x89y_\x9a\xb4oc
);

532
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
\xffΔ
,
code
, 0LL, 0LL);

533
	}
}

539
	$rd_ch\xacs
(
\x89y_\xa1ru\xf9
 *
\x8d
\xe8
n\xdbx\xfb\xb1
 {

546 
cooked
,
\xf9
,
u\xa3r_\xf9
,
buf_\xf9
,
\x92ough
,
e\xd9_\xa3\x92
;

547
\xa1d
::
size_t

cum
;

548
\xa1d
::
size_t

\x9a_v\x9c
,
\xcb\xe1
;

549
u\x9\xa964_t

u\xa3r_phys
,
\x89y_phys
;

550 
ch
, *
\x89y_\xb1r
;

551 
\xb4oc
 *
\xbd
;

554
cooked
 = ((
\x8d
->
\x89y_mode
 & (
RAW
 |
CBREAK
)) ? 0 : 1);

555 i\xe0(
\x8d
->
\x89y_\x9acou\xc1
 =\xf00 || (
cooked
 &&\x81p->
\x89y_lf\xf9
 == 0))

556  (
SUSPEND
);

557
\xbd
 =
	`\xb4oc_addr
(
\x8d
->
\x89y_\x9a\xb4oc
);

558
\x9a_v\x9c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\x8d
->
\x89y_\x9a_v\x9c
);

559
\xcb\xe1
 =
\x8d
->
\x89y_\x9a\xcb\xe1
;

561 i\xe0((
u\xa3r_phys
 =
	`um\xad
(
\xbd
,
D
,
\x9a_v\x9c
,
\xcb\xe1
)) == 0)

562  (
E\xbc\xdcCode
::
E_BAD_ADDR
);

564
\x89y_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
TTY
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\x89y_buf
),

565
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
TTY_BUF_SIZE
));

566
cum
 = 0;

567
\x92ough
 = 0;

568
e\xd9_\xa3\x92
 = 0;

571 
\x8d
->
\x89y_\x9a\xcb\xe1
 > 0) {

573
buf_\xf9
 =

574
\xa1\xa9ic_\xff\xa1
<>(
\xa1d
::
	`m\x9a
({
\x8d
->
\x89y_\x9a\xcb\xe1
, s\x8ftic_\xff\xa1<\xa1d::
size_t
>\xd1p->
\x89y_\x9acou\xc1
),

575
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
TTY_BUF_SIZE
)}));

576
\xf9
 = 0;

577
\x89y_\xb1r
 =
\x89y_buf
;

580 
buf_\xf9
-- > 0) {

581
ch
 = *
\x8d
->
\x89y_\x9a\x8f\x9e
++;

582 i\xe0(
\x8d
->
\x89y_\x9a\x8f\x9e
 =\xf0&\x8d->
\x89y_\x9aqueue
[
TTY_IN_BYTES
])

583
\x8d
->
\x89y_\x9a\x8f\x9e
 =\x81p->
\x89y_\x9aqueue
;

584 *
\x89y_\xb1r
++ =
ch
;

585
\xf9
++;

586 i\xe0(
ch
 =\xf0'\n' || ch =\xf0
MARKER
) {

587
\x8d
->
\x89y_lf\xf9
--;

588 i\xe0(
cooked
 &&
ch
 =\xf0
MARKER
)

589
e\xd9_\xa3\x92
++;

590
\x92ough
++;

591 i\xe0(
cooked
)

601
u\xa3r_\xf9
 = (
e\xd9_\xa3\x92
 ?
\xf9
 - 1 : ct);

603
	`phys_c\xddy
(
\x89y_phys
,
u\xa3r_phys
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
u\xa3r_\xf9
));

604
u\xa3r_phys
 +\xf0
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
u\xa3r_\xf9
);

605
cum
 +\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
u\xa3r_\xf9
);

606
\x8d
->
\x89y_\x9a\xcb\xe1
 -\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xf9
);

607
\x8d
->
\x89y_\x9acou\xc1
 -\xf0
\xf9
;

608 i\xe0(
\x8d
->
\x89y_\x9acou\xc1
 =\xf00 ||
\x92ough
)

612
\x8d
->
\x89y_\x9a\xcb\xe1
 = 0;

613 
\xa1\xa9ic_\xff\xa1
<>(
cum
);

614
	}
}

619 
	$f\x9aish
(
\x89y_\xa1ru\xf9
 *
\x8d
,

620 
code
\xe8
n\xdbx\xfb\xb1
 {

623 
\xbb\xb6y\x93
,
\xffΔ
;

625
\x8d
->
\x89y_rw\xdcds
 = 0;

626
\x8d
->
\x89y_ou\x8ee\xe1
 = 0;

627 i\xe0(
\x8d
->
\x89y_wa\x99\x9ag
 =\xf0
NOT_WAITING
)

629
\xbb\xb6y\x93
 = ()
\x8d
->
\x89y_\xd9\xffΔ
;

630
\xffΔ
 = ()
\x8d
->
\x89y_ou\x8droc
;

631
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
\xbb\xb6y\x93
,
\xffΔ
,
code
, 0L, 0L);

632
\x8d
->
\x89y_wa\x99\x9ag
 =
NOT_WAITING
;

633
	}
}

638 
	$do_wr\x99e
(
\x89y_\xa1ru\xf9
 *
\x8d
,

639
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

642
\xa1d
::
size_t

out_v\x9c
,
out_\xcb\xe1
;

643 
\xb4oc
 *
\xbd
;

650
\x8d
->
\x89y_\xd9\xffΔ
 =
\xa1\xa9ic_\xff\xa1
<>(
m_\xb1r
->
m_sour\xfb
);

651
\x8d
->
\x89y_ou\x8droc
 =
\xa1\xa9ic_\xff\xa1
<>(
	`\xb4oc_\xc4
(*
m_\xb1r
));

652
\x8d
->
\x89y_out_v\x9c
 =
	`add\xbbss
(*
m_\xb1r
);

653
\x8d
->
\x89y_ou\x8ee\xe1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

654
\x8d
->
\x89y_wa\x99\x9ag
 =
WAITING
;

655
\x8d
->
\x89y_cum
 = 0;

658
\xbd
 =
	`\xb4oc_addr
(
\x8d
->
\x89y_ou\x8droc
);

659
out_v\x9c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\x8d
->
\x89y_out_v\x9c
);

660
out_\xcb\xe1
 =
\x8d
->
\x89y_ou\x8ee\xe1
;

662 i\xe0((
\x8d
->
\x89y_phys
 =
	`um\xad
(
\xbd
,
D
,
out_v\x9c
,
out_\xcb\xe1
)) == 0) {

664
\x8d
->
\x89y_cum
 =

665
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
E\xbc\xdcCode
::
E_BAD_ADDR
);

666
\x8d
->
\x89y_ou\x8ee\xe1
 = 0;

670 (*
\x8d
->
\x89y_dev\xa1\xact
)(tp);

671
	}
}

676 
	$do_io\xf9l
(
\x89y_\xa1ru\xf9
 *
\x8d
,

677
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

680 
\xe6ags
,
\x94ki
,
\x94a\xa3
,
k\x9\x96
,
\x9a\x8c
,
qu\x99
,
x\xda
,
xoff
,
eof
;

681 
r
;

683
r
 =
OK
;

684
\xe6ags
 = 0;

685
\x94ki
 = 0;

686 
	`\x89y_\xbbque\xa1
(*
m_\xb1r
)) {

687 
TIOCSETP
:

689
\x8d
->
\x89y_\x94a\xa3
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 8\xe8&
BYTE
);

690
\x8d
->
\x89y_k\x9el
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 0\xe8&
BYTE
);

691
\x8d
->
\x89y_mode
 = ()
	`\x89y_\xe6ags
(*
m_\xb1r
);

694 
TIOCSETC
:

696
\x8d
->
\x89y_\x9a\x8c
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 24\xe8&
BYTE
);

697
\x8d
->
\x89y_qu\x99
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 16\xe8&
BYTE
);

698
\x8d
->
\x89y_x\xda
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 8\xe8&
BYTE
);

699
\x8d
->
\x89y_xoff
 = ()((
	`\x89y_\xa5ek
(*
m_\xb1r
\xe8>> 0\xe8&
BYTE
);

700
\x8d
->
\x89y_eof
 = ()((
	`\x89y_\xe6ags
(*
m_\xb1r
\xe8>> 8\xe8&
BYTE
);

703 
TIOCGETP
:

705
\x94a\xa3
 = (()
\x8d
->
\x89y_\x94a\xa3
\xe8&
BYTE
;

706
k\x9\x96
 = (()
\x8d
->
\x89y_k\x9el
\xe8&
BYTE
;

707
\x94ki
 = (
\x94a\xa3
 << 8\xe8|
k\x9\x96
;

708
\xe6ags
 = ()
\x8d
->
\x89y_mode
;

711 
TIOCGETC
:

713
\x9a\x8c
 = (()
\x8d
->
\x89y_\x9a\x8c
\xe8&
BYTE
;

714
qu\x99
 = (()
\x8d
->
\x89y_qu\x99
\xe8&
BYTE
;

715
x\xda
 = (()
\x8d
->
\x89y_x\xda
\xe8&
BYTE
;

716
xoff
 = (()
\x8d
->
\x89y_xoff
\xe8&
BYTE
;

717
eof
 = (()
\x8d
->
\x89y_eof
\xe8&
BYTE
;

718
\x94ki
 = (
\x9a\x8c
 << 24\xe8| (
qu\x99
 << 16\xe8| (
x\xda
 << 8\xe8| (
xoff
 << 0);

719
\xe6ags
 = (
eof
 << 8);

723
r
 =
E\xbc\xdcCode
::
EINVAL
;

728
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
	`\xb4oc_\xc4
(*m_\xb1r),
r
,
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
\xe6ags
),

729
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
\x94ki
));

730
	}
}

736
	$do_\xf\xe2\xfbl
(
\x89y_\xa1ru\xf9
 *
\x8d
,

737
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

745 i\xe0(
\x8d
->
\x89y_\x9a\xcb\xe1
 =\xf00 &&\x81p->
\x89y_ou\x8ee\xe1
 == 0)

749
\x8d
->
\x89y_\x9ah\x97d
 =\x81p->
\x89y_\x9aqueue
;

750
\x8d
->
\x89y_\x9a\x8f\x9e
 =\x81p->
\x89y_\x9aqueue
;

751
\x8d
->
\x89y_\x9acou\xc1
 = 0;

752
\x8d
->
\x89y_lf\xf9
 = 0;

753
\x8d
->
\x89y_\x9a\xcb\xe1
 = 0;

754
\x8d
->
\x89y_ou\x8ee\xe1
 = 0;

755
\x8d
->
\x89y_wa\x99\x9ag
 =
NOT_WAITING
;

756
\x8d
->
\x89y_\x9ahib\x99ed
 =
RUNNING
;

757
	`\x89y_\xbb\xb6y
(
TASK_REPLY
,
m_\xb1r
->
m_sour\xfb
,
	`\xb4oc_\xc4
(*m_\xb1r),
E\xbc\xdcCode
::
EINTR
, 0LL, 0LL);

758
	}
}

764 
	$\x89y_\xbb\xb6y
(
code
, 
\xbb\xb6y\x93
, 
\xb4oc_\xc4
, 
\xa1\xa9us
,
\x9at64_t

ex\x8\xff
,

765
\x9at64_t

\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

770
mes\xa7ge

\x89y_mess
;

772
\x89y_mess
.
m_ty\xb3
 =
code
;

773
	`\xbbp_\xb4oc_\xc4
(
\x89y_mess
\xe8\xf0
\xb4oc_\xc4
;

774
	`\xbbp_\xa1\xa9us
(
\x89y_mess
\xe8\xf0
\xa1\xa9us
;

775
	`\x89y_\xe6ags
(
\x89y_mess
\xe8\xf0
ex\x8\xff
;

776
	`\x89y_\xa5ek
(
\x89y_mess
\xe8\xf0
\xd9h\x94
;

777
	`\xa3nd
(
\xbb\xb6y\x93
, &
\x89y_mess
);

778
	}
}

789 
	#COLOR_BASE
 0xB800

	)

790 
	#MONO_BASE
 0xB000

	)

791 
	#C_VID_MASK
 0x3FFF

	)

792 
	#M_VID_MASK
 0x0FFF

	)

793 
	#C_RETRACE
 0x0300

	)

794 
	#M_RETRACE
 0x7000

	)

795 
	#WORD_MASK
 0xFFFF

	)

796 
	#OFF_MASK
 0x000F

	)

797 
	#BEEP_FREQ
 0x0533

	)

798 
	#B_TIME
 0x2000

	)

799 
	#BLANK
 0x0700

	)

800 
	#LINE_WIDTH
 80

	)

801 
	#SCR_LINES
 25

	)

802 
	#CTRL_S
 31

	)

803 
	#MONOCHROME
 1

	)

804 
	#CONSOLE
 0

	)

805 
	#GO_FORWARD
 0

	)

806 
	#GO_BACKWARD
 1

	)

807 
	#TIMER2
 0x42

	)

808 
	#TIMER3
 0x43

	)

809 
	#KEYBD
 0x60

	)

810 
	#PORT_B
 0x61

	)

811 
	#KBIT
 0x80

	)

814 
	#M_6845
 0x3B0

	)

815 
	#C_6845
 0x3D0

	)

816 
	#INDEX
 4

	)

817 
	#DATA
 5

	)

818 
	#CUR_SIZE
 10

	)

819 
	#VID_ORG
 12

	)

820 
	#CURSOR
 14

	)

823 
	#KB_STATUS
 0x64

	)

824 
	#BYTE_AVAIL
 0x01

	)

825 
	#KB_BUSY
 0x02

	)

826 
	#DELUXE
 0x01

	)

827 
	#GET_TYPE
 5

	)

828 
	#OLIVETTI_EQUAL
 12

	)

831
PUBLIC

mes\xa7ge

	gkeybd_mess
;

832
PRIVATE

	gvid_\xbb\x8\xff\xfb
;

833
PRIVATE
 
	gvid_ba\xa3
;

834
PUBLIC
 
	gvid_mask
;

835
PRIVATE
 
	gvid_p\xd\xf9
;

840
PUBLIC

	$keyb\xd\xe4d
() {

843 
v\x\xab
,
code
,
k
,
\xbfw_b\x99
;

844 
\xa1\xddc
;

847
	`p\xd\xf9_\x9a
(
KEYBD
, &
code
);

848
	`p\xd\xf9_\x9a
(
PORT_B
, &
v\x\xab
);

849
	`p\xd\xf9_out
(
PORT_B
,
v\x\xab
 |
KBIT
);

850
	`p\xd\xf9_out
(
PORT_B
,
v\x\xab
);

856
k
 =
code
 - 0200;

857 i\xe0(
k
 > 0) {

859 i\xe0(
k
 != 29 && k != 42 && k != 54 && k != 56 && k != 69) {

860
	`p\xd\xf9_out
(
INT_CTL
,
ENABLE
);

870
\xbfw_b\x99
 =
\x89y_\xa1ru\xf9
[
CONSOLE
].
\x89y_mode
 &
RAW
;

871
\xa1\xddc
 =
\x89y_\xa1ru\xf9
[
CONSOLE
].
\x89y_xoff
;

872 i\xe0(
\xbfw_b\x99
 =\xf00 &&
cڌ\xde
 &&
code
 =\xf0
CTRL_S
 &&
\xa1\xddc
 =\xf0
XOFF_CHAR
) {

873
\x89y_\xa1ru\xf9
[
CONSOLE
].
\x89y_\x9ahib\x99ed
 =
STOPPED
;

874
	`p\xd\xf9_out
(
INT_CTL
,
ENABLE
);

880 i\xe0(
cڌ\xde
 &&
\xaet
 &&
code
 =\xf0
DEL_CODE
)

881
	`\xbbbo\xd9
();

884 i\xe0((
k
 =
\x89y_driv\x94_buf
[0]) <\x81ty_driver_buf[1]) {

886
k
 = k + k;

887
\x89y_driv\x94_buf
[
k
 + 2] =
code
;

888
\x89y_driv\x94_buf
[
k
 + 3] =
CONSOLE
;

889
\x89y_driv\x94_buf
[0]++;

892
keybd_mess
.
m_ty\xb3
 =
TTY_CHAR_INT
;

893
keybd_mess
.
ADDRESS
 =
\x89y_driv\x94_buf
;

894
	`\x9a\x8b\xbcu\xb1
(
TTY
, &
keybd_mess
);

897
	`p\xd\xf9_out
(
INT_CTL
,
ENABLE
);

899
	}
}

905
	$c\xdas\xd\x93
(
\x89y_\xa1ru\xf9
 *
\x8d
\xe8
n\xdbx\xfb\xb1
 {

911
\xa1d
::
size_t

cou\xc1_\xb4o\xfbs\xa3d_by\x8bs
;

912 
c
;

913 
\xa3gm\x92t
,
off\xa3t
,
off\xa3t1
;

919
\xa3gm\x92t
 =
\xa1\xa9ic_\xff\xa1
<>((
\x8d
->
\x89y_phys
 >> 4\xe8&
WORD_MASK
);

920
off\xa3t
 =
\xa1\xa9ic_\xff\xa1
<>(
\x8d
->
\x89y_phys
 &
OFF_MASK
);

921
off\xa3t1
 =
off\xa3t
;

922
cou\xc1_\xb4o\xfbs\xa3d_by\x8bs
 = 0;

924 
\x8d
->
\x89y_ou\x8ee\xe1
 > 0 &&\x81p->
\x89y_\x9ahib\x99ed
 =\xf0
RUNNING
) {

925
c
 =
	`g\x91_by\x8b
(
\xa3gm\x92t
,
off\xa3t
);

926
	`out_ch\xac
(
\x8d
,
c
);

927
off\xa3t
++;

928
\x8d
->
\x89y_ou\x8ee\xe1
--;

929
cou\xc1_\xb4o\xfbs\xa3d_by\x8bs
++;

931
	`\xe6ush
(
\x8d
);

936
\x8d
->
\x89y_phys
 +\xf0
cou\xc1_\xb4o\xfbs\xa3d_by\x8bs
;

937
\x8d
->
\x89y_cum
 +\xf0
cou\xc1_\xb4o\xfbs\xa3d_by\x8bs
;

940 i\xe0(
\x8d
->
\x89y_ou\x8ee\xe1
 == 0)

941
	`f\x9aish
(
\x8d
,
\xa1\xa9ic_\xff\xa1
<>\xd1p->
\x89y_cum
));

942
	}
}

947 
	$out_ch\xac
(
\x89y_\xa1ru\xf9
 *
\x8d
,

948 
c
\xe8
n\xdbx\xfb\xb1
 {

957 i\xe0(
\x8d
->
\x89y_esc_\xa1\xa9e
 == 1) {

958
\x8d
->
\x89y_ech\xac
 =
c
;

959
\x8d
->
\x89y_esc_\xa1\xa9e
 = 2;

963 i\xe0(
\x8d
->
\x89y_esc_\xa1\xa9e
 == 2) {

964
	`es\xff\xb3
(
\x8d
,\x81p->
\x89y_ech\xac
,
c
);

965
\x8d
->
\x89y_esc_\xa1\xa9e
 = 0;

969 
c
) {

971
	`\xe6ush
(
\x8d
);

972
	`b\x93p
(
BEEP_FREQ
);

976
	`move_to
(
\x8d
,\x81p->
\x89y_c\xdeumn
,\x81p->
\x89y_row
 + 1);

980
	`move_to
(
\x8d
,\x81p->
\x89y_c\xdeumn
 + 1,\x81p->
\x89y_row
);

984
	`move_to
(
\x8d
,\x81p->
\x89y_c\xdeumn
 + 1,\x81p->
\x89y_row
);

988
	`move_to
(
\x8d
,\x81p->
\x89y_c\xdeumn
 - 1,\x81p->
\x89y_row
);

992 i\xe0(
\x8d
->
\x89y_mode
 &
CRMOD
)

993
	`out_ch\xac
(
\x8d
, '\r');

994 i\xe0(
\x8d
->
\x89y_row
 == 0)

995
	`s\xfc\xd\x96_s\xfc\x93n
(
\x8d
,
GO_FORWARD
);

997
\x8d
->
\x89y_row
--;

998
	`move_to
(
\x8d
,\x81p->
\x89y_c\xdeumn
,\x81p->
\x89y_row
);

1002
	`move_to
(
\x8d
, 0,\x81p->
\x89y_row
);

1006 i\xe0((
\x8d
->
\x89y_mode
 &
XTABS
) == XTABS) {

1008
	`out_ch\xac
(
\x8d
, ' ');

1009 } 
\x8d
->
\x89y_c\xdeumn
 &
TAB_MASK
);

1016
	`\xe6ush
(
\x8d
);

1017
\x8d
->
\x89y_esc_\xa1\xa9e
 = 1;

1021 i\xe0(
\x8d
->
\x89y_c\xdeumn
 >\xf0
LINE_WIDTH
)

1023 i\xe0(
\x8d
->
\x89y_rw\xdcds
 =\xf0
TTY_RAM_WORDS
)

1024
	`\xe6ush
(
\x8d
);

1025
\x8d
->
\x89y_\xbfmqueue
[\x8d->
\x89y_rw\xdcds
++] =\x81p->
\x89y_\xa9\x8cibu\x8b
 |
c
;

1026
\x8d
->
\x89y_c\xdeumn
++;

1029
	}
}

1034 
	$s\xfc\xd\x96_s\xfc\x93n
(
\x89y_\xa1ru\xf9
 *
\x8d
,

1035 
d\x9c
\xe8
n\xdbx\xfb\xb1
 {

1036 
amou\xc1
,
off\xa3t
;

1038
amou\xc1
 = (
d\x9c
 =\xf0
GO_FORWARD
 ? 2 *
LINE_WIDTH
 : -2 * LINE_WIDTH);

1039
\x8d
->
\x89y_\xdcg
 = (\x8d->\x89y_\xdcg +
amou\xc1
\xe8&
vid_mask
;

1040 i\xe0(
d\x9c
 =\xf0
GO_FORWARD
)

1041
off\xa3t
 = (
\x8d
->
\x89y_\xdcg
 + 2 * (
SCR_LINES
 - 1\xe8*
LINE_WIDTH
\xe8&
vid_mask
;

1043
off\xa3t
 =
\x8d
->
\x89y_\xdcg
;

1046
	`vid_c\xddy
(
NIL_PTR
,
vid_ba\xa3
,
off\xa3t
,
LINE_WIDTH
);

1047
	`\xa3t_6845
(
VID_ORG
,
\x8d
->
\x89y_\xdcg
 >> 1);

1048
	}
}

1054
	$\xe6ush
(
\x89y_\xa1ru\xf9
 *
\x8d
\xe8
n\xdbx\xfb\xb1
 {

1057 i\xe0(
\x8d
->
\x89y_rw\xdcds
 == 0)

1059
	`vid_c\xddy
(
\x8d
->
\x89y_\xbfmqueue
,
vid_ba\xa3
,\x81p->
\x89y_vid
,\x81p->
\x89y_rw\xdcds
);

1062
\x8d
->
\x89y_vid
 = (\x8d->\x89y_vid + 2 *\x81p->
\x89y_rw\xdcds
);

1063
	`\xa3t_6845
(
CURSOR
,
\x8d
->
\x89y_vid
 >> 1);

1064
\x8d
->
\x89y_rw\xdcds
 = 0;

1065
	}
}

1070 
	$move_to
(
\x89y_\xa1ru\xf9
 *
\x8d
, 
x
,

1071 
y
\xe8
n\xdbx\xfb\xb1
 {

1074
	`\xe6ush
(
\x8d
);

1075 i\xe0(
x
 < 0 || x >\xf0
LINE_WIDTH
 ||
y
 < 0 || y >\xf0
SCR_LINES
)

1077
\x8d
->
\x89y_c\xdeumn
 =
x
;

1078
\x8d
->
\x89y_row
 =
y
;

1079
\x8d
->
\x89y_vid
 = (\x8d->
\x89y_\xdcg
 + 2 * (
SCR_LINES
 - 1 -
y
\xe8*
LINE_WIDTH
 + 2 *
x
);

1080
	`\xa3t_6845
(
CURSOR
,
\x8d
->
\x89y_vid
 >> 1);

1081
	}
}

1086 
	$es\xff\xb3
(
\x89y_\xa1ru\xf9
 *
\x8d
, 
x
,

1087 
y
\xe8
n\xdbx\xfb\xb1
 {

1090 
n
,
\xf9
,
vx
;

1093 i\xe0(
x
 == 'z') {

1095
\x8d
->
\x89y_\xa9\x8cibu\x8b
 =
y
 << 8;

1099 i\xe0(
x
 == '~') {

1100 i\xe0(
y
 == '0') {

1102
n
 = 2 *
LINE_WIDTH
 * (
\x8d
->
\x89y_row
 + 1\xe8- 2 *\x81p->
\x89y_c\xdeumn
;

1103
vx
 =
\x8d
->
\x89y_vid
;

1104 
n
 > 0) {

1105
\xf9
 =
	`m\x9a
(
n
,
vid_\xbb\x8\xff\xfb
);

1106
	`vid_c\xddy
(
NIL_PTR
,
vid_ba\xa3
,
vx
,
\xf9
 / 2);

1107
vx
 +\xf0
\xf9
;

1108
n
 -\xf0
\xf9
;

1110 } i\xe0(
y
 == '1') {

1112
	`s\xfc\xd\x96_s\xfc\x93n
(
\x8d
,
GO_BACKWARD
);

1118
	`move_to
(
\x8d
,
x
 - 32,
y
 - 32);

1119
	}
}

1124 
	$\xa3t_6845
(
\xbbg
,

1125 
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

1136
	`p\xd\xf9_out
(
vid_p\xd\xf9
 +
INDEX
,
\xbbg
);

1137
	`p\xd\xf9_out
(
vid_p\xd\xf9
 +
DATA
, (
v\x\xab
 >> 8\xe8&
BYTE
);

1138
	`p\xd\xf9_out
(
vid_p\xd\xf9
 +
INDEX
,
\xbbg
 + 1);

1139
	`p\xd\xf9_out
(
vid_p\xd\xf9
 +
DATA
,
v\x\xab
 &
BYTE
);

1140
	}
}

1145 
	$b\x93p
(
f
\xe8
n\xdbx\xfb\xb1
 {

1152 
x
,
k
;

1154
	`lock
();

1155
	`p\xd\xf9_out
(
TIMER3
, 0xB6);

1156
	`p\xd\xf9_out
(
TIMER2
,
f
 &
BYTE
);

1157
	`p\xd\xf9_out
(
TIMER2
, (
f
 >> 8\xe8&
BYTE
);

1158
	`p\xd\xf9_\x9a
(
PORT_B
, &
x
);

1159
	`p\xd\xf9_out
(
PORT_B
,
x
 | 3);

1160 
k
 = 0; k <
B_TIME
; k++)

1162
	`p\xd\xf9_out
(
PORT_B
,
x
);

1163
	`u\xc6ock
();

1164
	}
}

1169 
	$\x89y_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

1172 
\x89y_\xa1ru\xf9
 *
\x8d
;

1173 
i
;

1176 
\x8d
 = &
\x89y_\xa1ru\xf9
[0];\x81\xb0< &\x89y_\xa1ru\xf9[
NR_TTYS
];\x81p++) {

1177
\x8d
->
\x89y_\x9ah\x97d
 =\x81p->
\x89y_\x9aqueue
;

1178
\x8d
->
\x89y_\x9a\x8f\x9e
 =\x81p->
\x89y_\x9aqueue
;

1179
\x8d
->
\x89y_mode
 =
CRMOD
 |
XTABS
 |
ECHO
;

1180
\x8d
->
\x89y_dev\xa1\xact
 =
c\xdas\xd\x93
;

1181
\x8d
->
\x89y_\x94a\xa3
 =
ERASE_CHAR
;

1182
\x8d
->
\x89y_k\x9el
 =
KILL_CHAR
;

1183
\x8d
->
\x89y_\x9a\x8c
 =
INTR_CHAR
;

1184
\x8d
->
\x89y_qu\x99
 =
QUIT_CHAR
;

1185
\x8d
->
\x89y_x\xda
 =
XON_CHAR
;

1186
\x8d
->
\x89y_xoff
 =
XOFF_CHAR
;

1187
\x8d
->
\x89y_eof
 =
EOT_CHAR
;

1190
\x89y_\xa1ru\xf9
[0].
\x89y_makeb\xbbak
 =
TWO_INTS
;

1191 i\xe0(
c\xde\xdc
) {

1192
vid_ba\xa3
 =
COLOR_BASE
;

1193
vid_mask
 =
C_VID_MASK
;

1194
vid_p\xd\xf9
 =
C_6845
;

1195
vid_\xbb\x8\xff\xfb
 =
C_RETRACE
;

1197
vid_ba\xa3
 =
MONO_BASE
;

1198
vid_mask
 =
M_VID_MASK
;

1199
vid_p\xd\xf9
 =
M_6845
;

1200
vid_\xbb\x8\xff\xfb
 =
M_RETRACE
;

1202
\x89y_\xa1ru\xf9
[0].
\x89y_\xa9\x8cibu\x8b
 =
BLANK
;

1203
\x89y_driv\x94_buf
[1] =
MAX_OVERRUN
;

1204
	`\xa3t_6845
(
CUR_SIZE
, 31);

1205
	`\xa3t_6845
(
VID_ORG
, 0);

1206
	`move_to
(&
\x89y_\xa1ru\xf9
[0], 0, 0);

1212 i\xe0(
s\xf\xe2_code
 =\xf0
OLIVETTI_EQUAL
)

1213
\xdeiv\x91ti
 =
TRUE
;

1214
	}
}

1219
PUBLIC

	$putc
(
c
)

1220 
c
;

1228
	`out_ch\xac
(&
\x89y_\xa1ru\xf9
[0],
c
);

1229
	}
}

1234 
	$func_key
(
ch
\xe8
n\xdbx\xfb\xb1
 {

1239 i\xe0(
ch
 =\xf0
F1
)

1240
	`p_dmp
();

1241 i\xe0(
ch
 =\xf0
F2
)

1242
	`m\xad_dmp
();

1243
	}
}

	@kernel/type.hpp

1 #\xb4agm\xa8
\xda\xfb


10 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

11 
	~<x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
>

13 
	spc_psw
 {

14
	mx\x9aim
::
v\x9\xf9_addr_t

pc
;

15
	m\xa1d
::
u\x9\xa964_t

psw
;

18 
	ssig_\x9afo
 {

19 
	msigno
;

20 
pc_psw

	msigp\xfdsw
;

	@kernel/wait_graph.cpp

1 
	~"wa\x99_g\xb\xe5h.h\xb5
"

2 
	~<\x\xabgܙhm
>

4
\xc7me\xa5a\xfb

	gωi\xfb
 {

6
bo\xde

	gWa\x99F\xdcG\xb\xe5h
::
has_\xb7th
(
x\x9aim
::
pid_t

\xe4om
, x\x9aim::pid_\x88
to
,

7
\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
> &
vis\x99ed
) const {

8 i\xe0(
\xe4om
 =\xf0
to
) {

9 
\x8cue
;

11 i\xe0(!
	gvis\x99ed
.
\x9a\xa3\xb9
(
\xe4om
).
	g\xa3c\xdad
) {

12 
	g\xe7l\xa3
;

14 aut\xd8
	g\x99
 =
edges_
.
f\x9ad
(
\xe4om
);

15 i\xe0(
	g\x99
 =\xf0
edges_
.
\x92d
()) {

16 
\xe7l\xa3
;

18 
	gx\x9aim
::
pid_t

\xc3xt
 :
\x99
->
\xa3c\xdad
) {

19 i\xe0(
has_\xb7th
(
\xc3xt
,
to
,
vis\x99ed
)) {

20 
	g\x8cue
;

23 
	g\xe7l\xa3
;

26
bo\xde

	gWa\x99F\xdcG\xb\xe5h
::
add_edge
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
) {

27
edges_
[
\xa4c
].
push_back
(
d\xa1
);

28
	g\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
>
vis\x99ed
;

29 i\xe0(
has_\xb7th
(
d\xa1
,
\xa4c
,
vis\x99ed
)) {

30 aut\xd8&
	gvec
 =
edges_
[
\xa4c
];

31
	gvec
.
\x94a\xa3
(
\xa1d
::
f\x9ad
(
vec
.
beg\x9a
(), vec.
\x92d
(),
d\xa1
));

32 
	g\x8cue
;

34 
	g\xe7l\xa3
;

37 
	gWa\x99F\xdcG\xb\xe5h
::
\xbbmove_edge
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
\xe8
n\xdbx\xfb\xb1
 {

38 aut\xd8
\x99
 =
edges_
.
f\x9ad
(
\xa4c
);

39 i\xe0(
	g\x99
 =\xf0
edges_
.
\x92d
()) {

42 aut\xd8&
	gvec
 =
\x99
->
\xa3c\xdad
;

43
	gvec
.
\x94a\xa3
(
\xa1d
::
\xbbmove
(
vec
.
beg\x9a
(), vec.
\x92d
(),
d\xa1
), vec.end());

44 i\xe0(
	gvec
.
em\xb1y
()) {

45
	gedges_
.
\x94a\xa3
(
\x99
);

49 
	gWa\x99F\xdcG\xb\xe5h
::
\xfe\x97r
(
x\x9aim
::
pid_t

pid
\xe8
n\xdbx\xfb\xb1
 {

50
edges_
.
\x94a\xa3
(
pid
);

51 aut\xd8&
	g\xb7\x9c
 :
edges_
) {

52 aut\xd8&
vec
 =
\xb7\x9c
.
\xa3c\xdad
;

53
	gvec
.
\x94a\xa3
(
\xa1d
::
\xbbmove
(
vec
.
beg\x9a
(), vec.
\x92d
(),
pid
), vec.end());

	@kernel/wait_graph.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~"../\x9a\x\xe3ude/x\x9aim/c\xd\xfb_ty\xb3s.h\xb5
"

8 
	~<un\xdcd\x94ed_m\xad
>

9 
	~<un\xdcd\x94ed_\xa3t
>

10 
	~<ve\xf9\xdc
>

12
\xc7me\xa5a\xfb

	gωi\xfb
 {

17 \xfeas\xa0
	cWa\x99F\xdcG\xb\xe5h
 {

18
	gpublic
:

29 [[
nodis\xf\xe4d
]]
bo\xde

add_edge
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
);

34 
\xbbmove_edge
(
x\x9aim
::
pid_t

\xa4c
, x\x9aim::pid_\x88
d\xa1
\xe8
n\xdbx\xfb\xb1
;

39 
\xfe\x97r
(
x\x9aim
::
pid_t

pid
\xe8
n\xdbx\xfb\xb1
;

41
	g\xb4iv\xa9e
:

42
bo\xde

has_\xb7th
(
x\x9aim
::
pid_t

\xe4om
, x\x9aim::pid_\x88
to
,

43
\xa1d
::
un\xdcd\x94ed_\xa3t
<
x\x9aim
::
pid_t
> &
vis\x99ed
) const;

45
	g\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
, std::
ve\xf9\xdc
<x\x9aim::pid_t>>
edges_
{};

	@kernel/wini.cpp

21 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

22 
	~"../h/com.h\xb5
"

23 
	~"../h/cڡ.h\xb5
"

24 
	~"../h/\x94r\xdc.h\xb5
"

25 
	~"../h/ty\xb3.h\xb5
"

26 
	~"cڡ.h\xb5
"

27 
	~"\xb4oc.h\xb5
"

28 
	~"ty\xb3.h\xb5
"

29 
	~<\x\xabgܙhm
>

30 
	~<c\xa1ddef
>

31 
	~<c\xa1d\x9\xa9
>

34 \xfeas\xa0
	cSc\xddedP\xd\xf9Lock
 {

35
	mpublic
:

36
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`lock
(); }

37 ~
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`u\xc6ock
();
	}
}

41 
	#WIN_DATA
 0x320

	)

42 
	#WIN_STATUS
 0x321

	)

43 
	#WIN_SELECT
 0x322

	)

44 
	#WIN_DMA
 0x323

	)

45 
	#DMA_ADDR
 0x006

	)

46 
	#DMA_TOP
 0x082

	)

47 
	#DMA_COUNT
 0x007

	)

48 
	#DMA_M2
 0x00C

	)

49 
	#DMA_M1
 0x00B

	)

50 
	#DMA_INIT
 0x00A

	)

53 
	#WIN_RECALIBRATE
 0x01

	)

54 
	#WIN_SENSE
 0x03

	)

55 
	#WIN_READ
 0x08

	)

56 
	#WIN_WRITE
 0x0\xa8

	)

57 
	#WIN_SPECIFY
 0x0C

	)

58 
	#WIN_ECC_READ
 0x0D

	)

60 
	#DMA_INT
 3

	)

61 
	#INT
 2

	)

62 
	#NO_DMA_INT
 0

	)

63 
	#CTRL_BYTE
 5

	)

66 
	#DMA_READ
 0x47

	)

67 
	#DMA_WRITE
 0x4B

	)

70 
	#SECTOR_SIZE
 512

	)

71 
	#NR_SECTORS
 0x11

	)

74 
	#ERR
 -1

	)

77 
	#MAX_ERRORS
 4

	)

78 
	#MAX_RESULTS
 4

	)

79 
	#NR_DEVICES
 10

	)

80 
	#MAX_WIN_RETRY
 10000

	)

81 
	#PART_TABLE
 0x1C6

	)

82 
	#DEV_PER_DRIVE
 5

	)

85
PRIVATE
 
	sw\x9ai
 {

86 
	mwn_\xddcode
;

87 
	mwn_\xb4o\x\xe7r
;

88 
	mwn_drive
;

89 
	mwn_cyl\x9ad\x94
;

90 
	mwn_\xa3\xf9\xdc
;

91 
	mwn_h\x97d
;

92 
	mwn_h\x97ds
;

93
u\x9\xa964_t

	mwn_low
;

94
u\x9\xa964_t

	mwn_size
;

95
	m\xa1d
::
size_t

wn_cou\xc1
;

96
	m\xa1d
::
size_t

wn_add\xbbss
;

97 
	mwn_\xbbsu\xc9s
[
MAX_RESULTS
];

98 }
	gw\x9ai
[
NR_DEVICES
];

100
PRIVATE
 
	gw_\xc3ed_\xbb\xa3t
 =
FALSE
;

101
PRIVATE
 
	g\xc4_drives
;

103
PRIVATE

mes\xa7ge

	gw_mess
;

105
PRIVATE
 
	gcomm\x\xafd
[6];

107
PRIVATE
 
	gbuf
[
BLOCK_SIZE
];

109
PRIVATE
 
	s\xb7\xbfm
 {

110 
	m\xc4_cyl
;

111 
	m\xc4_h\x97ds
;

112 
	m\xbbdu\xfbd_wr
;

113 
	mwr_\xb4ecomp
;

114 
	mmax_ecc
;

115 }
	g\xb7\xbfm0
,
	g\xb7\xbfm1
;

120
PUBLIC
 
	$w\x9ache\xa1\x94_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

123 
r
,
\xffΔ
,
\xb4oc_\xc4
;

126
	`\x9a\x99_\xb7\xbfm
();

132 
TRUE
) {

134
	`\xbb\xfbive
(
ANY
, &
w_mess
);

135 i\xe0(
w_mess
.
m_sour\xfb
 < 0) {

136
	`\xb4\x9\xa9f
("w\x9ache\xa1\x94\x81ask g\xd9 mes\xa7g\x90\xe4om %d ",
w_mess
.
m_sour\xfb
);

139
\xffΔ
 =
w_mess
.
m_sour\xfb
;

140
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(
w_mess
);

143 
w_mess
.
m_ty\xb3
) {

144 
DISK_READ
:

145 
DISK_WRITE
:

146
r
 =
	`w_do_rdwt
(&
w_mess
);

149
r
 =
E\xbc\xdcCode
::
EINVAL
;

154
w_mess
.
m_ty\xb3
 =
TASK_REPLY
;

155
	`\xbbp_\xb4oc_\xc4
(
w_mess
\xe8\xf0
\xb4oc_\xc4
;

157
	`\xbbp_\xa1\xa9us
(
w_mess
\xe8\xf0
r
;

158
	`\xa3nd
(
\xffΔ
, &
w_mess
);

160
	}
}

166 
	$w_do_rdwt
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

168 
w\x9ai
 *
wn
;

169 
r
,
devi\xfb
,
\x94r\xdcs
 = 0;

170
\x9at64_t

\xa3\xf9\xdc
;

173
devi\xfb
 =
	`devi\xfb
(*
m_\xb1r
);

174 i\xe0(
devi\xfb
 < 0 || devi\xfb >\xf0
NR_DEVICES
)

175  (
E\xbc\xdcCode
::
EIO
);

176 i\xe0(
	`cou\xc1
(*
m_\xb1r
\xe8!\xf0
BLOCK_SIZE
)

177  (
E\xbc\xdcCode
::
EINVAL
);

178
wn
 = &
w\x9ai
[
devi\xfb
];

179
wn
->
wn_drive
 =
devi\xfb
 /
DEV_PER_DRIVE
;

180 i\xe0(
wn
->
wn_drive
 >\xf0
\xc4_drives
)

181  (
E\xbc\xdcCode
::
EIO
);

182
wn
->
wn_\xddcode
 =
m_\xb1r
->
m_ty\xb3
;

185 i\xe0(
	`pos\x99i\xda
(*
m_\xb1r
\xe8%
BLOCK_SIZE
 != 0)

186  (
E\xbc\xdcCode
::
EINVAL
);

187
\xa3\xf9\xdc
 =
	`pos\x99i\xda
(*
m_\xb1r
\xe8/
SECTOR_SIZE
;

189 i\xe0((
\xa3\xf9\xdc
 +
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
BLOCK_SIZE
 /
SECTOR_SIZE
)) >

190
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_size
))

191  (
EOF
);

192
\xa3\xf9\xdc
 +\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
);

194
wn
->
wn_cyl\x9ad\x94
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa3\xf9\xdc
 / (wn->
wn_h\x97ds
 *
NR_SECTORS
));

195
wn
->
wn_\xa3\xf9\xdc
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa3\xf9\xdc
 %
NR_SECTORS
);

196
wn
->
wn_h\x97d
 =
\xa1\xa9ic_\xff\xa1
<>((
\xa3\xf9\xdc
 % (wn->
wn_h\x97ds
 *
NR_SECTORS
)) / NR_SECTORS);

197
wn
->
wn_cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

198
wn
->
wn_add\xbbss
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`add\xbbss
(*
m_\xb1r
));

199
wn
->
wn_\xb4o\x\xe7r
 =
	`\xb4oc_\xc4
(*
m_\xb1r
);

202 
\x94r\xdcs
 <\xf0
MAX_ERRORS
) {

203
\x94r\xdcs
++;

204 i\xe0(
\x94r\xdcs
 >\xf0
MAX_ERRORS
)

205  (
E\xbc\xdcCode
::
EIO
);

208 i\xe0(
w_\xc3ed_\xbb\xa3t
)

209
	`w_\xbb\xa3t
();

212
	`w_dma_\xa3tup
(
wn
);

215
r
 =
	`w_\x8c\x\xafs\xe3r
(*
wn
);

216 i\xe0(
r
 =\xf0
OK
)

220  (
r
 =\xf0
OK
 ?
BLOCK_SIZE
 :
E\xbc\xdcCode
::
EIO
);

221
	}
}

227 
	$w_dma_\xa3tup
(
w\x9ai
 *
wn
\xe8
n\xdbx\xfb\xb1
 {

237 
mode
,
low_addr
,
high_addr
,
t\xdd_addr
,
low_\xf9
,
high_\xf9
,
t\xdd_\x92d
;

238
\xa1d
::
size_t

v\x9c
,
\xf9
;

239
u\x9\xa964_t

u\xa3r_phys
;

242
mode
 = (
wn
->
wn_\xddcode
 =\xf0
DISK_READ
 ?
DMA_READ
 :
DMA_WRITE
);

243
v\x9c
 =
wn
->
wn_add\xbbss
;

244
\xf9
 =
wn
->
wn_cou\xc1
;

246
u\xa3r_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
wn
->
wn_\xb4o\x\xe7r
),
D
,
v\x9c
,
\xf9
);

248
low_addr
 =
\xa1\xa9ic_\xff\xa1
<>(
u\xa3r_phys
 &
BYTE
);

249
high_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 8\xe8&
BYTE
);

250
t\xdd_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 16) &

251
BYTE
);

252
low_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>((
\xf9
 - 1\xe8&
BYTE
);

253
high_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>(((
\xf9
 - 1\xe8>> 8\xe8&
BYTE
);

260 i\xe0(
u\xa3r_phys
 == 0)

261
	`\xb7nic
("FS gave winchester disk driver bad\x87ddr",

262
\xa1\xa9ic_\xff\xa1
<>(
v\x9c
));

263
t\xdd_\x92d
 =
\xa1\xa9ic_\xff\xa1
<>(((
u\xa3r_phys
 +
\xf9
 - 1\xe8>> 16\xe8&
BYTE
);

264 i\xe0(
t\xdd_\x92d
 !\xf0
t\xdd_addr
)

265
	`\xb7nic
("Try\x9ag\x81\xd8DMA\x87\xfcos\xa064K bound\xacy",
t\xdd_addr
);

269
Sc\xddedP\xd\xf9Lock

gu\xacd
;

270
	`p\xd\xf9_out
(
DMA_M2
,
mode
);

271
	`p\xd\xf9_out
(
DMA_M1
,
mode
);

272
	`p\xd\xf9_out
(
DMA_ADDR
,
low_addr
);

273
	`p\xd\xf9_out
(
DMA_ADDR
,
high_addr
);

274
	`p\xd\xf9_out
(
DMA_TOP
,
t\xdd_addr
);

275
	`p\xd\xf9_out
(
DMA_COUNT
,
low_\xf9
);

276
	`p\xd\xf9_out
(
DMA_COUNT
,
high_\xf9
);

278
	}
}

284 
	$w_\x8c\x\xafs\xe3r
(
w\x9ai
 &
wn
\xe8
n\xdbx\xfb\xb1
 {

288
comm\x\xafd
[0] = (
wn
->
wn_\xddcode
 =\xf0
DISK_READ
 ?
WIN_READ
 :
WIN_WRITE
);

289
comm\x\xafd
[1] = (
wn
->
wn_h\x97d
 | (wn->
wn_drive
 << 5));

290
comm\x\xafd
[2] = (((
wn
->
wn_cyl\x9ad\x94
 & 0x0300\xe8>> 2\xe8| wn->
wn_\xa3\xf9\xdc
);

291
comm\x\xafd
[3] = (
wn
->
wn_cyl\x9ad\x94
 & 0xFF);

292
comm\x\xafd
[4] =
BLOCK_SIZE
 /
SECTOR_SIZE
;

293
comm\x\xafd
[5] =
CTRL_BYTE
;

294 i\xe0(
	`com_out
(
DMA_INT
\xe8!\xf0
OK
)

295  (
ERR
);

297
	`p\xd\xf9_out
(
DMA_INIT
, 3);

299
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

302 i\xe0(
	`w\x9a_\xbbsu\xc9s
(*
wn
\xe8=\xf0
OK
)

303  (
OK
);

304 i\xe0((
wn
->
wn_\xbbsu\xc9s
[0] & 63) == 24)

305
	`\xbbad_ecc
();

307
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

308  (
ERR
);

309
	}
}

314 
	$w\x9a_\xbbsu\xc9s
(
w\x9ai
 &
wn
\xe8
n\xdbx\xfb\xb1
 {

317 
i
;

318 
\xa1\xa9us
;

320
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
\xa1\xa9us
);

321
	`p\xd\xf9_out
(
WIN_DMA
, 0);

322 i\xe0(!(
\xa1\xa9us
 & 2))

323  (
OK
);

324
comm\x\xafd
[0] =
WIN_SENSE
;

325
comm\x\xafd
[1] = (
wn
->
wn_drive
 << 5);

326 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

327  (
ERR
);

330 
i
 = 0; i <
MAX_RESULTS
; i++) {

331 i\xe0(
	`hd_wa\x99
(1\xe8!\xf0
OK
)

332  (
ERR
);

333
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
\xa1\xa9us
);

334
wn
->
wn_\xbbsu\xc9s
[
i
] =
\xa1\xa9us
 &
BYTE
;

336 i\xe0(
wn
->
wn_\xbbsu\xc9s
[0] & 63)

337  (
ERR
);

339  (
OK
);

340
	}
}

346 
	$w\x9a_out
(
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

352 i\xe0(
w_\xc3ed_\xbb\xa3t
)

354 i\xe0(
	`hd_wa\x99
(1\xe8=\xf0
OK
)

355
	`p\xd\xf9_out
(
WIN_DATA
,
v\x\xab
);

356
	}
}

361 
	$w_\xbb\xa3t
(\xe8
n\xdbx\xfb\xb1
 {

366 
r
 = 1,
i
;

369
	`p\xd\xf9_out
(
WIN_STATUS
,
r
);

370 
i
 = 0; i < 10000; i++) {

371
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

372 i\xe0((
r
 & 01) == 0)

375 i\xe0(
r
 & 2) {

376
	`\xb4\x9\xa9f
("Hard disk won't\x84eset\n");

377  (
ERR
);

381
w_\xc3ed_\xbb\xa3t
 =
FALSE
;

383  (
	`w\x9a_\x9a\x99
());

384
	}
}

389 
	$w\x9a_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

392 
i
;

394
comm\x\xafd
[0] =
WIN_SPECIFY
;

395
comm\x\xafd
[1] = 0;

396 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

397  (
ERR
);

399
Sc\xddedP\xd\xf9Lock

gu\xacd
;

402
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_cyl
 >> 8);

405
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_cyl
 & 0xFF);

408
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_h\x97ds
);

411
	`w\x9a_out
(
\xb7\xbfm0
.
\xbbdu\xfbd_wr
 >> 8);

414
	`w\x9a_out
(
\xb7\xbfm0
.
\xbbdu\xfbd_wr
 & 0xFF);

417
	`w\x9a_out
(
\xb7\xbfm0
.
wr_\xb4ecomp
 >> 8);

420
	`w\x9a_out
(
\xb7\xbfm0
.
wr_\xb4ecomp
 & 0xFF);

423
	`w\x9a_out
(
\xb7\xbfm0
.
max_ecc
);

426 i\xe0(
	`check_\x9a\x99
(\xe8!\xf0
OK
) {

427
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

428  (
ERR
);

431 i\xe0(
\xc4_drives
 > 1) {

432
comm\x\xafd
[1] = (1 << 5);

433 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

434  (
ERR
);

436
Sc\xddedP\xd\xf9Lock

gu\xacd
;

439
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_cyl
 >> 8);

442
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_cyl
 & 0xFF);

445
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_h\x97ds
);

448
	`w\x9a_out
(
\xb7\xbfm1
.
\xbbdu\xfbd_wr
 >> 8);

451
	`w\x9a_out
(
\xb7\xbfm1
.
\xbbdu\xfbd_wr
 & 0xFF);

454
	`w\x9a_out
(
\xb7\xbfm1
.
wr_\xb4ecomp
 >> 8);

457
	`w\x9a_out
(
\xb7\xbfm1
.
wr_\xb4ecomp
 & 0xFF);

460
	`w\x9a_out
(
\xb7\xbfm1
.
max_ecc
);

462 i\xe0(
	`check_\x9a\x99
(\xe8!\xf0
OK
) {

463
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

464  (
ERR
);

467 
i
 = 0; i <
\xc4_drives
; i++) {

468
comm\x\xafd
[0] =
WIN_RECALIBRATE
;

469
comm\x\xafd
[1] =
i
 << 5;

470
comm\x\xafd
[5] =
CTRL_BYTE
;

471 i\xe0(
	`com_out
(
INT
\xe8!\xf0
OK
)

472  (
ERR
);

473
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

474 i\xe0(
	`w\x9a_\xbbsu\xc9s
(
w\x9ai
[
i
 *
DEV_PER_DRIVE
]\xe8!\xf0
OK
) {

475
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

476  (
ERR
);

479  (
OK
);

480
	}
}

485 
	$check_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

487 
r
;

489 i\xe0(
	`hd_wa\x99
(2\xe8=\xf0
OK
) {

490
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

491 i\xe0(
r
 & 2)

492  (
ERR
);

494  (
OK
);

496
	}
}

501 
	$\xbbad_ecc
(\xe8
n\xdbx\xfb\xb1
 {

504 
r
;

506
comm\x\xafd
[0] =
WIN_ECC_READ
;

507 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8=\xf0
OK
 &&
	`hd_wa\x99
(1) == OK) {

508
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

509 i\xe0(
	`hd_wa\x99
(1\xe8=\xf0
OK
) {

510
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

511 i\xe0(
r
 & 1)

512
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

515  (
ERR
);

516
	}
}

521 
	$hd_wa\x99
(
b\x99
\xe8
n\xdbx\xfb\xb1
 {

524 
i
 = 0;

525 
r
;

528
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

529
r
 &\xf0
b\x99
;

530 } (
i
++ <
MAX_WIN_RETRY
\xe8&& !
r
);

532 i\xe0(
i
 >\xf0
MAX_WIN_RETRY
) {

533
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

534  (
ERR
);

536  (
OK
);

537
	}
}

542 
	$com_out
(
mode
\xe8
n\xdbx\xfb\xb1
 {

545 
i
 = 0;

546 
r
;

548
	`p\xd\xf9_out
(
WIN_SELECT
,
mode
);

549
	`p\xd\xf9_out
(
WIN_DMA
,
mode
);

550 
i
 = 0; i <
MAX_WIN_RETRY
; i++) {

551
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

552 i\xe0((
r
 & 0x0F) == 0x0D)

555 i\xe0(
i
 =\xf0
MAX_WIN_RETRY
) {

556
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

557  (
ERR
);

560
Sc\xddedP\xd\xf9Lock

gu\xacd
;

561 
i
 = 0; i < 6; i++)

562
	`p\xd\xf9_out
(
WIN_DATA
,
comm\x\xafd
[
i
]);

564
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

565 i\xe0(
r
 & 1) {

566
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

567  (
ERR
);

569  (
OK
);

570
	}
}

575 
	$\x9a\x99_\xb7\xbfms
(\xe8
n\xdbx\xfb\xb1
 {

579 
i
,
\xa3gm\x92t
,
off\xa3t
;

580 
ty\xb3_0
,
ty\xb3_1
;

581
u\x9\xa964_t

add\xbbss
;

583 
vec_\x8fb\xcb
[];

586
	`p\xd\xf9_\x9a
(
WIN_SELECT
, &
i
);

589
ty\xb3_0
 = (
i
 >> 2) & 3;

590
ty\xb3_1
 =
i
 & 3;

593
off\xa3t
 =
vec_\x8fb\xcb
[2 * 0x41];

594
\xa3gm\x92t
 =
vec_\x8fb\xcb
[2 * 0x41 + 1];

597
add\xbbss
 = (
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xa3gm\x92t
\xe8<< 4\xe8+
off\xa3t
;

601
	`phys_c\xddy
(
add\xbbss
,

602
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buf
),

603
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(64)),

607
	`c\xddy_\xb7\xbfms
((&
buf
[
ty\xb3_0
 * 16]), &
\xb7\xbfm0
);

608
	`c\xddy_\xb7\xbfm
((&
buf
[
ty\xb3_1
 * 16]), &
\xb7\xbfm1
);

611
	`phys_c\xddy
(0x475ULL,

612
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buf
),

613
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(1)),

615
\xc4_drives
 =
\xa1\xa9ic_\xff\xa1
<>(*
buf
);

618 
i
 = 0; i < 5; i++)

619
w\x9ai
[
i
].
wn_h\x97ds
 =
\xb7\xbfm0
.
\xc4_h\x97ds
;

620
w\x9ai
[0].
wn_low
 = wini[5].wn_low = 0L;

621
w\x9ai
[0].
wn_size
 = ()(()
\xb7\xbfm0
.
\xc4_cyl
 * (\xed\xacam0.
\xc4_h\x97ds
 * ()
NR_SECTORS
);

622 
i
 = 5; i < 10; i++)

623
w\x9ai
[
i
].
wn_h\x97ds
 =
\xb7\xbfm1
.
\xc4_h\x97ds
;

624
w\x9ai
[5].
wn_size
 = ()(()
\xb7\xbfm1
.
\xc4_cyl
 * (\xed\xacam1.
\xc4_h\x97ds
 * ()
NR_SECTORS
);

627 i\xe0((
\xc4_drives
 > 0\xe8&& (
	`w\x9a_\x9a\x99
(\xe8!\xf0
OK
))

628
\xc4_drives
 = 0;

631 
i
 = 0; i <
\xc4_drives
; i++) {

632
	`devi\xfb
(
w_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
i
 * 5);

633
	`pos\x99i\xda
(
w_mess
) = 0LL;

634
	`cou\xc1
(
w_mess
\xe8\xf0
BLOCK_SIZE
;

635
	`add\xbbss
(
w_mess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
buf
);

636
	`\xb4oc_\xc4
(
w_mess
\xe8\xf0
WINCHESTER
;

637
w_mess
.
m_ty\xb3
 =
DISK_READ
;

638 i\xe0(
	`w_do_rdwt
(&
w_mess
\xe8!\xf0
BLOCK_SIZE
)

639
	`\xb7nic
("Can't\x84ead\x85artition\x81able of winchester ",

640
\xa1\xa9ic_\xff\xa1
<>(
i
));

641
	`c\xddy_\xb4t
(
\xa1\xa9ic_\xff\xa1
<>(
i
 * 5));

643
	}
}

648 
	$c\xddy_\xb7\xbfms
(*
\xa4c
, 
\xb7\xbfm
 *
de\xa1
\xe8
n\xdbx\xfb\xb1
 {

655
de\xa1
->
\xc4_cyl
 = *
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa4c
);

656
de\xa1
->
\xc4_h\x97ds
 = ()
\xa4c
[2];

657
de\xa1
->
\xbbdu\xfbd_wr
 = *(*)&
\xa4c
[3];

658
de\xa1
->
wr_\xb4ecomp
 = *(*)&
\xa4c
[5];

659
de\xa1
->
max_ecc
 = ()
\xa4c
[7];

660
	}
}

665 
	$c\xddy_\xb4t
(
drive
\xe8
n\xdbx\xfb\xb1
 {

670 
i
,
off\xa3t
;

671 
w\x9ai
 *
wn
;

672
u\x9\xa964_t

\x8bmp_v\xae
;

673
\x9at64_t

adju\xa164
;

675 
i
 = 0; i < 4; i++) {

676
adju\xa164
 = 0;

677
wn
 = &
w\x9ai
[
i
 +
drive
 + 1];

678
off\xa3t
 =
PART_TABLE
 +
i
 * 0x10;

685
	`mem\xfdy
(&
\x8bmp_v\xae
, &
buf
[
off\xa3t
], ());

686
wn
->
wn_low
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\x8bmp_v\xae
);

688 i\xe0((
wn
->
wn_low
 % (
BLOCK_SIZE
 /
SECTOR_SIZE
)) != 0) {

689
adju\xa164
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
);

690
wn
->
wn_low
 = (wn->wn_low / (
BLOCK_SIZE
 /
SECTOR_SIZE
) + 1) * (BLOCK_SIZE / SECTOR_SIZE);

691
adju\xa164
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
) -\x87djust64;

694
	`mem\xfdy
(&
\x8bmp_v\xae
, &
buf
[
off\xa3t
 + ()], ());

695
wn
->
wn_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\x8bmp_v\xae
\xe8- s\x8ftic_\xff\xa1<u\x9at64_t>(
adju\xa164
);

697
	`s\xd\xf9
(&
w\x9ai
[
drive
 + 1]);

698
	}
}

701 
	$s\xd\xf9
(
w\x9ai
 *
wn
\xe8
n\xdbx\xfb\xb1
 {

702 
i
,

703
j
;

705 
i
 = 0; i < 4; i++)

706 
j
 = 0; j < 3; j++)

707 i\xe0((
wn
[
j
].
wn_low
 == 0) && (wn[j + 1].wn_low != 0))

708
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

709 i\xe0(
wn
[
j
].
wn_low
 > wn[j + 1].wn_low &&

710
wn
[
j
 + 1].
wn_low
 != 0)

711
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

712
	}
}

715 
	$sw\xad
(
w\x9ai
 *
f\x9c\xa1
,

716 
w\x9ai
 *
\xa3c\xdad
\xe8
n\xdbx\xfb\xb1
 {

717 
w\x9ai

tmp
;

719
tmp
 = *
f\x9c\xa1
;

720 *
f\x9c\xa1
 = *
\xa3c\xdad
;

721 *
\xa3c\xdad
 =
tmp
;

722
	}
}

	@kernel/wormhole.cpp

1 
	~"w\xdcmh\xd\x93.h\xb5
"

2 
	~"schedu\xcb.h\xb5
"

8 
	~<\x\xabgܙhm
>

9 
	~<\xa9omic
>

10 
	~<\xffs\xa3\xb9
>

11 
	~<c\xa1d\x9\xa9
>

12 
	~<fun\xf9iڮ
>

13 
	~<ve\xf9\xdc
>

15
\xc7me\xa5a\xfb

	g硷th
 {

17
	g\xa1d
::
\xac\xbfy
<
P\x94CpuQueue
,
	gNR_CPUS
>
	g\xfdu_queues
{};

19 
\xbb\xa3t_硷th_queues
(\xe8
	gn\xdbx\xfb\xb1
 {

20 aut\xd8&
	gq
 :
\xfdu_queues
) {

21
q
.
u\xa3d
 = 0;

34 
\xa3t_mes\xa7ge_\xbbgi\xda
(
S\x8f\x8b
 &
\xa1\xa9e
, cڡ
Mes\xa7geRegi\xda
 &
\xbbgi\xda
\xe8
	gn\xdbx\xfb\xb1
 {

35
\xa1\xa9ic_as\xa3\xb9
(
Mes\xa7geRegi\xda
::
\x8ca\x99s
::
is_z\x94o_c\xddy_\xff\xb7b\xcb
,

37
as\xa3\xb9
(
\xbbgi\xda
.
\xaeig\xc3d
());

38
	g\xa1\xa9e
.
	gmsg_\xbbgi\xda
 =
\xbbgi\xda
;

48
bo\xde

mes\xa7ge_\xbbgi\xda_v\x\xabid
(cڡ
Mes\xa7geRegi\xda
 &
\xbbgi\xda
,
size_t

msg_\xcbn
\xe8
	gn\xdbx\xfb\xb1
 {

49 
	g\xbbgi\xda
.
size
(\xe8>\xf0
msg_\xcbn
 * (
u\x9\xa964_t
\xe8&&
\xbbgi\xda
.
\xaeig\xc3d
();

61 cڡ
Mes\xa7geRegi\xda
 *
\xa3\xcb\xf9_\xffche
(cڡ
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {

62 i\xe0(
mes\xa7ge_\xbbgi\xda_v\x\xabid
(
\xa1\xa9e
.
l1_buf\xe3r
, s\x8f\x8b.
msg_\xcbn
)) {

63  &
	g\xa1\xa9e
.
	gl1_buf\xe3r
;

65 i\xe0(
mes\xa7ge_\xbbgi\xda_v\x\xabid
(
\xa1\xa9e
.
l2_buf\xe3r
, s\x8f\x8b.
msg_\xcbn
)) {

66  &
	g\xa1\xa9e
.
	gl2_buf\xe3r
;

68 i\xe0(
mes\xa7ge_\xbbgi\xda_v\x\xabid
(
\xa1\xa9e
.
l3_buf\xe3r
, s\x8f\x8b.
msg_\xcbn
)) {

69  &
	g\xa1\xa9e
.
	gl3_buf\xe3r
;

71 
	gnuαr
;

74
\xc7me\xa5a\xfb

	gd\x91a\x9e
 {

93
\x9al\x9ae
 
dequeue_\xbb\xfbiv\x94
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {

94
	g\xa1d
::
\x94a\xa3
(
\xa1\xa9e
.
\x92dpo\x9at
.
queue
, s\x8f\x8b.
\xbb\xfbiv\x94
.
tid
);

95 i\xe0(
	g\xa1\xa9e
.
	g\x92dpo\x9\xa9
.
	gqueue
.
em\xb1y
()) {

96
	g\xa1\xa9e
.
	g\x92dpo\x9\xa9
.\xa1\xa9\x90\xf0
Endpo\x9\xa9S\x8f\x8b
::
Id\xcb
;

105
\x9al\x9ae
 
\x8c\xaas\xe3r_badge
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {
	g\xa1\xa9e
.
	g\xbb\xfbiv\x94
.
	gbadge
 = s\x8f\x8b.
\xffp
.
badge
; }

112
\x9al\x9ae
 
e\xa1ablish_\xbb\xb6y
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {
	g\xa1\xa9e
.
	g\xa3nd\x94
.
	g\xbb\xb6y_to
 = s\x8f\x8b.
\xbb\xfbiv\x94
.
tid
; }

125
\x9al\x9ae
 
c\xddy_mrs
(
S\x8f\x8b
 &
\xa1\xa9e
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
,

126 cڡ
Mes\xa7geRegi\xda
 *
\xffche
 =
nuαr
\xe8
n\xdbx\xfb\xb1
 {

127 aut\xd8&
queue
 =
\xfdu_queues
[
\xa1\xa9e
.
\xa3nd\x94
.
c\xd\xfb
];

128 cڡ\x87ut\xd8
	g\xcbn
 =
\xa1d
::
m\x9a
(
\xa1\xa9e
.
msg_\xcbn
, s\x8f\x8b.
\xa3nd\x94
.
mrs
.
size
());

129 i\xe0(!
	gqueue
.
fu\x\xfb
()) {

130 aut\xd8&
	g\xa6\xd9
 =
queue
.
\xa6\xd9s
[queue.
u\xa3d
];

131
	g\xa1d
::
\xbfnges
::
c\xddy_n
(
\xa1\xa9e
.
\xa3nd\x94
.
mrs
.
beg\x9a
(),
\xcbn
,
\xa6\xd9
.begin());

132
	gqueue
.
	g\xcbngths
[
queue
.
u\xa3d
] =
\xcbn
;

133 ++
	gqueue
.
	gu\xa3d
;

134
	g\xa1d
::
\xbfnges
::
c\xddy_n
(
\xa6\xd9
.
beg\x9a
(),
\xcbn
,
\xa1\xa9e
.
\xbb\xfbiv\x94
.
mrs
.begin());

135 i\xe0(
	g\xa1\xa9s
 !\xf0
nuαr
) {

136
\xa1\xa9s
->
h\x99_cou\xc1
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

139 cڡ
Mes\xa7geRegi\xda
 *
	g\xbbgi\xda
 =
nuαr
;

140 i\xe0(
	g\xffche
 !\xf0
nuαr
 &&
mes\xa7ge_\xbbgi\xda_v\x\xabid
(*
\xffche
,
\xa1\xa9e
.
msg_\xcbn
)) {

141
	g\xbbgi\xda
 =
\xffche
;

142 } i\xe0(
mes\xa7ge_\xbbgi\xda_v\x\xabid
(
\xa1\xa9e
.
msg_\xbbgi\xda
, s\x8f\x8b.
msg_\xcbn
)) {

143
	g\xbbgi\xda
 = &
\xa1\xa9e
.
msg_\xbbgi\xda
;

146 i\xe0(
	g\xbbgi\xda
 !\xf0
nuαr
) {

147 aut\xd8*
buf\xe3r
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
 *>(
\xbbgi\xda
->
z\x94o_c\xddy_m\xad
());

148
	g\xa1d
::
\xbfnges
::
c\xddy_n
(
\xa1\xa9e
.
\xa3nd\x94
.
mrs
.
beg\x9a
(),
\xcbn
,
buf\xe3r
);

149
	g\xa1d
::
\xbfnges
::
c\xddy_n
(
buf\xe3r
,
\xcbn
,
\xa1\xa9e
.
\xbb\xfbiv\x94
.
mrs
.
beg\x9a
());

151
	g\xa1d
::
\xbfnges
::
c\xddy_n
(
\xa1\xa9e
.
\xa3nd\x94
.
mrs
.
beg\x9a
(),
\xcbn
, s\x8f\x8b.
\xbb\xfbiv\x94
.mrs.begin());

153 i\xe0(
	g\xa1\xa9s
 !\xf0
nuαr
) {

154
\xa1\xa9s
->
\xe7\xceback_cou\xc1
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

169
\x9al\x9ae
 
upd\xa9e_th\xbbad_\xa1\xa9e
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {

170
	g\xa1\xa9e
.
	g\xbb\xfbiv\x94
.
	g\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

171
	g\xa1\xa9e
.
	g\xa3nd\x94
.
	g\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Blocked
;

179
\x9al\x9ae
 
cڋxt_sw\x99ch
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
	gn\xdbx\xfb\xb1
 {

180
	gsched
::
schedu\xcbr
.
y\x9bld_to
(
\xa1\xa9e
.
\xbb\xfbiv\x94
.
tid
);

181
	g\xa1\xa9e
.
	gcu\xbc\x92t_tid
 =
sched
::
schedu\xcbr
.
cu\xbc\x92t
();

195 
bo\xde

has_\xa3nd_right
(cڡ
C\xadRights
 &
rights
\xe8
	gn\xdbx\xfb\xb1
 { 
	grights
.
	gwr\x99e
; }

206 
bo\xde

check
(bo\xde
c\xdad\x99i\xda
,
P\xbbc\xdad\x99i\xda

idx
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
\xe8
	gn\xdbx\xfb\xb1
 {

207 i\xe0(
	gc\xdad\x99i\xda
) {

208 
	g\x8cue
;

210 i\xe0(
	g\xa1\xa9s
 !\xf0
nuαr
) {

211
\xa1\xa9s
->
\xe7\x9eu\xbb_cou\xc1
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

212
	g\xa1\xa9s
->
	g\xb4ec\xdad\x99i\xda_\xe7\x9eu\xbbs
[
\xa1\xa9ic_\xff\xa1
<
size_t
>(
idx
)].
\xe3tch_add
(1,

213
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

215 
	g\xe7l\xa3
;

226 
bo\xde

\xb4ec\xdad\x99i\xdas
(cڡ
S\x8f\x8b
 &
s
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
\xe8
	gn\xdbx\xfb\xb1
 {

227 
check
(
s
.
ex\x8\xff_\xf\xe5s
 =\xf00,
P\xbbc\xdad\x99i\xda
::
P1
,
\xa1\xa9s
) &&

228
check
(
s
.
msg_\xcbn
 <\xf0s.
\xa3nd\x94
.
mrs
.
size
(),
P\xbbc\xdad\x99i\xda
::
P2
,
\xa1\xa9s
) &&

229
check
(!
s
.
\xa3nd\x94
.
\xe7u\xc9
.
has_v\x\xabue
(),
P\xbbc\xdad\x99i\xda
::
P3
,
\xa1\xa9s
) &&

230
check
(
s
.
\xffp
.
ty\xb3
 =\xf0
C\xadTy\xb3
::
Endpo\x9\xa9
 &&
has_\xa3nd_right
(s.\xffp.
rights
),
P\xbbc\xdad\x99i\xda
::
P4
,

231
\xa1\xa9s
) &&

232
check
(
s
.
\x92dpo\x9at
.
\xa1\xa9e
 =\xf0
Endpo\x9\xa9S\x8f\x8b
::
Recv
 && !s.\x92dpo\x9at.
queue
.
em\xb1y
(),

233
P\xbbc\xdad\x99i\xda
::
P5
,
\xa1\xa9s
) &&

234
check
(
s
.
\xbb\xfbiv\x94
.
\xb4iܙy
 >\xf0s.
\xa3nd\x94
.\xb4iܙy,
P\xbbc\xdad\x99i\xda
::
P6
,
\xa1\xa9s
) &&

235
check
(
s
.
\xa3nd\x94
.
doma\x9a
 =\xf0s.
\xbb\xfbiv\x94
.doma\x9a,
P\xbbc\xdad\x99i\xda
::
P7
,
\xa1\xa9s
) &&

236
check
(
\x8cue
,
P\xbbc\xdad\x99i\xda
::
P8
,
\xa1\xa9s
) &&

237
check
(
s
.
\xa3nd\x94
.
c\xd\xfb
 =\xf0s.
\xbb\xfbiv\x94
.c\xdce,
P\xbbc\xdad\x99i\xda
::
P9
,
\xa1\xa9s
);

247
bo\xde

execu\x8b_硷th
(
S\x8f\x8b
 &
\xa1\xa9e
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
\xe8
	gn\xdbx\xfb\xb1
 {

248 i\xe0(!
\xb4ec\xdad\x99i\xdas
(
\xa1\xa9e
,
\xa1\xa9s
)) {

249 
	g\xe7l\xa3
;

252
	gd\x91a\x9e
::
dequeue_\xbb\xfbiv\x94
(
\xa1\xa9e
);

253
	gd\x91a\x9e
::
\x8c\xaas\xe3r_badge
(
\xa1\xa9e
);

254
	gd\x91a\x9e
::
e\xa1ablish_\xbb\xb6y
(
\xa1\xa9e
);

257 cڡ
Mes\xa7geRegi\xda
 *
	g\xa3\xcb\xf9ed
 =
\xa3\xcb\xf9_\xffche
(
\xa1\xa9e
);

259
	gd\x91a\x9e
::
c\xddy_mrs
(
\xa1\xa9e
,
\xa1\xa9s
,
\xa3\xcb\xf9ed
);

260
	gd\x91a\x9e
::
upd\xa9e_th\xbbad_\xa1\xa9e
(
\xa1\xa9e
);

261
	gd\x91a\x9e
::
cڋxt_sw\x99ch
(
\xa1\xa9e
);

263 i\xe0(
	g\xa1\xa9s
 !\xf0
nuαr
) {

264
\xa1\xa9s
->
suc\xfbss_cou\xc1
.
\xe3tch_add
(1,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

266 
	g\x8cue
;

	@kernel/wormhole.hpp

1 #\xb4agm\xa8
\xda\xfb


3 
	~"../\x9a\x\xe3ude/psd/vm/\xa3m\x\xaftic_mem\xdcy.h\xb5
"

4 
	~"cڡ.h\xb5
"

5 
	~<\xac\xbfy
>

6 
	~<\xa9omic
>

7 
	~<c\xa1d\x9\xa9
>

8 
	~<\xddtiڮ
>

9 
	~<ve\xf9\xdc
>

11
\xc7me\xa5a\xfb

	g硷th
 {

16
us\x9ag

	gMes\xa7geRegi\xda
 =
psd
::
vm
::
\xa3m\xaatic_\xbbgi\xda
<psd::vm::
\xa3m\xaatic_mes\xa7ge_\x8fg
>;

19
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

FASTPATH_QUEUE_SIZE
 = 4;

26 
	sP\x94CpuQueue
 {

28
\xaeig\xc7s
(64\xe8
	g\xa1d
::
\xac\xbfy
<
\xa1d
::\xac\xbfy<
u\x9\xa964_t
, 8>,
	gFASTPATH_QUEUE_SIZE
>
	g\xa6\xd9s
{};

30
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
size_t
,
	gFASTPATH_QUEUE_SIZE
>
	g\xcbngths
{};

32
	g\xa1d
::
size_t

u\xa3d
{0};

35 [[
nodis\xf\xe4d
]]
bo\xde

fu\x\xfb
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gu\xa3d
 >\xf0
FASTPATH_QUEUE_SIZE
; }

39
\xa1d
::
\xac\xbfy
<
P\x94CpuQueue
,
NR_CPUS
>
\xfdu_queues
;

47 
\xbb\xa3t_硷th_queues
(\xe8
	gn\xdbx\xfb\xb1
;

52 \xfeas\xa0
	cTh\xbbadS\x8\xe1us
 {
	gRug
,
	gBlocked
,
	gS\x92dBlocked
,
	gRecvBlocked
 };

56 \xfeas\xa0
	cEndpo\x9\xa9S\x8f\x8b
 {
	gId\xcb
,
	gS\x92d
,
	gRecv
 };

60 \xfeas\xa0
	cC\xadTy\xb3
 {
	gEndpo\x9\xa9
 };

63 
	sC\xadRights
 {

64
bo\xde

	g\xbbad
{
	g\xe7l\xa3
};

65
bo\xde

	gwr\x99e
{
	g\xe7l\xa3
};

66
bo\xde

	gg\xbf\xc1
{
	g\xe7l\xa3
};

67
bo\xde

	gg\xbf\xc1_\xbb\xb6y
{
	g\xe7l\xa3
};

71 
	sC\xadab\x9e\x99y
 {

72
u\x9\xa932_t

	g\xfd\x8c
{};

73
C\xadTy\xb3

	gty\xb3
{
	gC\xadTy\xb3
::
Endpo\x9\xa9
};

74
C\xadRights

	grights
{};

75
u\x9\xa932_t

	gobje\xf9
{};

76
u\x9\xa932_t

	gbadge
{};

82
	g\x8bm\xb6\xa9e
 <
size_t

	gMR_COUNT
 = 8> 
	sTh\xbbadTem\xb6\xa9e
 {

83
u\x9\xa932_t

tid
{};

84
Th\xbbadS\x8\xe1us

	g\xa1\xa9us
{
	gTh\xbbadS\x8\xe1us
::
Blocked
};

85
u\x9\xa98_t

	g\xb4iܙy
{};

86
u\x9\xa916_t

	gdoma\x9a
{};

87
u\x9\xa932_t

	gv\xa5a\xfb
{};

88
	g\xa1d
::
\xddtiڮ
<>
\xe7u\xc9
;

89
u\x9\xa98_t

	gc\xd\xfb
{};

90
u\x9\xa932_t

	gbadge
{};

91
u\x9\xa932_t

	g\xbb\xb6y_to
{};

92
	g\xa1d
::
\xac\xbfy
<
u\x9\xa964_t
,
	gMR_COUNT
>
	gmrs
{};

95
	g\xa1d
::
\xddtiڮ
<
u\x9\xa964_t
>
g\x91_mr
(
size_t

\x9adex
) const {

96 
\x9adex
 <
mrs
.
size
(\xe8?
\xa1d
::
\xddtiڮ
<
u\x9\xa964_t
>{mrs[\x9adex]} : std::
nu\x\xfb\xddt
;

101
us\x9ag

	gTh\xbbad
 =
Th\xbbadTem\xb6\xa9e
<>;

106 
	sEndpo\x9\xa9
 {

107
u\x9\xa932_t

	geid
{};

108
	g\xa1d
::
ve\xf9\xdc
<
u\x9\xa932_t
>
queue
;

109
Endpo\x9\xa9S\x8f\x8b

	g\xa1\xa9e
{
	gEndpo\x9\xa9S\x8f\x8b
::
Id\xcb
};

114 
	sS\x8f\x8b
 {

115
Th\xbbad

	g\xa3nd\x94
;

116
Th\xbbad

	g\xbb\xfbiv\x94
;

117
Endpo\x9\xa9

	g\x92dpo\x9\xa9
;

118
C\xadab\x9e\x99y

	g\xf\xe5
;

119
size_t

	gmsg_\xcbn
{};

120
size_t

	gex\x8\xff_\xf\xe5s
{};

121
Mes\xa7geRegi\xda

	gmsg_\xbbgi\xda
{0, 0};

131
Mes\xa7geRegi\xda

	gl1_buf\xe3r
{0, 0};

139
Mes\xa7geRegi\xda

	gl2_buf\xe3r
{0, 0};

146
Mes\xa7geRegi\xda

	gl3_buf\xe3r
{0, 0};

148
u\x9\xa932_t

	gcu\xbc\x92t_tid
{};

153 \xfeas\xa0
	cP\xbbc\xdad\x99i\xda
 :
size_t
 {
P1
,
	gP2
,
	gP3
,
	gP4
,
	gP5
,
	gP6
,
	gP7
,
	gP8
,
	gP9
,
	gCou\xc1
 };

157 
	sFa\xa1\xb7thS\x8\xe1s
 {

158
	g\xa1d
::
\xa9omic
<
u\x9\xa964_t
>
suc\xfbss_cou\xc1
{0};

159
	g\xa1d
::
\xa9omic
<
u\x9\xa964_t
>
\xe7\x9eu\xbb_cou\xc1
{0};

160
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
\xa9omic
<
u\x9\xa964_t
>,
	g\xa1\xa9ic_\xff\xa1
<
	gsize_t
>(
	gP\xbbc\xdad\x99i\xda
::
Cou\xc1
)>

161
\xb4ec\xdad\x99i\xda_\xe7\x9eu\xbbs
{};

162
	g\xa1d
::
\xa9omic
<
u\x9\xa964_t
>
h\x99_cou\xc1
{0};

163
	g\xa1d
::
\xa9omic
<
u\x9\xa964_t
>
\xe7\xceback_cou\xc1
{0};

165
Fa\xa1\xb7thS\x8\xe1s
() {

166 aut\xd8&
	gcou\xc1\x94
 :
\xb4ec\xdad\x99i\xda_\xe7\x9eu\xbbs
) {

167
cou\xc1\x94
.
\xa1\xdce
(0,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcfxed
);

182
bo\xde

	$execu\x8b_硷th
(
S\x8f\x8b
 &
\xa1\xa9e
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
 =
nuαr
\xe8
n\xdbx\xfb\xb1
;

193 
	$\xa3t_mes\xa7ge_\xbbgi\xda
(
S\x8f\x8b
 &
\xa1\xa9e
, cڡ
Mes\xa7geRegi\xda
 &
\xbbgi\xda
\xe8
n\xdbx\xfb\xb1
;

202
bo\xde

	$mes\xa7ge_\xbbgi\xda_v\x\xabid
(cڡ
Mes\xa7geRegi\xda
 &
\xbbgi\xda
,
size_t

msg_\xcbn
\xe8
n\xdbx\xfb\xb1
;

214 [[
nodis\xf\xe4d
]] cڡ
Mes\xa7geRegi\xda
 *
	$\xa3\xcb\xf9_\xffche
(cڡ
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

216
\xc7me\xa5a\xfb

d\x91a\x9e
 {

218 
	`dequeue_\xbb\xfbiv\x94
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

220 
	`\x8c\x\xafs\xe3r_badge
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

222 
	`e\xa1ablish_\xbb\xb6y
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

224 
	`c\xddy_mrs
(
S\x8f\x8b
 &
\xa1\xa9e
,
Fa\xa1\xb7thS\x8\xe1s
 *
\xa1\xa9s
\xe8
n\xdbx\xfb\xb1
;

226 
	`upd\xa9e_th\xbbad_\xa1\xa9e
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

228 
	`cڋxt_sw\x99ch
(
S\x8f\x8b
 &
\xa1\xa9e
\xe8
n\xdbx\xfb\xb1
;

229
	}
}

	@kernel/xt_wini.cpp

21 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

22 
	~"../h/com.h\xb5
"

23 
	~"../h/cڡ.h\xb5
"

24 
	~"../h/\x94r\xdc.h\xb5
"

25 
	~"../h/ty\xb3.h\xb5
"

26 
	~"cڡ.h\xb5
"

27 
	~"\xb4oc.h\xb5
"

28 
	~"ty\xb3.h\xb5
"

31 \xfeas\xa0
	cSc\xddedP\xd\xf9Lock
 {

32
	mpublic
:

33
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`lock
(); }

34 ~
	$Sc\xddedP\xd\xf9Lock
(\xe8{
	`u\xc6ock
();
	}
}

38 
	#WIN_DATA
 0x320

	)

39 
	#WIN_STATUS
 0x321

	)

40 
	#WIN_SELECT
 0x322

	)

41 
	#WIN_DMA
 0x323

	)

42 
	#DMA_ADDR
 0x006

	)

43 
	#DMA_TOP
 0x082

	)

44 
	#DMA_COUNT
 0x007

	)

45 
	#DMA_M2
 0x00C

	)

46 
	#DMA_M1
 0x00B

	)

47 
	#DMA_INIT
 0x00A

	)

50 
	#WIN_RECALIBRATE
 0x01

	)

51 
	#WIN_SENSE
 0x03

	)

52 
	#WIN_READ
 0x08

	)

53 
	#WIN_WRITE
 0x0\xa8

	)

54 
	#WIN_SPECIFY
 0x0C

	)

55 
	#WIN_ECC_READ
 0x0D

	)

57 
	#DMA_INT
 3

	)

58 
	#INT
 2

	)

59 
	#NO_DMA_INT
 0

	)

60 
	#CTRL_BYTE
 5

	)

63 
	#DMA_READ
 0x47

	)

64 
	#DMA_WRITE
 0x4B

	)

67 
	#SECTOR_SIZE
 512

	)

68 
	#NR_SECTORS
 0x11

	)

71 
	#ERR
 -1

	)

74 
	#MAX_ERRORS
 4

	)

75 
	#MAX_RESULTS
 4

	)

76 
	#NR_DEVICES
 10

	)

77 
	#MAX_WIN_RETRY
 10000

	)

78 
	#PART_TABLE
 0x1C6

	)

79 
	#DEV_PER_DRIVE
 5

	)

82
PRIVATE
 
	sw\x9ai
 {

83 
	mwn_\xddcode
;

84 
	mwn_\xb4o\x\xe7r
;

85 
	mwn_drive
;

86 
	mwn_cyl\x9ad\x94
;

87 
	mwn_\xa3\xf9\xdc
;

88 
	mwn_h\x97d
;

89 
	mwn_h\x97ds
;

90 
	mwn_low
;

91 
	mwn_size
;

92 
	mwn_cou\xc1
;

93
v\x9c_by\x8bs

	mwn_add\xbbss
;

94 
	mwn_\xbbsu\xc9s
[
MAX_RESULTS
];

95 }
	gw\x9ai
[
NR_DEVICES
];

97
PRIVATE
 
	gw_\xc3ed_\xbb\xa3t
 =
FALSE
;

98
PRIVATE
 
	g\xc4_drives
;

100
PRIVATE

mes\xa7ge

	gw_mess
;

102
PRIVATE
 
	gcomm\x\xafd
[6];

104
PRIVATE
 
	gbuf
[
BLOCK_SIZE
];

106
PRIVATE
 
	s\xb7\xbfm
 {

107 
	m\xc4_cyl
;

108 
	m\xc4_h\x97ds
;

109 
	m\xbbdu\xfbd_wr
;

110 
	mwr_\xb4ecomp
;

111 
	mmax_ecc
;

112 }
	g\xb7\xbfm0
,
	g\xb7\xbfm1
;

117
PUBLIC
 
	$w\x9ache\xa1\x94_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {

120 
r
,
\xffΔ
,
\xb4oc_\xc4
;

123
	`\x9a\x99_\xb7\xbfm
();

129 
TRUE
) {

131
	`\xbb\xfbive
(
ANY
, &
w_mess
);

132 i\xe0(
w_mess
.
m_sour\xfb
 < 0) {

133
	`\xb4\x9\xa9f
("w\x9ache\xa1\x94\x81ask g\xd9 mes\xa7g\x90\xe4om %d ",
w_mess
.
m_sour\xfb
);

136
\xffΔ
 =
w_mess
.
m_sour\xfb
;

137
\xb4oc_\xc4
 =
	`\xb4oc_\xc4
(
w_mess
);

140 
w_mess
.
m_ty\xb3
) {

141 
DISK_READ
:

142 
DISK_WRITE
:

143
r
 =
	`w_do_rdwt
(&
w_mess
);

146
r
 =
E\xbc\xdcCode
::
EINVAL
;

151
w_mess
.
m_ty\xb3
 =
TASK_REPLY
;

152
	`\xbbp_\xb4oc_\xc4
(
w_mess
\xe8\xf0
\xb4oc_\xc4
;

154
	`\xbbp_\xa1\xa9us
(
w_mess
\xe8\xf0
r
;

155
	`\xa3nd
(
\xffΔ
, &
w_mess
);

157
	}
}

162 
	$w_do_rdwt
(
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

164 
w\x9ai
 *
wn
;

165 
r
,
devi\xfb
,
\x94r\xdcs
 = 0;

166
\x9at64_t

\xa3\xf9\xdc
;

169
devi\xfb
 =
	`devi\xfb
(*
m_\xb1r
);

170 i\xe0(
devi\xfb
 < 0 || devi\xfb >\xf0
NR_DEVICES
)

171  (
E\xbc\xdcCode
::
EIO
);

172 i\xe0(
	`cou\xc1
(*
m_\xb1r
\xe8!\xf0
BLOCK_SIZE
)

173  (
E\xbc\xdcCode
::
EINVAL
);

174
wn
 = &
w\x9ai
[
devi\xfb
];

175
wn
->
wn_drive
 =
devi\xfb
 /
DEV_PER_DRIVE
;

176 i\xe0(
wn
->
wn_drive
 >\xf0
\xc4_drives
)

177  (
E\xbc\xdcCode
::
EIO
);

178
wn
->
wn_\xddcode
 =
m_\xb1r
->
m_ty\xb3
;

180 i\xe0(
	`pos\x99i\xda
(*
m_\xb1r
\xe8%
BLOCK_SIZE
 != 0)

181  (
E\xbc\xdcCode
::
EINVAL
);

182
\xa3\xf9\xdc
 =
	`pos\x99i\xda
(*
m_\xb1r
\xe8/
SECTOR_SIZE
;

184 i\xe0((
\xa3\xf9\xdc
 +
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
BLOCK_SIZE
 /
SECTOR_SIZE
)) >

185
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_size
))

186  (
EOF
);

187
\xa3\xf9\xdc
 +\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
);

189
wn
->
wn_cyl\x9ad\x94
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa3\xf9\xdc
 / (wn->
wn_h\x97ds
 *
NR_SECTORS
));

190
wn
->
wn_\xa3\xf9\xdc
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa3\xf9\xdc
 %
NR_SECTORS
);

191
wn
->
wn_h\x97d
 =
\xa1\xa9ic_\xff\xa1
<>((
\xa3\xf9\xdc
 % (wn->
wn_h\x97ds
 *
NR_SECTORS
)) / NR_SECTORS);

193
wn
->
wn_cou\xc1
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
	`cou\xc1
(*
m_\xb1r
));

195
wn
->
wn_add\xbbss
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
	`add\xbbss
(*
m_\xb1r
));

196
wn
->
wn_\xb4o\x\xe7r
 =
	`\xb4oc_\xc4
(*
m_\xb1r
);

199 
\x94r\xdcs
 <\xf0
MAX_ERRORS
) {

200
\x94r\xdcs
++;

201 i\xe0(
\x94r\xdcs
 >\xf0
MAX_ERRORS
)

202  (
E\xbc\xdcCode
::
EIO
);

205 i\xe0(
w_\xc3ed_\xbb\xa3t
)

206
	`w_\xbb\xa3t
();

209
	`w_dma_\xa3tup
(*
wn
);

212
r
 =
	`w_\x8c\x\xafs\xe3r
(*
wn
);

213 i\xe0(
r
 =\xf0
OK
)

217  (
r
 =\xf0
OK
 ?
BLOCK_SIZE
 :
E\xbc\xdcCode
::
EIO
);

218
	}
}

223 
	$w_dma_\xa3tup
(
w\x9ai
 &
wn
\xe8
n\xdbx\xfb\xb1
 {

232 
mode
,
low_addr
,
high_addr
,
t\xdd_addr
,
low_\xf9
,
high_\xf9
,
t\xdd_\x92d
;

233
\xa1d
::
size_t

v\x9c
,
\xf9
;

234
u\x9\xa964_t

u\xa3r_phys
;

237
mode
 = (
wn
.
wn_\xddcode
 =\xf0
DISK_READ
 ?
DMA_READ
 :
DMA_WRITE
);

238
v\x9c
 =
wn
.
wn_add\xbbss
;

239
\xf9
 =
wn
.
wn_cou\xc1
;

241
u\xa3r_phys
 =
	`um\xad
(
	`\xb4oc_addr
(
wn
.
wn_\xb4o\x\xe7r
),
D
,
v\x9c
,
\xf9
);

243
low_addr
 =
\xa1\xa9ic_\xff\xa1
<>(
u\xa3r_phys
 &
BYTE
);

244
high_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 8\xe8&
BYTE
);

245
t\xdd_addr
 =
\xa1\xa9ic_\xff\xa1
<>((
u\xa3r_phys
 >> 16) &

246
BYTE
);

247
low_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>((
\xf9
 - 1\xe8&
BYTE
);

248
high_\xf9
 =
\xa1\xa9ic_\xff\xa1
<>(((
\xf9
 - 1\xe8>> 8\xe8&
BYTE
);

255 i\xe0(
u\xa3r_phys
 == 0)

256
	`\xb7nic
("FS gave winchester disk driver bad\x87ddr",

257
\xa1\xa9ic_\xff\xa1
<>(
v\x9c
));

258
t\xdd_\x92d
 =
\xa1\xa9ic_\xff\xa1
<>(((
u\xa3r_phys
 +
\xf9
 - 1\xe8>> 16\xe8&
BYTE
);

259 i\xe0(
t\xdd_\x92d
 !\xf0
t\xdd_addr
)

260
	`\xb7nic
("Try\x9ag\x81\xd8DMA\x87\xfcos\xa064K bound\xacy",
t\xdd_addr
);

264
Sc\xddedP\xd\xf9Lock

gu\xacd
;

265
	`p\xd\xf9_out
(
DMA_M2
,
mode
);

266
	`p\xd\xf9_out
(
DMA_M1
,
mode
);

267
	`p\xd\xf9_out
(
DMA_ADDR
,
low_addr
);

268
	`p\xd\xf9_out
(
DMA_ADDR
,
high_addr
);

269
	`p\xd\xf9_out
(
DMA_TOP
,
t\xdd_addr
);

270
	`p\xd\xf9_out
(
DMA_COUNT
,
low_\xf9
);

271
	`p\xd\xf9_out
(
DMA_COUNT
,
high_\xf9
);

273
	}
}

278 
	$w_\x8c\x\xafs\xe3r
(
w\x9ai
 &
wn
\xe8
n\xdbx\xfb\xb1
 {

282
comm\x\xafd
[0] = (
wn
->
wn_\xddcode
 =\xf0
DISK_READ
 ?
WIN_READ
 :
WIN_WRITE
);

283
comm\x\xafd
[1] = (
wn
->
wn_h\x97d
 | (wn->
wn_drive
 << 5));

284
comm\x\xafd
[2] = (((
wn
->
wn_cyl\x9ad\x94
 & 0x0300\xe8>> 2\xe8| wn->
wn_\xa3\xf9\xdc
);

285
comm\x\xafd
[3] = (
wn
->
wn_cyl\x9ad\x94
 & 0xFF);

286
comm\x\xafd
[4] =
BLOCK_SIZE
 /
SECTOR_SIZE
;

287
comm\x\xafd
[5] =
CTRL_BYTE
;

288 i\xe0(
	`com_out
(
DMA_INT
\xe8!\xf0
OK
)

289  (
ERR
);

291
	`p\xd\xf9_out
(
DMA_INIT
, 3);

293
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

296 i\xe0(
	`w\x9a_\xbbsu\xc9s
(*
wn
\xe8=\xf0
OK
)

297  (
OK
);

298 i\xe0((
wn
->
wn_\xbbsu\xc9s
[0] & 63) == 24)

299
	`\xbbad_ecc
();

301
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

302  (
ERR
);

303
	}
}

308 
	$w\x9a_\xbbsu\xc9s
(
w\x9ai
 &
wn
\xe8
n\xdbx\xfb\xb1
 {

311 
i
;

312 
\xa1\xa9us
;

314
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
\xa1\xa9us
);

315
	`p\xd\xf9_out
(
WIN_DMA
, 0);

316 i\xe0(!(
\xa1\xa9us
 & 2))

317  (
OK
);

318
comm\x\xafd
[0] =
WIN_SENSE
;

319
comm\x\xafd
[1] = (
wn
->
wn_drive
 << 5);

320 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

321  (
ERR
);

324 
i
 = 0; i <
MAX_RESULTS
; i++) {

325 i\xe0(
	`hd_wa\x99
(1\xe8!\xf0
OK
)

326  (
ERR
);

327
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
\xa1\xa9us
);

328
wn
.
wn_\xbbsu\xc9s
[
i
] =
\xa1\xa9ic_\xff\xa1
<>(
\xa1\xa9us
 &
BYTE
);

330 i\xe0(
wn
.
wn_\xbbsu\xc9s
[0] & 63)

331  (
ERR
);

333  (
OK
);

334
	}
}

339 
	$w\x9a_out
(
v\x\xab
\xe8
n\xdbx\xfb\xb1
 {

345 i\xe0(
w_\xc3ed_\xbb\xa3t
)

347 i\xe0(
	`hd_wa\x99
(1\xe8=\xf0
OK
)

348
	`p\xd\xf9_out
(
WIN_DATA
,
v\x\xab
);

349
	}
}

354 
	$w_\xbb\xa3t
(\xe8
n\xdbx\xfb\xb1
 {

359 
r
 = 1,
i
;

362
	`p\xd\xf9_out
(
WIN_STATUS
,
r
);

363 
i
 = 0; i < 10000; i++) {

364
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

365 i\xe0((
r
 & 01) == 0)

368 i\xe0(
r
 & 2) {

369
	`\xb4\x9\xa9f
("Hard disk won't\x84eset\n");

370  (
ERR
);

374
w_\xc3ed_\xbb\xa3t
 =
FALSE
;

376  (
	`w\x9a_\x9a\x99
());

377
	}
}

382 
	$w\x9a_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

385 
i
;

387
comm\x\xafd
[0] =
WIN_SPECIFY
;

388
comm\x\xafd
[1] = 0;

389 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

390  (
ERR
);

392
Sc\xddedP\xd\xf9Lock

gu\xacd
;

395
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_cyl
 >> 8);

398
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_cyl
 & 0xFF);

401
	`w\x9a_out
(
\xb7\xbfm0
.
\xc4_h\x97ds
);

404
	`w\x9a_out
(
\xb7\xbfm0
.
\xbbdu\xfbd_wr
 >> 8);

407
	`w\x9a_out
(
\xb7\xbfm0
.
\xbbdu\xfbd_wr
 & 0xFF);

410
	`w\x9a_out
(
\xb7\xbfm0
.
wr_\xb4ecomp
 >> 8);

413
	`w\x9a_out
(
\xb7\xbfm0
.
wr_\xb4ecomp
 & 0xFF);

416
	`w\x9a_out
(
\xb7\xbfm0
.
max_ecc
);

419 i\xe0(
	`check_\x9a\x99
(\xe8!\xf0
OK
) {

420
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

421  (
ERR
);

424 i\xe0(
\xc4_drives
 > 1) {

425
comm\x\xafd
[1] = (1 << 5);

426 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8!\xf0
OK
)

427  (
ERR
);

429
Sc\xddedP\xd\xf9Lock

gu\xacd
;

432
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_cyl
 >> 8);

435
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_cyl
 & 0xFF);

438
	`w\x9a_out
(
\xb7\xbfm1
.
\xc4_h\x97ds
);

441
	`w\x9a_out
(
\xb7\xbfm1
.
\xbbdu\xfbd_wr
 >> 8);

444
	`w\x9a_out
(
\xb7\xbfm1
.
\xbbdu\xfbd_wr
 & 0xFF);

447
	`w\x9a_out
(
\xb7\xbfm1
.
wr_\xb4ecomp
 >> 8);

450
	`w\x9a_out
(
\xb7\xbfm1
.
wr_\xb4ecomp
 & 0xFF);

453
	`w\x9a_out
(
\xb7\xbfm1
.
max_ecc
);

455 i\xe0(
	`check_\x9a\x99
(\xe8!\xf0
OK
) {

456
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

457  (
ERR
);

460 
i
 = 0; i <
\xc4_drives
; i++) {

461
comm\x\xafd
[0] =
WIN_RECALIBRATE
;

462
comm\x\xafd
[1] =
i
 << 5;

463
comm\x\xafd
[5] =
CTRL_BYTE
;

464 i\xe0(
	`com_out
(
INT
\xe8!\xf0
OK
)

465  (
ERR
);

466
	`\xbb\xfbive
(
HARDWARE
, &
w_mess
);

467 i\xe0(
	`w\x9a_\xbbsu\xc9s
(
w\x9ai
[
i
 *
DEV_PER_DRIVE
]\xe8!\xf0
OK
) {

468
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

469  (
ERR
);

472  (
OK
);

473
	}
}

478 
	$check_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

480 
r
;

482 i\xe0(
	`hd_wa\x99
(2\xe8=\xf0
OK
) {

483
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

484 i\xe0(
r
 & 2)

485  (
ERR
);

487  (
OK
);

489
	}
}

494 
	$\xbbad_ecc
(\xe8
n\xdbx\xfb\xb1
 {

497 
r
 = 0;

499
comm\x\xafd
[0] =
WIN_ECC_READ
;

500 i\xe0(
	`com_out
(
NO_DMA_INT
\xe8=\xf0
OK
 &&
	`hd_wa\x99
(1) == OK) {

501
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

502 i\xe0(
	`hd_wa\x99
(1\xe8=\xf0
OK
) {

503
	`p\xd\xf9_\x9a
(
WIN_DATA
, &
r
);

504 i\xe0(
r
 & 1)

505
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

508  (
ERR
);

509
	}
}

514 
	$hd_wa\x99
(
b\x99
\xe8
n\xdbx\xfb\xb1
 {

517 
i
 = 0;

518 
r
 = 0;

521
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

522
r
 &\xf0
b\x99
;

523 } (
i
++ <
MAX_WIN_RETRY
\xe8&& !
r
);

525 i\xe0(
i
 >\xf0
MAX_WIN_RETRY
) {

526
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

527  (
ERR
);

529  (
OK
);

530
	}
}

535 
	$com_out
(
mode
\xe8
n\xdbx\xfb\xb1
 {

538 
i
 = 0;

539 
r
 = 0;

541
	`p\xd\xf9_out
(
WIN_SELECT
,
mode
);

542
	`p\xd\xf9_out
(
WIN_DMA
,
mode
);

543 
i
 = 0; i <
MAX_WIN_RETRY
; i++) {

544
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

545 i\xe0((
r
 & 0x0F) == 0x0D)

548 i\xe0(
i
 =\xf0
MAX_WIN_RETRY
) {

549
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

550  (
ERR
);

553
Sc\xddedP\xd\xf9Lock

gu\xacd
;

554 
i
 = 0; i < 6; i++)

555
	`p\xd\xf9_out
(
WIN_DATA
,
comm\x\xafd
[
i
]);

557
	`p\xd\xf9_\x9a
(
WIN_STATUS
, &
r
);

558 i\xe0(
r
 & 1) {

559
w_\xc3ed_\xbb\xa3t
 =
TRUE
;

560  (
ERR
);

562  (
OK
);

563
	}
}

568 
	$\x9a\x99_\xb7\xbfms
(\xe8
n\xdbx\xfb\xb1
 {

572 
i
,
\xa3gm\x92t
,
off\xa3t
;

573 
ty\xb3_0
,
ty\xb3_1
;

574
u\x9\xa964_t

add\xbbss
;

576 
vec_\x8fb\xcb
[];

579
	`p\xd\xf9_\x9a
(
WIN_SELECT
, &
i
);

582
ty\xb3_0
 = (
i
 >> 2) & 3;

583
ty\xb3_1
 =
i
 & 3;

586
off\xa3t
 =
\xa1\xa9ic_\xff\xa1
<>(
vec_\x8fb\xcb
[2 * 0x41]);

587
\xa3gm\x92t
 =
\xa1\xa9ic_\xff\xa1
<>(
vec_\x8fb\xcb
[2 * 0x41 + 1]);

590
add\xbbss
 = (
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xa3gm\x92t
\xe8<< 4\xe8+
off\xa3t
;

595
	`phys_c\xddy
(
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
add\xbbss
),

596
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,

597
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buf
),

598
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(64))),

599
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(64ULL));

603
	`c\xddy_\xb7\xbfms
((&
buf
[
ty\xb3_0
 * 16]), &
\xb7\xbfm0
);

604
	`c\xddy_\xb7\xbfms
((&
buf
[
ty\xb3_1
 * 16]), &
\xb7\xbfm1
);

607
	`phys_c\xddy
(0x475ULL,

608
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
	`um\xad
(
	`\xb4oc_addr
(
WINCHESTER
),
D
,

609
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buf
),

610
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(1))),

611
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(1ULL));

612
\xc4_drives
 =
\xa1\xa9ic_\xff\xa1
<>(*
buf
);

615 
i
 = 0; i < 5; i++)

616
w\x9ai
[
i
].
wn_h\x97ds
 =
\xb7\xbfm0
.
\xc4_h\x97ds
;

617
w\x9ai
[0].
wn_low
 = wini[5].wn_low = 0ULL;

618
w\x9ai
[0].
wn_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(\xa1\xa9ic_\xff\xa1<u\x9at64_t>(
\xb7\xbfm0
.
\xc4_cyl
) *

619
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xb7\xbfm0
.
\xc4_h\x97ds
) *

620
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
NR_SECTORS
));

621 
i
 = 5; i < 10; i++)

622
w\x9ai
[
i
].
wn_h\x97ds
 =
\xb7\xbfm1
.
\xc4_h\x97ds
;

623
w\x9ai
[5].
wn_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(\xa1\xa9ic_\xff\xa1<u\x9at64_t>(
\xb7\xbfm1
.
\xc4_cyl
) *

624
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\xb7\xbfm1
.
\xc4_h\x97ds
) *

625
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
NR_SECTORS
));

628 i\xe0((
\xc4_drives
 > 0\xe8&& (
	`w\x9a_\x9a\x99
(\xe8!\xf0
OK
))

629
\xc4_drives
 = 0;

632 
i
 = 0; i <
\xc4_drives
; i++) {

633
	`devi\xfb
(
w_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
i
 * 5);

634
	`pos\x99i\xda
(
w_mess
) = 0LL;

635
	`cou\xc1
(
w_mess
\xe8\xf0
BLOCK_SIZE
;

636
	`add\xbbss
(
w_mess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
buf
);

637
	`\xb4oc_\xc4
(
w_mess
\xe8\xf0
WINCHESTER
;

638
w_mess
.
m_ty\xb3
 =
DISK_READ
;

639 i\xe0(
	`w_do_rdwt
(&
w_mess
\xe8!\xf0
BLOCK_SIZE
)

640
	`\xb7nic
("Can't\x84ead\x85artition\x81able of winchester ",

641
\xa1\xa9ic_\xff\xa1
<>(
i
));

642
	`c\xddy_\xb4t
(
\xa1\xa9ic_\xff\xa1
<>(
i
 * 5));

644
	}
}

649 
	$c\xddy_\xb7\xbfms
(*
\xa4c
, 
\xb7\xbfm
 *
de\xa1
\xe8
n\xdbx\xfb\xb1
 {

656
de\xa1
->
\xc4_cyl
 = *
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa4c
);

657
de\xa1
->
\xc4_h\x97ds
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa4c
[2]);

658
de\xa1
->
\xbbdu\xfbd_wr
 = *
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(&
\xa4c
[3]);

659
de\xa1
->
wr_\xb4ecomp
 = *
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(&
\xa4c
[5]);

660
de\xa1
->
max_ecc
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa4c
[7]);

661
	}
}

666 
	$c\xddy_\xb4t
(
drive
\xe8
n\xdbx\xfb\xb1
 {

671 
i
,
off\xa3t
;

672 
w\x9ai
 *
wn
;

674 
v\x\xab_\xe4om_buf_low
,
v\x\xab_\xe4om_buf_size
;

675
\x9at64_t

adju\xa164
;

677 
i
 = 0; i < 4; i++) {

678
adju\xa164
 = 0;

679
wn
 = &
w\x9ai
[
i
 +
drive
 + 1];

680
off\xa3t
 =
PART_TABLE
 +
i
 * 0x10;

682
	`mem\xfdy
(&
v\x\xab_\xe4om_buf_low
, &
buf
[
off\xa3t
], ());

683
wn
->
wn_low
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
v\x\xab_\xe4om_buf_low
);

685 i\xe0((
wn
->
wn_low
 % (
BLOCK_SIZE
 /
SECTOR_SIZE
)) != 0) {

686
adju\xa164
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
);

687
wn
->
wn_low
 = (wn->wn_low / (
BLOCK_SIZE
 /
SECTOR_SIZE
) + 1) * (BLOCK_SIZE / SECTOR_SIZE);

688
adju\xa164
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
wn
->
wn_low
) -\x87djust64;

691
	`mem\xfdy
(&
v\x\xab_\xe4om_buf_size
, &
buf
[
off\xa3t
 + ()], ());

692 i\xe0(
v\x\xab_\xe4om_buf_size
 >=

693
adju\xa164
) {

694
wn
->
wn_size
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
v\x\xab_\xe4om_buf_size
 -
adju\xa164
);

696
wn
->
wn_size
 = 0;

699
	`s\xd\xf9
(&
w\x9ai
[
drive
 + 1]);

700
	}
}

703 
	$s\xd\xf9
(
w\x9ai
 *
wn
\xe8
n\xdbx\xfb\xb1
 {

704 
i
,

705
j
;

707 
i
 = 0; i < 4; i++)

708 
j
 = 0; j < 3; j++)

709 i\xe0((
wn
[
j
].
wn_low
 == 0) && (wn[j + 1].wn_low != 0))

710
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

711 i\xe0(
wn
[
j
].
wn_low
 > wn[j + 1].wn_low &&

712
wn
[
j
 + 1].
wn_low
 != 0)

713
	`sw\xad
(&
wn
[
j
], &wn[j + 1]);

714
	}
}

717 
	$sw\xad
(
w\x9ai
 *
f\x9c\xa1
,

718 
w\x9ai
 *
\xa3c\xdad
\xe8
n\xdbx\xfb\xb1
 {

719 
w\x9ai

tmp
;

721
tmp
 = *
f\x9c\xa1
;

722 *
f\x9c\xa1
 = *
\xa3c\xdad
;

723 *
\xa3c\xdad
 =
tmp
;

724
	}
}

	@lib/abort.cpp

6 
	~<\xa1dlib.h
>

14 [[
nܑu\xba
]] 
	$ab\xd\xf9
(\xe8{
	`ex\x99
(99);
	}
}

	@lib/abs.cpp

6 
	~<\xa1dlib.h
>

14 [[
nodis\xf\xe4d
]]
cڡex\xb4
 
	$abs
(
i
\xe8
n\xdbx\xfb\xb1
 {  (\x98< 0\xe8? -\x98: i;
	}
}

	@lib/access.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

10 
	$ac\xfbss
(cڡ *
\xc7me
, 
mode
) {

12 
	`\xff\x\xfbm3
(
FS
,
ACCESS
,
mode
,
cڡ_\xff\xa1
<*>(
\xc7me
));

13
	}
}

	@lib/alarm.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$\x\xab\xacm
(
\xa3c
) {

6 
	`\xff\x\xfbm1
(
MM
,
ALARM
,
\xa1\xa9ic_\xff\xa1
<>(
\xa3c
), 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

7
	}
}

	@lib/atoi.cpp

6 
	~"../\x9a\x\xe3ude/numb\x94_\xb7r\xa3.h\xb5
"

16 [[
nodis\xf\xe4d
]]
cڡex\xb4
 
	$\xa9oi
(cڡ *
s
\xe8
n\xdbx\xfb\xb1
 {

17 
\xa1\xa9ic_\xff\xa1
<>(
	`\xb7r\xa3_sig\xc3d_decim\x\xab
(
s
));

18
	}
}

	@lib/atol.cpp

6 
	~"../\x9a\x\xe3ude/numb\x94_\xb7r\xa3.h\xb5
"

15 [[
nodis\xf\xe4d
]]
cڡex\xb4
 
	$\xa9\xde
(*
s
\xe8
n\xdbx\xfb\xb1
 { 
	`\xb7r\xa3_sig\xc3d_decim\x\xab
(s);
	}
}

	@lib/bcopy.cpp

2 
	$bc\xddy
(*
\xa4c
, *
de\xa1
, 
n
) {

4 
n
--)

5 *
de\xa1
++ = *
\xa4c
++;

6
	}
}

	@lib/brk.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 *
brksize
;

7 *
	$brk
(*
addr
) {

8 
k
;

10
k
 =
	`\xff\x\xfbm1
(
MM
,
BRK
, 0, 0, 0,
addr
,
NIL_PTR
, NIL_PTR);

11 i\xe0(
k
 =\xf0
OK
) {

12
brksize
 =
M
.
	`m2_p1
();

13  (
NIL_PTR
);

17
	}
}

20 *
	$sbrk
(
\x9a\xfc
) {

21 *
\xc3wsize
, *
\xdedsize
;

22 
\x92dv
,
d\xdcgv
;

24
\xdedsize
 =
brksize
;

25
\xc3wsize
 =
brksize
 +
\x9a\xfc
;

26 i\xe0(
	`brk
(
\xc3wsize
) == 0)

27  (
\xdedsize
);

30
	}
}

	@lib/brk2.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
phys_\x\xe3icks

g\x91_size
();

7 
	$brk2
() {

8 *
p1
, *
p2
;

10
p1
 = (*)
	`g\x91_size
();

11
	`\xff\x\xfbm1
(
MM
,
BRK2
, 0, 0, 0,
p1
,
p2
,
NIL_PTR
);

12
	}
}

	@lib/brksize.cpp

2 
\x92dbss
;

3 *
	gbrksize
 = &
\x92dbss
;

	@lib/c86/prologue.hpp

8
	g\xb4\xdeogue
.
	gh
;
\xa1\xaad\xacd

\xb4\xdeogue
 
c86

as\xa3mbly

	gcode


10
This

f\x9\x93

def\x9\xabs

the

cܻ\xf9

\xdcd\x94\x9ag

of

	g\xa3gm\x92ts


12 @
CODE

SEGMENT

BYTE

	gPUBLIC
 'CODE';

13
\x8bxt

	g\xa3gm\x92t
 @
CODE

	gENDS
 @
DATAB

SEGMENT

PARA

	gPUBLIC
 'DATAB';

14
d\xa9a

	g\xa3gm\x92t
 @
DATAB

	gENDS
 @
DATAC

SEGMENT

BYTE

	gPUBLIC
 'DATAC';

15
d\xa9a

	g\xa3gm\x92t
 @
DATAC

	gENDS
 @
DATAI

SEGMENT

BYTE

	gPUBLIC
 'DATAI';

16
d\xa9a

	g\xa3gm\x92t
 @
DATAI

	gENDS
 @
DATAT

SEGMENT

BYTE

	gPUBLIC
 'DATAT';

17
bss

	g\xa3gm\x92t
 @
DATAT

	gENDS
 @
DATAU

SEGMENT

BYTE

	gPUBLIC
 'DATAU';

18
bss

	g\xa3gm\x92t
 @
DATAU

	gENDS
 @
DATAV

SEGMENT

BYTE

	gPUBLIC
 'DATAV';

19
bss

	g\xa3gm\x92t
 @
DATAV

ENDS


21
DGROUP

	gGROUP
 @
	gDATAB
,

22 @
	gDATAC
, @
	gDATAI
, @
	gDATAT
, @
	gDATAU
, @
	gDATAV


	@lib/call.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	g\x94\xbao
 = 0;

19 
	$\xff\x\xfbm1
(
\xb4oc
, 
sys\xff\x\xfb\xc4
, 
\x9at1
, 
\x9at2
, 
\x9at3
, *
\xb1r1
, *
\xb1r2
,

20 *
\xb1r3
\xe8
n\xdbx\xfb\xb1
 {

24
M
.
	`m1_i1
(\xe8\xf0
\x9at1
;

25
M
.
	`m1_i2
(\xe8\xf0
\x9at2
;

26
M
.
	`m1_i3
(\xe8\xf0
\x9at3
;

27
M
.
	`m1_p1
(\xe8\xf0
\xb1r1
;

28
M
.
	`m1_p2
(\xe8\xf0
\xb1r2
;

29
M
.
	`m1_p3
(\xe8\xf0
\xb1r3
;

30 
	`\xff\x\xfbx
(
\xb4oc
,
sys\xff\x\xfb\xc4
);

31
	}
}

42 
	$\xff\x\xfbm3
(
\xb4oc
, 
sys\xff\x\xfb\xc4
, 
\x9at1
, cڡ *
\xc7me
\xe8
n\xdbx\xfb\xb1
 {

47
\xa1d
::
size_t

k
 =
	`\xcbn
(
\xc7me
);

48 *
\xbd
 = &
M
.
	`m3_\xff1
()[0];

49 cڡ *
\xa4c
 =
\xc7me
;

50
M
.
	`m3_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
k
);

51
M
.
	`m3_i2
(\xe8\xf0
\x9at1
;

52
M
.
	`m3_p1
(\xe8\xf0
cڡ_\xff\xa1
<*>(
\xc7me
);

53 i\xe0(
k
 <\xf0
M3_STRING
) {

54 
k
--)

55 *
\xbd
++ = *
\xa4c
++;

57 
	`\xff\x\xfbx
(
\xb4oc
,
sys\xff\x\xfb\xc4
);

58
	}
}

67 
	$\xff\x\xfbx
(
\xb4oc
, 
sys\xff\x\xfb\xc4
\xe8
n\xdbx\xfb\xb1
 {

71 
k
;

73
M
.
m_ty\xb3
 =
sys\xff\x\xfb\xc4
;

74
k
 =
	`\xa3nd\xbbc
(
\xb4oc
, &
M
);

75 i\xe0(
k
 !\xf0
OK
)

76  (
k
);

77 i\xe0(
M
.
m_ty\xb3
 < 0) {

78
\x94\xbao
 = -
M
.
m_ty\xb3
;

81  (
M
.
m_ty\xb3
);

82
	}
}

91
	g\xa1d
::
size_t

	$\xcbn
(cڡ *
s
\xe8
n\xdbx\xfb\xb1
 {

93
\xa1d
::
size_t

k
 = 0;

94 *
s
++ != 0) {

95 ++
k
;

97 
k
 + 1U;

98
	}
}

	@lib/catchsig.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

10 
	$begsig
(\xe8
n\xdbx\xfb\xb1
 {  0;
	}
}

	@lib/chdir.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$chd\x9c
(cڡ *
\xc7me
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
CHDIR
, 0,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/chmod.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$chmod
(cڡ *
\xc7me
, 
mode
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
CHMOD
, mode,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/chown.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$chown
(cڡ *
\xc7me
, 
ow\xc3r
, 
g\xbd
) {

5 
	`\xff\x\xfbm1
(
FS
,
CHOWN
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)),
ow\xc3r
,
g\xbd
, const_cast<*>(name),

6
NIL_PTR
, NIL_PTR);

7
	}
}

	@lib/chroot.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$chro\xd9
(cڡ *
\xc7me
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
CHROOT
, 0,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/cleanup.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

2 
	~<uni\xa1d.h
>

5 "C" 
__f\xe6ush
(
FILE
 *
i\xdd
);

8 
	$_\x\xe3\x97nup
() {

9 
i
 = 0; i <
NFILES
; i++)

10 i\xe0(
_io_\x8fb\xcb
[
i
] !\xf0
nuαr
)

11
	`f\xe6ush
(
_io_\x8fb\xcb
[
i
]);

12
	}
}

	@lib/close.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\x\xe3o\xa3
(
fd
\xe8{ 
	`\xff\x\xfbm1
(
FS
,
CLOSE
, fd, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/creat.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$\xfc\x97t
(cڡ *
\xc7me
, 
mode
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
CREAT
, mode,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/crt0.cpp

5 
	~<\xa1ddef.h
>

7 
_ma\x9a
(
\xacgc
, **
\xacgv
, **
\x92vp
);

8 
_ex\x99
(
\xa1\xa9us
);

11 **
	g_\x92v\x9c\xda
;

14 
	$_\xa1\xa\xf9
() {

15 **
\xa1ack
;

16 
\xacgc
;

17 **
\xacgv
;

18 **
\x92vp
;

21
__asm__
 vީ\x9ee("mov %%r\xa5, %0" : "\xf4"(
\xa1ack
));

24
\xacgc
 = ()()
\xa1ack
[0];

26
\xacgv
 = &
\xa1ack
[1];

28
\x92vp
 = &
\xacgv
[
\xacgc
 + 1];

29
_\x92v\x9c\xda
 =
\x92vp
;

31
	`_ex\x99
(
	`_ma\x9a
(
\xacgc
,
\xacgv
,
\x92vp
));

32
	}
}

	@lib/crtso.cpp

2 
	~<\xa1ddef.h
>

4 
_ma\x9a
(
\xacgc
, **
\xacgv
, **
\x92vp
);

5 
_ex\x99
(
\xa1\xa9us
);

7 **
	g_\x92v\x9c\xda
;

9 
	$_\xa1\xa\xf9
() {

10 **
\xa1ack
;

11 
\xacgc
;

12 **
\xacgv
;

13 **
\x92vp
;

15
__asm__
 vީ\x9ee("mov %%r\xa5, %0" : "\xf4"(
\xa1ack
));

16
\xacgc
 = ()()
\xa1ack
[0];

17
\xacgv
 = &
\xa1ack
[1];

18
\x92vp
 = &
\xacgv
[
\xacgc
 + 1];

19
_\x92v\x9c\xda
 =
\x92vp
;

21
	`_ex\x99
(
	`_ma\x9a
(
\xacgc
,
\xacgv
,
\x92vp
));

22
	}
}

	@lib/crypt.cpp

1 
	~<c\xa1r\x9ag
>

4 *
	$\xfcy\xb1
(*
pw
, *
\xa7\xc9
) {

5 
buf
[14];

6 
b\x99s
[67];

7 
i
;

8 
j
,
r\xd9
;

10 
i
 = 0; i < 67; i++)

11
b\x99s
[
i
] = 0;

12 i\xe0(
\xa7\xc9
[1] == 0)

13
\xa7\xc9
[1] = salt[0];

14
r\xd9
 = (
\xa7\xc9
[1] * 4 - salt[0]) % 128;

15 
i
 = 0; *
pw
 && i < 8; i++) {

16 
j
 = 0; j < 7; j++)

17
b\x99s
[
i
 +
j
 * 8] = (*
pw
 & (1 << j) ? 1 : 0);

18
b\x99s
[
i
 + 56] = (
\xa7\xc9
[i / 4] & (1 << (i % 4)) ? 1 : 0);

19
pw
++;

21
b\x99s
[64] = (
\xa7\xc9
[0] & 1 ? 1 : 0);

22
b\x99s
[65] = (
\xa7\xc9
[1] & 1 ? 1 : 0);

23
b\x99s
[66] = (
r\xd9
 & 1 ? 1 : 0);

24 
r\xd9
--) {

25 
i
 = 65; i >= 0; i--)

26
b\x99s
[
i
 + 1] = bits[i];

27
b\x99s
[0] = bits[66];

29 
i
 = 0; i < 12; i++) {

30
buf
[
i
 + 2] = 0;

31 
j
 = 0; j < 6; j++)

32
buf
[
i
 + 2] |\xf0(
b\x99s
[\x98* 6 +
j
] ? (1 << j) : 0);

33
buf
[
i
 + 2] += 48;

34 i\xe0(
buf
[
i
 + 2] > '9')

35
buf
[
i
 + 2] += 7;

36 i\xe0(
buf
[
i
 + 2] > 'Z')

37
buf
[
i
 + 2] += 6;

39
buf
[0] =
\xa7\xc9
[0];

40
buf
[1] =
\xa7\xc9
[1];

41
buf
[13] = '\0';

42  (
buf
);

43
	}
}

	@lib/csv.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

7 
	$csv
(\xe8{
	}
}

	@lib/ctype.cpp

1 
	~"../\x9a\x\xe3ude/\xf9y\xb3.h\xb5
"

4 
	g\xf9y\xb3_
[] = {0,

5
\xa1\xa9ic_\xff\xa1
<>(
C
),

6
\xa1\xa9ic_\xff\xa1
<>(
C
),

7
\xa1\xa9ic_\xff\xa1
<>(
C
),

8
\xa1\xa9ic_\xff\xa1
<>(
C
),

9
\xa1\xa9ic_\xff\xa1
<>(
C
),

10
\xa1\xa9ic_\xff\xa1
<>(
C
),

11
\xa1\xa9ic_\xff\xa1
<>(
C
),

12
\xa1\xa9ic_\xff\xa1
<>(
C
),

13
\xa1\xa9ic_\xff\xa1
<>(
C
),

14
\xa1\xa9ic_\xff\xa1
<>(
S
),

15
\xa1\xa9ic_\xff\xa1
<>(
S
),

16
\xa1\xa9ic_\xff\xa1
<>(
S
),

17
\xa1\xa9ic_\xff\xa1
<>(
S
),

18
\xa1\xa9ic_\xff\xa1
<>(
S
),

19
\xa1\xa9ic_\xff\xa1
<>(
C
),

20
\xa1\xa9ic_\xff\xa1
<>(
C
),

21
\xa1\xa9ic_\xff\xa1
<>(
C
),

22
\xa1\xa9ic_\xff\xa1
<>(
C
),

23
\xa1\xa9ic_\xff\xa1
<>(
C
),

24
\xa1\xa9ic_\xff\xa1
<>(
C
),

25
\xa1\xa9ic_\xff\xa1
<>(
C
),

26
\xa1\xa9ic_\xff\xa1
<>(
C
),

27
\xa1\xa9ic_\xff\xa1
<>(
C
),

28
\xa1\xa9ic_\xff\xa1
<>(
C
),

29
\xa1\xa9ic_\xff\xa1
<>(
C
),

30
\xa1\xa9ic_\xff\xa1
<>(
C
),

31
\xa1\xa9ic_\xff\xa1
<>(
C
),

32
\xa1\xa9ic_\xff\xa1
<>(
C
),

33
\xa1\xa9ic_\xff\xa1
<>(
C
),

34
\xa1\xa9ic_\xff\xa1
<>(
C
),

35
\xa1\xa9ic_\xff\xa1
<>(
S
),

36
\xa1\xa9ic_\xff\xa1
<>(
P
),

37
\xa1\xa9ic_\xff\xa1
<>(
P
),

38
\xa1\xa9ic_\xff\xa1
<>(
P
),

39
\xa1\xa9ic_\xff\xa1
<>(
P
),

40
\xa1\xa9ic_\xff\xa1
<>(
P
),

41
\xa1\xa9ic_\xff\xa1
<>(
P
),

42
\xa1\xa9ic_\xff\xa1
<>(
P
),

43
\xa1\xa9ic_\xff\xa1
<>(
P
),

44
\xa1\xa9ic_\xff\xa1
<>(
P
),

45
\xa1\xa9ic_\xff\xa1
<>(
P
),

46
\xa1\xa9ic_\xff\xa1
<>(
P
),

47
\xa1\xa9ic_\xff\xa1
<>(
P
),

48
\xa1\xa9ic_\xff\xa1
<>(
P
),

49
\xa1\xa9ic_\xff\xa1
<>(
P
),

50
\xa1\xa9ic_\xff\xa1
<>(
N
),

51
\xa1\xa9ic_\xff\xa1
<>(
N
),

52
\xa1\xa9ic_\xff\xa1
<>(
N
),

53
\xa1\xa9ic_\xff\xa1
<>(
N
),

54
\xa1\xa9ic_\xff\xa1
<>(
N
),

55
\xa1\xa9ic_\xff\xa1
<>(
N
),

56
\xa1\xa9ic_\xff\xa1
<>(
N
),

57
\xa1\xa9ic_\xff\xa1
<>(
N
),

58
\xa1\xa9ic_\xff\xa1
<>(
N
),

59
\xa1\xa9ic_\xff\xa1
<>(
N
),

60
\xa1\xa9ic_\xff\xa1
<>(
P
),

61
\xa1\xa9ic_\xff\xa1
<>(
P
),

62
\xa1\xa9ic_\xff\xa1
<>(
P
),

63
\xa1\xa9ic_\xff\xa1
<>(
P
),

64
\xa1\xa9ic_\xff\xa1
<>(
P
),

65
\xa1\xa9ic_\xff\xa1
<>(
P
),

66
\xa1\xa9ic_\xff\xa1
<>(
P
),

67
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

68
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

69
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

70
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

71
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

72
\xa1\xa9ic_\xff\xa1
<>(
U
 |
X
),

73
\xa1\xa9ic_\xff\xa1
<>(
U
),

74
\xa1\xa9ic_\xff\xa1
<>(
U
),

75
\xa1\xa9ic_\xff\xa1
<>(
U
),

76
\xa1\xa9ic_\xff\xa1
<>(
U
),

77
\xa1\xa9ic_\xff\xa1
<>(
U
),

78
\xa1\xa9ic_\xff\xa1
<>(
U
),

79
\xa1\xa9ic_\xff\xa1
<>(
U
),

80
\xa1\xa9ic_\xff\xa1
<>(
U
),

81
\xa1\xa9ic_\xff\xa1
<>(
U
),

82
\xa1\xa9ic_\xff\xa1
<>(
U
),

83
\xa1\xa9ic_\xff\xa1
<>(
U
),

84
\xa1\xa9ic_\xff\xa1
<>(
U
),

85
\xa1\xa9ic_\xff\xa1
<>(
U
),

86
\xa1\xa9ic_\xff\xa1
<>(
U
),

87
\xa1\xa9ic_\xff\xa1
<>(
U
),

88
\xa1\xa9ic_\xff\xa1
<>(
U
),

89
\xa1\xa9ic_\xff\xa1
<>(
U
),

90
\xa1\xa9ic_\xff\xa1
<>(
U
),

91
\xa1\xa9ic_\xff\xa1
<>(
U
),

92
\xa1\xa9ic_\xff\xa1
<>(
U
),

93
\xa1\xa9ic_\xff\xa1
<>(
U
),

94
\xa1\xa9ic_\xff\xa1
<>(
P
),

95
\xa1\xa9ic_\xff\xa1
<>(
P
),

96
\xa1\xa9ic_\xff\xa1
<>(
P
),

97
\xa1\xa9ic_\xff\xa1
<>(
P
),

98
\xa1\xa9ic_\xff\xa1
<>(
P
),

99
\xa1\xa9ic_\xff\xa1
<>(
P
),

100
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

101
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

102
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

103
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

104
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

105
\xa1\xa9ic_\xff\xa1
<>(
L
 |
X
),

106
\xa1\xa9ic_\xff\xa1
<>(
L
),

107
\xa1\xa9ic_\xff\xa1
<>(
L
),

108
\xa1\xa9ic_\xff\xa1
<>(
L
),

109
\xa1\xa9ic_\xff\xa1
<>(
L
),

110
\xa1\xa9ic_\xff\xa1
<>(
L
),

111
\xa1\xa9ic_\xff\xa1
<>(
L
),

112
\xa1\xa9ic_\xff\xa1
<>(
L
),

113
\xa1\xa9ic_\xff\xa1
<>(
L
),

114
\xa1\xa9ic_\xff\xa1
<>(
L
),

115
\xa1\xa9ic_\xff\xa1
<>(
L
),

116
\xa1\xa9ic_\xff\xa1
<>(
L
),

117
\xa1\xa9ic_\xff\xa1
<>(
L
),

118
\xa1\xa9ic_\xff\xa1
<>(
L
),

119
\xa1\xa9ic_\xff\xa1
<>(
L
),

120
\xa1\xa9ic_\xff\xa1
<>(
L
),

121
\xa1\xa9ic_\xff\xa1
<>(
L
),

122
\xa1\xa9ic_\xff\xa1
<>(
L
),

123
\xa1\xa9ic_\xff\xa1
<>(
L
),

124
\xa1\xa9ic_\xff\xa1
<>(
L
),

125
\xa1\xa9ic_\xff\xa1
<>(
P
),

126
\xa1\xa9ic_\xff\xa1
<>(
P
),

127
\xa1\xa9ic_\xff\xa1
<>(
P
),

128
\xa1\xa9ic_\xff\xa1
<>(
P
),

129
\xa1\xa9ic_\xff\xa1
<>(
C
)};

	@lib/doprintf.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h
"

2 
	~<\xa1r\x9ag.h
>

5 
	~"../\x9a\x\xe3ude/sh\xa\xfbd/numb\x94_to_ascii.h\xb5
"

7 
_\xb4\x9\xa9\x99
(*
\xa1r
, 
w1
, 
w2
, 
\xb7dch\xac
, 
\xcbngth
,
FILE
 *
f\x9\x93
);

10
\x9al\x9ae

cڡex\xb4
 
	gkMaxDig\x99s
 = 12;

15 
	$_b\x9\xa9\xdfscii
(
num
, 
\xbfdix
, *
a
) {

17 
buf
[
kMaxDig\x99s
]{};

18 
idx
 = 0;

21
bo\xde

\xc3g\xa9ive
 =
\xe7l\xa3
;

22 i\xe0(
\xbfdix
 =\xf010 &&
num
 < 0) {

23
\xc3g\xa9ive
 =
\x8cue
;

24
num
 = -num;

28 i\xe0(
num
 == 0) {

29
a
[0] = '0';

30
a
[1] = '\0';

35 
num
 !\xf00 &&
idx
 <
kMaxDig\x99s
 - 1) {

36 
dig\x99
 =
\xa1\xa9ic_\xff\xa1
<>(
num
 %
\xbfdix
);

37
buf
[
idx
++] =
\xa1\xa9ic_\xff\xa1
<>(
dig\x99
 < 10 ? '0' + digit : 'a' + digit - 10);

38
num
 /\xf0
\xbfdix
;

42 i\xe0(
\xc3g\xa9ive
 &&
idx
 <
kMaxDig\x99s
 - 1) {

43
buf
[
idx
++] = '-';

47 
i
 = 0; i <
idx
; ++i) {

48
a
[
i
] =
buf
[
idx
 - 1 - i];

50
a
[
idx
] = '\0';

51
	}
}

55 
	#GET_ARG
(
\xacgli\xa1
,
mode
\xe8((mod\x90*)\xd7rgli\xa1 +\xf0(mode)))[-1]

	)

58 
	$_d\xddr\x9\xa9f
(
FILE
 *
\xe5
, *
f\xdcm\xa9
, 
\xacgs
) {

59 *
vl
;

60 
r
,
w1
,
w2
,
sign
;

61 
l
;

62 
c
;

63 *
s
;

64 
\xb7dch\xac
;

65 
a
[
kMaxDig\x99s
];

67
vl
 = (*)
\xacgs
;

69 *
f\xdcm\xa9
 != '\0') {

70 i\xe0(*
f\xdcm\xa9
 != '%') {

71
	`putc
(*
f\xdcm\xa9
++,
\xe5
);

75
w1
 = 0;

76
w2
 = 0;

77
sign
 = 1;

78
\xb7dch\xac
 = ' ';

79
f\xdcm\xa9
++;

81 i\xe0(*
f\xdcm\xa9
 == '-') {

82
sign
 = -1;

83
f\xdcm\xa9
++;

86 i\xe0(*
f\xdcm\xa9
 == '0') {

87
\xb7dch\xac
 = '0';

88
f\xdcm\xa9
++;

91 *
f\xdcm\xa9
 >= '0' && *format <= '9') {

92
w1
 = 10 * w1 +
sign
 * (*
f\xdcm\xa9
 - '0');

93
f\xdcm\xa9
++;

96 i\xe0(*
f\xdcm\xa9
 == '.') {

97
f\xdcm\xa9
++;

98 *
f\xdcm\xa9
 >= '0' && *format <= '9') {

99
w2
 = 10 * w2 + (*
f\xdcm\xa9
 - '0');

100
f\xdcm\xa9
++;

104 *
f\xdcm\xa9
) {

106
l
 = ()
	`GET_ARG
(
vl
, );

107
r
 = 10;

110
l
 = ()
	`GET_ARG
(
vl
, );

111
l
 =\x86 & 0xFFFF;

112
r
 = 10;

115
l
 = ()
	`GET_ARG
(
vl
, );

116 i\xe0(
l
 < 0)

117
l
 =\x86 & 0xFFFF;

118
r
 = 8;

121
l
 = ()
	`GET_ARG
(
vl
, );

122 i\xe0(
l
 < 0)

123
l
 =\x86 & 0xFFFF;

124
r
 = 16;

127
l
 = ()
	`GET_ARG
(
vl
, );

128
r
 = 10;

131
l
 = ()
	`GET_ARG
(
vl
, );

132
r
 = 8;

135
l
 = ()
	`GET_ARG
(
vl
, );

136
r
 = 16;

139
c
 = ()
	`GET_ARG
(
vl
, );

141
	`putc
(
c
,
\xe5
);

142
f\xdcm\xa9
++;

145
s
 =
	`GET_ARG
(
vl
, *);

146
	`_\xb4\x9\xa9\x99
(
s
,
w1
,
w2
,
\xb7dch\xac
,
	`\xa1\xbe\x92
(s),
\xe5
);

147
f\xdcm\xa9
++;

150
	`putc
('%',
\xe5
);

151
	`putc
(*
f\xdcm\xa9
++,
\xe5
);

155
	`_b\x9\xa9\xdfscii
(
l
,
r
,
a
);

156
	`_\xb4\x9\xa9\x99
(
a
,
w1
,
w2
,
\xb7dch\xac
,
	`\xa1\xbe\x92
\xd7),
\xe5
);

157
f\xdcm\xa9
++;

159
	}
}

162 
	$_\xb4\x9\xa9\x99
(*
\xa1r
, 
w1
, 
w2
, 
\xb7dch\xac
, 
\xcbngth
,
FILE
 *
f\x9\x93
) {

163 
\xcbn2
 =
\xcbngth
;

164 
\x8bmp
;

166 i\xe0(
w2
 > 0 &&
\xcbngth
 > w2)

167
\xcbn2
 =
w2
;

169
\x8bmp
 =
\xcbn2
;

171 i\xe0(
w1
 > 0)

172 
w1
 >
\xcbn2
) {

173 --
w1
;

174
	`putc
(
\xb7dch\xac
,
f\x9\x93
);

177 *
\xa1r
 && (
\xcbn2
-- != 0))

178
	`putc
(*
\xa1r
++,
f\x9\x93
);

180 i\xe0(
w1
 < 0)

181 i\xe0(
\xb7dch\xac
 == '0') {

182
	`putc
('.',
f\x9\x93
);

183
w1
++;

185 
w1
 < -
\x8bmp
) {

186
w1
++;

187
	`putc
(
\xb7dch\xac
,
f\x9\x93
);

189
	}
}

	@lib/doscanf.cpp

	@lib/dup.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$dup
(
fd
\xe8{ 
	`\xff\x\xfbm1
(
FS
,
DUP
, fd, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/dup2.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

5 
	$dup2
(
fd
, 
fd2
\xe8{ 
	`\xff\x\xfbm1
(
FS
,
DUP
, fd + 0100, fd2, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/end.cpp

2 
	g\x92d\x8bxt
;

3 
	g\x92dd\xa9a
;

4 
	g\x92dbss
;

	@lib/exec.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 *
	gnu\x\xfb_\xacgv
[] = {
nuαr
};

7 
execve
(cڡ *
\xc7me
, *
\xacgv
[], *
\x92vp
[]);

10 
	$exe\x\xe3
(cڡ *
\xc7me
, *
\xacg0
\xe8{ 
	`execve
\xd2ame, &\xacg0,
nu\x\xfb_\xacgv
);
	}
}

14 
	$exe\x\xe3e
(cڡ *
\xc7me
, *
\xacgv
) {

15 **
p
 = &
\xacgv
;

16 *
p
++)

18 **
\x92vp
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<**>(*
p
);

19 
	`execve
(
\xc7me
, &
\xacgv
,
\x92vp
);

20
	}
}

23 
	$execv
(cڡ *
\xc7me
, *
\xacgv
[]\xe8{ 
	`execve
\xd2ame,\x87rgv,
nu\x\xfb_\xacgv
);
	}
}

26 
	$execve
(cڡ *
\xc7me
, *
\xacgv
[], *
\x92vp
[]) {

27 
\xa1ack
[
MAX_ISTACK_BYTES
];

28 **
\xacg\xdcg
, **
\x92v\xdcg
, *
hp
, **
\xad
, *
p
;

29 
i
,
\xc7rgs
,
\xc3nvps
,
\xa1ackby\x8bs
,
\xb1rsize
,
off\xa3t
;

32
\xc7rgs
 = 0;

33
\xc3nvps
 = 0;

34
\xacg\xdcg
 =
\xacgv
;

35
\x92v\xdcg
 =
\x92vp
;

36 *
\xacg\xdcg
++ !\xf0
NIL_PTR
)

37
\xc7rgs
++;

38 *
\x92v\xdcg
++ !\xf0
NIL_PTR
)

39
\xc3nvps
++;

40
\xb1rsize
 = (
NIL_PTR
);

43
hp
 = &
\xa1ack
[(
\xc7rgs
 +
\xc3nvps
 + 3\xe8*
\xb1rsize
];

44 i\xe0(
hp
 +
\xc7rgs
 +
\xc3nvps
 >\xf0&
\xa1ack
[
MAX_ISTACK_BYTES
])

45 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E2BIG
);

46
\xad
 = (**)
\xa1ack
;

47 *
\xad
++ = (*)
\xc7rgs
;

50 
i
 = 0; i <
\xc7rgs
; i++) {

51
off\xa3t
 =
hp
 -
\xa1ack
;

52 *
\xad
++ = (*)
off\xa3t
;

53
p
 = *
\xacgv
++;

54 *
p
) {

55 *
hp
++ = *
p
++;

56 i\xe0(
hp
 >\xf0&
\xa1ack
[
MAX_ISTACK_BYTES
])

57 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E2BIG
);

59 *
hp
++ = ()0;

61 *
\xad
++ =
NIL_PTR
;

64 
i
 = 0; i <
\xc3nvps
; i++) {

65
off\xa3t
 =
hp
 -
\xa1ack
;

66 *
\xad
++ = (*)
off\xa3t
;

67
p
 = *
\x92vp
++;

68 *
p
) {

69 *
hp
++ = *
p
++;

70 i\xe0(
hp
 >\xf0&
\xa1ack
[
MAX_ISTACK_BYTES
])

71 
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E2BIG
);

73 *
hp
++ = ()0;

75 *
\xad
++ =
NIL_PTR
;

76
\xa1ackby\x8bs
 = (((
hp
 -
\xa1ack
\xe8+
\xb1rsize
 - 1) /\x85trsize) *\x85trsize;

77 
	`\xff\x\xfbm1
(
MM_PROC_NR
,
EXEC
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)),
\xa1ackby\x8bs
, 0,

78
cڡ_\xff\xa1
<*>(
\xc7me
),
\xa1ack
,
NIL_PTR
);

79
	}
}

82 
	$exe\x\xe7
(cڡ *
\xc7me
) {

87 
\xa1ack
[4];

89
\xa1ack
[0] = 0;

90
\xa1ack
[1] = 0;

91
\xa1ack
[2] = 0;

92
\xa1ack
[3] = 0;

93 
	`\xff\x\xfbm1
(
MM_PROC_NR
,
EXEC
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)), 4, 0, const_cast<*>(name),

94
\xa1ack
,
NIL_PTR
);

95
	}
}

	@lib/exit.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$ex\x99
(
\xa1\xa9us
\xe8{ 
	`\xff\x\xfbm1
(
MM
,
EXIT
, s\x8ftus, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/fclose.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

3 
	~<uni\xa1d.h
>

11 
	$f\x\xe3o\xa3
(
FILE
 *
\xe5
) {

12 
i
;

14 
i
 = 0; i <
NFILES
; i++) {

15 i\xe0(
\xe5
 =\xf0
_io_\x8fb\xcb
[
i
]) {

16
_io_\x8fb\xcb
[
i
] = 0;

20 i\xe0(
i
 >\xf0
NFILES
)

21 
STDIO_EOF
;

22
	`f\xe6ush
(
\xe5
);

23
	`\x\xe3o\xa3
(
\xe5
->
_fd
);

24 i\xe0(
	`\x8b\xa1\xe6ag
(
\xe5
,
IOMYBUF
\xe8&& fp->
_buf
)

25
	`\xa7\xe3_\xe4\x93
(
\xe5
->
_buf
);

26
	`\xa7\xe3_\xe4\x93
(
\xe5
);

28
	}
}

	@lib/fflush.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

9 
	$__f\xe6ush
(
FILE
 *
i\xdd
) {

10 
cou\xc1
;

12 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
\xe8|| !\x8b\xa1\xe6ag(i\xdd,
WRITEMODE
))

15 i\xe0(
i\xdd
->
_cou\xc1
 <= 0)

18
cou\xc1
 =
	`wr\x99e
(
i\xdd
->
_fd
, i\xdd->
_buf
, i\xdd->
_cou\xc1
);

20 i\xe0(
cou\xc1
 =\xf0
i\xdd
->
_cou\xc1
) {

21
i\xdd
->
_cou\xc1
 = 0;

22
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

23 
cou\xc1
;

26
i\xdd
->
_\xe6ags
 |\xf0
ERR
;

27 
STDIO_EOF
;

28
	}
}

36 
	$f\xe6ush
(
FILE
 *
\xa1\xbbam
\xe8{ 
	`__f\xe6ush
(\xa1\xbbam);
	}
}

	@lib/fgets.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

11 *
	$fg\x91s
(*
\xa1r
, 
n
,
FILE
 *
f\x9\x93
) {

12 
ch
;

13 *
\xb1r
 =
\xa1r
;

14 --
n
 > 0 && (
ch
 =
	`g\x91c
(
f\x9\x93
)\xe8!\xf0
STDIO_EOF
) {

15 *
\xb1r
++ =
ch
;

16 i\xe0(
ch
 == '\n')

19 i\xe0(
ch
 =\xf0
STDIO_EOF
 &&
\xb1r
 =\xf0
\xa1r
)

20 
nuαr
;

21 *
\xb1r
 = '\0';

22 
\xa1r
;

23
	}
}

	@lib/fopen.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

3 
	~<f\x\xe7\x8e.h
>

5 
	#PMODE
 0644

	)

15
FILE
 *
	$fݒ
(cڡ *
\xc7me
, cڡ *
mode
) {

16 
i
;

17
FILE
 *
\xe5
;

18 
fd
;

19 
\xe6ags
 = 0;

22 
i
 = 0;
_io_\x8fb\xcb
[i] != 0; i++) {

23 i\xe0(
i
 >\xf0
NFILES
)

24 
NULL
;

28 *
mode
) {

31
\xe6ags
 |\xf0
WRITEMODE
;

32
fd
 =
	`\xfc\x97t
(
\xc7me
,
PMODE
);

33 i\xe0(
fd
 < 0)

34 
NULL
;

39
\xe6ags
 |\xf0
WRITEMODE
;

40
fd
 =
	`ݒ
(
\xc7me
, 1);

41 i\xe0(
fd
 < 0)

42 
NULL
;

43
	`l\xa3ek
(
fd
, 0L, 2);

48
\xe6ags
 |\xf0
READMODE
;

49
fd
 =
	`ݒ
(
\xc7me
, 0);

50 i\xe0(
fd
 < 0)

51 
NULL
;

56 
NULL
;

60
\xe5
 = (
FILE
 *)
	`\xa7\xe3_m\x\xabloc
((FILE));

63
\xe5
->
_cou\xc1
 = 0;

64
\xe5
->
_fd
 =
fd
;

65
\xe5
->
_\xe6ags
 =
\xe6ags
;

66
\xe5
->
_buf
 =
\xa1\xa9ic_\xff\xa1
<*>(
	`\xa7\xe3_m\x\xabloc
(
BUFSIZ
));

67
\xe5
->
_\xe6ags
 |\xf0
IOMYBUF
;

69
\xe5
->
_\xb1r
 = fp->
_buf
;

70
_io_\x8fb\xcb
[
i
] =
\xe5
;

71 
\xe5
;

72
	}
}

	@lib/fork.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~<sys/ty\xb3s.h
>

5
pid_t

	$f\xdck
() {

9 
\xa1\xa9ic_\xff\xa1
<
pid_t
>(
	`\xff\x\xfbm1
(
MM
,
FORK
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR));

10
	}
}

	@lib/fprintf.cpp

2 
	~<c\xa1d\xacg
>

3 
	~<ve\xf9\xdc
>

4 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

6 "C" 
v\xa2\xb4\x9\xa9f
(*,
\xa1d
::
size_t
, cڡ *,
va_li\xa1
);

16 
	$\xe5r\x9\xa9f
(
FILE
 *
f\x9\x93
, cڡ *
fmt
, ...) {

18
va_li\xa1

\xacgs
;

19
	`va_\xa1\xa\xf9
(
\xacgs
,
fmt
);

22
va_li\xa1

\xacgs_c\xddy
;

23
	`va_c\xddy
(
\xacgs_c\xddy
,
\xacgs
);

24 
cou\xc1
 =
	`v\xa2\xb4\x9\xa9f
(
nuαr
, 0,
fmt
,
\xacgs_c\xddy
);

25
	`va_\x92d
(
\xacgs_c\xddy
);

26 i\xe0(
cou\xc1
 < 0) {

27
	`va_\x92d
(
\xacgs
);

32
\xa1d
::
ve\xf9\xdc
<>
	`buf\xe3r
(
\xa1\xa9ic_\xff\xa1
<
size_t
>(
cou\xc1
) + 1);

33
	`v\xa2\xb4\x9\xa9f
(
buf\xe3r
.
	`d\xa9a
(), buf\xe3r.
	`size
(),
fmt
,
\xacgs
);

34
	`va_\x92d
(
\xacgs
);

37 
i
 = 0; i <
cou\xc1
; ++i)

38
	`putc
(
buf\xe3r
[
i
],
f\x9\x93
);

41 i\xe0(
	`\x8b\xa1\xe6ag
(
f\x9\x93
,
PERPRINTF
))

42
	`f\xe6ush
(
f\x9\x93
);

44 
cou\xc1
;

45
	}
}

53 
	$\xb4\x9\xa9f
(cڡ *
fmt
, ...) {

54
va_li\xa1

\xacgs
;

55
	`va_\xa1\xa\xf9
(
\xacgs
,
fmt
);

57
va_li\xa1

\xacgs_c\xddy
;

58
	`va_c\xddy
(
\xacgs_c\xddy
,
\xacgs
);

59 
cou\xc1
 =
	`v\xa2\xb4\x9\xa9f
(
nuαr
, 0,
fmt
,
\xacgs_c\xddy
);

60
	`va_\x92d
(
\xacgs_c\xddy
);

61 i\xe0(
cou\xc1
 < 0) {

62
	`va_\x92d
(
\xacgs
);

66
\xa1d
::
ve\xf9\xdc
<>
	`buf\xe3r
(
\xa1\xa9ic_\xff\xa1
<
size_t
>(
cou\xc1
) + 1);

67
	`v\xa2\xb4\x9\xa9f
(
buf\xe3r
.
	`d\xa9a
(), buf\xe3r.
	`size
(),
fmt
,
\xacgs
);

68
	`va_\x92d
(
\xacgs
);

70 
i
 = 0; i <
cou\xc1
; ++i)

71
	`putc
(
buf\xe3r
[
i
],
\xa1dout
);

73 i\xe0(
	`\x8b\xa1\xe6ag
(
\xa1dout
,
PERPRINTF
))

74
	`f\xe6ush
(
\xa1dout
);

76 
cou\xc1
;

77
	}
}

	@lib/fputs.cpp

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

12 
	$\xe5uts
(cڡ *
s
,
FILE
 *
f\x9\x93
) {

13 *
s
 != '\0') {

14
	`putc
(*
s
++,
f\x9\x93
);

17
	}
}

	@lib/fread.cpp

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

14
size_t

	$\xe4\x97d
(*
\xb1r
,
size_t

size
, size_\x88
cou\xc1
,
FILE
 *
f\x9\x93
) {

15 aut\xd8*
by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<*>(
\xb1r
);

16
size_t

tٮ
 =
size
 *
cou\xc1
;

17
size_t

\xbbad_by\x8bs
 = 0;

18 
\xbbad_by\x8bs
 <
tٮ
) {

19 
c
 =
	`g\x91c
(
f\x9\x93
);

20 i\xe0(
c
 =\xf0
STDIO_EOF
)

22
by\x8bs
[
\xbbad_by\x8bs
++] =
\xa1\xa9ic_\xff\xa1
<>(
c
);

24 
\xbbad_by\x8bs
 /
size
;

25
	}
}

	@lib/freopen.cpp

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

6
FILE
 *
fݒ
(cڡ *
\xc7me
, cڡ *
mode
);

7 
f\x\xe3o\xa3
(
FILE
 *
\xe5
);

10
FILE
 *
	$\xe4eݒ
(cڡ *
\xc7me
, cڡ *
mode
,
FILE
 *
\xa1\xbbam
) {

12 i\xe0(
	`f\x\xe3o\xa3
(
\xa1\xbbam
) != 0) {

13 
nuαr
;

17 
	`fݒ
(
\xc7me
,
mode
);

18
	}
}

	@lib/fseek.cpp

2 
	~<uni\xa1d.h
>

3 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

7 
	$f\xa3ek
(
FILE
 *
i\xdd
, 
off\xa3t
, 
wh\x94e
) {

8
i\xdd
->
_\xe6ags
 &\xf0~(
_EOF
 |
_ERR
);

10 
pos
 = 0;

11 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
READMODE
)) {

12 i\xe0(
wh\x94e
 < 2 &&
i\xdd
->
_buf
 && !
	`\x8b\xa1\xe6ag
(i\xdd,
UNBUFF
)) {

13 
cou\xc1
 =
i\xdd
->
_cou\xc1
;

14 
p
 =
off\xa3t
;

16 i\xe0(
wh\x94e
 == 0)

17
p
 +\xf0
cou\xc1
 -
	`l\xa3ek
(
	`f\x9e\x92o
(
i\xdd
), 0L, 1) - 1;

19
off\xa3t
 -\xf0
cou\xc1
;

21 i\xe0(
cou\xc1
 > 0 &&
p
 <\xf0cou\xc1 &&\x85 >\xf0
i\xdd
->
_buf
 - i\xdd->
_\xb1r
) {

22
i\xdd
->
_\xb1r
 +\xf0
\xa1\xa9ic_\xff\xa1
<>(
p
);

23
i\xdd
->
_cou\xc1
 -\xf0
\xa1\xa9ic_\xff\xa1
<>(
p
);

27
pos
 =
	`l\xa3ek
(
	`f\x9e\x92o
(
i\xdd
),
off\xa3t
,
wh\x94e
);

28
i\xdd
->
_cou\xc1
 = 0;

29 } i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
WRITEMODE
)) {

30
	`f\xe6ush
(
i\xdd
);

31
pos
 =
	`l\xa3ek
(
	`f\x9e\x92o
(
i\xdd
),
off\xa3t
,
wh\x94e
);

33  (
pos
 == -1) ? -1 : 0;

34
	}
}

	@lib/fstat.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$f\xa1\xa9
(
fd
, *
buf\xe3r
) {

5 
n
 =
	`\xff\x\xfbm1
(
FS
,
FSTAT
,
fd
, 0, 0,
buf\xe3r
,
NIL_PTR
, NIL_PTR);

6 
n
;

7
	}
}

	@lib/ftell.cpp

2 
	~<uni\xa1d.h
>

3 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

7 
	$\xe1\x96l
(
FILE
 *
i\xdd
) {

8 
adju\xa1
 = 0;

9 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
READMODE
))

10
adju\xa1
 -\xf0
i\xdd
->
_cou\xc1
;

11 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
WRITEMODE
\xe8&& i\xdd->
_buf
 && !\x8b\xa1\xe6ag(i\xdd,
UNBUFF
))

12
adju\xa1
 =
i\xdd
->
_\xb1r
 - i\xdd->
_buf
;

16 
\xbbsu\xc9
 =
	`l\xa3ek
(
	`f\x9e\x92o
(
i\xdd
), 0L, 1);

17 i\xe0(
\xbbsu\xc9
 < 0)

18 
\xbbsu\xc9
;

19
\xbbsu\xc9
 +\xf0
\xa1\xa9ic_\xff\xa1
<>(
adju\xa1
);

20 
\xbbsu\xc9
;

21
	}
}

	@lib/fwrite.cpp

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

14
size_t

	$fwr\x99e
(cڡ *
\xb1r
,
size_t

size
, size_\x88
cou\xc1
,
FILE
 *
f\x9\x93
) {

15 cڡ *
by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<cڡ *>(
\xb1r
);

16
size_t

tٮ
 =
size
 *
cou\xc1
;

17 
size_t

i
 = 0; i <
tٮ
; ++i) {

18 i\xe0(
	`putc
(
by\x8bs
[
i
],
f\x9\x93
\xe8=\xf0
STDIO_EOF
)

19 
i
 /
size
;

21 
cou\xc1
;

22
	}
}

	@lib/getc.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

6 
	$g\x91c
(
FILE
 *
i\xdd
)

8 
ch
;

10 i\xe0\xd0
	`\x8b\xa1\xe6ag
(
i\xdd
, (
_EOF
 |
_ERR
 )))

11  (
EOF
);

13 i\xe0\xd0!
	`\x8b\xa1\xe6ag
(
i\xdd
,
READMODE
) )

14  (
EOF
);

16 i\xe0(--
i\xdd
->
_cou\xc1
 <= 0){

18 i\xe0\xd0
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
) )

19
i\xdd
->
_cou\xc1
 =
	`\xbbad
(i\xdd->
_fd
,&
ch
,1);

21
i\xdd
->
_cou\xc1
 =
	`\xbbad
(i\xdd->
_fd
,i\xdd->
_buf
,
BUFSIZ
);

23 i\xe0(
i\xdd
->
_cou\xc1
 <= 0){

24 i\xe0(
i\xdd
->
_cou\xc1
 == 0)

25
i\xdd
->
_\xe6ags
 |\xf0
_EOF
;

27
i\xdd
->
_\xe6ags
 |\xf0
_ERR
;

29  (
EOF
);

32
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

35 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
))

36  (
ch
 &
CMASK
);

38  (*
i\xdd
->
_\xb1r
++ &
CMASK
);

39
	}
}

	@lib/getegid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
gid

	$g\x91egid
() {

5 
k
 =
	`\xff\x\xfbm1
(
MM
,
GETGID
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 i\xe0(
k
 < 0)

7 
\xa1\xa9ic_\xff\xa1
<
gid
>(
k
);

8 
\xa1\xa9ic_\xff\xa1
<
gid
>(
M
.
	`m2_i1
());

9
	}
}

	@lib/getenv.cpp

2 
	~<c\xa1r\x9ag
>

5 "C" **
\x92v\x9c\xda
;

8 *
	$g\x91\x92v
(cڡ *
\xc7me
) {

9
size_t

\xcbn
 =
\xa1d
::
	`\xa1\xbe\x92
(
\xc7me
);

10 **
\x92v
 =
\x92v\x9c\xda
; *\x92v !\xf0
nuαr
; ++env) {

11 cڡ *
\x92\x8cy
 = *
\x92v
;

12 i\xe0(
\xa1d
::
	`\xa1\xbacmp
(
\x92\x8cy
,
\xc7me
,
\xcbn
) == 0 &&\x83ntry[len] == '=') {

14 
cڡ_\xff\xa1
<*>(
\x92\x8cy
 +
\xcbn
 + 1);

17 
nuαr
;

18
	}
}

	@lib/geteuid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
uid

	$g\x91euid
() {

5 
k
 =
	`\xff\x\xfbm1
(
MM
,
GETUID
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 i\xe0(
k
 < 0)

7 
\xa1\xa9ic_\xff\xa1
<
uid
>(
k
);

8 
\xa1\xa9ic_\xff\xa1
<
uid
>(
M
.
	`m2_i1
());

9
	}
}

	@lib/getgid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
gid

	$g\x91gid
() {

5 
k
 =
	`\xff\x\xfbm1
(
MM
,
GETGID
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 
\xa1\xa9ic_\xff\xa1
<
gid
>(
k
);

7
	}
}

	@lib/getgrent.cpp

7 
	~"../\x9a\x\xe3ude/g\xbd.h\xb5
"

8 
	~<c\xa1dlib
>

9 
	~<c\xa1r\x9ag
>

10 
	~<f\x\xe7\x8e.h
>

11 
	~<uni\xa1d.h
>

14 
	g_gr_f\x9\x93
[] = "/etc/group";

16 
	g_grbuf
[256];

18 
	g_buf\xe3r
[1024];

20 *
	g_\xb2t
;

22 *
	g_buf
;

24 
	g_gfd
 = -1;

26 
	g_buf\x\xe7t
;

28 
group

	gg\xbd
;

31 
	$\xa3tg\xbb\xc1
() {

32 i\xe0(
_gfd
 >= 0)

33
	`l\xa3ek
(
_gfd
, 0L,
SEEK_SET
);

35
_gfd
 =
	`ݒ
(
_gr_f\x9\x93
,
O_RDONLY
);

37
_buf\x\xe7t
 = 0;

38 
_gfd
;

39
	}
}

42 
	$\x92dg\xbb\xc1
() {

43 i\xe0(
_gfd
 >= 0)

44
	`\x\xe3o\xa3
(
_gfd
);

46
_gfd
 = -1;

47
_buf\x\xe7t
 = 0;

48
	}
}

51 
	$g\x91l\x9\xab
() {

52 i\xe0(
_gfd
 < 0 &&
	`\xa3tg\xbb\xc1
() < 0)

55
_buf
 =
_grbuf
;

57 i\xe0(--
_buf\x\xe7t
 <= 0) {

58
_buf\x\xe7t
 =
	`\xbbad
(
_gfd
,
_buf\xe3r
, (_buffer));

59 i\xe0(
_buf\x\xe7t
 <= 0)

61
_\xb2t
 =
_buf\xe3r
;

63 *
_buf
++ = *
_\xb2t
++;

64 } *
_\xb2t
 != '\n');

65
_\xb2t
++;

66
_buf\x\xe7t
--;

67 *
_buf
 = '\0';

68
_buf
 =
_grbuf
;

70
	}
}

74 
	$sk\x9d_\xb3riod
() {

75 *
_buf
 != ':')

76 ++
_buf
;

77 *
_buf
++ = '\0';

78
	}
}

82 
group
 *
	$g\x91g\xbb\xc1
() {

83 i\xe0(
	`g\x91l\x9\xab
() == 0)

84 
nuαr
;

86
g\xbd
.
\xc7me
 =
_buf
;

87
	`sk\x9d_\xb3riod
();

88
g\xbd
.
\xb7sswd
 =
_buf
;

89
	`sk\x9d_\xb3riod
();

90
g\xbd
.
gid
 =
	`\xa9oi
(
_buf
);

91
	`sk\x9d_\xb3riod
();

92  &
g\xbd
;

93
	}
}

97 
group
 *
	$g\x91g\xb\xafm
(*
\xc7me
) {

98 
group
 *
g\xbd_\xb1r
;

100
	`\xa3tg\xbb\xc1
();

101 (
g\xbd_\xb1r
 =
	`g\x91g\xbb\xc1
()\xe8!\xf0
nuαr
) {

102 i\xe0(
\xa1d
::
	`\xa1rcmp
(
g\xbd_\xb1r
->
\xc7me
,\x82ame) == 0)

105
	`\x92dg\xbb\xc1
();

106 
g\xbd_\xb1r
;

107
	}
}

111 
group
 *
	$g\x91grgid
(
gid
) {

112 
group
 *
g\xbd_\xb1r
;

114
	`\xa3tg\xbb\xc1
();

115 (
g\xbd_\xb1r
 =
	`g\x91g\xbb\xc1
()\xe8!\xf0
nuαr
) {

116 i\xe0(
g\xbd_\xb1r
->
gid
 == gid)

119
	`\x92dg\xbb\xc1
();

120 
g\xbd_\xb1r
;

121
	}
}

	@lib/getpass.cpp

1 
	~"../\x9a\x\xe3ude/sg\x89y.h\xb5
"

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

3 
	~<uni\xa1d.h
>

5 "C" 
io\xf9l
(
fd
, 
\xbbque\xa1
, ...);

7 
	gpwdbuf
[9];

15 *
	$g\x91\xb7ss
(cڡ *
\xb4om\xb1
) {

16 
i
 = 0;

17 
sg\x89yb

\x89y
;

19
	`\xe5uts
(
\xb4om\xb1
,
\xa1dout
);

20
	`io\xf9l
(0,
TIOCGETP
, &
\x89y
);

21
\x89y
.
sg_\xe6ags
 = 06020;

22
	`io\xf9l
(0,
TIOCSETP
, &
\x89y
);

23
i
 =
	`\xbbad
(0,
pwdbuf
, 9);

24 
pwdbuf
[
i
 - 1] != '\n')

25
	`\xbbad
(0, &
pwdbuf
[
i
 - 1], 1);

26
pwdbuf
[
i
 - 1] = '\0';

27
\x89y
.
sg_\xe6ags
 = 06030;

28
	`io\xf9l
(0,
TIOCSETP
, &
\x89y
);

29
	`\xe5uts
("\n",
\xa1dout
);

30 
pwdbuf
;

31
	}
}

	@lib/getpid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$g\x91pid
(\xe8{ 
	`\xff\x\xfbm1
(
MM
,
GETPID
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/getpwent.cpp

7 
	~<f\x\xe7\x8e.h
>

8 
	~<\xa1dlib.h
>

9 
	~<\xa1r\x9ag.h
>

10 
	~<uni\xa1d.h
>

12 
	~"../\x9a\x\xe3ude/pwd.h\xb5
"

15 
	g_pw_f\x9\x93
[] = "/etc/passwd";

16 
	g_pwbuf
[256];

17 
	g_buf\xe3r
[1024];

18 *
	g_\xb2t
;

19 *
	g_buf
;

20 
	g_pw
 = -1;

21 
	g_buf\x\xe7t
;

22 
\xb7sswd

	gpwd
;

25 
\xa3\x8dw\x92t
();

26 
\x92dpw\x92t
();

27 
g\x91l\x9\xab
();

28 
sk\x9d_\xb3riod
();

29 
\xb7sswd
 *
g\x91pw\x92t
();

30 
\xb7sswd
 *
g\x91pw\xc7m
(cڡ *
\xc7me
);

31 
\xb7sswd
 *
g\x91pwuid
(
uid
);

33 
	$\xa3\x8dw\x92t
() {

34 i\xe0(
_pw
 >= 0)

35
	`l\xa3ek
(
_pw
, 0L, 0);

37
_pw
 =
	`ݒ
(
_pw_f\x9\x93
, 0);

39
_buf\x\xe7t
 = 0;

40 
_pw
;

41
	}
}

43 
	$\x92dpw\x92t
() {

44 i\xe0(
_pw
 >= 0)

45
	`\x\xe3o\xa3
(
_pw
);

47
_pw
 = -1;

48
_buf\x\xe7t
 = 0;

49
	}
}

51 
	$g\x91l\x9\xab
() {

52 i\xe0(
_pw
 < 0 &&
	`\xa3\x8dw\x92t
() < 0)

54
_buf
 =
_pwbuf
;

56 i\xe0(--
_buf\x\xe7t
 <= 0) {

57 i\xe0((
_buf\x\xe7t
 =
	`\xbbad
(
_pw
,
_buf\xe3r
, 1024)) <= 0)

60
_\xb2t
 =
_buf\xe3r
;

62 *
_buf
++ = *
_\xb2t
++;

63 } *
_\xb2t
 != '\n');

64
_\xb2t
++;

65
_buf\x\xe7t
--;

66 *
_buf
 = 0;

67
_buf
 =
_pwbuf
;

69
	}
}

71 
	$sk\x9d_\xb3riod
() {

72 *
_buf
 != ':')

73
_buf
++;

75 *
_buf
++ = '\0';

76
	}
}

78 
\xb7sswd
 *
	$g\x91pw\x92t
() {

79 i\xe0(
	`g\x91l\x9\xab
() == 0)

82
pwd
.
pw_\xc7me
 =
_buf
;

83
	`sk\x9d_\xb3riod
();

84
pwd
.
pw_\xb7sswd
 =
_buf
;

85
	`sk\x9d_\xb3riod
();

86
pwd
.
pw_uid
 =
	`\xa9oi
(
_buf
);

87
	`sk\x9d_\xb3riod
();

88
pwd
.
pw_gid
 =
	`\xa9oi
(
_buf
);

89
	`sk\x9d_\xb3riod
();

90
pwd
.
pw_gecos
 =
_buf
;

91
	`sk\x9d_\xb3riod
();

92
pwd
.
pw_d\x9c
 =
_buf
;

93
	`sk\x9d_\xb3riod
();

94
pwd
.
pw_sh\x96l
 =
_buf
;

96  &
pwd
;

97
	}
}

99 
\xb7sswd
 *
	$g\x91pw\xc7m
(cڡ *
\xc7me
) {

100 
\xb7sswd
 *
pwd
;

102
	`\xa3\x8dw\x92t
();

103 (
pwd
 =
	`g\x91pw\x92t
()\xe8!\xf0
NULL
)

104 i\xe0(!
	`\xa1rcmp
(
pwd
->
pw_\xc7me
,
\xc7me
))

106
	`\x92dpw\x92t
();

107 i\xe0(
pwd
 !\xf0
NULL
)

108 
pwd
;

110 
NULL
;

111
	}
}

113 
\xb7sswd
 *
	$g\x91pwuid
(
uid
) {

114 
\xb7sswd
 *
pwd
;

116
	`\xa3\x8dw\x92t
();

117 (
pwd
 =
	`g\x91pw\x92t
()\xe8!\xf0
NULL
)

118 i\xe0(
pwd
->
pw_uid
 =\xf0
uid
)

120
	`\x92dpw\x92t
();

121 i\xe0(
pwd
 !\xf0
NULL
)

122 
pwd
;

124 
NULL
;

125
	}
}

	@lib/gets.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

14 *
	$g\x91s
(*
\xa1r
) {

15 
ch
;

16 *
\xb1r
 =
\xa1r
;

18 (
ch
 =
	`g\x91c
(
\xa1d\x9a
)\xe8!\xf0
STDIO_EOF
 && ch != '\n') {

19 *
\xb1r
++ =
\xa1\xa9ic_\xff\xa1
<>(
ch
);

22 i\xe0(
ch
 =\xf0
STDIO_EOF
 &&
\xb1r
 =\xf0
\xa1r
) {

23 
nuαr
;

26 *
\xb1r
 = '\0';

27 
\xa1r
;

28
	}
}

	@lib/getuid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
uid

	$g\x91uid
() {

5 
k
 =
	`\xff\x\xfbm1
(
MM
,
GETUID
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 
\xa1\xa9ic_\xff\xa1
<
uid
>(
k
);

7
	}
}

	@lib/getutil.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

3 
\x92dbss
;

9
phys_\x\xe3icks

	$g\x91_ba\xa3
(\xe8{  0;
	}
}

15
phys_\x\xe3icks

	$g\x91_size
(\xe8{ 
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
phys_\x\xe3icks
>(&
\x92dbss
);
	}
}

21
phys_\x\xe3icks

	$g\x91_t\xd9_mem
(\xe8{  0;
	}
}

	@lib/head.cpp

2 
	~<\xa1ddef.h
>

4 "C" 
ma\x9a
();

5 
ex\x99
(
\xa1\xa9us
);

6 *
\xa1ack\xb1
;

7 
\x92dbss
;

10 
	gbeg\x8bxt
;

11 
	gbegd\xa9a
;

12 
	gbegbss
;

15 
	gd\xa9a_\xdcg
[] = {0xDADA, 0, 0, 0, 0, 0, 0, 0};

18 *
	gbrksize
 = &
\x92dbss
;

21 
	g\xa5_lim\x99
 = 0;

23 
	$\xa1\xa\xf9
() {

25
__asm__
 volatile("movq _stackpt(%%rip), %%rsp" ::: "rsp");

26
	`ma\x9a
();

30
	}
}

	@lib/index.cpp

1 
	~<c\xa1ddef
>

15 *
	$\x9adex
(*
s
, 
c
) {

17 i\xe0(*
s
 =\xf0
c
) {

18 
s
;

20 } *
s
++ != 0);

21 
nuαr
;

22
	}
}

	@lib/io/src/file_operations.cpp

1 
	~"m\x9aix/io/f\x9\x93_ݔ\xa9i\xdas.h\xb5
"

2 
	~"m\x9aix/io/f\x9\x93_\xa1\xbbam.h\xb5
"

3 
	~"m\x9aix/io/\xa1\x\xafd\xacd_\xa1\xbbams.h\xb5
"

5 
	~<\xac\xbfy
>

6 
	~<c\xa1r\x9ag
>

7 
	~<f\x\xe7\x8e.h
>

8 
	~<\xddtiڮ
>

9 
	~<uni\xa1d.h
>

11
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

19
Resu\xc9
<
S\x8c\x97mP\x8c
>
ݒ_\xa1\xbbam
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
,
O\xb3nMode

mode
,
P\x94missi\xdas

\xb3rms
) {

20
	g\xa1d
::
\xac\xbfy
<, 256>
	gbuf
{};

21 i\xe0(
	g\xb7th
.
size
(\xe8>\xf0
buf
.size()) {

22 
\xa1d
::
u\xc3x\xb3\xf9ed
(\xa1d::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
f\x9\x93_too_\xc\xe4ge
));

24
	g\xa1d
::
mem\xfdy
(
buf
.
d\xa9a
(),
\xb7th
.d\xa9a(),\x85\xa9h.
size
());

25 
	g\xe6ags
 = 0;

26 i\xe0((
	gmode
 &
	gO\xb3nMode
::
\xbbad
\xe8&& (
mode
 &
O\xb3nMode
::
wr\x99e
)) {

27
\xe6ags
 |\xf0
O_RDWR
;

28 } i\xe0(
	gmode
 &
	gO\xb3nMode
::
\xbbad
) {

29
\xe6ags
 |\xf0
O_RDONLY
;

30 } i\xe0(
	gmode
 &
	gO\xb3nMode
::
wr\x99e
) {

31
\xe6ags
 |\xf0
O_WRONLY
;

33 i\xe0(
	gmode
 &
	gO\xb3nMode
::
\xfc\x97\x8b
)

34
\xe6ags
 |\xf0
O_CREAT
;

35 i\xe0(
	gmode
 &
	gO\xb3nMode
::
ex\x\xe3usive
)

36
\xe6ags
 |\xf0
O_EXCL
;

37 i\xe0(
	gmode
 &
	gO\xb3nMode
::
\x8cun\xff\x8b
)

38
\xe6ags
 |\xf0
O_TRUNC
;

39 i\xe0(
	gmode
 &
	gO\xb3nMode
::
\xad\xb3nd
)

40
\xe6ags
 |\xf0
O_APPEND
;

42 
	gfd
 = ::
ݒ
(
buf
.
d\xa9a
(),
\xe6ags
,
\xb3rms
.
mode
);

43 i\xe0(
	gfd
 < 0) {

44 
	g\xa1d
::
u\xc3x\xb3\xf9ed
(
\xa1d
::
\x94r\xdc_code
(
\x94\xbao
, std::
g\x92\x94ic_\xff\x8bg\xdcy
()));

46
bo\xde

	gwr\x99e_ok
 =
\xa1\xa9ic_\xff\xa1
<>(
mode
\xe8& s\x8ftic_\xff\xa1<>(
O\xb3nMode
::
wr\x99e
);

47
S\x8c\x97mP\x8c

	g\xb1r
 =
\xa1d
::
make_unique
<
F\x9\x93S\x8c\x97m
>(
fd
,
	gwr\x99e_ok
);

48 
	gResu\xc9
<
	gS\x8c\x97mP\x8c
>(
	g\xa1d
::
move
(
\xb1r
));

57
	gResu\xc9
<
	gS\x8c\x97mP\x8c
>
\xfc\x97\x8b_\xa1\xbbam
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb7th
,
P\x94missi\xdas

\xb3rms
) {

58 
ݒ_\xa1\xbbam
(
\xb7th
,
O\xb3nMode
::
wr\x99e
 | O\xb3nMode::
\xfc\x97\x8b
 | O\xb3nMode::
\x8cun\xff\x8b
,
\xb3rms
);

	@lib/io/src/file_stream.cpp

1 
	~"m\x9aix/io/f\x9\x93_\xa1\xbbam.h\xb5
"

3 
	~<\xfb\xb\xfao
>

4 
	~<c\xa1r\x9ag
>

5 
	~<ex\xb3\xf9ed
>

6 
	~<f\x\xe7\x8e.h
>

7 
	~<uni\xa1d.h
>

9
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

16
Resu\xc9
<
size_t
>
F\x9\x93S\x8c\x97m
::
\xbbad
(
\xa1d
::
by\x8b
 *
buf\xe3r
, size_\x88
\xcbngth
) {

17
ssize_t

	g\xbbt
 = ::
\xbbad
(
fd_
,
buf\xe3r
,
\xcbngth
);

18 i\xe0(
	g\xbbt
 < 0) {

19 
	g\xa1d
::
u\xc3x\xb3\xf9ed
(
\xa1d
::
\x94r\xdc_code
(
\x94\xbao
, std::
g\x92\x94ic_\xff\x8bg\xdcy
()));

21 
	g\xa1\xa9ic_\xff\xa1
<
	gsize_t
>(
	g\xbbt
);

29
	gResu\xc9
<
	gsize_t
>
	gF\x9\x93S\x8c\x97m
::
wr\x99e
(cڡ
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
) {

30
ssize_t

	g\xbbt
 = ::
wr\x99e
(
fd_
,
buf\xe3r
,
\xcbngth
);

31 i\xe0(
	g\xbbt
 < 0) {

32 
	g\xa1d
::
u\xc3x\xb3\xf9ed
(
\xa1d
::
\x94r\xdc_code
(
\x94\xbao
, std::
g\x92\x94ic_\xff\x8bg\xdcy
()));

34 
	g\xa1\xa9ic_\xff\xa1
<
	gsize_t
>(
	g\xbbt
);

40
	g\xa1d
::
\x94r\xdc_code

F\x9\x93S\x8c\x97m
::
\xfeo\xa3
() {

41 i\xe0(
fd_
 >= 0) {

42 i\xe0(::
\xfeo\xa3
(
fd_
) < 0) {

43 
\xa1d
::
\x94r\xdc_code
(
\x94\xbao
, std::
g\x92\x94ic_\xff\x8bg\xdcy
());

45
	gfd_
 = -1;

	@lib/io/src/memory_stream.cpp

1 
	~"m\x9aix/io/mem\xdcy_\xa1\xbbam.h\xb5
"

3 
	~<c\xa1r\x9ag
>

5
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

12
Resu\xc9
<
size_t
>
Mem\xdcyS\x8c\x97m
::
\xbbad
(
\xa1d
::
by\x8b
 *
buf\xe3r
, size_\x88
\xcbngth
) {

13
size_t

	gava\x9\x97b\xcb
 =
buf\xe3r_
.
size
(\xe8>
pos_
 ? buffer_.size() -\x85os_ : 0;

14
size_t

	gto_\xbbad
 =
\xa1d
::
m\x9a
(
\xcbngth
,
ava\x9\x97b\xcb
);

15 i\xe0(
	gto_\xbbad
 > 0) {

16
	g\xa1d
::
mem\xfdy
(
buf\xe3r
,
buf\xe3r_
.
d\xa9a
(\xe8+
pos_
,
to_\xbbad
);

17
	gpos_
 +\xf0
to_\xbbad
;

19 
	gto_\xbbad
;

27
	gResu\xc9
<
	gsize_t
>
	gMem\xdcyS\x8c\x97m
::
wr\x99e
(cڡ
\xa1d
::
by\x8b
 *
buf\xe3r
,
size_t

\xcbngth
) {

28
size_t

	g\x92d
 =
pos_
 +
\xcbngth
;

29 i\xe0(
	g\x92d
 >
	gbuf\xe3r_
.
size
()) {

30
	gbuf\xe3r_
.
\xbbsize
(
\x92d
);

32
	g\xa1d
::
mem\xfdy
(
buf\xe3r_
.
d\xa9a
(\xe8+
pos_
,
buf\xe3r
,
\xcbngth
);

33
	gpos_
 +\xf0
\xcbngth
;

34 
	g\xcbngth
;

40 
	gMem\xdcyS\x8c\x97m
::
\xa3ek
(
size_t

pos
\xe8{
pos_
 =
\xa1d
::
m\x9a
\xd5os,
buf\xe3r_
.
size
()); }

	@lib/io/src/standard_streams.cpp

1 
	~"m\x9aix/io/\xa1\x\xafd\xacd_\xa1\xbbams.h\xb5
"

2 
	~"m\x9aix/io/f\x9\x93_\xa1\xbbam.h\xb5
"

4 
	~<uni\xa1d.h
>

6
\xc7me\xa5a\xfb

	gm\x9aix
::
io
 {

9 
F\x9\x93S\x8c\x97m

\xa1d\x9a_\xa1\xbbam
{0,
	g\xe7l\xa3
};

11 
F\x9\x93S\x8c\x97m

	g\xa1dout_\xa1\xbbam
{1,
	g\x8cue
};

13 
F\x9\x93S\x8c\x97m

	g\xa1d\x94r_\xa1\xbbam
{2,
	g\x8cue
};

16
	gS\x8c\x97m
 &
\xa1d\x9a
(\xe8{ 
	g\xa1d\x9a_\xa1\xbbam
; }

18
	gS\x8c\x97m
 &
\xa1dout
(\xe8{ 
	g\xa1dout_\xa1\xbbam
; }

20
	gS\x8c\x97m
 &
\xa1d\x94r
(\xe8{ 
	g\xa1d\x94r_\xa1\xbbam
; }

	@lib/io/src/stdio_compat.cpp

1 
	~<c\xa1d\xacg
>

2 
	~<c\xa1dio
>

3 
	~<\xfb\xb\xfao
>

4 
	~<ex\xb3\xf9ed
>

5 
	~<mu\x8bx
>

6 
	~<\xa5\x\xaf
>

7 
	~<sy\xa1em_\x94r\xdc
>

8 
	~<un\xdcd\x94ed_m\xad
>

9 
	~"m\x9aix/io/f\x9\x93_\xa1\xbbam.h\xb5
"

10 
	~"m\x9aix/io/\xa1\x\xafd\xacd_\xa1\xbbams.h\xb5
"

11 
	~"m\x9aix/io/f\x9\x93_ݔ\xa9i\xdas.h\xb5
"

12 
	~"m\x9aix/io/\xa1dio_com\xb7t.h\xb5
"

14
\xc7me\xa5a\xfb

	gm\x9aix
::
io
::
com\xb7t
 {

17 
\xa1d
::
un\xdcd\x94ed_m\xad
<
FILE
 *,
	gS\x8c\x97m
 *>
	gf\x9\x93_to_\xa1\xbbam_m\xad
;

19 
	g\xa1d
::
mu\x8bx

m\xad_mu\x8bx
;

25 
\xbbgi\xa1\x94_f\x9ee_\xa1\xbbam
(
FILE
 *
f\x9\x93
,
S\x8c\x97m
 *
\xa1\xbbam
) {

26
	g\xa1d
::
lock_gu\xacd
<
\xa1d
::
mu\x8bx
>
lock
(
m\xad_mu\x8bx
);

27
	gf\x9\x93_to_\xa1\xbbam_m\xad
[
f\x9\x93
] =
\xa1\xbbam
;

34
S\x8c\x97m
 *
g\x91_\xa1\xbbam
(
FILE
 *
f\x9\x93
) {

35 i\xe0(
	gf\x9\x93
 =\xf0
\xa1d\x9a
)

36  &
m\x9aix
::
io
::
\xa1d\x9a
();

37 i\xe0(
	gf\x9\x93
 =\xf0
\xa1dout
)

38  &
m\x9aix
::
io
::
\xa1dout
();

39 i\xe0(
	gf\x9\x93
 =\xf0
\xa1d\x94r
)

40  &
m\x9aix
::
io
::
\xa1d\x94r
();

41
	g\xa1d
::
lock_gu\xacd
<
\xa1d
::
mu\x8bx
>
lock
(
m\xad_mu\x8bx
);

42 aut\xd8
	g\x99
 =
f\x9\x93_to_\xa1\xbbam_m\xad
.
f\x9ad
(
f\x9\x93
);

43 
	g\x99
 !\xf0
f\x9\x93_to_\xa1\xbbam_m\xad
.
\x92d
(\xe8?
\x99
->
\xa3c\xdad
 :
nuαr
;

53
FILE
 *
fݒ_com\xb7t
(cڡ *
\xb7th
, cڡ *
mode
) {

54
bo\xde

\xbbad
 =
\xe7l\xa3
,
wr\x99e
 = f\xae\xa3,
\xad\xb3nd
 = false;

55
O\xb3nMode

ݒ_mode
{};

56 cڡ *
p
 =
mode
; *p; ++p) {

57 *
p
) {

59
\xbbad
 =
\x8cue
;

62
wr\x99e
 =
\x8cue
;

63
ݒ_mode
 = o\xb3n_mod\x90|
O\xb3nMode
::
\xfc\x97\x8b
 | O\xb3nMode::
\x8cun\xff\x8b
;

66
\xad\xb3nd
 =
\x8cue
;

67
wr\x99e
 =
\x8cue
;

68
ݒ_mode
 = o\xb3n_mod\x90|
O\xb3nMode
::
\xad\xb3nd
;

71
\xbbad
 =
wr\x99e
 =
\x8cue
;

77 i\xe0(
\xbbad
 &&
wr\x99e
) {

78
ݒ_mode
 = o\xb3n_mod\x90|
O\xb3nMode
::
\xbbad
 | O\xb3nMode::
wr\x99e
;

79 } i\xe0(
\xbbad
) {

80
ݒ_mode
 = o\xb3n_mod\x90|
O\xb3nMode
::
\xbbad
;

81 } i\xe0(
wr\x99e
) {

82
ݒ_mode
 = o\xb3n_mod\x90|
O\xb3nMode
::
wr\x99e
;

84 aut\xd8
\xbbsu\xc9
 =
ݒ_\xa1\xbbam
(
\xb7th
,
ݒ_mode
);

85 i\xe0(!
\xbbsu\xc9
)

86 
nuαr
;

87
FILE
 *
\xe7ke
 =
\xc3w
 FILE{};

88
\xe7ke
->
_fd
 = (*
\xbbsu\xc9
)->
des\xfc\x9dt\xdc
();

89
\xe7ke
->
_\xe6ags
 = (
\xbbad
 ?
READMODE
 : 0\xe8| (
wr\x99e
 ?
WRITEMODE
 : 0);

90
\xbbgi\xa1\x94_f\x9ee_\xa1\xbbam
(
\xe7ke
,
\xbbsu\xc9
->
g\x91
());

91 
\xe7ke
;

98 
f\x\xe3o\xa3_com\xb7t
(
FILE
 *
\xe5
) {

99 aut\xd8*
\xa1\xbbam
 =
g\x91_\xa1\xbbam
(
\xe5
);

100 i\xe0(!
\xa1\xbbam
)

101 
STDIO_EOF
;

102 aut\xd8
\x94r
 =
\xa1\xbbam
->
\xfeo\xa3
();

104
\xa1d
::
lock_gu\xacd
<\xa1d::
mu\x8bx
>
lock
(
m\xad_mu\x8bx
);

105
f\x9\x93_to_\xa1\xbbam_m\xad
.
\x94a\xa3
(
\xe5
);

107 i\xe0(
\xe5
 !\xf0
\xa1d\x9a
 && f\xb0!\xf0
\xa1dout
 && f\xb0!\xf0
\xa1d\x94r
) {

108
d\x96\x91e

\xe5
;

110 
\x94r
 ?
STDIO_EOF
 : 0;

120
size_t

\xe4\x97d_com\xb7t
(*
\xb1r
, size_\x88
size
, size_\x88
nmemb
,
FILE
 *
\xe5
) {

121 aut\xd8*
\xa1\xbbam
 =
g\x91_\xa1\xbbam
(
\xe5
);

122 i\xe0(!
\xa1\xbbam
)

124
size_t

by\x8bs
 =
size
 *
nmemb
;

125 aut\xd8
\xbbsu\xc9
 =
\xa1\xbbam
->
\xbbad
(
\xa1d
::
\xa5\xaa
<\xa1d::
by\x8b
>(
\xa1\xa9ic_\xff\xa1
<\xa1d::by\x8b *>(
\xb1r
),
by\x8bs
));

126 i\xe0(
\xbbsu\xc9
.
has_v\x\xabue
()) {

127 
\xbbsu\xc9
.
v\x\xabue
(\xe8/
size
;

129
\x94\xbao
 =
\xbbsu\xc9
.
\x94r\xdc
().
v\x\xabue
();

141
size_t

fwr\x99e_com\xb7t
(cڡ *
\xb1r
, size_\x88
size
, size_\x88
nmemb
,
FILE
 *
\xe5
) {

142 aut\xd8*
\xa1\xbbam
 =
g\x91_\xa1\xbbam
(
\xe5
);

143 i\xe0(!
\xa1\xbbam
)

145
size_t

by\x8bs
 =
size
 *
nmemb
;

146 aut\xd8
\xbbsu\xc9
 =

147
\xa1\xbbam
->
wr\x99e
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>(
\xa1\xa9ic_\xff\xa1
<cڡ std::by\x8b *>(
\xb1r
),
by\x8bs
));

148 i\xe0(
\xbbsu\xc9
.
has_v\x\xabue
()) {

149 
\xbbsu\xc9
.
v\x\xabue
(\xe8/
size
;

151
\x94\xbao
 =
\xbbsu\xc9
.
\x94r\xdc
().
v\x\xabue
();

161 
\xe5r\x9atf_com\xb7t
(
FILE
 *
\xe5
, cڡ *
f\xdcm\xa9
, ...) {

162 aut\xd8*
\xa1\xbbam
 =
g\x91_\xa1\xbbam
(
\xe5
);

163 i\xe0(!
\xa1\xbbam
)

165
va_li\xa1

\xacgs
;

166
va_\xa1\xa\xf9
(
\xacgs
,
f\xdcm\xa9
);

168 
buf\xe3r
[256];

169 
n
 =
v\xa2\xb4\x9\xa9f
(
buf\xe3r
, (buf\xe3r),
f\xdcm\xa9
,
\xacgs
);

170
va_\x92d
(
\xacgs
);

171 i\xe0(
n
 < 0)

173 aut\xd8
wr_\xbbsu\xc9
 =
\xa1\xbbam
->
wr\x99e
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>(

174
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
by\x8b
 *>(
buf\xe3r
),
\xa1\xa9ic_\xff\xa1
<
size_t
>(
n
)));

175 i\xe0(
wr_\xbbsu\xc9
.
has_v\x\xabue
()) {

176 
n
;

178
\x94\xbao
 =
wr_\xbbsu\xc9
.
\x94r\xdc
().
v\x\xabue
();

	@lib/ioctl.cpp

1 
	~"../h/com.h\xb5
"

2 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

3 
	~"../\x9a\x\xe3ude/sg\x89y.h\xb5
"

6 
io\xf9l
(

7 
fd
, 
\xbbque\xa1
,

9 
sg\x89yb
 *
\xacgp
;

10 
tch\xacs
 *
\xacgt
;

11 }
u
)

14 
	gn
;

15 
	g\x94a\xa3
,
	gk\x9\x96
,
	g\x9a\x8c
,
	gqu\x99
,
	gx\xda
,
	gxoff
,
	geof
,
	gbrk
;

17
\x89y_\xbbque\xa1
(
M
\xe8\xf0
\xbbque\xa1
;

18
\x89y_l\x9ae
(
M
\xe8\xf0
fd
;

20 
	g\xbbque\xa1
) {

21 
	gTIOCSETP
:

22
\x94a\xa3
 =
u
.
\xacgp
->
sg_\x94a\xa3
 & 0377;

23
	gk\x9\x96
 =
u
.
\xacgp
->
sg_k\x9\x96
 & 0377;

24
\x89y_\xa5ek
(
M
\xe8\xf0(
\x94a\xa3
 << 8\xe8|
k\x9\x96
;

25
\x89y_\xe6ags
(
M
\xe8\xf0
u
.
\xacgp
->
sg_\xe6ags
;

26
	gn
 =
\xff\xcex
(
FS
,
IOCTL
);

27  (
	gn
);

29 
	gTIOCSETC
:

30
\x9a\x8c
 =
u
.
\xacgt
->
t_\x9a\x8cc
 & 0377;

31
	gqu\x99
 =
u
.
\xacgt
->
t_qu\x99c
 & 0377;

32
	gx\xda
 =
u
.
\xacgt
->
t_\xa1\xa\xf9c
 & 0377;

33
	gxoff
 =
u
.
\xacgt
->
t_\xa1\xddc
 & 0377;

34
	geof
 =
u
.
\xacgt
->
t_eofc
 & 0377;

35
	gbrk
 =
u
.
\xacgt
->
t_brkc
 & 0377;

36
\x89y_\xa5ek
(
M
\xe8\xf0(
\x9a\x8c
 << 24\xe8| (
qu\x99
 << 16\xe8| (
x\xda
 << 8\xe8| (
xoff
 << 0);

37
\x89y_\xe6ags
(
M
\xe8\xf0(
eof
 << 8\xe8| (
brk
 << 0);

38
	gn
 =
\xff\xcex
(
FS
,
IOCTL
);

39  (
	gn
);

41 
	gTIOCGETP
:

42
n
 =
\xff\xcex
(
FS
,
IOCTL
);

43
	gu
.
	g\xacgp
->
	gsg_\x94a\xa3
 = (
\x89y_\xa5ek
(
M
) >> 8) & 0377;

44
	gu
.
	g\xacgp
->
	gsg_k\x9\x96
 = (
\x89y_\xa5ek
(
M
) >> 0) & 0377;

45
	gu
.
	g\xacgp
->
	gsg_\xe6ags
 =
\x89y_\xe6ags
(
M
);

46  (
	gn
);

48 
	gTIOCGETC
:

49
n
 =
\xff\xcex
(
FS
,
IOCTL
);

50
	gu
.
	g\xacgt
->
	gt_\x9a\x8cc
 = (
\x89y_\xa5ek
(
M
) >> 24) & 0377;

51
	gu
.
	g\xacgt
->
	gt_qu\x99c
 = (
\x89y_\xa5ek
(
M
) >> 16) & 0377;

52
	gu
.
	g\xacgt
->
	gt_\xa1\xa\xf9c
 = (
\x89y_\xa5ek
(
M
) >> 8) & 0377;

53
	gu
.
	g\xacgt
->
	gt_\xa1\xddc
 = (
\x89y_\xa5ek
(
M
) >> 0) & 0377;

54
	gu
.
	g\xacgt
->
	gt_eofc
 = (
\x89y_\xe6ags
(
M
) >> 8) & 0377;

55
	gu
.
	g\xacgt
->
	gt_brkc
 = (
\x89y_\xe6ags
(
M
) >> 8) & 0377;

56  (
	gn
);

59
n
 = -1;

60
	g\x94\xbao
 = -
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
EINVAL
);

61  (
	gn
);

	@lib/isatty.cpp

1 
	~"../\x9a\x\xe3ude/\xa1\xa9.h
"

3 
	$i\xa7\x89y
(
fd
)

4 
fd
;

6 
\xa1\xa9

s
;

8
	`f\xa1\xa9
(
fd
, &
s
);

9 i\xe0\xd0(
s
.
\xa1_mode
&
S_IFMT
\xe8=\xf0
S_IFCHR
)

13
	}
}

	@lib/itoa.cpp

3 
	g\xc3xt
;

4 
	gqbuf
[8];

6 *
	$\x99\xdf
(
n
)

7 
n
;

9 
r
,
k
;

10 
\xe6ag
 = 0;

12
\xc3xt
 = 0;

13 i\xe0(
n
 < 0) {

14
qbuf
[
\xc3xt
++] = '-';

15
n
 = -n;

17 i\xe0(
n
 == 0) {

18
qbuf
[
\xc3xt
++] = '0';

20
k
 = 10000;

21 
k
 > 0) {

22
r
 =
n
/
k
;

23 i\xe0(
\xe6ag
 ||
r
 > 0) {

24
qbuf
[
\xc3xt
++] = '0' +
r
;

25
\xe6ag
 = 1;

27
n
 -\xf0
r
 *
k
;

28
k
 = k/10;

31
qbuf
[
\xc3xt
] = 0;

32 (
qbuf
);

33
	}
}

	@lib/kill.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$k\x9\x96
(
\xb4oc
, 
sig
\xe8{ 
	`\xff\x\xfbm1
(
MM
,
KILL
,\x85roc, sig, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/link.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$l\x9ak
(cڡ *
\xc7me
, cڡ *
\xc7me2
) {

5 
	`\xff\x\xfbm1
(
FS
,
LINK
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)),\x86\x92(cڡ_\xff\xa1<*>(
\xc7me2
)), 0,

6
cڡ_\xff\xa1
<*>(
\xc7me
), cڡ_\xff\xa1<*>(
\xc7me2
),
NIL_PTR
);

7
	}
}

	@lib/lseek.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$l\xa3ek
(
fd
, 
off\xa3t
, 
wh\x92\xfb
) {

5 
k
;

6
M
.
	`m2_i1
(\xe8\xf0
fd
;

7
M
.
	`m2_l1
(\xe8\xf0
off\xa3t
;

8
M
.
	`m2_i2
(\xe8\xf0
wh\x92\xfb
;

9
k
 =
	`\xff\x\xfbx
(
FS
,
LSEEK
);

10 i\xe0(
k
 !\xf0
OK
)

11  (()
k
);

12  (
M
.
	`m2_l1
());

13
	}
}

	@lib/malloc.cpp

2 
	#CLICK_SIZE
 16

	)

4
us\x9ag

	gv\x9c_by\x8bs
 = ;

5
bc\xddy
();

7 
	#ALIGN
(
x
,
a
\xe8(((x\xe8+ (\xa8- 1)\xe8& ~\xd7 - 1))

	)

8 
	#BUSY
 1

	)

9 
	#NEXT
(
p
\xe8(*(**)\xd5))

	)

11 *
sbrk
();

12 *
	gb\xd9tom
, *
	gt\xdd
;

15 
	$grow
(
\xcbn
) {

16 *
p
;

18
p
 = (*)
	`ALIGN
((
v\x9c_by\x8bs
)
t\xdd
 + (*\xe8+
\xcbn
,
CLICK_SIZE
) - (*);

19 i\xe0(
p
 <
t\xdd
 ||
	`brk
(p) < 0)

21
t\xdd
 =
p
;

22 
p
 =
b\xd9tom
;
	`NEXT
\xd5\xe8!\xf00;\x85 = (*)(*(
v\x9c_by\x8bs
 *\xed & ~
BUSY
))

24
	`NEXT
(
p
\xe8\xf0
t\xdd
;

25
	`NEXT
(
t\xdd
) = 0;

27
	}
}

30 *
	$m\x\xabloc
(
size
) {

31 *
p
, *
\xc3xt
, *
\xc3w
;

32 
\xcbn
 =
	`ALIGN
(
size
, (*)) + (*);

34 i\xe0((
p
 =
b\xd9tom
) == 0) {

35
t\xdd
 =
b\xd9tom
 =
p
 =
	`sbrk
((*));

36
	`NEXT
(
t\xdd
) = 0;

38 (
\xc3xt
 =
	`NEXT
(
p
)) != 0)

39 i\xe0((
v\x9c_by\x8bs
)
\xc3xt
 &
BUSY
)

40
p
 = (*)((
v\x9c_by\x8bs
)
\xc3xt
 & ~
BUSY
);

42 (
\xc3w
 =
	`NEXT
(
\xc3xt
)\xe8!\xf00 && !((
v\x9c_by\x8bs
\xe8\xc3w &
BUSY
))

43
\xc3xt
 =
\xc3w
;

44 i\xe0(
\xc3xt
 -
p
 >\xf0
\xcbn
) {

45 i\xe0((
\xc3w
 =
p
 +
\xcbn
\xe8<
\xc3xt
)

46
	`NEXT
(
\xc3w
\xe8\xf0
\xc3xt
;

47
	`NEXT
(
p
\xe8\xf0(*)((
v\x9c_by\x8bs
\xe8
\xc3w
 |
BUSY
);

48 
p
 + (*);

50
p
 =
\xc3xt
;

52 
	`grow
(
\xcbn
\xe8?
	`m\x\xabloc
(
size
) : 0;

53
	}
}

56 *
	$\xbb\x\xabloc
(*
\xded
, 
size
) {

57 *
p
 =
\xded
 - (*), *
\xc3xt
, *
\xc3w
;

58 
\xcbn
 =
	`ALIGN
(
size
, (*)\xe8+ (*),
n
;

60
\xc3xt
 = (*)(*(
v\x9c_by\x8bs
 *)
p
 & ~
BUSY
);

61
n
 =
\xc3xt
 -
\xded
;

62 (
\xc3w
 =
	`NEXT
(
\xc3xt
)\xe8!\xf00 && !((
v\x9c_by\x8bs
\xe8\xc3w &
BUSY
))

63
\xc3xt
 =
\xc3w
;

64 i\xe0(
\xc3xt
 -
p
 >\xf0
\xcbn
) {

65 i\xe0((
\xc3w
 =
p
 +
\xcbn
\xe8<
\xc3xt
) {

66
	`NEXT
(
\xc3w
\xe8\xf0
\xc3xt
;

67
	`NEXT
(
p
\xe8\xf0(*)((
v\x9c_by\x8bs
\xe8
\xc3w
 |
BUSY
);

69
	`NEXT
(
p
\xe8\xf0(*)((
v\x9c_by\x8bs
)
\xc3xt
 |
BUSY
);

70 
\xded
;

72 i\xe0((
\xc3w
 =
	`m\x\xabloc
(
size
)) == 0)

74
	`bc\xddy
(
\xded
,
\xc3w
,
n
);

75 *(
v\x9c_by\x8bs
 *)
p
 &\xf0~
BUSY
;

76 
\xc3w
;

77
	}
}

80 
	$\xe4\x93
(*
p
\xe8{ *(
v\x9c_by\x8bs
 *)\xd5 - (*)\xe8&\xf0~
BUSY
;
	}
}

	@lib/message.cpp

1 
	~"../h/cڡ.h\xb5
"

2 
	~"../h/ty\xb3.h\xb5
"

4
mes\xa7ge

	gM
;

	@lib/minix/crtso.cpp

2 
	~<\xa1ddef.h
>

4 
_ma\x9a
(
\xacgc
, **
\xacgv
, **
\x92vp
);

5 
_ex\x99
(
\xa1\xa9us
);

7 **
	g_\x92v\x9c\xda
;

9 
	$_\xa1\xa\xf9
() {

10 **
\xa1ack
;

11 
\xacgc
;

12 **
\xacgv
;

13 **
\x92vp
;

15
__asm__
 vީ\x9ee("mov %%r\xa5, %0" : "\xf4"(
\xa1ack
));

16
\xacgc
 = ()()
\xa1ack
[0];

17
\xacgv
 = &
\xa1ack
[1];

18
\x92vp
 = &
\xacgv
[
\xacgc
 + 1];

19
_\x92v\x9c\xda
 =
\x92vp
;

21
	`_ex\x99
(
	`_ma\x9a
(
\xacgc
,
\xacgv
,
\x92vp
));

22
	}
}

	@lib/minix/end.cpp

2 
	g\x92d\x8bxt
;

3 
	g\x92dd\xa9a
;

4 
	g\x92dbss
;

5 
	g_ed\xa9a
;

6 
	g_\x92d
;

	@lib/minix/head.cpp

2 
	~<\xa1ddef.h
>

4 
_ma\x9a
();

5 *
_\xa1ack\xb1
;

6 
\x92dbss
;

8 
	gbeg\x8bxt
;

9 
	gbegd\xa9a
;

10 
	gbegbss
;

12 
	g_d\xa9a_\xdcg
[] = {0xDADA, 0, 0, 0, 0, 0, 0, 0};

14 *
	gbrksize
 = &
\x92dbss
;

15 
	g\xa5_lim\x99
 = 0;

17 
	$_\xa1\xa\xf9
() {

18
__asm__
 volatile("movq _stackpt(%%rip), %%rsp" ::: "rsp");

19
	`_ma\x9a
();

22
	}
}

	@lib/minix/setjmp.cpp

1 
	~"../../\x9a\x\xe3ude/\xa3tjmp.h\xb5
"

2 
	~"../../\x9a\x\xe3ude/lib.h
"

3 
	~<c\xa3tjmp
>

10 
	$_\xa3tjmp
(
jmp_buf

\x92v
\xe8{ 
\xa1d
::
	`\xa3tjmp
\xd3nv);
	}
}

13 
	$_l\xdagjmp
(
jmp_buf

\x92v
, 
v\x\xab
) {

14 i\xe0(
v\x\xab
 == 0) {

15
v\x\xab
 = 1;

17
\xa1d
::
	`l\xdagjmp
(
\x92v
,
v\x\xab
);

18
	}
}

	@lib/mknod.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$mknod
(cڡ *
\xc7me
, 
mode
, 
addr
) {

5 
	`\xff\x\xfbm1
(
FS
,
MKNOD
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)),
mode
,
addr
, const_cast<*>(name),

6
NIL_PTR
, NIL_PTR);

7
	}
}

	@lib/mktemp.cpp

3 *
	$mk\x8bmp
(
\x8bm\xb6\xa9e
)

4 *
\x8bm\xb6\xa9e
;

6 
pid
,
k
;

7 *
p
;

9
pid
 =
	`g\x91pid
();

10
p
 =
\x8bm\xb6\xa9e
;

11 *
p
++) ;

12
p
--;

15 *--
p
 == 'X') {

16 *
p
 = '0' + (
pid
 % 10);

17
pid
 =\x85id/10;

19 (
\x8bm\xb6\xa9e
);

20
	}
}

	@lib/mount.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$mou\xc1
(cڡ *
\xa5ec\x9fl
, cڡ *
\xc7me
, 
rw\xe6ag
) {

5 
	`\xff\x\xfbm1
(
FS
,
MOUNT
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xa5ec\x9fl
)),\x86\x92(cڡ_\xff\xa1<*>(
\xc7me
)),

6
rw\xe6ag
,
cڡ_\xff\xa1
<*>(
\xa5ec\x9fl
), cڡ_\xff\xa1<*>(
\xc7me
),
NIL_PTR
);

7
	}
}

	@lib/open.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$ݒ
(cڡ *
\xc7me
, 
mode
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
OPEN
, mode,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/pause.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\xb7u\xa3
(\xe8{ 
	`\xff\x\xfbm1
(
MM
,
PAUSE
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/perror.cpp

3 
	~"../h/\x94r\xdc.h\xb5
"

4 
	~<uni\xa1d.h
>

7 
\x94\xbao
;

10 
\xa6\x92
(cڡ *
s
);

15 cڡ *
	g\x94r\xdc_mes\xa7ge
[
NERROR
 + 1] = {"Error 0",

92 
	$\xb3\xbc\xdc
(cڡ *
s
) {

93 i\xe0(
\x94\xbao
 < 0 ||\x83\xbcn\xd8>
NERROR
) {

95
	`wr\x99e
(2, "Invalid\x83rrno\n", 14);

97
	`wr\x99e
(2,
s
,
	`\xa6\x92
(s));

98
	`wr\x99e
(2, ": ", 2);

99
	`wr\x99e
(2,
\x94r\xdc_mes\xa7ge
[
\x94\xbao
],
	`\xa6\x92
(error_message[errno]));

100
	`wr\x99e
(2, "\n", 1);

102
	}
}

105 
	$\xa6\x92
(cڡ *
s
) {

106 
k
 = 0;

107 *
s
++)

108
k
++;

109 
k
;

119
	}
};

121
	$\xb3\xbc\xdc
(
s
) *s;

122 i\xe0(
\x94\xbao
 < 0 ||\x83\xbcn\xd8>
NERROR
) {

123
	`wr\x99e
(2, "Invalid\x83rrno\n", 14);

124
	}
} {

125
wr\x99e
(2,
s
,
\xa6\x92
(s));

126
wr\x99e
(2, ": ", 2);

127
wr\x99e
(2,
\x94r\xdc_mes\xa7ge
[
\x94\xbao
],
\xa6\x92
(error_message[errno]));

128
wr\x99e
(2, "\n", 1);

130 
	gk
 = 0;

131 *
	gs
++)

132
	gk
++;

133  (
	gk
);

134 i\xe0(
	g\x94\xbao
 < 0 ||\x83\xbcn\xd8>
	gNERROR
) {

135
wr\x99e
(2, "Invalid\x83rrno\n", 14);

137
wr\x99e
(2,
s
,
\xa6\x92
(s));

138
wr\x99e
(2, ": ", 2);

139
wr\x99e
(2,
\x94r\xdc_mes\xa7ge
[
\x94\xbao
],
\xa6\x92
(error_message[errno]));

140
wr\x99e
(2, "\n", 1);

144 
	$\xa6\x92
(
s
)

145 *
s
;

147 
k
 = 0;

149 *
s
++)

150
k
++;

151  (
k
);

152
	}
}

	@lib/pipe.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$p\x9de
(
f\x9ed
[2]) {

5 
k
 =
	`\xff\x\xfbm1
(
FS
,
PIPE
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 i\xe0(
k
 >= 0) {

7
f\x9ed
[0] =
M
.
	`m1_i1
();

8
f\x9ed
[1] =
M
.
	`m1_i2
();

11  (
k
);

12
	}
}

	@lib/printdat.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

3 
	g__\xa1d\x9a
[
BUFSIZ
];

4 
	g__\xa1dout
[
BUFSIZ
];

6 
_io_buf

	g_\xa1d\x9a
 = {

7 0, 0,
READMODE
 ,
__\xa1d\x9a
, __stdin

10 
_io_buf

	g_\xa1dout
 = {

11 1, 0,
WRITEMODE
 +
PERPRINTF
,
__\xa1dout
, __stdout

14 
_io_buf

	g_\xa1d\x94r
 = {

15 2, 0,
WRITEMODE
 +
UNBUFF
,
NULL
, NULL

18 
_io_buf
 *
	g_io_\x8fb\xcb
[
NFILES
] = {

19 &
_\xa1d\x9a
,

20 &
_\xa1dout
,

21 &
_\xa1d\x94r
,

	@lib/printk.cpp

7 
	#MAXDIGITS
 12

	)

9 
	~"../\x9a\x\xe3ude/sh\xa\xfbd/numb\x94_to_ascii.h\xb5
"

11 
b\x9\xa9\xdfscii
(
num
, 
\xbfdix
, 
a
[
MAXDIGITS
]);

13 
	$\xb4\x9\xa9k
(*
s
, *
\xacgli\xa1
) {

14 
w
,
k
,
r
, *
v\x\xabp
;

15 
u
;

16 
l
, *
\xcd
;

17 
a
[
MAXDIGITS
], *
p
, *
p1
,
c
;

19
v\x\xabp
 = (*)&
\xacgli\xa1
;

20 *
s
 != '\0') {

21 i\xe0(*
s
 != '%') {

22
	`putc
(*
s
++);

26
w
 = 0;

27
s
++;

28 *
s
 >= '0' && *s <= '9') {

29
w
 = 10 * w + (*
s
 - '0');

30
s
++;

33
\xcd
 = (*)
v\x\xabp
;

35 *
s
) {

37
k
 = *
v\x\xabp
++;

38
l
 =
k
;

39
r
 = 10;

42
k
 = *
v\x\xabp
++;

43
u
 =
k
;

44
l
 =
u
;

45
r
 = 8;

48
k
 = *
v\x\xabp
++;

49
u
 =
k
;

50
l
 =
u
;

51
r
 = 16;

54
l
 = *
\xcd
++;

55
r
 = 10;

56
v\x\xabp
 = (*)
\xcd
;

59
l
 = *
\xcd
++;

60
r
 = 8;

61
v\x\xabp
 = (*)
\xcd
;

64
l
 = *
\xcd
++;

65
r
 = 16;

66
v\x\xabp
 = (*)
\xcd
;

69
k
 = *
v\x\xabp
++;

70
	`putc
(
k
);

71
s
++;

74
p
 = (*)*
v\x\xabp
++;

75
p1
 =
p
;

76 (
c
 = *
p
++) != '\0')

77
	`putc
(
c
);

78
s
++;

79 i\xe0((
k
 =
w
 - (
p
 -
p1
 - 1)) > 0)

80 
k
--)

81
	`putc
(' ');

84
	`putc
('%');

85
	`putc
(*
s
++);

89
k
 =
	`b\x9\xa9\xdfscii
(
l
,
r
,
a
);

90 i\xe0((
r
 =
w
 -
k
) > 0)

91 
r
--)

92
	`putc
(' ');

93 
r
 =
k
 - 1;\x84 >= 0;\x84--)

94
	`putc
(
a
[
r
]);

95
s
++;

97
	}
}

99 
	$b\x9\xa9\xdfscii
(
num
, 
\xbfdix
, 
a
[
MAXDIGITS
]) {

100 
	`numb\x94_to_ascii
(
num
,
\xbfdix
,
a
);

101
	}
}

	@lib/prints.cpp

8 
	~<uni\xa1d.h
>

10 
	#TRUNC_SIZE
 128

	)

11 
	gBuf
[
TRUNC_SIZE
], *
	gBu\xe5
;

13 
put
(
c
);

15 
	#OUT
 1

	)

17 
	$\xb4\x9\xa9s
(*
s
, *
\xacgli\xa1
) {

18 
w
;

19 
k
,
r
, *
v\x\xabp
;

20 *
p
, *
p1
,
c
;

22
Bu\xe5
 =
Buf
;

23
v\x\xabp
 = (*)&
\xacgli\xa1
;

24 *
s
 != '\0') {

25 i\xe0(*
s
 != '%') {

26
	`put
(*
s
++);

30
w
 = 0;

31
s
++;

32 *
s
 >= '0' && *s <= '9') {

33
w
 = 10 * w + (*
s
 - '0');

34
s
++;

37 *
s
) {

39
k
 = *
v\x\xabp
++;

40
	`put
(
k
);

41
s
++;

44
p
 = (*)*
v\x\xabp
++;

45
p1
 =
p
;

46 (
c
 = *
p
++) != '\0')

47
	`put
(
c
);

48
s
++;

49 i\xe0((
k
 =
w
 - (
p
 -
p1
 - 1)) > 0)

50 
k
--)

51
	`put
(' ');

54
	`put
('%');

55
	`put
(*
s
++);

59
	`wr\x99e
(
OUT
,
Buf
,
Bu\xe5
 - Buf);

60
	}
}

62 
	$put
(
c
) {

63 i\xe0(
Bu\xe5
 < &
Buf
[
TRUNC_SIZE
])

64 *
Bu\xe5
++ =
c
;

65
	}
}

	@lib/putc.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h
"

4
	$putc
(
ch
,
i\xdd
)

5 
ch
;

6
FILE
 *
i\xdd
;

8 
n
,

9
didwr\x99e
 = 0;

11 i\xe0(
	`\x8b\xa1\xe6ag
(
i\xdd
, (
_ERR
 |
_EOF
)))

12  (
EOF
);

14 i\xe0\xd0!
	`\x8b\xa1\xe6ag
(
i\xdd
,
WRITEMODE
))

15 (
EOF
);

17 i\xe0\xd0
	`\x8b\xa1\xe6ag
(
i\xdd
,
UNBUFF
)){

18
n
 =
	`wr\x99e
(
i\xdd
->
_fd
,&
ch
,1);

19
i\xdd
->
_cou\xc1
 = 1;

20
didwr\x99e
++;

23 *
i\xdd
->
_\xb1r
++ =
ch
;

24 i\xe0((++
i\xdd
->
_cou\xc1
\xe8>\xf0
BUFSIZ
 && !
	`\x8b\xa1\xe6ag
(i\xdd,
STRINGS
) ){

25
n
 =
	`wr\x99e
(
i\xdd
->
_fd
,i\xdd->
_buf
,i\xdd->
_cou\xc1
);

26
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

27
didwr\x99e
++;

31 i\xe0(
didwr\x99e
){

32 i\xe0(
n
<=0 ||
i\xdd
->
_cou\xc1
 !=\x82){

33 i\xe0(
n
 < 0)

34
i\xdd
->
_\xe6ags
 |\xf0
_ERR
;

36
i\xdd
->
_\xe6ags
 |\xf0
_EOF
;

37  (
EOF
);

39
i\xdd
->
_cou\xc1
=0;

42
	}
}

	@lib/rand.cpp

4 
	g\xa3ed
 = 1L;

7 
	$\xb\xe2d
() {

8
\xa3ed
 = (1103515245L * seed + 12345) & 0x7FFFFFFF;

9  ()(
\xa3ed
 & 077777);

10
	}
}

	@lib/read.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~<\xa1ddef.h
>

3 
	~<sys/ty\xb3s.h
>

7
ssize_t

	$\xbbad
(
fd
, *
buf\xe3r
,
size_t

nby\x8bs
) {

11 
n
 =
	`\xff\x\xfbm1
(
FS
,
READ
,
fd
,
\xa1\xa9ic_\xff\xa1
<>(
nby\x8bs
), 0,

12
\xa1\xa9ic_\xff\xa1
<*>(
buf\xe3r
),

13
NIL_PTR
, NIL_PTR);

14 
\xa1\xa9ic_\xff\xa1
<
ssize_t
>(
n
);

15
	}
}

	@lib/regexp.cpp

29 
	~"../\x9a\x\xe3ude/\xbbgexp.h\xb5
"

30 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

31 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

32 
	~<\xa1r\x9ag.h
>

33 
	~<\xa1r\x9ags.h
>

39 
	#MAGIC
 0234

	)

78 
	#END
 0

	)

79 
	#BOL
 1

	)

80 
	#EOL
 2

	)

81 
	#ANY
 3

	)

82 
	#ANYOF
 4

	)

83 
	#ANYBUT
 5

	)

84 
	#BRANCH
 6

	)

85 
	#BACK
 7

	)

86 
	#EXACTLY
 8

	)

87 
	#NOTHING
 9

	)

88 
	#STAR
 10

	)

89 
	#PLUS
 11

	)

90 
	#OPEN
 20

	)

92 
	#CLOSE
 30

	)

126 
	#OP
(
p
\xe8(*\xd5))

	)

127 
	#NEXT
(
p
\xe8(((*(\xd5\xe8+ 1\xe8& 0377\xe8<< 8\xe8+ *(\xd5\xe8+ 2\xe8& 0377)

	)

128 
	#OPERAND
(
p
\xe8(\xd5\xe8+ 3)

	)

133 #i\xe2de\xe0
CHARBITS


134 
	#UCHARAT
(
p
\xe8(()*(*)\xd5))

	)

136 
	#UCHARAT
(
p
\xe8(()*\xd5\xe8&
CHARBITS
)

	)

139 
	#FAIL
(
m
) \

141
	`\xbbg\x94r\xdc
(
m
); \

142  (
NULL
); \

143 }

	)

144 
	#ISMULT
(
c
\xe8((c\xe8=\xf0'*' || (c\xe8=\xf0'+' || (c\xe8=\xf0'?')

	)

145 
	#META
 "^$.[()|?+*\\"

	)

150 
	#HASWIDTH
 01

	)

151 
	#SIMPLE
 02

	)

152 
	#SPSTART
 04

	)

153 
	#WORST
 0

	)

158 *
	g\xbbg\xb7r\xa3
;

159 
	g\xbbgŬ
;

160 
	g\xbbgdummy
;

161 *
	g\xbbgcode
;

162 
	g\xbbgsize
;

167 #i\xe2de\xe0
STATIC


168 
	#STATIC
 

	)

170
STATIC
 *
\xbbg
();

171
STATIC
 *
\xbbgb\xbfnch
();

172
STATIC
 *
\xbbgp\x9b\xfb
();

173
STATIC
 *
\xbbg\xa9om
();

174
STATIC
 *
\xbbgnode
();

175
STATIC
 *
\xbbg\xc3xt
();

176
STATIC
 
\xbbgc
();

177
STATIC
 
\xbbg\x9a\xa3\xb9
();

178
STATIC
 
\xbbg\x8f\x9e
();

179
STATIC
 
\xbbgݏ\x9e
();

180
STATIC
 
my\xa1rc\xa5n
();

197
\xbbgexp
 *
	$\xbbgcomp
(cڡ *
exp
) {

198 
\xbbgexp
 *
r
;

199 *
s\xf\xe2
;

200 *
l\xdage\xa1
;

201 
\xcbn
;

202 
\xe6ags
;

204 i\xe0(
exp
 =\xf0
NULL
)

205
	`FAIL
("NULL\x87rgument");

208
\xbbg\xb7r\xa3
 =
exp
;

209
\xbbgŬ
 = 1;

210
\xbbgsize
 = 0L;

211
\xbbgcode
 = &
\xbbgdummy
;

212
	`\xbbgc
(
MAGIC
);

213 i\xe0(
	`\xbbg
(0, &
\xe6ags
\xe8=\xf0
NULL
)

214  (
NULL
);

217 i\xe0(
\xbbgsize
 >= 32767L)

218
	`FAIL
("regexp\x81oo big");

221
r
 = (
\xbbgexp
 *)
	`\xa7\xe3_m\x\xabloc
(\xd4egexp\xe8+ ()
\xbbgsize
);

224
\xbbg\xb7r\xa3
 =
exp
;

225
\xbbgŬ
 = 1;

226
\xbbgcode
 =
r
->
\xb4og\xbfm
;

227
	`\xbbgc
(
MAGIC
);

228 i\xe0(
	`\xbbg
(0, &
\xe6ags
\xe8=\xf0
NULL
)

229  (
NULL
);

232
r
->
\xbbg\xa1\xact
 = '\0';

233
r
->
\xbbg\xaach
 = 0;

234
r
->
\xbbgmu\xa1
 =
NULL
;

235
r
->
\xbbgm\xcbn
 = 0;

236
s\xf\xe2
 =
r
->
\xb4og\xbfm
 + 1;

237 i\xe0(
	`OP
(
	`\xbbg\xc3xt
(
s\xf\xe2
)\xe8=\xf0
END
) {

238
s\xf\xe2
 =
	`OPERAND
(scan);

241 i\xe0(
	`OP
(
s\xf\xe2
\xe8=\xf0
EXACTLY
)

242
r
->
\xbbg\xa1\xact
 = *
	`OPERAND
(
s\xf\xe2
);

243 i\xe0(
	`OP
(
s\xf\xe2
\xe8=\xf0
BOL
)

244
r
->
\xbbg\xaach
++;

254 i\xe0(
\xe6ags
 &
SPSTART
) {

255
l\xdage\xa1
 =
NULL
;

256
\xcbn
 = 0;

257 ;
s\xf\xe2
 !\xf0
NULL
; s\xff\xc0\xf0
	`\xbbg\xc3xt
(scan))

258 i\xe0(
	`OP
(
s\xf\xe2
\xe8=\xf0
EXACTLY
 &&
	`\xa1\xbe\x92
(
	`OPERAND
(s\xffn)\xe8>\xf0
\xcbn
) {

259
l\xdage\xa1
 =
	`OPERAND
(
s\xf\xe2
);

260
\xcbn
 =
	`\xa1\xbe\x92
(
	`OPERAND
(
s\xf\xe2
));

262
r
->
\xbbgmu\xa1
 =
l\xdage\xa1
;

263
r
->
\xbbgm\xcbn
 =
\xcbn
;

267  (
r
);

268
	}
}

279 *
	$\xbbg
(
\xb7\xbbn
,
\xe6agp
)

280 
\xb7\xbbn
;

281 *
\xe6agp
;

283 *
\xbbt
;

284 *
br
;

285 *
\x92d\x94
;

286 
\xb7\xbao
;

287 
\xe6ags
;

289 *
\xe6agp
 =
HASWIDTH
;

292 i\xe0(
\xb7\xbbn
) {

293 i\xe0(
\xbbgŬ
 >\xf0
NSUBEXP
)

294
	`FAIL
("too many ()");

295
\xb7\xbao
 =
\xbbgŬ
;

296
\xbbgŬ
++;

297
\xbbt
 =
	`\xbbgnode
(
OPEN
 +
\xb7\xbao
);

299
\xbbt
 =
NULL
;

302
br
 =
	`\xbbgb\xb\xe2ch
(&
\xe6ags
);

303 i\xe0(
br
 =\xf0
NULL
)

304  (
NULL
);

305 i\xe0(
\xbbt
 !\xf0
NULL
)

306
	`\xbbg\x8f\x9e
(
\xbbt
,
br
);

308
\xbbt
 =
br
;

309 i\xe0(!(
\xe6ags
 &
HASWIDTH
))

310 *
\xe6agp
 &\xf0~
HASWIDTH
;

311 *
\xe6agp
 |\xf0
\xe6ags
 &
SPSTART
;

312 *
\xbbg\xb7r\xa3
 == '|') {

313
\xbbg\xb7r\xa3
++;

314
br
 =
	`\xbbgb\xb\xe2ch
(&
\xe6ags
);

315 i\xe0(
br
 =\xf0
NULL
)

316  (
NULL
);

317
	`\xbbg\x8f\x9e
(
\xbbt
,
br
);

318 i\xe0(!(
\xe6ags
 &
HASWIDTH
))

319 *
\xe6agp
 &\xf0~
HASWIDTH
;

320 *
\xe6agp
 |\xf0
\xe6ags
 &
SPSTART
;

324
\x92d\x94
 =
	`\xbbgnode
((
\xb7\xbbn
\xe8?
CLOSE
 +
\xb7\xbao
 :
END
);

325
	`\xbbg\x8f\x9e
(
\xbbt
,
\x92d\x94
);

328 
br
 =
\xbbt
; b\xb8!\xf0
NULL
; b\xb8\xf0
	`\xbbg\xc3xt
(br))

329
	`\xbbgݏ\x9e
(
br
,
\x92d\x94
);

332 i\xe0(
\xb7\xbbn
 && *
\xbbg\xb7r\xa3
++ != ')') {

333
	`FAIL
("unmatched ()");

334 } i\xe0(!
\xb7\xbbn
 && *
\xbbg\xb7r\xa3
 != '\0') {

335 i\xe0(*
\xbbg\xb7r\xa3
 == ')') {

336
	`FAIL
("unmatched ()");

338
	`FAIL
("junk on\x83nd");

342  (
\xbbt
);

343
	}
}

350 *
	$\xbbgb\xb\xe2ch
(
\xe6agp
)

351 *
\xe6agp
;

353 *
\xbbt
;

354 *
cha\x9a
;

355 *
ϋ\xa1
;

356 
\xe6ags
;

358 *
\xe6agp
 =
WORST
;

360
\xbbt
 =
	`\xbbgnode
(
BRANCH
);

361
cha\x9a
 =
NULL
;

362 *
\xbbg\xb7r\xa3
 != '\0' && *regparse != '|' && *regparse != ')') {

363
ϋ\xa1
 =
	`\xbbgp\x9b\xfb
(&
\xe6ags
);

364 i\xe0(
ϋ\xa1
 =\xf0
NULL
)

365  (
NULL
);

366 *
\xe6agp
 |\xf0
\xe6ags
 &
HASWIDTH
;

367 i\xe0(
cha\x9a
 =\xf0
NULL
)

368 *
\xe6agp
 |\xf0
\xe6ags
 &
SPSTART
;

370
	`\xbbg\x8f\x9e
(
cha\x9a
,
ϋ\xa1
);

371
cha\x9a
 =
ϋ\xa1
;

373 i\xe0(
cha\x9a
 =\xf0
NULL
)

374 ()
	`\xbbgnode
(
NOTHING
);

376  (
\xbbt
);

377
	}
}

388 *
	$\xbbgp\x9b\xfb
(
\xe6agp
)

389 *
\xe6agp
;

391 *
\xbbt
;

392 
\xdd
;

393 *
\xc3xt
;

394 
\xe6ags
;

396
\xbbt
 =
	`\xbbg\xa9om
(&
\xe6ags
);

397 i\xe0(
\xbbt
 =\xf0
NULL
)

398  (
NULL
);

400
\xdd
 = *
\xbbg\xb7r\xa3
;

401 i\xe0(!
	`ISMULT
(
\xdd
)) {

402 *
\xe6agp
 =
\xe6ags
;

403  (
\xbbt
);

406 i\xe0(!(
\xe6ags
 &
HASWIDTH
\xe8&&
\xdd
 != '?')

407
	`FAIL
("*+ operand could be\x83mpty");

408 *
\xe6agp
 = (
\xdd
 !\xf0'+'\xe8? (
WORST
 |
SPSTART
\xe8: (WORST |
HASWIDTH
);

410 i\xe0(
\xdd
 =\xf0'*' && (
\xe6ags
 &
SIMPLE
))

411
	`\xbbg\x9a\xa3\xb9
(
STAR
,
\xbbt
);

412 i\xe0(
\xdd
 == '*') {

414
	`\xbbg\x9a\xa3\xb9
(
BRANCH
,
\xbbt
);

415
	`\xbbgݏ\x9e
(
\xbbt
,
	`\xbbgnode
(
BACK
));

416
	`\xbbgݏ\x9e
(
\xbbt
,\x84et);

417
	`\xbbg\x8f\x9e
(
\xbbt
,
	`\xbbgnode
(
BRANCH
));

418
	`\xbbg\x8f\x9e
(
\xbbt
,
	`\xbbgnode
(
NOTHING
));

419 } i\xe0(
\xdd
 =\xf0'+' && (
\xe6ags
 &
SIMPLE
))

420
	`\xbbg\x9a\xa3\xb9
(
PLUS
,
\xbbt
);

421 i\xe0(
\xdd
 == '+') {

423
\xc3xt
 =
	`\xbbgnode
(
BRANCH
);

424
	`\xbbg\x8f\x9e
(
\xbbt
,
\xc3xt
);

425
	`\xbbg\x8f\x9e
(
	`\xbbgnode
(
BACK
),
\xbbt
);

426
	`\xbbg\x8f\x9e
(
\xc3xt
,
	`\xbbgnode
(
BRANCH
));

427
	`\xbbg\x8f\x9e
(
\xbbt
,
	`\xbbgnode
(
NOTHING
));

428 } i\xe0(
\xdd
 == '?') {

430
	`\xbbg\x9a\xa3\xb9
(
BRANCH
,
\xbbt
);

431
	`\xbbg\x8f\x9e
(
\xbbt
,
	`\xbbgnode
(
BRANCH
));

432
\xc3xt
 =
	`\xbbgnode
(
NOTHING
);

433
	`\xbbg\x8f\x9e
(
\xbbt
,
\xc3xt
);

434
	`\xbbgݏ\x9e
(
\xbbt
,
\xc3xt
);

436
\xbbg\xb7r\xa3
++;

437 i\xe0(
	`ISMULT
(*
\xbbg\xb7r\xa3
))

438
	`FAIL
("nested *?+");

440  (
\xbbt
);

441
	}
}

451 *
	$\xbbg\xa9om
(
\xe6agp
)

452 *
\xe6agp
;

454 *
\xbbt
;

455 
\xe6ags
;

457 *
\xe6agp
 =
WORST
;

459 *
\xbbg\xb7r\xa3
++) {

461
\xbbt
 =
	`\xbbgnode
(
BOL
);

464
\xbbt
 =
	`\xbbgnode
(
EOL
);

467
\xbbt
 =
	`\xbbgnode
(
ANY
);

468 *
\xe6agp
 |\xf0
HASWIDTH
 |
SIMPLE
;

471 
\xfeass
;

472 
\xfeas\xa3nd
;

474 i\xe0(*
\xbbg\xb7r\xa3
 == '^') {

475
\xbbt
 =
	`\xbbgnode
(
ANYBUT
);

476
\xbbg\xb7r\xa3
++;

478
\xbbt
 =
	`\xbbgnode
(
ANYOF
);

479 i\xe0(*
\xbbg\xb7r\xa3
 == ']' || *regparse == '-')

480
	`\xbbgc
(*
\xbbg\xb7r\xa3
++);

481 *
\xbbg\xb7r\xa3
 != '\0' && *regparse != ']') {

482 i\xe0(*
\xbbg\xb7r\xa3
 == '-') {

483
\xbbg\xb7r\xa3
++;

484 i\xe0(*
\xbbg\xb7r\xa3
 == ']' || *regparse == '\0')

485
	`\xbbgc
('-');

487
\xfeass
 =
	`UCHARAT
(
\xbbg\xb7r\xa3
 - 2) + 1;

488
\xfeas\xa3nd
 =
	`UCHARAT
(
\xbbg\xb7r\xa3
);

489 i\xe0(
\xfeass
 >
\xfeas\xa3nd
 + 1)

490
	`FAIL
("invalid []\x84ange");

491 ;
\xfeass
 <\xf0
\xfeas\xa3nd
; class ++)

492
	`\xbbgc
(
\xfeass
);

493
\xbbg\xb7r\xa3
++;

496
	`\xbbgc
(*
\xbbg\xb7r\xa3
++);

498
	`\xbbgc
('\0');

499 i\xe0(*
\xbbg\xb7r\xa3
 != ']')

500
	`FAIL
("unmatched []");

501
\xbbg\xb7r\xa3
++;

502 *
\xe6agp
 |\xf0
HASWIDTH
 |
SIMPLE
;

505
\xbbt
 =
	`\xbbg
(1, &
\xe6ags
);

506 i\xe0(
\xbbt
 =\xf0
NULL
)

507  (
NULL
);

508 *
\xe6agp
 |\xf0
\xe6ags
 & (
HASWIDTH
 |
SPSTART
);

513
	`FAIL
("internal urp");

518
	`FAIL
("?+* follows\x82othing");

521 i\xe0(*
\xbbg\xb7r\xa3
 == '\0')

522
	`FAIL
("trailing \\");

523
\xbbt
 =
	`\xbbgnode
(
EXACTLY
);

524
	`\xbbgc
(*
\xbbg\xb7r\xa3
++);

525
	`\xbbgc
('\0');

526 *
\xe6agp
 |\xf0
HASWIDTH
 |
SIMPLE
;

529 
\xcbn
;

530 
\x92d\x94
;

532
\xbbg\xb7r\xa3
--;

533
\xcbn
 =
	`my\xa1rc\xa5n
(
\xbbg\xb7r\xa3
,
META
);

534 i\xe0(
\xcbn
 <= 0)

535
	`FAIL
("internal disaster");

536
\x92d\x94
 = *(
\xbbg\xb7r\xa3
 +
\xcbn
);

537 i\xe0(
\xcbn
 > 1 &&
	`ISMULT
(
\x92d\x94
))

538
\xcbn
--;

539 *
\xe6agp
 |\xf0
HASWIDTH
;

540 i\xe0(
\xcbn
 == 1)

541 *
\xe6agp
 |\xf0
SIMPLE
;

542
\xbbt
 =
	`\xbbgnode
(
EXACTLY
);

543 
\xcbn
 > 0) {

544
	`\xbbgc
(*
\xbbg\xb7r\xa3
++);

545
\xcbn
--;

547
	`\xbbgc
('\0');

551  (
\xbbt
);

552
	}
}

558
	$\xbbgnode
(
\xdd
)

559 
\xdd
;

561 *
\xbbt
;

562 *
\xb1r
;

564
\xbbt
 =
\xbbgcode
;

565 i\xe0(
\xbbt
 =\xf0&
\xbbgdummy
) {

566
\xbbgsize
 += 3;

567  (
\xbbt
);

570
\xb1r
 =
\xbbt
;

571 *
\xb1r
++ =
\xdd
;

572 *
\xb1r
++ = '\0';

573 *
\xb1r
++ = '\0';

574
\xbbgcode
 =
\xb1r
;

576  (
\xbbt
);

577
	}
}

582 
	$\xbbgc
(
b
) b;

584 i\xe0(
\xbbgcode
 !\xf0&
\xbbgdummy
)

585 *
\xbbgcode
++ =
b
;

587
\xbbgsize
++;

588
	}
}

595 
	$\xbbg\x9a\xa3\xb9
(
\xdd
,
\xddnd
) op;

596 *
\xddnd
;

598 *
\xa4c
;

599 *
d\xa1
;

600 *
\xb6a\xfb
;

602 i\xe0(
\xbbgcode
 =\xf0&
\xbbgdummy
) {

603
\xbbgsize
 += 3;

607
\xa4c
 =
\xbbgcode
;

608
\xbbgcode
 += 3;

609
d\xa1
 =
\xbbgcode
;

610 
\xa4c
 >
\xddnd
)

611 *--
d\xa1
 = *--
\xa4c
;

613
\xb6a\xfb
 =
\xddnd
;

614 *
\xb6a\xfb
++ =
\xdd
;

615 *
\xb6a\xfb
++ = '\0';

616 *
\xb6a\xfb
++ = '\0';

617
	}
}

622 
	$\xbbg\x8f\x9e
(
p
,
v\x\xab
) *p;

623 *
v\x\xab
;

625 *
s\xf\xe2
;

626 *
\x8bmp
;

627 
off\xa3t
;

629 i\xe0(
p
 =\xf0&
\xbbgdummy
)

633
s\xf\xe2
 =
p
;

635
\x8bmp
 =
	`\xbbg\xc3xt
(
s\xf\xe2
);

636 i\xe0(
\x8bmp
 =\xf0
NULL
)

638
s\xf\xe2
 =
\x8bmp
;

641 i\xe0(
	`OP
(
s\xf\xe2
\xe8=\xf0
BACK
)

642
off\xa3t
 =
s\xf\xe2
 -
v\x\xab
;

644
off\xa3t
 =
v\x\xab
 -
s\xf\xe2
;

645 *(
s\xf\xe2
 + 1\xe8\xf0(
off\xa3t
 >> 8) & 0377;

646 *(
s\xf\xe2
 + 2\xe8\xf0
off\xa3t
 & 0377;

647
	}
}

652 
	$\xbbgݏ\x9e
(
p
,
v\x\xab
) *p;

653 *
v\x\xab
;

656 i\xe0(
p
 =\xf0
NULL
 ||\x85 =\xf0&
\xbbgdummy
 ||
	`OP
\xd5\xe8!\xf0
BRANCH
)

658
	`\xbbg\x8f\x9e
(
	`OPERAND
(
p
),
v\x\xab
);

659
	}
}

668 *
	g\xbbg\x9\xadut
;

669 *
	g\xbbgb\xde
;

670 **
	g\xbbg\xa1\xac\x8d
;

671 **
	g\xbbg\x92dp
;

676
STATIC
 
\xbbg\x8cy
();

677
STATIC
 
\xbbgm\xa9ch
();

678
STATIC
 
\xbbg\xbb\xb3\xa9
();

680 #ifde\xe0
DEBUG


681 
	g\xbbgǼ\xa9e
 = 0;

682 
\xbbgdump
();

683
STATIC
 *
\xbbg\xb4\xdd
();

689 
	$\xbbgexec
(
\xbbgexp
 *
\xb4og
, cڡ *
\xa1r\x9ag
,
bo\xde

b\xde\xe6ag
) {

690 cڡ *
s
;

693 i\xe0(
\xb4og
 =\xf0
NULL
 ||
\xa1r\x9ag
 == NULL) {

694
	`\xbbg\x94r\xdc
("NULL\x85arameter");

699 i\xe0(
	`UCHARAT
(
\xb4og
->
\xb4og\xbfm
\xe8!\xf0
MAGIC
) {

700
	`\xbbg\x94r\xdc
("corrupted\x85rogram");

705 i\xe0(
\xb4og
->
\xbbgmu\xa1
 !\xf0
NULL
) {

706
s
 =
\xa1r\x9ag
;

707 (
s
 =
	`\xa1rchr
(s,
\xb4og
->
\xbbgmu\xa1
[0])\xe8!\xf0
NULL
) {

708 i\xe0(
	`\xa1\xbacmp
(
s
,
\xb4og
->
\xbbgmu\xa1
,\x85rog->
\xbbgm\xcbn
) == 0)

710
s
++;

712 i\xe0(
s
 =\xf0
NULL
)

717 i\xe0(
b\xde\xe6ag
)

718
\xbbgb\xde
 =
\xa1r\x9ag
;

720
\xbbgb\xde
 =
NULL
;

723 i\xe0(
\xb4og
->
\xbbg\xaach
)

724  (
	`\xbbg\x8cy
(
\xb4og
,
\xa1r\x9ag
));

727
s
 =
\xa1r\x9ag
;

728 i\xe0(
\xb4og
->
\xbbg\xa1\xact
 != '\0')

730 (
s
 =
	`\xa1rchr
(s,
\xb4og
->
\xbbg\xa1\xact
)\xe8!\xf0
NULL
) {

731 i\xe0(
	`\xbbg\x8cy
(
\xb4og
,
s
))

733
s
++;

738 i\xe0(
	`\xbbg\x8cy
(
\xb4og
,
s
))

740 } *
s
++ != '\0');

744
	}
}

750
	$\xbbg\x8cy
(
\xb4og
,
\xa1r\x9ag
)

751
\xbbgexp
 *
\xb4og
;

752 *
\xa1r\x9ag
;

754 
i
;

755 **
\xa5
;

756 **
\x95
;

758
\xbbg\x9aput
 =
\xa1r\x9ag
;

759
\xbbg\xa1\xac\x8d
 =
\xb4og
->
\xa1\xac\x8d
;

760
\xbbg\x92dp
 =
\xb4og
->
\x92dp
;

762
\xa5
 =
\xb4og
->
\xa1\xac\x8d
;

763
\x95
 =
\xb4og
->
\x92dp
;

764 
i
 =
NSUBEXP
; i > 0; i--) {

765 *
\xa5
++ =
NULL
;

766 *
\x95
++ =
NULL
;

768 i\xe0(
	`\xbbgm\xa9ch
(
\xb4og
->
\xb4og\xbfm
 + 1)) {

769
\xb4og
->
\xa1\xac\x8d
[0] =
\xa1r\x9ag
;

770
\xb4og
->
\x92dp
[0] =
\xbbg\x9aput
;

774
	}
}

787
	$\xbbgm\xa9ch
(
\xb4og
)

788 *
\xb4og
;

790 *
s\xf\xe2
;

791 *
\xc3xt
;

793
s\xf\xe2
 =
\xb4og
;

794 #ifde\xe0
DEBUG


795 i\xe0(
s\xf\xe2
 !\xf0
NULL
 &&
\xbbgǼ\xa9e
)

796
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s(\n",
	`\xbbg\xb4\xdd
(
s\xf\xe2
));

798 
s\xf\xe2
 !\xf0
NULL
) {

799 #ifde\xe0
DEBUG


800 i\xe0(
\xbbgǼ\xa9e
)

801
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "%s...\n",
	`\xbbg\xb4\xdd
(
s\xf\xe2
));

803
\xc3xt
 =
	`\xbbg\xc3xt
(
s\xf\xe2
);

805 
	`OP
(
s\xf\xe2
)) {

806 
BOL
:

807 i\xe0(
\xbbg\x9aput
 !\xf0
\xbbgb\xde
)

810 
EOL
:

811 i\xe0(*
\xbbg\x9aput
 != '\0')

814 
ANY
:

815 i\xe0(*
\xbbg\x9aput
 == '\0')

817
\xbbg\x9aput
++;

819 
EXACTLY
: {

820 
\xcbn
;

821 *
\xddnd
;

823
\xddnd
 =
	`OPERAND
(
s\xf\xe2
);

825 i\xe0(*
\xddnd
 !\xf0*
\xbbg\x9aput
)

827
\xcbn
 =
	`\xa1\xbe\x92
(
\xddnd
);

828 i\xe0(
\xcbn
 > 1 &&
	`\xa1\xbacmp
(
\xddnd
,
\xbbg\x9aput
,\x86en) != 0)

830
\xbbg\x9aput
 +\xf0
\xcbn
;

832 
ANYOF
:

833 i\xe0(*
\xbbg\x9aput
 =\xf0'\0' ||
	`\xa1rchr
(
	`OPERAND
(
s\xf\xe2
), *\xbbg\x9aput\xe8=\xf0
NULL
)

835
\xbbg\x9aput
++;

837 
ANYBUT
:

838 i\xe0(*
\xbbg\x9aput
 =\xf0'\0' ||
	`\xa1rchr
(
	`OPERAND
(
s\xf\xe2
), *\xbbg\x9aput\xe8!\xf0
NULL
)

840
\xbbg\x9aput
++;

842 
NOTHING
:

844 
BACK
:

846 
OPEN
 + 1:

847 
OPEN
 + 2:

848 
OPEN
 + 3:

849 
OPEN
 + 4:

850 
OPEN
 + 5:

851 
OPEN
 + 6:

852 
OPEN
 + 7:

853 
OPEN
 + 8:

854 
OPEN
 + 9: {

855 
no
;

856 *
\xa7ve
;

858
no
 =
	`OP
(
s\xf\xe2
\xe8-
OPEN
;

859
\xa7ve
 =
\xbbg\x9aput
;

861 i\xe0(
	`\xbbgm\xa9ch
(
\xc3xt
)) {

867 i\xe0(
\xbbg\xa1\xac\x8d
[
no
] =\xf0
NULL
)

868
\xbbg\xa1\xac\x8d
[
no
] =
\xa7ve
;

873 
CLOSE
 + 1:

874 
CLOSE
 + 2:

875 
CLOSE
 + 3:

876 
CLOSE
 + 4:

877 
CLOSE
 + 5:

878 
CLOSE
 + 6:

879 
CLOSE
 + 7:

880 
CLOSE
 + 8:

881 
CLOSE
 + 9: {

882 
no
;

883 *
\xa7ve
;

885
no
 =
	`OP
(
s\xf\xe2
\xe8-
CLOSE
;

886
\xa7ve
 =
\xbbg\x9aput
;

888 i\xe0(
	`\xbbgm\xa9ch
(
\xc3xt
)) {

894 i\xe0(
\xbbg\x92dp
[
no
] =\xf0
NULL
)

895
\xbbg\x92dp
[
no
] =
\xa7ve
;

900 
BRANCH
: {

901 *
\xa7ve
;

903 i\xe0(
	`OP
(
\xc3xt
\xe8!\xf0
BRANCH
)

904
\xc3xt
 =
	`OPERAND
(
s\xf\xe2
);

907
\xa7ve
 =
\xbbg\x9aput
;

908 i\xe0(
	`\xbbgm\xa9ch
(
	`OPERAND
(
s\xf\xe2
)))

910
\xbbg\x9aput
 =
\xa7ve
;

911
s\xf\xe2
 =
	`\xbbg\xc3xt
(scan);

912 } 
s\xf\xe2
 !\xf0
NULL
 &&
	`OP
(s\xffn\xe8=\xf0
BRANCH
);

917 
STAR
:

918 
PLUS
: {

919 
\xc3xtch
;

920 
no
;

921 *
\xa7ve
;

922 
m\x9a
;

928
\xc3xtch
 = '\0';

929 i\xe0(
	`OP
(
\xc3xt
\xe8=\xf0
EXACTLY
)

930
\xc3xtch
 = *
	`OPERAND
(
\xc3xt
);

931
m\x9a
 = (
	`OP
(
s\xf\xe2
\xe8=\xf0
STAR
) ? 0 : 1;

932
\xa7ve
 =
\xbbg\x9aput
;

933
no
 =
	`\xbbg\xbb\xb3\xa9
(
	`OPERAND
(
s\xf\xe2
));

934 
no
 >\xf0
m\x9a
) {

936 i\xe0(
\xc3xtch
 =\xf0'\0' || *
\xbbg\x9aput
 ==\x82extch)

937 i\xe0(
	`\xbbgm\xa9ch
(
\xc3xt
))

940
no
--;

941
\xbbg\x9aput
 =
\xa7ve
 +
no
;

945 
END
:

949
	`\xbbg\x94r\xdc
("memory corruption");

954
s\xf\xe2
 =
\xc3xt
;

961
	`\xbbg\x94r\xdc
("corrupted\x85ointers");

963
	}
}

968 
	$\xbbg\xbb\xb3\xa9
(
p
)

969 *
p
;

971 
cou\xc1
 = 0;

972 *
s\xf\xe2
;

973 *
\xddnd
;

975
s\xf\xe2
 =
\xbbg\x9aput
;

976
\xddnd
 =
	`OPERAND
(
p
);

977 
	`OP
(
p
)) {

978 
ANY
:

979
cou\xc1
 =
	`\xa1\xbe\x92
(
s\xf\xe2
);

980
s\xf\xe2
 +\xf0
cou\xc1
;

982 
EXACTLY
:

983 *
\xddnd
 =\xf0*
s\xf\xe2
) {

984
cou\xc1
++;

985
s\xf\xe2
++;

988 
ANYOF
:

989 *
s\xf\xe2
 !\xf0'\0' &&
	`\xa1rchr
(
\xddnd
, *s\xffn\xe8!\xf0
NULL
) {

990
cou\xc1
++;

991
s\xf\xe2
++;

994 
ANYBUT
:

995 *
s\xf\xe2
 !\xf0'\0' &&
	`\xa1rchr
(
\xddnd
, *s\xffn\xe8=\xf0
NULL
) {

996
cou\xc1
++;

997
s\xf\xe2
++;

1001
	`\xbbg\x94r\xdc
("internal foulup");

1002
cou\xc1
 = 0;

1005
\xbbg\x9aput
 =
s\xf\xe2
;

1007  (
cou\xc1
);

1008
	}
}

1013 *
	$\xbbg\xc3xt
(
p
)

1014 *
p
;

1016 
off\xa3t
;

1018 i\xe0(
p
 =\xf0&
\xbbgdummy
)

1019  (
NULL
);

1021
off\xa3t
 =
	`NEXT
(
p
);

1022 i\xe0(
off\xa3t
 == 0)

1023  (
NULL
);

1025 i\xe0(
	`OP
(
p
\xe8=\xf0
BACK
)

1026  (
p
 -
off\xa3t
);

1028  (
p
 +
off\xa3t
);

1029
	}
}

1031 #ifde\xe0
DEBUG


1033
STATIC
 *
\xbbg\xb4\xdd
();

1038 
	$\xbbgdump
(
r
\xe8
\xbbgexp
 *r;

1040 *
s
;

1041 
\xdd
 =
EXACTLY
;

1042 *
\xc3xt
;

1044
s
 =
r
->
\xb4og\xbfm
 + 1;

1045 
\xdd
 !\xf0
END
) {

1046
\xdd
 =
	`OP
(
s
);

1047
	`\xb4\x9\xa9f
("%2d%s",
s
 -
r
->
\xb4og\xbfm
,
	`\xbbg\xb4\xdd
(s));

1048
\xc3xt
 =
	`\xbbg\xc3xt
(
s
);

1049 i\xe0(
\xc3xt
 =\xf0
NULL
)

1050
	`\xb4\x9\xa9f
("(0)");

1052
	`\xb4\x9\xa9f
("(%d)", (
s
 -
r
->
\xb4og\xbfm
\xe8+ (
\xc3xt
 - s));

1053
s
 += 3;

1054 i\xe0(
\xdd
 =\xf0
ANYOF
 || o\xb0=\xf0
ANYBUT
 || o\xb0=\xf0
EXACTLY
) {

1056 *
s
 != '\0') {

1057
	`putch\xac
(*
s
);

1058
s
++;

1060
s
++;

1062
	`putch\xac
('\n');

1066 i\xe0(
r
->
\xbbg\xa1\xact
 != '\0')

1067
	`\xb4\x9\xa9f
("\xa1\xac\x88`%c' ",
r
->
\xbbg\xa1\xact
);

1068 i\xe0(
r
->
\xbbg\xaach
)

1069
	`\xb4\x9\xa9f
("anchored ");

1070 i\xe0(
r
->
\xbbgmu\xa1
 !\xf0
NULL
)

1071
	`\xb4\x9\xa9f
("mu\xa1 hav\x90\"%s\"",
r
->
\xbbgmu\xa1
);

1072
	`\xb4\x9\xa9f
("\n");

1073
	}
}

1078 *
	$\xbbg\xb4\xdd
(
\xdd
)

1079 *
\xdd
;

1081 *
p
;

1082 
buf
[50];

1084 ()
	`\xa1r\xfdy
(
buf
, ":");

1086 
	`OP
(
\xdd
)) {

1087 
BOL
:

1088
p
 = "BOL";

1090 
EOL
:

1091
p
 = "EOL";

1093 
ANY
:

1094
p
 = "ANY";

1096 
ANYOF
:

1097
p
 = "ANYOF";

1099 
ANYBUT
:

1100
p
 = "ANYBUT";

1102 
BRANCH
:

1103
p
 = "BRANCH";

1105 
EXACTLY
:

1106
p
 = "EXACTLY";

1108 
NOTHING
:

1109
p
 = "NOTHING";

1111 
BACK
:

1112
p
 = "BACK";

1114 
END
:

1115
p
 = "END";

1117 
OPEN
 + 1:

1118 
OPEN
 + 2:

1119 
OPEN
 + 3:

1120 
OPEN
 + 4:

1121 
OPEN
 + 5:

1122 
OPEN
 + 6:

1123 
OPEN
 + 7:

1124 
OPEN
 + 8:

1125 
OPEN
 + 9:

1126
	`\xa5r\x9\xa9f
(
buf
 +
	`\xa1\xbe\x92
(buf), "OPEN%d",
	`OP
(
\xdd
\xe8-
OPEN
);

1127
p
 =
NULL
;

1129 
CLOSE
 + 1:

1130 
CLOSE
 + 2:

1131 
CLOSE
 + 3:

1132 
CLOSE
 + 4:

1133 
CLOSE
 + 5:

1134 
CLOSE
 + 6:

1135 
CLOSE
 + 7:

1136 
CLOSE
 + 8:

1137 
CLOSE
 + 9:

1138
	`\xa5r\x9\xa9f
(
buf
 +
	`\xa1\xbe\x92
(buf), "CLOSE%d",
	`OP
(
\xdd
\xe8-
CLOSE
);

1139
p
 =
NULL
;

1141 
STAR
:

1142
p
 = "STAR";

1144 
PLUS
:

1145
p
 = "PLUS";

1148
	`\xbbg\x94r\xdc
("corrupted opcode");

1151 i\xe0(
p
 !\xf0
NULL
)

1152 ()
	`\xa1r\xf\xe1
(
buf
,
p
);

1153  (
buf
);

1154
	}
}

1168 
	$my\xa1rc\xa5n
(
s1
,
s2
)

1169 *
s1
;

1170 *
s2
;

1172 *
s\xf\xe21
;

1173 *
s\xf\xe22
;

1174 
cou\xc1
;

1176
cou\xc1
 = 0;

1177 
s\xf\xe21
 =
s1
; *scan1 != '\0'; scan1++) {

1178 
s\xf\xe22
 =
s2
; *scan2 != '\0';)

1179 i\xe0(*
s\xf\xe21
 =\xf0*
s\xf\xe22
++)

1180  (
cou\xc1
);

1181
cou\xc1
++;

1183  (
cou\xc1
);

1184
	}
}

	@lib/regsub.cpp

21 
	~"../\x9a\x\xe3ude/\xbbgexp.h\xb5
"

22 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

27 
	#MAGIC
 0234

	)

29 #i\xe2de\xe0
CHARBITS


30 
	#UCHARAT
(
p
\xe8(()*(*)\xd5))

	)

32 
	#UCHARAT
(
p
\xe8(()*\xd5\xe8&
CHARBITS
)

	)

38 
	$\xbbgsub
(
\xbbgexp
 *
\xb4og
, cڡ *
sour\xfb
, *
de\xa1
) {

39 cڡ *
\xa4c
;

40 *
d\xa1
;

41 
c
;

42 
no
;

43 
\xcbn
;

44 *
	`\xa1\xba\xfdy
();

46 i\xe0(
\xb4og
 =\xf0
NULL
 ||
sour\xfb
 =\xf0NULL ||
de\xa1
 == NULL) {

47
	`\xbbg\x94r\xdc
("NULL\x85arm\x81o\x84egsub");

50 i\xe0(
	`UCHARAT
(
\xb4og
->
\xb4og\xbfm
\xe8!\xf0
MAGIC
) {

51
	`\xbbg\x94r\xdc
("damaged\x84egexp fed\x81o\x84egsub");

55
\xa4c
 =
sour\xfb
;

56
d\xa1
 =
de\xa1
;

57 (
c
 = *
\xa4c
++) != '\0') {

58 i\xe0(
c
 == '&')

59
no
 = 0;

60 i\xe0(
c
 =\xf0'\\' && '0' <\xf0*
\xa4c
 && *src <= '9')

61
no
 = *
\xa4c
++ - '0';

63
no
 = -1;

65 i\xe0(
no
 < 0) {

66 i\xe0(
c
 =\xf0'\\' && (*
\xa4c
 == '\\' || *src == '&'))

67
c
 = *
\xa4c
++;

68 *
d\xa1
++ =
c
;

69 } i\xe0(
\xb4og
->
\xa1\xac\x8d
[
no
] !\xf0
NULL
 &&\x85rog->
\x92dp
[no] != NULL) {

70
\xcbn
 =
\xb4og
->
\x92dp
[
no
] -\x85rog->
\xa1\xac\x8d
[no];

71
	`\xa1\xba\xfdy
(
d\xa1
,
\xb4og
->
\xa1\xac\x8d
[
no
],
\xcbn
);

72
d\xa1
 +\xf0
\xcbn
;

73 i\xe0(
\xcbn
 !\xf00 && *(
d\xa1
 - 1) == '\0') {

74
	`\xbbg\x94r\xdc
("damaged match string");

79 *
d\xa1
++ = '\0';

80
	}
}

	@lib/rindex.cpp

1 *
	$r\x9adex
(
s
,
c
)

2 *
s
,
c
;

4 *
\xbbsu\xc9
;

6
\xbbsu\xc9
 = 0;

8 i\xe0(*
s
 =\xf0
c
)

9
\xbbsu\xc9
 =
s
;

10 *
s
++ != 0);

11 (
\xbbsu\xc9
);

12
	}
}

	@lib/safe_alloc.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~<\xa1dio.h
>

3 
	~<\xa1dlib.h
>

11 *
	$\xa7\xe3_m\x\xabloc
(
size_t

size
\xe8
n\xdbx\xfb\xb1
 {

12 *
\xb1r
 =
	`m\x\xabloc
(
size
);

13 i\xe0(
\xb1r
 =\xf0
NULL
) {

14
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "out of memory\n");

15
	`ex\x99
(1);

17 
\xb1r
;

18
	}
}

25 
	$\xa7\xe3_\xe4\x93
(*
\xb1r
\xe8
n\xdbx\xfb\xb1
 {

26 i\xe0(
\xb1r
 !\xf0
NULL
) {

27
	`\xe4\x93
(
\xb1r
);

29
	}
}

	@lib/scanf.cpp

1 
	~<\xa1d\xacg.h
>

2 
	~<\xa1dio.h
>

10 
	$s\xf\xe2f
(cڡ *
f\xdcm\xa9
, ...) {

11
va_li\xa1

\xad
;

12 
\xbbt
;

13
	`va_\xa1\xa\xf9
(
\xad
,
f\xdcm\xa9
);

14
\xbbt
 =
	`vs\xf\xe2f
(
f\xdcm\xa9
,
\xad
);

15
	`va_\x92d
(
\xad
);

16 
\xbbt
;

17
	}
}

19 
	$fs\xf\xe2f
(
FILE
 *
\xe5
, cڡ *
f\xdcm\xa9
, ...) {

20
va_li\xa1

\xad
;

21 
\xbbt
;

22
	`va_\xa1\xa\xf9
(
\xad
,
f\xdcm\xa9
);

23
\xbbt
 =
	`vfs\xf\xe2f
(
\xe5
,
f\xdcm\xa9
,
\xad
);

24
	`va_\x92d
(
\xad
);

25 
\xbbt
;

26
	}
}

28 
	$ss\xf\xe2f
(cڡ *
\xa1r
, cڡ *
f\xdcm\xa9
, ...) {

29
va_li\xa1

\xad
;

30 
\xbbt
;

31
	`va_\xa1\xa\xf9
(
\xad
,
f\xdcm\xa9
);

32
\xbbt
 =
	`vss\xf\xe2f
(
\xa1r
,
f\xdcm\xa9
,
\xad
);

33
	`va_\x92d
(
\xad
);

34 
\xbbt
;

35
	}
}

	@lib/sendrec.cpp

1 
	~"../h/com.h\xb5
"

2 
	~"../h/ty\xb3.h\xb5
"

3 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	~<uni\xa1d.h
>

13 
	$\xa3nd
(
d\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

14 
\xa1\xa9ic_\xff\xa1
<>(
	`sys\xff\x\xfb
(0,
d\xa1
,
m_\xb1r
,
SEND
));

15
	}
}

24 
	$\xbb\xfbive
(
\xa4c
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

25 
\xa1\xa9ic_\xff\xa1
<>(
	`sys\xff\x\xfb
(0,
\xa4c
,
m_\xb1r
,
RECEIVE
));

26
	}
}

35 
	$\xa3nd\xbbc
(
\xa4cde\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

36 
\xa1\xa9ic_\xff\xa1
<>(
	`sys\xff\x\xfb
(0,
\xa4cde\xa1
,
m_\xb1r
,
BOTH
));

37
	}
}

	@lib/setbuf.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~"../\x9a\x\xe3ude/\xa1dio.h\xb5
"

4
	$\xa3tbuf
(
i\xdd
,
buf\xe3r
\xe8
FILE
 *iop;

5 *
buf\xe3r
;

7 i\xe0(
i\xdd
->
_buf
 &&
	`\x8b\xa1\xe6ag
(i\xdd,
IOMYBUF
))

8
	`\xa7\xe3_\xe4\x93
(
i\xdd
->
_buf
);

10
i\xdd
->
_\xe6ags
 &\xf0~(
IOMYBUF
 |
UNBUFF
 |
PERPRINTF
);

12
i\xdd
->
_buf
 =
buf\xe3r
;

14 i\xe0(
i\xdd
->
_buf
 =\xf0
NULL
)

15
i\xdd
->
_\xe6ags
 |\xf0
UNBUFF
;

17
i\xdd
->
_\xb1r
 = i\xdd->
_buf
;

18
i\xdd
->
_cou\xc1
 = 0;

19
	}
}

	@lib/setgid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\xa3tgid
(
g\xbd
\xe8{ 
	`\xff\x\xfbm1
(
MM
,
SETGID
, g\xbd, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/setjmp.cpp

1 
	~"../\x9a\x\xe3ude/\xa3tjmp.h\xb5
"

2 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

3 
	~<c\xa3tjmp
>

10 
	$_\xa3tjmp
(
jmp_buf

\x92v
) {

12 
\xa1d
::
	`\xa3tjmp
(
\x92v
);

13
	}
}

19 
	$_l\xdagjmp
(
jmp_buf

\x92v
, 
v\x\xab
) {

20 i\xe0(
v\x\xab
 == 0) {

21
v\x\xab
 = 1;

23
\xa1d
::
	`l\xdagjmp
(
\x92v
,
v\x\xab
);

24
	}
}

	@lib/setuid.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\xa3tuid
(
u\xa4
\xe8{ 
	`\xff\x\xfbm1
(
MM
,
SETUID
, u\xa4, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/signal.cpp

1 
	~"../\x9a\x\xe3ude/sig\xc7l.h\xb5
"

2 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4
sigh\x\xafd\xcbr_t

	gve\xf9ab
[
NR_SIGS
];

16
sigh\x\xafd\xcbr_t

	$sig\xc7l
(
sig\xc4
,
sigh\x\xafd\xcbr_t

func
) {

17 
r
;

18
sigh\x\xafd\xcbr_t

\xded
;

20
\xded
 =
ve\xf9ab
[
sig\xc4
 - 1];

21
ve\xf9ab
[
sig\xc4
 - 1] =
func
;

22
M
.
	`m6_i1
(\xe8\xf0
sig\xc4
;

23
M
.
	`m6_f1
(\xe8\xf0((
func
 =\xf0
SIG_IGN
 || fun\xf8=\xf0
SIG_DFL
\xe8? fun\xf8:
begsig
);

24
r
 =
	`\xff\x\xfbx
(
MM
,
SIGNAL
);

25  ((
r
 < 0 ? (
sigh\x\xafd\xcbr_t
\xec :
\xded
));

26
	}
}

	@lib/sleep.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~"../\x9a\x\xe3ude/sig\xc7l.h\xb5
"

4 
	$\x\xabfun
(
signum
\xe8{ ()signum;
	}
}

5 
	$\xa6\x93p
(
n
) {

7
	`sig\xc7l
(
SIGALRM
,
\xaefun
);

8
	`\x\xab\xacm
(
n
);

9
	`\xb7u\xa3
();

10
	}
}

	@lib/sprintf.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h
"

3 *
	$\xa5r\x9\xa9f
(
buf
,
f\xdcm\xa9
,
\xacgs
)

4 *
buf
, *
f\xdcm\xa9
;

5 
\xacgs
;

7
FILE

_\x8bmpf\x9\x93
;

9
_\x8bmpf\x9\x93
.
_fd
 = -1;

10
_\x8bmpf\x9\x93
.
_\xe6ags
 =
WRITEMODE
 +
STRINGS
;

11
_\x8bmpf\x9\x93
.
_buf
 =
buf
;

12
_\x8bmpf\x9\x93
.
_\xb1r
 =
buf
;

14
	`_d\xddr\x9\xa9f
(&
_\x8bmpf\x9\x93
,
f\xdcm\xa9
,&
\xacgs
);

15
	`putc
('\0',&
_\x8bmpf\x9\x93
);

17 
buf
;

18
	}
}

	@lib/stat.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\xa1\xa9
(cڡ *
\xc7me
, *
buf\xe3r
) {

5 
n
 =
	`\xff\x\xfbm1
(
FS
,
STAT
,
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
)), 0, 0, cڡ_\xff\xa1<*>\xd2ame),
buf\xe3r
,

6
NIL_PTR
);

7 
n
;

8
	}
}

	@lib/stb.cpp

3
	$__\xa1b
(
n
,
f
,
t
)

4 *
f
, *
t
; 
n
;

6 i\xe0(
n
 > 0)

8 *
t
++ = *
f
++;

9 --
n
);

10
	}
}

	@lib/stderr.cpp

1 
	~<uni\xa1d.h
>

4 
	$\xa1d_\x94r
(cڡ *
s
) {

5 cڡ *
p
 =
s
;

6 *
p
 != 0)

7
p
++;

8
	`wr\x99e
(2,
s
,
p
 - s);

9
	}
}

	@lib/stime.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$\xa1ime
(*
t\xdd
) {

5
M
.
	`m2_l1
(\xe8\xf0*
t\xdd
;

6 
	`\xff\x\xfbx
(
FS
,
STIME
);

7
	}
}

	@lib/strcat.cpp

1 *
	$\xa1r\xf\xe1
(
s1
,
s2
)

2 *
s1
, *
s2
;

6 *
\xdcig\x9a\xae
 =
s1
;

9 *
s1
 != 0) s1++;

12 *
s2
 !\xf00\xe8*
s1
++ = *s2++;

13 *
s1
 = 0;

14 (
\xdcig\x9a\xae
);

15
	}
}

	@lib/strcmp.cpp

4 
	~<\xa1r\x9ag.h
>

7 
	$\xa1rcmp
(*
s1
, *
s2
) {

9 i\xe0(*
s1
 !\xf0*
s2
)

10  (*
s1
 - *
s2
);

11 i\xe0(*
s1
 == '\0')

13
s1
++;

14
s2
++;

16
	}
}

	@lib/strcpy.cpp

9 *
	$\xa1r\xfdy
(*
de\xa1
, cڡ *
\xa4c
)

12 *
d
 =
de\xa1
;

15 (*
de\xa1
++ = *
\xa4c
++) != '\0') {

20 
d
;

21
	}
}

	@lib/strlen.cpp

3 
	~<\xa1r\x9ag.h
>

6 
	$\xa1\xbe\x92
(*
s
) {

7 cڡ *
\xdcig\x9a\xae
 =
s
;

10 *
s
 != '\0') {

11
s
++;

15 
\xa1\xa9ic_\xff\xa1
<>(
s
 -
\xdcig\x9a\xae
);

16
	}
}

	@lib/strncat.cpp

1 *
	$\xa1\xba\xf\xe1
(
s1
,
s2
,
n
)

2 *
s1
, *
s2
;

3 
n
;

7 *
\xdcig\x9a\xae
 =
s1
;

9 i\xe0(
n
 =\xf00\xe8(
s1
);

12 *
s1
 != 0) s1++;

15 *
s2
 != 0) {

16 *
s1
++ = *
s2
++;

17 i\xe0(--
n
 == 0) ;

19 *
s1
 = 0;

20 (
\xdcig\x9a\xae
);

21
	}
}

	@lib/strncmp.cpp

1 
	$\xa1\xbacmp
(
s1
,
s2
,
n
)

2 *
s1
, *
s2
;

3 
n
;

8 i\xe0(*
s1
 !\xf0*
s2
) (*s1 - *s2);

9 i\xe0(*
s1
 =\xf00 || --
n
 == 0) (0);

10
s1
++;

11
s2
++;

13
	}
}

	@lib/strncpy.cpp

1 *
	$\xa1\xba\xfdy
(
s1
,
s2
,
n
)

2 *
s1
, *
s2
;

3 
n
;

7 *
\xdcig\x9a\xae
 =
s1
;

9 *
s2
 != 0) {

10 *
s1
++ = *
s2
++;

11 i\xe0(--
n
 == 0) ;

13 *
s1
 = 0;

14 (
\xdcig\x9a\xae
);

15
	}
}

	@lib/sync.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$sync
(\xe8{ 
	`\xff\x\xfbm1
(
FS
,
SYNC
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/syscall_x86_64.cpp

1 #ifde\xe0
__x86_64__


2 
	~"../h/com.h\xb5
"

3 
	~"../h/cڡ.h\xb5
"

4 
	~"../h/ty\xb3.h\xb5
"

13 
	$\xa3nd
(
d\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

14 
\xbfx

	`__asm__
("rax") = 0;

15 
rdi

	`__asm__
("rdi"\xe8\xf0
d\xa1
;

16 
mes\xa7ge
 *
rsi

	`__asm__
("rsi"\xe8\xf0
m_\xb1r
;

17 
rdx

	`__asm__
("rdx"\xe8\xf0
SEND
;

18
__asm__
 volatile("syscall"

19 : "\xf7"(
\xbfx
)

20 : "D"(
rdi
), "S"(
rsi
), "d"(
rdx
), "a"(
\xbfx
)

22  ()
\xbfx
;

23
	}
}

32 
	$\xbb\xfbive
(
\xa4c
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

33 
\xbfx

	`__asm__
("rax") = 0;

34 
rdi

	`__asm__
("rdi"\xe8\xf0
\xa4c
;

35 
mes\xa7ge
 *
rsi

	`__asm__
("rsi"\xe8\xf0
m_\xb1r
;

36 
rdx

	`__asm__
("rdx"\xe8\xf0
RECEIVE
;

37
__asm__
 volatile("syscall"

38 : "\xf7"(
\xbfx
)

39 : "D"(
rdi
), "S"(
rsi
), "d"(
rdx
), "a"(
\xbfx
)

41  ()
\xbfx
;

42
	}
}

51 
	$\xa3nd\xbbc
(
\xa4cde\xa1
,
mes\xa7ge
 *
m_\xb1r
\xe8
n\xdbx\xfb\xb1
 {

52 
\xbfx

	`__asm__
("rax") = 0;

53 
rdi

	`__asm__
("rdi"\xe8\xf0
\xa4cde\xa1
;

54 
mes\xa7ge
 *
rsi

	`__asm__
("rsi"\xe8\xf0
m_\xb1r
;

55 
rdx

	`__asm__
("rdx"\xe8\xf0
BOTH
;

56
__asm__
 volatile("syscall"

57 : "\xf7"(
\xbfx
)

58 : "D"(
rdi
), "S"(
rsi
), "d"(
rdx
), "a"(
\xbfx
)

60  ()
\xbfx
;

61
	}
}

	@lib/syslib.cpp

1 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

2 
	~"../h/com.h\xb5
"

3 
	~"../h/cڡ.h\xb5
"

4 
	~"../h/\x94r\xdc.h\xb5
"

5 
	~"../h/ty\xb3.h\xb5
"

6 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

7 
	~"../\x9a\x\xe3ude/sig\xc7l.h\xb5
"

8 
	~<c\xa1d\x9\xa9
>

10 #i\xe2de\xe0
sigh\x\xafd\xcbr_t


12
us\x9ag

	gsigh\x\xafd\xcbr_t
 = (*)();

15 
\x94\xbao
;

16
mes\xa7ge

M
;

23 
	$sys_x\x99
(
\xb7\xbb\xc1
, 
\xb4oc
) {

26
	`\xff\x\xfbm1
(
SYSTASK
,
SYS_XIT
,
\xb7\xbb\xc1
,
\xb4oc
, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

27
	}
}

30 
	$sys_g\x91\xa5
(
\xb4oc
,
v\x9c_by\x8bs
 *
\xc3w\xa5
) {

33
	`\xff\x\xfbm1
(
SYSTASK
,
SYS_GETSP
,
\xb4oc
, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

34 *
\xc3w\xa5
 = (
v\x9c_by\x8bs
)
	`\xa1ack_\xb1r
(
M
);

35
	}
}

45 
	$sys_sig
(
\xb4oc
, 
sig
,
sigh\x\xafd\xcbr_t

sigh\x\xafd\xcbr
,
\xa1d
::
u\x9\xa964_t

tok\x92
) {

47
M
.
	`m6_i1
(\xe8\xf0
\xb4oc
;

48
M
.
	`m6_i2
(\xe8\xf0
sig
;

49
M
.
	`m6_f1
(\xe8\xf0
sigh\x\xafd\xcbr
;

50
	`\xa3t_tok\x92
(
M
,
tok\x92
);

51
	`\xff\x\xfbx
(
SYSTASK
,
SYS_SIG
);

52
	}
}

62 
	$sys_f\xdck
(
\xb7\xbb\xc1
, 
ch\x9ed
, 
pid
,
\xa1d
::
u\x9\xa964_t

tok\x92
) {

64
mes\xa7ge

m
{};

65
m
.
m_ty\xb3
 =
SYS_FORK
;

66
	`\xb4oc1
(
m
\xe8\xf0
\xb7\xbb\xc1
;

67
	`\xb4oc2
(
m
\xe8\xf0
ch\x9ed
;

68
	`pid
(
m
\xe8\xf0
pid
;

69
	`\xa3t_tok\x92
(
m
,
tok\x92
);

70
	`\xa3nd\xbbc
(
SYSTASK
, &
m
);

71
	}
}

80 
	$sys_exec
(
\xb4oc
, *
\xb1r
,
\xa1d
::
u\x9\xa964_t

tok\x92
) {

82
mes\xa7ge

m
{};

83
m
.
m_ty\xb3
 =
SYS_EXEC
;

84
	`\xb4oc1
(
m
\xe8\xf0
\xb4oc
;

85
	`\xa1ack_\xb1r
(
m
\xe8\xf0
\xb1r
;

86
	`\xa3t_tok\x92
(
m
,
tok\x92
);

87
	`\xa3nd\xbbc
(
SYSTASK
, &
m
);

88
	}
}

91 
	$sys_\xc3wm\xad
(
\xb4oc
, *
\xb1r
) {

94
	`\xff\x\xfbm1
(
SYSTASK
,
SYS_NEWMAP
,
\xb4oc
, 0, 0,
\xb1r
,
NIL_PTR
, NIL_PTR);

95
	}
}

98 
	$sys_c\xddy
(
mes\xa7ge
 *
m\xb1r
) {

102
m\xb1r
->
m_ty\xb3
 =
SYS_COPY
;

103 i\xe0(
	`\xa3nd\xbbc
(
SYSTASK
,
m\xb1r
\xe8!\xf0
OK
)

104
	`\xb7nic
("sys_c\xddy c\xaa'\x88\xa3nd",
NO_NUM
);

105
	}
}

108 
	$sys_times
(
\xb4oc
,
\xbb\xae_time

\xb1r
[4]) {

111
	`\xff\x\xfbm1
(
SYSTASK
,
SYS_TIMES
,
\xb4oc
, 0, 0,
\xb1r
,
NIL_PTR
, NIL_PTR);

112
\xb1r
[0] =
M
.
USER_TIME
;

113
\xb1r
[1] =
M
.
SYSTEM_TIME
;

114
\xb1r
[2] =
M
.
CHILD_UTIME
;

115
\xb1r
[3] =
M
.
CHILD_STIME
;

116
	}
}

119 
	$sys_ab\xd\xf9
() {

122
	`\xff\x\xfbm1
(
SYSTASK
,
SYS_ABORT
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

123
	}
}

126 
	$\x8b\x\xfb_fs
(
wh\xa9
, 
p1
, 
p2
, 
p3
) {

136
	`\xff\x\xfbm1
(
FS
,
wh\xa9
,
p1
,
p2
,
p3
,
NIL_PTR
, NIL_PTR, NIL_PTR);

137
	}
}

	@lib/time.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$time
(*
\x8d
) {

5 
k
;

6 
l
;

7
k
 =
	`\xff\x\xfbm1
(
FS
,
TIME
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

8 i\xe0(
M
.
m_ty\xb3
 < 0 ||
k
 !\xf0
OK
) {

9
\x94\xbao
 = -
M
.
m_ty\xb3
;

12
l
 =
M
.
	`m2_l1
();

13 i\xe0(
\x8d
 != (*)0)

14 *
\x8d
 =
l
;

15  (
l
);

16
	}
}

	@lib/times.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

3 
	stbuf
 {

4 
	mb1
,
	mb2
,
	mb3
,
	mb4
;

7 
	$times
(
tbuf
 *
buf
) {

8 
k
 =
	`\xff\x\xfbm1
(
FS
,
TIMES
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

9
buf
->
b1
 =
M
.
	`m4_l1
();

10
buf
->
b2
 =
M
.
	`m4_l2
();

11
buf
->
b3
 =
M
.
	`m4_l3
();

12
buf
->
b4
 =
M
.
	`m4_l4
();

13  (
k
);

14
	}
}

	@lib/umask.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$umask
(
com\xb6mode
\xe8{ 
	`\xff\x\xfbm1
(
FS
,
UMASK
, com\xb6mode, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);
	}
}

	@lib/umount.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$umou\xc1
(cڡ *
\xc7me
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
UMOUNT
, 0,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/ungetc.cpp

1 
	~"../\x9a\x\xe3ude/\xa1dio.h
"

3
	$ung\x91c
(
ch
,
i\xdd
)

4 
ch
;

5
FILE
 *
i\xdd
;

7 i\xe0\xd0
ch
 < 0 || !
	`\x8b\xa1\xe6ag
(
i\xdd
,
READMODE
\xe8||\x81e\xa1\xe6ag(i\xdd,
UNBUFF
) )

8 \xd0
EOF
 );

10 i\xe0\xd0
i\xdd
->
_cou\xc1
 >\xf0
BUFSIZ
)

11 (
EOF
);

13 i\xe0\xd0
i\xdd
->
_\xb1r
 =\xf0i\xdd->
_buf
)

14
i\xdd
->
_\xb1r
++;

16
i\xdd
->
_cou\xc1
++;

17 *--
i\xdd
->
_\xb1r
 =
ch
;

18 (
ch
);

19
	}
}

	@lib/unlink.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$uƚk
(cڡ *
\xc7me
\xe8{ 
	`\xff\x\xfbm3
(
FS
,
UNLINK
, 0,
cڡ_\xff\xa1
<*>\xd2ame));
	}
}

	@lib/utime.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$utime
(cڡ *
\xc7me
, 
timp
[2]) {

5
M
.
	`m2_i1
(\xe8\xf0
	`\xcbn
(
cڡ_\xff\xa1
<*>(
\xc7me
));

6
M
.
	`m2_l1
(\xe8\xf0
timp
[0];

7
M
.
	`m2_l2
(\xe8\xf0
timp
[1];

8
M
.
	`m2_p1
(\xe8\xf0
cڡ_\xff\xa1
<*>(
\xc7me
);

9 
	`\xff\x\xfbx
(
FS
,
UTIME
);

10
	}
}

	@lib/wait.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

4 
	$wa\x99
(*
\xa1\xa9us
) {

5 
k
 =
	`\xff\x\xfbm1
(
MM
,
WAIT
, 0, 0, 0,
NIL_PTR
, NIL_PTR, NIL_PTR);

6 *
\xa1\xa9us
 =
M
.
	`m2_i1
();

7 
k
;

8
	}
}

	@lib/write.cpp

1 
	~"../\x9a\x\xe3ude/lib.h\xb5
"

2 
	~<uni\xa1d.h
>

5
ssize_t

	$wr\x99e
(
fd
, cڡ *
buf\xe3r
,
size_t

nby\x8bs
) {

10 
\xa1\xa9ic_\xff\xa1
<
ssize_t
>(
	`\xff\x\xfbm1
(
FS
,
WRITE
,
fd
, s\x8ftic_\xff\xa1<>(
nby\x8bs
), 0,

11
cڡ_\xff\xa1
<*>(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
buf\xe3r
)),

12
NIL_PTR
, NIL_PTR));

13
	}
}

	@mm/alloc.cpp

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/ty\xb3.h\xb5
"

13 
	~"cڡ.h\xb5
"

14 
	~<c\xa1ddef
>

15 
	~<c\xa1d\x9\xa9
>

16 
	~<\x99\x94\xa9\xdc
>

17 
	~<li\xa1
>

20
cڡex\xb4
 
	gNR_HOLES
 = 128;

25 
	sH\xd\x93
 {

26
u\x9\xa964_t

	mba\xa3
;

27
u\x9\xa964_t

	m\xcbn
;

31 
	g\xa1d
::
li\xa1
<
H\xd\x93
>
h\xd\x93_li\xa1
;

38 [[
nodis\xf\xe4d
]]
u\x9\xa964_t

	$\x\xabloc_mem
(
u\x9\xa964_t

\xfeicks
\xe8
n\xdbx\xfb\xb1
 {

39 aut\xd8
\x99
 =
h\xd\x93_li\xa1
.
	`beg\x9a
(); i\x88!\xf0h\xdee_li\xa1.
	`\x92d
(); ++it) {

40 i\xe0(
\x99
->
\xcbn
 >\xf0
\xfeicks
) {

41
u\x9\xa964_t

\xded_ba\xa3
 =
\x99
->
ba\xa3
;

42
\x99
->
ba\xa3
 +\xf0
\xfeicks
;

43
\x99
->
\xcbn
 -\xf0
\xfeicks
;

44 i\xe0(
\x99
->
\xcbn
 == 0) {

45
h\xd\x93_li\xa1
.
	`\x94a\xa3
(
\x99
);

47 
\xded_ba\xa3
;

50 
NO_MEM
;

51
	}
}

58 
	$\xe4\x93_mem
(
u\x9\xa964_t

ba\xa3
, u\x9at64_\x88
\xfeicks
\xe8
n\xdbx\xfb\xb1
 {

59
H\xd\x93

\xc3w_h\xdee
{
ba\xa3
,
\xfeicks
};

60 aut\xd8
\x99
 =
h\xd\x93_li\xa1
.
	`beg\x9a
();

61 
\x99
 !\xf0
h\xd\x93_li\xa1
.
	`\x92d
(\xe8&& it->
ba\xa3
 < base) {

62 ++
\x99
;

64 aut\xd8
\x9a\xa3\xb9ed
 =
h\xd\x93_li\xa1
.
	`\x9a\xa3\xb9
(
\x99
,
\xc3w_h\xdee
);

65
	`m\x94ge
(
\x9a\xa3\xb9ed
);

66
	}
}

73 
m\x94ge
(
\xa1d
::
li\xa1
<
H\xd\x93
>::
\x99\x94\xa9\xdc

\x99
\xe8
n\xdbx\xfb\xb1
 {

74 i\xe0(
\x99
 =\xf0
h\xd\x93_li\xa1
.
\x92d
()) {

77 aut\xd8
	g\xc3xt
 =
\xa1d
::
\xc3xt
(
\x99
);

78 i\xe0(
	g\xc3xt
 !\xf0
h\xd\x93_li\xa1
.
\x92d
(\xe8&&
\x99
->
ba\xa3
 + it->
\xcbn
 =\xf0
\xc3xt
->base) {

79
\x99
->
\xcbn
 +\xf0
\xc3xt
->len;

80
	gh\xd\x93_li\xa1
.
\x94a\xa3
(
\xc3xt
);

82 i\xe0(
	g\x99
 !\xf0
h\xd\x93_li\xa1
.
beg\x9a
()) {

83 aut\xd8
\xb4ev
 =
\xa1d
::\xb4ev(
\x99
);

84 i\xe0(
	g\xb4ev
->
	gba\xa3
 +\x85\xbbv->
	g\xcbn
 =\xf0
\x99
->
ba\xa3
) {

85
\xb4ev
->
\xcbn
 +\xf0
\x99
->len;

86
	gh\xd\x93_li\xa1
.
\x94a\xa3
(
\x99
);

94 [[
nodis\xf\xe4d
]]
u\x9\xa964_t

	$max_h\xd\x93
(\xe8
n\xdbx\xfb\xb1
 {

95
u\x9\xa964_t

max
 = 0;

96 cڡ\x87ut\xd8&
h
 :
h\xd\x93_li\xa1
) {

97 i\xe0(
h
.
\xcbn
 >
max
) {

98
max
 =
h
.
\xcbn
;

101 
max
;

102
	}
}

113 
	$mem_\x9a\x99
(
u\x9\xa964_t

\xfeicks
\xe8
n\xdbx\xfb\xb1
 {

114
h\xd\x93_li\xa1
.
	`\x\xe3\x97r
();

115
h\xd\x93_li\xa1
.
	`push_back
({0,
\xfeicks
});

116
	}
}

	@mm/alloc.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~<c\xa1d\x9\xa9
>

17 [[
nodis\xf\xe4d
]]
u\x9\xa964_t

	$\x\xabloc_mem
(
u\x9\xa964_t

\xfeicks
\xe8
n\xdbx\xfb\xb1
;

25 
	$\xe4\x93_mem
(
u\x9\xa964_t

ba\xa3
, u\x9at64_\x88
\xfeicks
\xe8
n\xdbx\xfb\xb1
;

30 [[
nodis\xf\xe4d
]]
u\x9\xa964_t

	$max_h\xd\x93
(\xe8
n\xdbx\xfb\xb1
;

37 
	$mem_\x9a\x99
(
u\x9\xa964_t

\xfeicks
\xe8
n\xdbx\xfb\xb1
;

	@mm/break.cpp

19 
	~"../h/cڡ.h\xb5
"

20 
	~"../h/\x94r\xdc.h\xb5
"

21 
	~"../h/sig\xc7l.h\xb5
"

22 
	~"../h/ty\xb3.h\xb5
"

23 
	~"cڡ.h\xb5
"

24 
	~"glo.h\xb5
"

25 
	~"m\xb4oc.h\xb5
"

26 
	~"\xb7\xbfm.h\xb5
"

27 
	~<c\xa1ddef
>

28 
	~<c\xa1d\x9\xa9
>

30
cڡex\xb4
 
	gDATA_CHANGED
 = 1;

31
cڡex\xb4
 
	gSTACK_CHANGED
 = 2;

44
PUBLIC
 
	$do_brk
() {

55 
m\xb4oc
 *
rmp
;

56 
r
;

57
\xa1d
::
size_t

v
,
\xc3w_\xa5
;

58
\xa1d
::
size_t

\xc3w_\xfeicks
;

60
rmp
 =
mp
;

66
v
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
addr
);

67
\xc3w_\xfeicks
 = (
v
 +
CLICK_SIZE
 - 1\xe8>>
CLICK_SHIFT
;

68
	`sys_g\x91\xa5
(
who
, &
\xc3w_\xa5
);

69
r
 =
	`adju\xa1
(
rmp
,
\xc3w_\xfeicks
,
\xc3w_\xa5
);

70
\xbbs_\xb1r
 = (
r
 =\xf0
OK
 ?
addr
 : (*)-1);

71  (
r
);

72
	}
}

86 [[
nodis\xf\xe4d
]]
PUBLIC
 
	$adju\xa1
(
m\xb4oc
 *
rmp
,
\xa1d
::
size_t

d\xa9a_\x\xe3icks
,

87
\xa1d
::
size_t

\xa5
) {

94 
mem_m\xad
 *
mem_\xa5
, *
mem_dp
;

95
\xa1d
::
size_t

\xa5_\xfeick
,
g\xad_ba\xa3
,
low\x94
,
\xded_\xfeicks
;

96 
ch\x\xafged
,
r
,
\xe1
;

97
\x9at64_t

ba\xa3_of_\xa1ack
,
d\x96\x8f
;

99
mem_dp
 = &
rmp
->
mp_\xa3g
[
D
];

100
mem_\xa5
 = &
rmp
->
mp_\xa3g
[
S
];

101
ch\x\xafged
 = 0;

105
ba\xa3_of_\xa1ack
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
mem_\xa5
->
mem_v\x9c
\xe8+ s\x8ftic_\xff\xa1<\x9at64_t>(mem_\xa5->
mem_\xcbn
);

106
\xa5_\xfeick
 =
\xa5
 >>
CLICK_SHIFT
;

107 i\xe0(
\xa5_\xfeick
 >\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
ba\xa3_of_\xa1ack
))

108  (
E\xbc\xdcCode
::
ENOMEM
);

111
d\x96\x8f
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
mem_\xa5
->
mem_v\x9c
\xe8- s\x8ftic_\xff\xa1<\x9at64_t>(
\xa5_\xfeick
);

113
low\x94
 = (
d\x96\x8f
 > 0 ?
\xa5_\xfeick
 :
mem_\xa5
->
mem_v\x9c
);

114
g\xad_ba\xa3
 =
mem_dp
->
mem_v\x9c
 +
d\xa9a_\x\xe3icks
;

115 i\xe0(
low\x94
 <
g\xad_ba\xa3
)

116  (
E\xbc\xdcCode
::
ENOMEM
);

119
\xded_\xfeicks
 =
mem_dp
->
mem_\xcbn
;

120 i\xe0(
d\xa9a_\x\xe3icks
 !\xf0
mem_dp
->
mem_\xcbn
) {

121
mem_dp
->
mem_\xcbn
 =
d\xa9a_\x\xe3icks
;

122
ch\x\xafged
 |\xf0
DATA_CHANGED
;

126 i\xe0(
d\x96\x8f
 > 0) {

127
mem_\xa5
->
mem_v\x9c
 -\xf0
d\x96\x8f
;

128
mem_\xa5
->
mem_phys
 -\xf0
d\x96\x8f
;

129
mem_\xa5
->
mem_\xcbn
 +\xf0
d\x96\x8f
;

130
ch\x\xafged
 |\xf0
STACK_CHANGED
;

134
\xe1
 = (
rmp
->
mp_\xe6ags
 &
SEPARATE
);

135
r
 =
	`size_ok
(
\xe1
,
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
,\x84mp->mp_\xa3g[
D
].mem_\xcbn,\x84mp->mp_\xa3g[
S
].mem_len,

136
rmp
->
mp_\xa3g
[
D
].
mem_v\x9c
,\x84mp->mp_\xa3g[
S
].mem_vir);

137 i\xe0(
r
 =\xf0
OK
) {

138 i\xe0(
ch\x\xafged
)

139
	`sys_\xc3wm\xad
(
rmp
 -
m\xb4oc
,\x84mp->
mp_\xa3g
);

140  (
OK
);

144 i\xe0(
ch\x\xafged
 &
DATA_CHANGED
)

145
mem_dp
->
mem_\xcbn
 =
\xded_\xfeicks
;

146 i\xe0(
ch\x\xafged
 &
STACK_CHANGED
) {

147
mem_\xa5
->
mem_v\x9c
 +\xf0
d\x96\x8f
;

148
mem_\xa5
->
mem_phys
 +\xf0
d\x96\x8f
;

149
mem_\xa5
->
mem_\xcbn
 -\xf0
d\x96\x8f
;

151  (
E\xbc\xdcCode
::
ENOMEM
);

152
	}
}

169 [[
nodis\xf\xe4d
]]
PUBLIC
 
	$size_ok
(
f\x9\x93_ty\xb3
,
\xa1d
::
size_t

tc
, std::size_\x88
dc
, std::size_\x88
sc
,

170
\xa1d
::
size_t

dv\x9c
, std::size_\x88
s_v\x9c
) {

178
\xa1d
::
size_t

\xb1
,
pd
,
ps
;

183
\xb1
 = ((
tc
 <<
CLICK_SHIFT
\xe8+
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
) - 1) /

184
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
);

185
pd
 = ((
dc
 <<
CLICK_SHIFT
\xe8+
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
) - 1) /

186
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
);

187
ps
 = ((
sc
 <<
CLICK_SHIFT
\xe8+
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
) - 1) /

188
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
PAGE_SIZE
);

190 i\xe0(
f\x9\x93_ty\xb3
 =\xf0
SEPARATE
) {

191 i\xe0(
\xb1
 >
MAX_PAGES
 ||
pd
 +
ps
 > MAX_PAGES)

192  (
E\xbc\xdcCode
::
ENOMEM
);

194 i\xe0(
\xb1
 +
pd
 +
ps
 >
MAX_PAGES
)

195  (
E\xbc\xdcCode
::
ENOMEM
);

198 i\xe0(
dv\x9c
 +
dc
 >
s_v\x9c
)

199  (
E\xbc\xdcCode
::
ENOMEM
);

201  (
OK
);

202
	}
}

216
PRIVATE
 
	$\xa1ack_\xe7u\xc9
(
\xb4oc_\xc4
) {

221 
m\xb4oc
 *
rmp
;

222 
r
;

223
\xa1d
::
size_t

\xc3w_\xa5
;

225
rmp
 = &
m\xb4oc
[
\xb4oc_\xc4
];

226
	`sys_g\x91\xa5
(
rmp
 -
m\xb4oc
, &
\xc3w_\xa5
);

227
r
 =
	`adju\xa1
(
rmp
,\x84mp->
mp_\xa3g
[
D
].
mem_\xcbn
,
\xc3w_\xa5
);

228 i\xe0(
r
 =\xf0
OK
)

232
rmp
->
mp_\xf\xe1ch
 = 0;

233
	`sig_\xb4oc
(
rmp
,
SIGSEGV
);

234
	}
}

	@mm/const.hpp

1 #\xb4agm\xa8
\xda\xfb


4 
	~"../../h/cڡ.h\xb5
"

5 
	~"../../h/ty\xb3.h\xb5
"

6 
	~<c\xa1ddef
>

10
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

ZEROBUF_SIZE
 = 1024;

13 #i\xe0
ZEROBUF_SIZE
 >
MAX_PATH


14
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

MM_STACK_BYTES
 =
MAX_ISTACK_BYTES
 +
ZEROBUF_SIZE
 + 384;

16
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

MM_STACK_BYTES
 =
MAX_ISTACK_BYTES
 +
MAX_PATH
 + 384;

19
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

PAGE_SIZE
 = 4096;

20
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

MAX_PAGES
 = 1048576;

21
\x9al\x9ae

cڡex\xb4

	g\xa1d
::
size_t

HDR_SIZE
 = 32;

22
\x9al\x9ae

cڡex\xb4

phys_\x\xe3icks

	gNO_MEM
 = 0;

24 
	#\xb4\x9\xa9f

\xb4\x9atk


	)

	@mm/exec.cpp

15 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

16 
	~"../h/cڡ.h\xb5
"

17 
	~"../h/\x94r\xdc.h\xb5
"

18 
	~"../h/\xa1\xa9.h
"

19 
	~"../h/ty\xb3.h\xb5
"

20 
	~"\x\xabloc.h\xb5
"

21 
	~"cڡ.h\xb5
"

22 
	~"glo.h\xb5
"

23 
	~"m\xb4oc.h\xb5
"

24 
	~"\xb7\xbfm.h\xb5
"

25 
	~"tok\x92.h\xb5
"

26 
	~<\x\xabgܙhm
>

27 
	~<c\xa1ddef
>

28 
	~<c\xa1d\x9\xa9
>

30 
	#MAGIC
 0x04000301L

	)

31 
	#SEP
 0x00200000L

	)

32 
	#TEXTB
 2

	)

33 
	#DATAB
 3

	)

34 
	#BSSB
 4

	)

35 
	#TOTB
 6

	)

48
PUBLIC
 
	$do_exec
() {

54 
m\xb4oc
 *
rmp
;

55 
m
,
r
,
fd
,
\xe1
;

56 
mbuf
[
MAX_ISTACK_BYTES
];

57 
	uu
 {

58 
\xc7me_buf
[
MAX_PATH
];

59 
zb
[
ZEROBUF_SIZE
];

60 }
u
;

61 *
\xc3w_\xa5
;

62
\xa1d
::
size_t

\xa4c
,
d\xa1
,
\x8bxt_by\x8bs
,
d\xa9a_by\x8bs
,
bss_by\x8bs
,
\xa1k_by\x8bs
,

63
v\xa5
;

64
u\x9\xa964_t

t\xd9_by\x8bs
;

65
\xa1d
::
size_t

sc
;

66 
\xa1\xa9

s_buf
;

69
rmp
 =
mp
;

70
\xa1k_by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xa1ack_by\x8bs
);

71 i\xe0(
\xa1k_by\x8bs
 >
MAX_ISTACK_BYTES
)

72  (
E\xbc\xdcCode
::
ENOMEM
);

73 i\xe0(
exec_\xcbn
 <\xf00 ||\x83xec_\xcb\xc0>
MAX_PATH
)

74  (
E\xbc\xdcCode
::
EINVAL
);

77
\xa4c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
exec_\xc7me
);

78
d\xa1
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
u
.
\xc7me_buf
);

81
r
 =
	`mem_c\xddy
(
who
,
D
,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xa4c
),
MM_PROC_NR
, D, s\x8ftic_\xff\xa1<u\x9a\x8d\x8c_t>(
d\xa1
),

82
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
exec_\xcbn
));

83 i\xe0(
r
 !\xf0
OK
)

84  (
r
);

85
	`\x8b\x\xfb_fs
(
CHDIR
,
who
, 0, 0);

86
fd
 =
	`\x\xablowed
(
u
.
\xc7me_buf
, &
s_buf
,
X_BIT
);

87
	`\x8b\x\xfb_fs
(
CHDIR
, 0, 1, 0);

88 i\xe0(
fd
 < 0)

89  (
fd
);

92
sc
 = (
\xa1k_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

93
m
 =
	`\xbbad_h\x97d\x94
(
fd
, &
\xe1
, &
\x8bxt_by\x8bs
, &
d\xa9a_by\x8bs
, &
bss_by\x8bs
, &
t\xd9_by\x8bs
,
sc
);

94 i\xe0(
m
 < 0) {

95
	`\x\xe3o\xa3
(
fd
);

96  (
E\xbc\xdcCode
::
ENOEXEC
);

100
\xa4c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
\xa1ack_\xb1r
);

101
d\xa1
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
mbuf
);

103
r
 =
	`mem_c\xddy
(
who
,
D
,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xa4c
),
MM_PROC_NR
, D, s\x8ftic_\xff\xa1<u\x9a\x8d\x8c_t>(
d\xa1
),

104
\xa1k_by\x8bs
);

105 i\xe0(
r
 !\xf0
OK
) {

106
	`\x\xe3o\xa3
(
fd
);

107  (
E\xbc\xdcCode
::
EACCES
);

111
r
 =
	`\xc3w_mem
(
\x8bxt_by\x8bs
,
d\xa9a_by\x8bs
,
bss_by\x8bs
,
\xa1k_by\x8bs
,
t\xd9_by\x8bs
,
u
.
zb
,
ZEROBUF_SIZE
);

112 i\xe0(
r
 !\xf0
OK
) {

113
	`\x\xe3o\xa3
(
fd
);

114  (
r
);

119
v\xa5
 =
rmp
->
mp_\xa3g
[
S
].
mem_v\x9c
 <<
CLICK_SHIFT
;

120
	`\xb7tch_\xb1r
(
mbuf
,
v\xa5
);

121
\xa4c
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
mbuf
);

123
r
 =
	`mem_c\xddy
(
MM_PROC_NR
,
D
,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xa4c
),
who
, D, s\x8ftic_\xff\xa1<u\x9a\x8d\x8c_t>(
v\xa5
),

124
\xa1k_by\x8bs
);

125 i\xe0(
r
 !\xf0
OK
)

126
	`\xb7nic
("do_exe\xf8\xa1ack c\xddy\x83\xbc",
NO_NUM
);

129
	`l\xdfd_\xa3g
(
fd
,
T
,
\x8bxt_by\x8bs
);

130
	`l\xdfd_\xa3g
(
fd
,
D
,
d\xa9a_by\x8bs
);

131
	`\x\xe3o\xa3
(
fd
);

134 i\xe0(
s_buf
.
\xa1_mode
 &
I_SET_UID_BIT
) {

135
rmp
->
mp_effuid
 =
s_buf
.
\xa1_uid
;

136
	`\x8b\x\xfb_fs
(
SETUID
,
who
, ()
rmp
->
mp_\xbb\x\xabuid
, (\xecmp->
mp_effuid
);

138 i\xe0(
s_buf
.
\xa1_mode
 &
I_SET_GID_BIT
) {

139
rmp
->
mp_effgid
 =
s_buf
.
\xa1_gid
;

140
	`\x8b\x\xfb_fs
(
SETGID
,
who
, ()
rmp
->
mp_\xbb\x\xabgid
, (\xecmp->
mp_effgid
);

144
rmp
->
mp_\xf\xe1ch
 = 0;

145
rmp
->
mp_\xe6ags
 &\xf0~
SEPARATE
;

146
rmp
->
mp_\xe6ags
 |\xf0
\xe1
;

147
rmp
->
mp_tok\x92
 =
	`g\x92\x94\xa9e_tok\x92
();

148
\xc3w_\xa5
 = (*)
v\xa5
;

149
	`sys_exec
(
who
,
\xc3w_\xa5
,
rmp
->
mp_tok\x92
);

150  (
OK
);

151
	}
}

170
PRIVATE
 
	$\xbbad_h\x97d\x94
(
fd
, *
\xe1
,
\xa1d
::
size_t
 *
\x8bxt_by\x8bs
, std::size_\x88*
d\xa9a_by\x8bs
,

171
\xa1d
::
size_t
 *
bss_by\x8bs
,
u\x9\xa964_t
 *
t\xd9_by\x8bs
, std::size_\x88
sc
)

179 
m
,
\xf9
;

180
\xa1d
::
size_t

tc
,
dc
,
s_v\x9c
,
dv\x9c
;

181
u\x9\xa964_t

t\xd9c
;

182 
buf
[
HDR_SIZE
 / ()];

200 i\xe0(
	`\xbbad
(
fd
,
buf
,
HDR_SIZE
) != HDR_SIZE)

201  (
E\xbc\xdcCode
::
ENOEXEC
);

202 i\xe0((
buf
[0] & 0xFF0FFFFFL\xe8!\xf0
MAGIC
)

203  (
E\xbc\xdcCode
::
ENOEXEC
);

204 *
\xe1
 = (
buf
[0] &
SEP
 ?
SEPARATE
 : 0);

207 *
\x8bxt_by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
buf
[
TEXTB
]);

208 *
d\xa9a_by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
buf
[
DATAB
]);

209 i\xe0(*
\xe1
 !\xf0
SEPARATE
) {

211 *
d\xa9a_by\x8bs
 +\xf0*
\x8bxt_by\x8bs
;

212 *
\x8bxt_by\x8bs
 = 0;

216 *
bss_by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
buf
[
BSSB
]);

217 *
t\xd9_by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
buf
[
TOTB
]);

218 i\xe0(*
t\xd9_by\x8bs
 == 0)

219  (
E\xbc\xdcCode
::
ENOEXEC
);

222
tc
 = (*
\x8bxt_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SHIFT
) - 1) >> CLICK_SHIFT;

223
dc
 = (*
d\xa9a_by\x8bs
 + *
bss_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SHIFT
) - 1) >> CLICK_SHIFT;

225
t\xd9c
 = (*
t\xd9_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

226 i\xe0(
dc
 >\xf0
t\xd9c
)

229  (
E\xbc\xdcCode
::
ENOEXEC
);

230
dv\x9c
 = (*
\xe1
 =\xf0
SEPARATE
 ? 0 :
tc
);

235
s_v\x9c
 =
dv\x9c
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
t\xd9c
 -
sc
);

236
m
 =
	`size_ok
(*
\xe1
,
tc
,
dc
,
sc
,
dv\x9c
,
s_v\x9c
);

237
\xf9
 =
\xa1\xa9ic_\xff\xa1
<>(
buf
[1] &
BYTE
);

238 i\xe0(
\xf9
 >
HDR_SIZE
)

239
	`\xbbad
(
fd
,
buf
,
\xf9
 -
HDR_SIZE
);

240  (
m
);

241
	}
}

260
PRIVATE
 
	$\xc3w_mem
(
\xa1d
::
size_t

\x8bxt_by\x8bs
, std::size_\x88
d\xa9a_by\x8bs
, std::size_\x88
bss_by\x8bs
,

261
\xa1d
::
size_t

\xa1k_by\x8bs
,
u\x9\xa964_t

t\xd9_by\x8bs
, 
bf
[
ZEROBUF_SIZE
], 
zs
)

270 
m\xb4oc
 *
rmp
;

271 *
rzp
;

272
\xa1d
::
size_t

vzb
;

273
\xa1d
::
size_t

\x8bxt_\xfeicks
,
d\xa9a_\x\xe3icks
,
\xa1ack_\xfeicks
;

274
\x9at64_t

g\xad_\x\xe3icks
;

275
u\x9\xa964_t

t\xd9_\x\xe3icks
;

276
u\x9\xa964_t

\xc3w_ba\xa3
,
\xded_\xfeicks
;

277
u\x9\xa964_t

by\x8bs
,
ba\xa3
,
cou\xc1
,
bss_off\xa3t
;

286
\x8bxt_\xfeicks
 = (
\x8bxt_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

287
d\xa9a_\x\xe3icks
 =

288 (
d\xa9a_by\x8bs
 +
bss_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

289
\xa1ack_\xfeicks
 = (
\xa1k_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

290
t\xd9_\x\xe3icks
 = (
t\xd9_by\x8bs
 +
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
CLICK_SIZE
\xe8- 1\xe8>>
CLICK_SHIFT
;

294
g\xad_\x\xe3icks
 =
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
t\xd9_\x\xe3icks
\xe8- s\x8ftic_\xff\xa1<\x9at64_t>(
d\xa9a_\x\xe3icks
) -

295
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
\xa1ack_\xfeicks
);

296 i\xe0(
g\xad_\x\xe3icks
 < 0)

297  (
E\xbc\xdcCode
::
ENOMEM
);

305 i\xe0(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\x8bxt_\xfeicks
\xe8+
t\xd9_\x\xe3icks
 >
	`max_h\xd\x93
())

306  (
E\xbc\xdcCode
::
EAGAIN
);

309
rmp
 =
mp
;

312
\xded_\xfeicks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
rmp
->
mp_\xa3g
[
S
].
mem_v\x9c
 +\x84mp->mp_\xa3g[S].
mem_\xcbn
);

313 i\xe0(
rmp
->
mp_\xe6ags
 &
SEPARATE
)

314
\xded_\xfeicks
 +\xf0
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
);

315
	`\xe4\x93_mem
(
rmp
->
mp_\xa3g
[
T
].
mem_phys
,
\xded_\xfeicks
);

321
\xc3w_ba\xa3
 =
	`\x\xabloc_mem
(
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
\x8bxt_\xfeicks
\xe8+
t\xd9_\x\xe3icks
);

322 i\xe0(
\xc3w_ba\xa3
 =\xf0
NO_MEM
)

323
	`\xb7nic
("MM hސli\xa1 i\xa0\x9ac\xdasi\xa1\x92t",
NO_NUM
);

324
rmp
->
mp_\xa3g
[
T
].
mem_v\x9c
 = 0;

325
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
 =
\x8bxt_\xfeicks
;

326
rmp
->
mp_\xa3g
[
T
].
mem_phys
 =
\xc3w_ba\xa3
;

327
rmp
->
mp_\xa3g
[
D
].
mem_v\x9c
 = 0;

328
rmp
->
mp_\xa3g
[
D
].
mem_\xcbn
 =
d\xa9a_\x\xe3icks
;

329
rmp
->
mp_\xa3g
[
D
].
mem_phys
 =
\xc3w_ba\xa3
 +
\x8bxt_\xfeicks
;

330
rmp
->
mp_\xa3g
[
S
].
mem_v\x9c
 =\x84mp->mp_\xa3g[
D
].mem_v\x9c +
d\xa9a_\x\xe3icks
 +
g\xad_\x\xe3icks
;

331
rmp
->
mp_\xa3g
[
S
].
mem_\xcbn
 =
\xa1ack_\xfeicks
;

333
rmp
->
mp_\xa3g
[
S
].
mem_phys
 =\x84mp->mp_\xa3g[
D
].mem_phy\xa0+
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
d\xa9a_\x\xe3icks
) +

334
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
g\xad_\x\xe3icks
);

335
	`sys_\xc3wm\xad
(
who
,
rmp
->
mp_\xa3g
);

338 
rzp
 = &
bf
[0];\x84z\xb0< &bf[
zs
];\x84zp++)

339 *
rzp
 = 0;

341
by\x8bs
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(\xa1\xa9ic_\xff\xa1<
\x9at64_t
>(
d\xa9a_\x\xe3icks
\xe8+
g\xad_\x\xe3icks
 +

342
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
\xa1ack_\xfeicks
))

343 <<
CLICK_SHIFT
;

344
vzb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
bf
);

347
ba\xa3
 = (
rmp
->
mp_\xa3g
[
T
].
mem_phys
 +
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>\xd4mp->mp_\xa3g[T].
mem_\xcbn
)\xe8<<
CLICK_SHIFT
;

348
bss_off\xa3t
 = (
d\xa9a_by\x8bs
 >>
CLICK_SHIFT
) << CLICK_SHIFT;

349
ba\xa3
 +\xf0
bss_off\xa3t
;

351
by\x8bs
 -\xf0
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
bss_off\xa3t
);

353 
by\x8bs
 > 0) {

355
cou\xc1
 =
\xa1d
::
	`m\x9a
(
by\x8bs
,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
zs
));

359 i\xe0(
	`mem_c\xddy
(
MM_PROC_NR
,
D
,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
vzb
),
ABS
, 0,

360
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
ba\xa3
), s\x8ftic_\xff\xa1<
\xa1d
::
size_t
>(
cou\xc1
)\xe8!\xf0
OK
)

361
	`\xb7nic
("\xc3w_mem c\xaa'\x88z\x94o",
NO_NUM
);

362
ba\xa3
 +\xf0
cou\xc1
;

363
by\x8bs
 -\xf0
cou\xc1
;

365  (
OK
);

366
	}
}

380
PRIVATE
 
	$\xb7tch_\xb1r
(
\xa1ack
[
MAX_ISTACK_BYTES
],
\xa1d
::
size_t

ba\xa3
)

389 **
\xad
,
\xe6ag
;

390
\xa1d
::
size_t

v
;

392
\xe6ag
 = 0;

393
\xad
 = (**)
\xa1ack
;

394
\xad
++;

395 
\xe6ag
 < 2) {

396 i\xe0(
\xad
 >\xf0(**)&
\xa1ack
[
MAX_ISTACK_BYTES
])

398 i\xe0(*
\xad
 !\xf0
NIL_PTR
) {

399
v
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(*
\xad
);

400
v
 +\xf0
ba\xa3
;

401 *
\xad
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
v
);

403
\xe6ag
++;

405
\xad
++;

407
	}
}

419
PRIVATE
 
	$l\xdfd_\xa3g
(
fd
, 
\xa3g
,
\xa1d
::
size_t

\xa3g_by\x8bs
)

433 
\xc3w_fd
;

435
\xa1d
::
size_t

by\x8bs_to_\xbbad
;

437 i\xe0(
\xa3g_by\x8bs
 == 0)

439
\xc3w_fd
 = (
who
 << 8\xe8| (
\xa3g
 << 6\xe8|
fd
;

441 *
ubuf_\xb1r
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
mp
->
mp_\xa3g
[
\xa3g
].
mem_v\x9c
 <<
CLICK_SHIFT
);

442
by\x8bs_to_\xbbad
 =
\xa3g_by\x8bs
;

444
	`\xbbad
(
\xc3w_fd
,
ubuf_\xb1r
,
by\x8bs_to_\xbbad
);

445
	}
}

	@mm/forkexit.cpp

16 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

17 
	~"../h/cڡ.h\xb5
"

18 
	~"../h/\x94r\xdc.h\xb5
"

19 
	~"../h/ty\xb3.h\xb5
"

20 
	~"\x\xabloc.h\xb5
"

21 
	~"cڡ.h\xb5
"

22 
	~"glo.h\xb5
"

23 
	~"m\xb4oc.h\xb5
"

24 
	~"\xb7\xbfm.h\xb5
"

25 
	~"tok\x92.h\xb5
"

26 
	~<c\xa1ddef
>

27 
	~<c\xa1d\x9\xa9
>

29 
	#LAST_FEW
 2

	)

31
PRIVATE

	g\xc3xt_pid
 =
INIT_PROC_NR
 + 1;

38
PUBLIC
 
	$do_f\xdck
() {

41 
m\xb4oc
 *
rmp
;

42 
m\xb4oc
 *
rmc
;

43 
i
,
ch\x9ed_\xc4
,
t
;

44 *
\xa5\x8c
, *
d\xb1r
;

45
u\x9\xa964_t

\xb4og_by\x8bs
;

46
u\x9\xa964_t

\xb4og_\xfeicks
,
ch\x9ed_ba\xa3
;

47
u\x9\xa964_t

\xb7\xbb\xc1_abs
,
ch\x9ed_abs
;

54
rmp
 =
mp
;

55 i\xe0(
\xb4ocs_\x9a_u\xa3
 =\xf0
NR_PROCS
)

56  (
E\xbc\xdcCode
::
EAGAIN
);

57 i\xe0(
\xb4ocs_\x9a_u\xa3
 >\xf0
NR_PROCS
 -
LAST_FEW
 &&
rmp
->
mp_effuid
 != 0)

58  (
E\xbc\xdcCode
::
EAGAIN
);

63
\xb4og_\xfeicks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
 +\x84mp->mp_\xa3g[
D
].mem_len +

64
rmp
->
mp_\xa3g
[
S
].
mem_\xcbn
);

65
\xb4og_by\x8bs
 =
\xb4og_\xfeicks
 <<
CLICK_SHIFT
;

66 i\xe0((
ch\x9ed_ba\xa3
 =
	`\x\xabloc_mem
(
\xb4og_\xfeicks
)\xe8=\xf0
NO_MEM
)

67  (
E\xbc\xdcCode
::
EAGAIN
);

70
ch\x9ed_abs
 =
ch\x9ed_ba\xa3
 <<
CLICK_SHIFT
;

71
\xb7\xbb\xc1_abs
 =
rmp
->
mp_\xa3g
[
T
].
mem_phys
 <<
CLICK_SHIFT
;

75
i
 =
	`mem_c\xddy
(
ABS
, 0,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
\xb7\xbb\xc1_abs
), ABS, 0,

76
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
ch\x9ed_abs
), s\x8ftic_\xff\xa1<
\xa1d
::
size_t
>(
\xb4og_by\x8bs
));

77 i\xe0(
i
 < 0)

78
	`\xb7nic
("do_f\xdck c\xaa'\x88c\xddy",
i
);

81 
rmc
 = &
m\xb4oc
[0];\x84m\xf8< &m\xb4oc[
NR_PROCS
];\x84mc++)

82 i\xe0((
rmc
->
mp_\xe6ags
 &
IN_USE
) == 0)

86
ch\x9ed_\xc4
 =
rmc
 -
m\xb4oc
;

87
\xb4ocs_\x9a_u\xa3
++;

88
\xa5\x8c
 = (*)
rmp
;

89
d\xb1r
 = (*)
rmc
;

90
i
 = (
m\xb4oc
);

91 
i
--)

92 *
d\xb1r
++ = *
\xa5\x8c
++;

94
rmc
->
mp_\xb7\xbb\xc1
 =
who
;

95
rmc
->
mp_\xa3g
[
T
].
mem_phys
 =
ch\x9ed_ba\xa3
;

98
rmc
->
mp_\xa3g
[
D
].
mem_phys
 =
ch\x9ed_ba\xa3
 +
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>\xd4mc->mp_\xa3g[
T
].
mem_\xcbn
);

100
rmc
->
mp_\xa3g
[
S
].
mem_phys
 =

101
rmc
->
mp_\xa3g
[
D
].
mem_phys
 + (
rmp
->mp_\xa3g[
S
].mem_phys -\x84mp->mp_seg[D].mem_phys);

102
rmc
->
mp_ex\x99\xa1\xa9us
 = 0;

103
rmc
->
mp_sig\xa1\xa9us
 = 0;

104
rmc
->
mp_tok\x92
 =
	`g\x92\x94\xa9e_tok\x92
();

108
t
 = 0;

109
\xc3xt_pid
 = (\xc3xt_pid < 30000 ?\x82ext_pid + 1 :
INIT_PROC_NR
 + 1);

110 
rmp
 = &
m\xb4oc
[0];\x84m\xb0< &m\xb4oc[
NR_PROCS
];\x84mp++)

111 i\xe0(
rmp
->
mp_pid
 =\xf0
\xc3xt_pid
) {

112
t
 = 1;

115
rmc
->
mp_pid
 =
\xc3xt_pid
;

116 } 
t
);

119
	`sys_f\xdck
(
who
,
ch\x9ed_\xc4
,
rmc
->
mp_pid
,\x84mc->
mp_tok\x92
);

120
	`\x8b\x\xfb_fs
(
FORK
,
who
,
ch\x9ed_\xc4
, 0);

123
	`sys_\xc3wm\xad
(
ch\x9ed_\xc4
,
rmc
->
mp_\xa3g
);

126
	`\xbb\xb6y
(
ch\x9ed_\xc4
, 0, 0,
NIL_PTR
);

127  (
\xc3xt_pid
);

128
	}
}

133
PUBLIC
 
	$do_mm_ex\x99
() {

138
	`mm_ex\x99
(
mp
,
\xa1\xa9us
);

139
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

140  (
OK
);

141
	}
}

146
PUBLIC

	$mm_ex\x99
(
rmp
,
ex\x99_\xa1\xa9us
)

147 
m\xb4oc
 *
rmp
;

148 
ex\x99_\xa1\xa9us
;

155
rmp
->
mp_ex\x99\xa1\xa9us
 = ()
ex\x99_\xa1\xa9us
;

157 i\xe0(
m\xb4oc
[
rmp
->
mp_\xb7\xbb\xc1
].
mp_\xe6ags
 &
WAITING
)

158
	`\x\xe3\x97nup
(
rmp
);

160
rmp
->
mp_\xe6ags
 |\xf0
HANGING
;

163 i\xe0(
rmp
->
mp_\xe6ags
 &
ALARM_ON
)

164
	`\xa3t_\x\xab\xacm
(
rmp
 -
m\xb4oc
, ()0);

167
	`sys_x\x99
(
rmp
->
mp_\xb7\xbb\xc1
,\x84m\xb0-
m\xb4oc
);

168
	`\x8b\x\xfb_fs
(
EXIT
,
rmp
 -
m\xb4oc
, 0, 0);

169
	}
}

174
PUBLIC
 
	$do_wa\x99
() {

179 
m\xb4oc
 *
\xbd
;

180 
ch\x9ed\xbbn
;

188
ch\x9ed\xbbn
 = 0;

189 
\xbd
 = &
m\xb4oc
[0];\x84\xb0< &m\xb4oc[
NR_PROCS
];\x84p++) {

190 i\xe0((
\xbd
->
mp_\xe6ags
 &
IN_USE
\xe8&&\x84p->
mp_\xb7\xbb\xc1
 =\xf0
who
) {

191
ch\x9ed\xbbn
++;

192 i\xe0(
\xbd
->
mp_\xe6ags
 &
HANGING
) {

193
	`\x\xe3\x97nup
(
\xbd
);

194
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

195  (
OK
);

201 i\xe0(
ch\x9ed\xbbn
 > 0) {

202
mp
->
mp_\xe6ags
 |\xf0
WAITING
;

203
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

204  (
OK
);

206  (
E\xbc\xdcCode
::
ECHILD
);

207
	}
}

212
PRIVATE

	$\x\xe3\x97nup
(
ch\x9ed
)

213 
m\xb4oc
 *
ch\x9ed
;

224 
m\xb4oc
 *
\xb7\xbb\xc1
, *
\xbd
;

225 
\x9a\x99_wa\x99\x9ag
,
ch\x9ed_\xc4
;

226 
r
;

227
u\x9\xa964_t

s
;

229
ch\x9ed_\xc4
 =
ch\x9ed
 -
m\xb4oc
;

230
\xb7\xbb\xc1
 = &
m\xb4oc
[
ch\x9ed
->
mp_\xb7\xbb\xc1
];

233
r
 =
ch\x9ed
->
mp_sig\xa1\xa9us
 & 0377;

234
r
 =\x84 | (
ch\x9ed
->
mp_ex\x99\xa1\xa9us
 << 8);

235
	`\xbb\xb6y
(
ch\x9ed
->
mp_\xb7\xbb\xc1
, ch\x9ed->
mp_pid
,
r
,
NIL_PTR
);

240
s
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
ch\x9ed
->
mp_\xa3g
[
S
].
mem_v\x9c
 + ch\x9ed->mp_\xa3g[S].
mem_\xcbn
);

241 i\xe0(
ch\x9ed
->
mp_\xe6ags
 &
SEPARATE
)

242
s
 +\xf0
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
ch\x9ed
->
mp_\xa3g
[
T
].
mem_\xcbn
);

245
	`\xe4\x93_mem
(
ch\x9ed
->
mp_\xa3g
[
T
].
mem_phys
,
s
);

248
ch\x9ed
->
mp_\xe6ags
 &\xf0~
HANGING
;

249
ch\x9ed
->
mp_\xe6ags
 &\xf0~
PAUSED
;

250
\xb7\xbb\xc1
->
mp_\xe6ags
 &\xf0~
WAITING
;

251
ch\x9ed
->
mp_\xe6ags
 &\xf0~
IN_USE
;

252
\xb4ocs_\x9a_u\xa3
--;

255
\x9a\x99_wa\x99\x9ag
 = (
m\xb4oc
[
INIT_PROC_NR
].
mp_\xe6ags
 &
WAITING
 ? 1 : 0);

256 
\xbd
 = &
m\xb4oc
[0];\x84\xb0< &m\xb4oc[
NR_PROCS
];\x84p++) {

257 i\xe0(
\xbd
->
mp_\xb7\xbb\xc1
 =\xf0
ch\x9ed_\xc4
) {

259
\xbd
->
mp_\xb7\xbb\xc1
 =
INIT_PROC_NR
;

260 i\xe0(
\x9a\x99_wa\x99\x9ag
 && (
\xbd
->
mp_\xe6ags
 &
HANGING
)) {

262
	`\x\xe3\x97nup
(
\xbd
);

263
\x9a\x99_wa\x99\x9ag
 = 0;

267
	}
}

	@mm/getset.cpp

11 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

12 
	~"../h/cڡ.h\xb5
"

13 
	~"../h/\x94r\xdc.h\xb5
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"cڡ.h\xb5
"

16 
	~"glo.h\xb5
"

17 
	~"m\xb4oc.h\xb5
"

18 
	~"\xb7\xbfm.h\xb5
"

19 
	~<c\xa1ddef
>

20 
	~<c\xa1d\x9\xa9
>

34
PUBLIC
 
	$do_g\x91\xa3t
(\xe8
n\xdbx\xfb\xb1
 {

39 aut\xd8*
rmp
 =
mp
;

40 
\xbbsu\xc9
{};

42 
mm_\xff\x\xfb
) {

43 
GETUID
:

46
\xbbsu\xc9
 =
rmp
->
mp_\xbb\x\xabuid
;

47
\xbbsu\xc92
 =
rmp
->
mp_effuid
;

50 
GETGID
:

53
\xbbsu\xc9
 =
rmp
->
mp_\xbb\x\xabgid
;

54
\xbbsu\xc92
 =
rmp
->
mp_effgid
;

57 
GETPID
:

59
\xbbsu\xc9
 =
m\xb4oc
[
who
].
mp_pid
;

60
\xbbsu\xc92
 =
m\xb4oc
[
rmp
->
mp_\xb7\xbb\xc1
].
mp_pid
;

63 
SETUID
:

66 i\xe0(
rmp
->
mp_\xbb\x\xabuid
 !\xf0
\xa1\xa9ic_\xff\xa1
<
uid
>(
u\xa4_id
\xe8&&\x84mp->
mp_effuid
 !\xf0
SUPER_USER
)

67  (
E\xbc\xdcCode
::
EPERM
);

68
rmp
->
mp_\xbb\x\xabuid
 =
\xa1\xa9ic_\xff\xa1
<
uid
>(
u\xa4_id
);

69
rmp
->
mp_effuid
 =
\xa1\xa9ic_\xff\xa1
<
uid
>(
u\xa4_id
);

70
	`\x8b\x\xfb_fs
(
SETUID
,
who
,
u\xa4_id
,

71
u\xa4_id
);

72
\xbbsu\xc9
 =
OK
;

75 
SETGID
:

79 i\xe0(
rmp
->
mp_\xbb\x\xabgid
 !\xf0
g\xbdid
 &&

80
rmp
->
mp_effuid
 !\xf0
SUPER_USER
)

81  (
E\xbc\xdcCode
::
EPERM
);

82
rmp
->
mp_\xbb\x\xabgid
 =
g\xbdid
;

83
rmp
->
mp_effgid
 =
g\xbdid
;

84
	`\x8b\x\xfb_fs
(
SETGID
,
who
,
\xa1\xa9ic_\xff\xa1
<>(
g\xbdid
),

85
\xa1\xa9ic_\xff\xa1
<>(
g\xbdid
));

86
\xbbsu\xc9
 =
OK
;

90 
\xbbsu\xc9
;

91
	}
}

	@mm/glo.hpp

1 #\xb4agm\xa8
\xda\xfb


8 
m\xb4oc
 *
mp
;

9 
d\xd\xa9_\xbb\xb6y
;

10 
\xb4ocs_\x9a_u\xa3
;

15
mes\xa7ge

mm_\x9a
;

16
mes\xa7ge

mm_out
;

17 
who
;

18 
mm_\xff\x\xfb
;

23 
\x94r_code
;

24 
\xbbsu\xc92
;

25 *
\xbbs_\xb1r
;

28 
mm_\xa1ack
[
MM_STACK_BYTES
];

	@mm/main.cpp

16 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

17 
	~"../h/com.h\xb5
"

18 
	~"../h/cڡ.h\xb5
"

19 
	~"../h/\x94r\xdc.h\xb5
"

20 
	~"../\x9a\x\xe3ude/vm.h
"

21 
	~"\x\xabloc.h\xb5
"

22 
	~"cڡ.h\xb5
"

23 
	~"glo.h\xb5
"

24 
	~"m\xb4oc.h\xb5
"

25 
	~"\xb7\xbfm.h\xb5
"

26 
	~<c\xa1ddef
>

27 
	~<c\xa1d\x9\xa9
>

28 
	~<c\xa1dio
>

31 
	#ENOUGH
 \

32
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(4096\xe8

	)

33 
	#CLICK_TO_K
 (1024L /
CLICK_SIZE
\xe8

	)

35 
u\x9\xa964_t

	gt\xd9_mem
;

36 (*
\xff\xce_vec
[])();

47 
	$ma\x9a
(\xe8
n\xdbx\xfb\xb1
 {

50 
\x94r\xdc
;

52
	`mm_\x9a\x99
();

55 
TRUE
) {

57
	`g\x91_w\xdck
();

58
mp
 = &
m\xb4oc
[
who
];

61
\x94r\xdc
 =
OK
;

62
d\xd\xa9_\xbb\xb6y
 =
FALSE
;

63
\x94r_code
 = -999;

66 i\xe0(
mm_\xff\x\xfb
 < 0 || mm_\xff\xce >\xf0
NCALLS
)

67
\x94r\xdc
 =
E\xbc\xdcCode
::
E_BAD_CALL
;

69
\x94r\xdc
 = (*
\xff\xce_vec
[
mm_\xff\x\xfb
])();

72 i\xe0(
d\xd\xa9_\xbb\xb6y
)

74 i\xe0(
mm_\xff\x\xfb
 =\xf0
EXEC
 &&
\x94r\xdc
 =\xf0
OK
)

76
	`\xbb\xb6y
(
who
,
\x94r\xdc
,
\xbbsu\xc92
,
\xbbs_\xb1r
);

78
	}
}

89 
	$g\x91_w\xdck
(\xe8
n\xdbx\xfb\xb1
 {

92 i\xe0(
	`\xbb\xfbive
(
ANY
, &
mm_\x9a
\xe8!\xf0
OK
)

93
	`\xb7nic
("MM\x84e\xfbiv\x90\x94r\xdc",
NO_NUM
);

94
who
 =
mm_\x9a
.
m_sour\xfb
;

95 i\xe0(
who
 <
HARDWARE
 || wh\xd8>\xf0
NR_PROCS
)

96
	`\xb7nic
("MM c\xae\xcbd by",
who
);

97
mm_\xff\x\xfb
 =
mm_\x9a
.
m_ty\xb3
;

98
	}
}

112
PUBLIC
 
	$\xbb\xb6y
(
\xb4oc_\xc4
, 
\xbbsu\xc9
, 
\xbbs2
, *
\xbb\xa5t
\xe8
n\xdbx\xfb\xb1
 {

115 
m\xb4oc
 *
\xb4oc_\xb1r
;

118
\xb4oc_\xb1r
 = &
m\xb4oc
[
\xb4oc_\xc4
];

119 i\xe0((
\xb4oc_\xb1r
->
mp_\xe6ags
 &
IN_USE
\xe8=\xf00 || (\xb4oc_\xb1r->mp_\xe6ag\xa0&
HANGING
))

121
\xbb\xb6y_ty\xb3
 =
\xbbsu\xc9
;

122
\xbb\xb6y_i1
 =
\xbbs2
;

123
\xbb\xb6y_p1
 =
\xbb\xa5t
;

124 i\xe0(
	`\xa3nd
(
\xb4oc_\xc4
, &
mm_out
\xe8!\xf0
OK
)

125
	`\xb7nic
("MM c\xaa'\x88\xbb\xb6y",
NO_NUM
);

126
	}
}

137 
	$mm_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

141
u\x9\xa964_t

	`g\x91_t\xd9_mem
(\xe8
n\xdbx\xfb\xb1
;

142 
	`mm_\xb7g\x9ag_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
;

143 
	`vm_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
;

148
t\xd9_mem
 =
	`g\x91_t\xd9_mem
();

149
	`mem_\x9a\x99
(
t\xd9_mem
);

150
	`mm_\xb7g\x9ag_\x9a\x99
();

151
	`vm_\x9a\x99
();

154
m\xb4oc
[
MM_PROC_NR
].
mp_\xe6ags
 |\xf0
IN_USE
;

155
m\xb4oc
[
FS_PROC_NR
].
mp_\xe6ags
 |\xf0
IN_USE
;

156
m\xb4oc
[
INIT_PROC_NR
].
mp_\xe6ags
 |\xf0
IN_USE
;

157
\xb4ocs_\x9a_u\xa3
 = 3;

160
	}
}

172
PUBLIC
 
	$do_brk2
(\xe8
n\xdbx\xfb\xb1
 {

182 
mem1
,
mem2
,
mem3
;

183 
m\xb4oc
 *
rmp
;

184
u\x9\xa964_t

\x9a\x99_\xdcg
,
\x9a\x99_\xfeicks
,
\xbfm_ba\xa3
,
\xbfm_\xfeicks
,
t\xd9_\x\xe3icks
;

185
u\x9\xa964_t

\x9a\x99_\x8bxt_\xfeicks
,
\x9a\x99_d\xa9a_\xfeicks
;

187 i\xe0(
who
 !\xf0
FS_PROC_NR
)

188  (
E\xbc\xdcCode
::
EPERM
);

192
\x9a\x99_\x8bxt_\xfeicks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
mm_\x9a
.
	`m1_i1
());

193
\x9a\x99_d\xa9a_\xfeicks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
mm_\x9a
.
	`m1_i2
());

194
t\xd9_\x\xe3icks
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa964_t
>(
mm_\x9a
.
	`m1_i3
());

195
\x9a\x99_\xdcg
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
u\x9\xa964_t
>\xd4e\x9a\x8b\xbd\xbbt_\xff\xa1<
u\x9a\x8d\x8c_t
>(
mm_\x9a
.
	`m1_p1
()));

197
\x9a\x99_\xfeicks
 =
\x9a\x99_\x8bxt_\xfeicks
 +
\x9a\x99_d\xa9a_\xfeicks
;

198
\xbfm_ba\xa3
 =
\x9a\x99_\xdcg
 +
\x9a\x99_\xfeicks
;

199
\xbfm_\xfeicks
 =
t\xd9_\x\xe3icks
 -
\xbfm_ba\xa3
;

200
	`\x\xabloc_mem
(
t\xd9_\x\xe3icks
);

205
mem1
 =
\xa1\xa9ic_\xff\xa1
<>(
t\xd9_mem
 /
CLICK_TO_K
);

206
mem2
 =
\xa1\xa9ic_\xff\xa1
<>((
\xbfm_ba\xa3
 + 512 /
CLICK_SIZE
\xe8/
CLICK_TO_K
);

207
mem3
 =
\xa1\xa9ic_\xff\xa1
<>(
\xbfm_\xfeicks
 /
CLICK_TO_K
);

208
	`\xb4\x9\xa9f
("%c 8%c~0", 033, 033);

209
	`\xb4\x9\xa9f
("Mem\xdcy siz\x90\xf0%dK ",
mem1
);

210
	`\xb4\x9\xa9f
("MINIX = %dK ",
mem2
);

211
	`\xb4\x9\xa9f
("RAM disk = %dK ",
mem3
);

212
	`\xb4\x9\xa9f
("Ava\x9eab\xcb = %dK\n\n",
mem1
 -
mem2
 -
mem3
);

213 i\xe0(
mem1
 -
mem2
 -
mem3
 < 32) {

214
	`\xb4\x9\xa9f
("\nNكnough mem\xdcy\x81\xd8ru\xc0MINIX\n\n",
NO_NUM
);

215
	`sys_ab\xd\xf9
();

219
rmp
 = &
m\xb4oc
[
INIT_PROC_NR
];

221
rmp
->
mp_\xa3g
[
T
].
mem_phys
 =
\x9a\x99_\xdcg
;

224
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\x9a\x99_\x8bxt_\xfeicks
);

225
rmp
->
mp_\xa3g
[
D
].
mem_phys
 =
\x9a\x99_\xdcg
 +
\x9a\x99_\x8bxt_\xfeicks
;

226
rmp
->
mp_\xa3g
[
D
].
mem_\xcbn
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\x9a\x99_d\xa9a_\xfeicks
);

228
rmp
->
mp_\xa3g
[
S
].
mem_v\x9c
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\x9a\x99_\xfeicks
);

229
rmp
->
mp_\xa3g
[
S
].
mem_phys
 =
\x9a\x99_\xdcg
 +
\x9a\x99_\xfeicks
;

230 i\xe0(
\x9a\x99_\x8bxt_\xfeicks
 != 0)

231
rmp
->
mp_\xe6ags
 |\xf0
SEPARATE
;

233  (
OK
);

234
	}
}

247 
	$\xa3t_m\xad
(
\xb4oc_\xc4
,
u\x9\xa964_t

ba\xa3
, u\x9at64_\x88
\xfeicks
\xe8
n\xdbx\xfb\xb1
 {

251 
m\xb4oc
 *
rmp
;

252
\xa1d
::
size_t

v\x\xe3icks
;

254
rmp
 = &
m\xb4oc
[
\xb4oc_\xc4
];

255
v\x\xe3icks
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(

256
\xfeicks
);

259
rmp
->
mp_\xa3g
[
T
].
mem_v\x9c
 = 0;

260
rmp
->
mp_\xa3g
[
T
].
mem_\xcbn
 = 0;

261
rmp
->
mp_\xa3g
[
T
].
mem_phys
 =
ba\xa3
;

262
rmp
->
mp_\xa3g
[
D
].
mem_v\x9c
 = 0;

263
rmp
->
mp_\xa3g
[
D
].
mem_\xcbn
 =
v\x\xe3icks
;

264
rmp
->
mp_\xa3g
[
D
].
mem_phys
 =
ba\xa3
;

265
rmp
->
mp_\xa3g
[
S
].
mem_v\x9c
 =
v\x\xe3icks
;

266
rmp
->
mp_\xa3g
[
S
].
mem_\xcbn
 = 0;

267
rmp
->
mp_\xa3g
[
S
].
mem_phys
 =

268
ba\xa3
 +
v\x\xe3icks
;

269
	`sys_\xc3wm\xad
(
\xb4oc_\xc4
,
rmp
->
mp_\xa3g
);

270
	}
}

	@mm/mproc.hpp

1 #\xb4agm\xa8
\xda\xfb


12 
	~"../h/ty\xb3.h\xb5
"

13 
	~<c\xa1ddef
>

14 
	~<c\xa1d\x9\xa9
>

16
EXTERN
 
	sm\xb4oc
 {

17 
mem_m\xad

	mmp_\xa3g
[
NR_SEGS
];

18 
	mmp_ex\x99\xa1\xa9us
;

19 
	mmp_sig\xa1\xa9us
;

20 
	mmp_pid
;

21 
	mmp_\xb7\xbb\xc1
;

22 
	mmp_\xb4ocg\xbd
;

23
	m\xa1d
::
u\x9\xa964_t

mp_tok\x92
;

26
uid

	mmp_\xbb\x\xabuid
;

27
uid

	mmp_effuid
;

28
gid

	mmp_\xbb\x\xabgid
;

29
gid

	mmp_effgid
;

32
unsh\xd\xf9

	mmp_ign\xd\xfb
;

33
unsh\xd\xf9

	mmp_\xf\xe1ch
;

34 (*
	mmp_func
)();

36 
	mmp_\xe6ags
;

37 }
	gm\xb4oc
[
NR_PROCS
];

42
\x9al\x9ae

cڡex\xb4
 
	gIN_USE
 = 001;

43
\x9al\x9ae

cڡex\xb4
 
	gWAITING
 = 002;

44
\x9al\x9ae

cڡex\xb4
 
	gHANGING
 = 004;

45
\x9al\x9ae

cڡex\xb4
 
	gPAUSED
 = 010;

46
\x9al\x9ae

cڡex\xb4
 
	gALARM_ON
 = 020;

47
\x9al\x9ae

cڡex\xb4
 
	gSEPARATE
 = 040;

	@mm/paging.cpp

1 
	~"../\x9a\x\xe3ude/\xb7g\x9ag.h
"

2 
	~"cڡ.h\xb5
"

6 
v\x9\xf9_addr64

	g\xc3xt_u\xa3r_va
;

13 
	$mm_\xb7g\x9ag_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

15
\xc3xt_u\xa3r_va
 =
	`U64_C
(0x0000000000400000);

16
	}
}

25 *
	$vm_\x\xabloc
(
u64_t

by\x8bs
,
VmF\xcfgs

\xe6ags
\xe8
n\xdbx\xfb\xb1
 {

26
v\x9\xf9_addr64

va
 =
\xc3xt_u\xa3r_va
;

27 
\xb7ges
 = (
by\x8bs
 +
PAGE_SIZE_4K
 - 1) / PAGE_SIZE_4K;

28
\xc3xt_u\xa3r_va
 +\xf0
\xb7ges
 *
PAGE_SIZE_4K
;

29 ()
\xe6ags
;

30  (*)
va
;

31
	}
}

	@mm/param.hpp

8 
	#addr

mm_\x9a
.
	`m1_p1
()

	)

9 
	#exec_\xc7me

mm_\x9a
.
	`m1_p1
()

	)

10 
	#exec_\xcbn

mm_\x9a
.
	`m1_i1
()

	)

11 
	#func

mm_\x9a
.
	`m6_f1
()

	)

12 
	#g\xbdid
 (
gid
\xe8
mm_\x9a
.
	`m1_i1
()

	)

13 
	#k\x9\x96_sig

mm_\x9a
.
	`m1_i2
()

	)

14 
	#\xc7m\x96\x92

mm_\x9a
.
	`m1_i1
()

	)

15 
	#pid

mm_\x9a
.
	`m1_i1
()

	)

16 
	#\xa3c\xdads

mm_\x9a
.
	`m1_i1
()

	)

17 
	#sig

mm_\x9a
.
	`m6_i1
()

	)

18 
	#\xa1ack_by\x8bs

mm_\x9a
.
	`m1_i2
()

	)

19 
	#\xa1ack_\xb1r

mm_\x9a
.
	`m1_p2
()

	)

20 
	#\xa1\xa9us

mm_\x9a
.
	`m1_i1
()

	)

21 
	#u\xa4_id
 (
uid
\xe8
mm_\x9a
.
	`m1_i1
()

	)

24 
	#\xbb\xb6y_ty\xb3

mm_out
.
m_ty\xb3


	)

25 
	#\xbb\xb6y_i1

mm_out
.
	`m2_i1
()

	)

26 
	#\xbb\xb6y_p1

mm_out
.
	`m2_p1
()

	)

	@mm/putc.cpp

6 
	~"../h/com.h\xb5
"

7 
	~"../h/cڡ.h\xb5
"

8 
	~"../h/ty\xb3.h\xb5
"

10 
	#STD_OUTPUT
 1

	)

11 
	#BUF_SIZE
 100

	)

13
PRIVATE
 
	gbuf_cou\xc1
;

14
PRIVATE
 
	g\xb4\x9\xa9_buf
[
BUF_SIZE
];

15
PRIVATE

mes\xa7ge

	gputch_msg
;

20
PUBLIC

	$putc
(
c
)

21 
c
;

25
\xb4\x9at_buf
[
buf_cou\xc1
++] =
c
;

26 i\xe0(
buf_cou\xc1
 =\xf0
BUF_SIZE
)

27
	`F_l_u_s_h
();

28 i\xe0(
c
 == '\n')

29
	`F_l_u_s_h
();

30
	}
}

35
PRIVATE

	$F_l_u_s_h
() {

38 i\xe0(
buf_cou\xc1
 == 0)

40
putch_msg
.
m_ty\xb3
 =
TTY_WRITE
;

41
	`\xb4oc_\xc4
(
putch_msg
) = 0;

42
	`\x89y_l\x9\xab
(
putch_msg
) = 0;

43
	`add\xbbss
(
putch_msg
\xe8\xf0
\xb4\x9at_buf
;

44
	`cou\xc1
(
putch_msg
\xe8\xf0
buf_cou\xc1
;

45
	`\xa3nd\xbbc
(
TTY
, &
putch_msg
);

46
buf_cou\xc1
 = 0;

47
	}
}

	@mm/signal.cpp

18 
	~"../h/sig\xc7l.h\xb5
"

19 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

20 
	~"../h/com.h\xb5
"

21 
	~"../h/cڡ.h\xb5
"

22 
	~"../h/\x94r\xdc.h\xb5
"

23 
	~"../h/\xa1\xa9.h
"

24 
	~"../h/ty\xb3.h\xb5
"

25 
	~"cڡ.h\xb5
"

26 
	~"glo.h\xb5
"

27 
	~"m\xb4oc.h\xb5
"

28 
	~"\xb7\xbfm.h\xb5
"

29 
	~"tok\x92.h\xb5
"

30 
	~<\x\xabgܙhm
>

31 
	~<c\xa1ddef
>

32 
	~<c\xa1d\x9\xa9
>

34 
	#DUMP_SIZE
 256

	)

35 
	#CORE_MODE
 0777

	)

36 
	#DUMPED
 0200

	)

38 
mes\xa7ge

	gm_sig
;

41 
	$check_sig
(
\xb4oc_id
, 
sig_\xc4
,
u\x9\xa916_t

\xa3nd_uid
\xe8
n\xdbx\xfb\xb1
;

42 
	$dump_c\xd\xfb
(
m\xb4oc
 *
rmp
\xe8
n\xdbx\xfb\xb1
;

47
PUBLIC
 
	$do_sig\xc7l
(\xe8
n\xdbx\xfb\xb1
 {

52
u\x9\xa916_t

mask
;

55 i\xe0(
sig
 < 1 || sig >
NR_SIGS
)

56  (
E\xbc\xdcCode
::
EINVAL
);

57 i\xe0(
sig
 =\xf0
SIGKILL
)

58  (
OK
);

59
mask
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(1 << (
sig
 - 1));

62 i\xe0(
func
 =\xf0
SIG_IGN
) {

63
mp
->
mp_ign\xd\xfb
 |\xf0
mask
;

64
mp
->
mp_\xf\xe1ch
 &\xf0~
mask
;

65 } i\xe0(
func
 =\xf0
SIG_DFL
) {

66
mp
->
mp_ign\xd\xfb
 &\xf0~
mask
;

67
mp
->
mp_\xf\xe1ch
 &\xf0~
mask
;

69
mp
->
mp_ign\xd\xfb
 &\xf0~
mask
;

70
mp
->
mp_\xf\xe1ch
 |\xf0
mask
;

71
mp
->
mp_func
 =
func
;

73  (
OK
);

74
	}
}

79
PUBLIC
 
	$do_k\x9\x96
(\xe8
n\xdbx\xfb\xb1
 {

83 
	`check_sig
(
pid
,
k\x9\x96_sig
,
mp
->
mp_effuid
);

84
	}
}

89
PUBLIC
 
	$do_ksig
(\xe8
n\xdbx\xfb\xb1
 {

97 
m\xb4oc
 *
rmp
;

98 
i
,
\xb4oc_id
,
\xb4oc_\xc4
,
id
;

99
u\x9\xa916_t

sig_m\xad_v\x\xab
;

102 i\xe0(
who
 !\xf0
HARDWARE
 && wh\xd8!\xf0
FS_PROC_NR
)

103  (
E\xbc\xdcCode
::
EPERM
);

105
\xb4oc_\xc4
 =
	`\xb4oc1
(
mm_\x9a
);

106
rmp
 = &
m\xb4oc
[
\xb4oc_\xc4
];

107 i\xe0((
rmp
->
mp_\xe6ags
 &
IN_USE
\xe8=\xf00 || (rmp->mp_\xe6ag\xa0&
HANGING
))

108  (
OK
);

109
\xb4oc_id
 =
rmp
->
mp_pid
;

110
sig_m\xad_v\x\xab
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
	`sig_m\xad
(
mm_\x9a
));

111
mp
 = &
m\xb4oc
[0];

114 i\xe0(
sig_m\xad_v\x\xab
 =\xf0
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(1 << (
STACK_FAULT
 - 1))) {

115
	`\xa1ack_\xe7u\xc9
(
\xb4oc_\xc4
);

116  (
OK
);

124 
i
 = 0; i <
NR_SIGS
; i++) {

125
id
 = (
i
 + 1 =\xf0
SIGINT
 || i + 1 =\xf0
SIGQUIT
 ? 0 :
\xb4oc_id
);

126 i\xe0((
sig_m\xad_v\x\xab
 >>
i
) & 1)

127
	`check_sig
(
id
,
i
 + 1,
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(
SUPER_USER
));

130
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

131  (
OK
);

132
	}
}

138 
	$check_sig
(
\xb4oc_id
, 
sig_\xc4
,
u\x9\xa916_t

\xa3nd_uid
\xe8
n\xdbx\xfb\xb1
 {

144 
m\xb4oc
 *
rmp
;

145 
cou\xc1
,
\xa3nd_sig
;

146
u\x9\xa916_t

mask
;

147
u\x9\xa916_t

c\xd\xfb_b\x99s
;

149 i\xe0(
sig_\xc4
 < 1 || sig_\xc4 >
NR_SIGS
)

150  (
E\xbc\xdcCode
::
EINVAL
);

151
cou\xc1
 = 0;

152
mask
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(1 << (
sig_\xc4
 - 1));

160 
rmp
 = &
m\xb4oc
[
INIT_PROC_NR
 + 1];\x84m\xb0< &m\xb4oc[
NR_PROCS
];\x84mp++) {

161 i\xe0((
rmp
->
mp_\xe6ags
 &
IN_USE
) == 0)

163
\xa3nd_sig
 =
TRUE
;

165 i\xe0(
\xa3nd_uid
 !\xf0
rmp
->
mp_effuid
 && s\x92d_uid !\xf0
SUPER_USER
)

166
\xa3nd_sig
 =
FALSE
;

167 i\xe0(
\xb4oc_id
 > 0 &&\x85roc_id !\xf0
rmp
->
mp_pid
)

168
\xa3nd_sig
 =
FALSE
;

169 i\xe0(
rmp
->
mp_\xe6ags
 &
HANGING
)

170
\xa3nd_sig
 =
FALSE
;

171 i\xe0(
\xb4oc_id
 =\xf00 &&
mp
->
mp_\xb4ocg\xbd
 !\xf0
rmp
->mp_procgrp)

172
\xa3nd_sig
 =
FALSE
;

173 i\xe0(
\xa3nd_uid
 =\xf0
SUPER_USER
 &&
\xb4oc_id
 == -1)

174
\xa3nd_sig
 =
TRUE
;

180 i\xe0(
sig_\xc4
 =\xf0
SIGALRM
) {

181 i\xe0((
rmp
->
mp_\xe6ags
 &
ALARM_ON
) == 0)

183
rmp
->
mp_\xe6ags
 &\xf0~
ALARM_ON
;

186 i\xe0(
\xa3nd_sig
 =\xf0
FALSE
 ||
rmp
->
mp_ign\xd\xfb
 &
mask
)

188
cou\xc1
++;

191
	`sig_\xb4oc
(
rmp
,
sig_\xc4
);

194
	`u\xc5au\xa3
(
rmp
 -
m\xb4oc
);

195 i\xe0(
\xb4oc_id
 > 0)

200 i\xe0((
mp
->
mp_\xe6ags
 &
IN_USE
\xe8=\xf00 || (mp->mp_\xe6ag\xa0&
HANGING
))

201
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

202  (
cou\xc1
 > 0 ?
OK
 :
E\xbc\xdcCode
::
ESRCH
);

203
	}
}

209
PUBLIC
 
	$sig_\xb4oc
(
m\xb4oc
 *
rmp
, 
sig_\xc4
\xe8
n\xdbx\xfb\xb1
 {

216
u\x9\xa916_t

mask
;

217 
c\xd\xfb_f\x9\x93
;

218
\xa1d
::
size_t

\xc3w_\xa5
;

219
u\x9\xa916_t

c\xd\xfb_b\x99s
;

221 i\xe0((
rmp
->
mp_\xe6ags
 &
IN_USE
) == 0)

223
mask
 =
\xa1\xa9ic_\xff\xa1
<
u\x9\xa916_t
>(1 << (
sig_\xc4
 - 1));

224 i\xe0(
rmp
->
mp_\xf\xe1ch
 &
mask
) {

226
rmp
->
mp_\xf\xe1ch
 &\xf0~
mask
;

227
	`sys_g\x91\xa5
(
rmp
 -
m\xb4oc
, &
\xc3w_\xa5
);

228
\xc3w_\xa5
 -\xf0
SIG_PUSH_BYTES
;

231 i\xe0(
	`adju\xa1
(
rmp
,\x84mp->
mp_\xa3g
[
D
].
mem_\xcbn
,
\xc3w_\xa5
\xe8=\xf0
OK
) {

232
	`sys_sig
(
rmp
 -
m\xb4oc
,
sig_\xc4
,\x84mp->
mp_func
,\x84mp->
mp_tok\x92
);

238
c\xd\xfb_f\x9\x93
 = (
c\xd\xfb_b\x99s
 >> (
sig_\xc4
 - 1)) & 1;

239
rmp
->
mp_sig\xa1\xa9us
 =
\xa1\xa9ic_\xff\xa1
<>(
sig_\xc4
);

240 i\xe0(
c\xd\xfb_f\x9\x93
)

241
	`dump_c\xd\xfb
(
rmp
);

242
	`mm_ex\x99
(
rmp
, 0);

243
	}
}

248
PUBLIC
 
	$do_\x\xab\xacm
(\xe8
n\xdbx\xfb\xb1
 {

252 
\xa3c
;

254
\xa3c
 =
\xa1\xa9ic_\xff\xa1
<>(
\xa3c\xdads
);

256
	`\xa3t_\x\xab\xacm
(
who
,
\xa3c
);

257 
\xa1\xa9ic_\xff\xa1
<>(

258
\xa3c
);

264 
	`\xa3t_\x\xab\xacm
(
who
,
\xa3c
);

265
	}
}

271
PUBLIC
 
	$\xa3t_\x\xab\xacm
(
\xb4oc_\xc4
, 
\xa3c
\xe8
n\xdbx\xfb\xb1
 {

276 
\xbbma\x9a\x9ag
;

278
m_sig
.
m_ty\xb3
 =
SET_ALARM
;

279
	`\xb4oc_\xc4
(
m_sig
\xe8\xf0
\xb4oc_\xc4
;

281
	`d\x96\x8f_ticks
(
m_sig
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<
\x9at64_t
>(
HZ
\xe8* s\x8ftic_\xff\xa1<\x9at64_t>(
\xa3c
);

282 i\xe0(
\xa3c
 != 0)

283
m\xb4oc
[
\xb4oc_\xc4
].
mp_\xe6ags
 |\xf0
ALARM_ON
;

285
m\xb4oc
[
\xb4oc_\xc4
].
mp_\xe6ags
 &\xf0~
ALARM_ON
;

288 i\xe0(
	`\xa3nd\xbbc
(
CLOCK
, &
m_sig
\xe8!\xf0
OK
)

289
	`\xb7nic
("\xae\xacm\x83r",
NO_NUM
);

291
\xbbma\x9a\x9ag
 =
\xa1\xa9ic_\xff\xa1
<>(
	`\xa3c\xdads_\xcb\xe1
(
m_sig
));

292  (
\xbbma\x9a\x9ag
);

293
	}
}

298
PUBLIC
 
	$do_\xb7u\xa3
(\xe8
n\xdbx\xfb\xb1
 {

301
mp
->
mp_\xe6ags
 |\xf0
PAUSED
;

302
d\xd\xa9_\xbb\xb6y
 =
TRUE
;

303  (
OK
);

304
	}
}

310
PUBLIC
 
	$u\xc5au\xa3
(
\xb4o
\xe8
n\xdbx\xfb\xb1
 {

318 
m\xb4oc
 *
rmp
;

320
rmp
 = &
m\xb4oc
[
\xb4o
];

323 i\xe0((
rmp
->
mp_\xe6ags
 &
PAUSED
\xe8&& (rmp->mp_\xe6ag\xa0&
HANGING
) == 0) {

324
rmp
->
mp_\xe6ags
 &\xf0~
PAUSED
;

325
	`\xbb\xb6y
(
\xb4o
,
E\xbc\xdcCode
::
EINTR
, 0,
NIL_PTR
);

330 i\xe0((
rmp
->
mp_\xe6ags
 &
WAITING
\xe8&& (rmp->mp_\xe6ag\xa0&
HANGING
) == 0) {

331
rmp
->
mp_\xe6ags
 &\xf0~
WAITING
;

332
	`\xbb\xb6y
(
\xb4o
,
E\xbc\xdcCode
::
EINTR
, 0,
NIL_PTR
);

337
	`\x8b\x\xfb_fs
(
UNPAUSE
,
\xb4o
, 0, 0);

339
	}
}

345 
	$dump_c\xd\xfb
(
m\xb4oc
 *
rmp
\xe8
n\xdbx\xfb\xb1
 {

348 
\xa1\xa9

s_buf
,
d_buf
;

349 
buf
[
DUMP_SIZE
];

350 
i
,
r
,
s
,
\x941
,
\x942
,
\xa6\xd9
;

351
\xa1d
::
size_t

v_buf
;

355
\xa1d
::
size_t

\xcbn
,
a
,
c
,
\xf9
,
de\xa1
;

356 
m\xb4oc
 *
xmp
;

357 
c\xd\xfb_\xc7me
[];

360
\xa6\xd9
 =
rmp
 -
m\xb4oc
;

361
	`\x8b\x\xfb_fs
(
CHDIR
,
\xa6\xd9
, 0, 0);

364 i\xe0(
rmp
->
mp_\xbb\x\xabuid
 !\xf0rmp->
mp_effuid
)

366
xmp
 =
mp
;

367
mp
 =
rmp
;

368
r
 =
	`\x\xablowed
(
c\xd\xfb_\xc7me
, &
s_buf
,
W_BIT
);

369
s
 =
	`\x\xablowed
(".", &
d_buf
,
W_BIT
);

370
mp
 =
xmp
;

371 i\xe0(
r
 >= 0)

372
	`\x\xe3o\xa3
(
r
);

373 i\xe0(
s
 >= 0)

374
	`\x\xe3o\xa3
(
s
);

375 i\xe0(
rmp
->
mp_effuid
 =\xf0
SUPER_USER
)

376
r
 = 0;

378 i\xe0(
s
 >\xf00 && (
r
 >\xf00 ||\x84 =\xf0
E\xbc\xdcCode
::
ENOENT
)) {

380
r
 =
	`\xfc\x97t
(
c\xd\xfb_\xc7me
,
CORE_MODE
);

381
	`\x8b\x\xfb_fs
(
CHDIR
, 0, 1, 0);

382 i\xe0(
r
 < 0)

384
rmp
->
mp_sig\xa1\xa9us
 |\xf0
DUMPED
;

387 
i
 = 0; i <
NR_SEGS
; i++) {

389
\xcbn
 =
rmp
->
mp_\xa3g
[
i
].
mem_\xcbn
 <<
CLICK_SHIFT
;

390 i\xe0(
	`wr\x99e
(
r
,
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(&
\xcbn
), (len)) < 0) {

391
	`\x\xe3o\xa3
(
r
);

397
v_buf
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
size_t
>(
buf
);

398
de\xa1
 =
v_buf
;

399 
i
 = 0; i <
NR_SEGS
; i++) {

401
a
 =
rmp
->
mp_\xa3g
[
i
].
mem_v\x9c
 <<
CLICK_SHIFT
;

402
c
 =
rmp
->
mp_\xa3g
[
i
].
mem_\xcbn
 <<
CLICK_SHIFT
;

405 
c
 > 0) {

406
\xf9
 =
\xa1d
::
	`m\x9a
(
c
,
\xa1\xa9ic_\xff\xa1
<\xa1d::
size_t
>(
DUMP_SIZE
));

410
\x941
 =
	`mem_c\xddy
(
\xa6\xd9
,
i
,
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
a
),
MM_PROC_NR
,
D
,

411
\xa1\xa9ic_\xff\xa1
<
u\x9a\x8d\x8c_t
>(
de\xa1
),
\xf9
);

412
\x942
 =
	`wr\x99e
(
r
,
buf
,
\xa1\xa9ic_\xff\xa1
<>(
\xf9
));

413 i\xe0(
\x941
 < 0 ||
\x942
 < 0) {

414
	`\x\xe3o\xa3
(
r
);

417
a
 +\xf0
\xf9
;

418
c
 -\xf0
\xf9
;

422
	`\x8b\x\xfb_fs
(
CHDIR
, 0, 1, 0);

423
	`\x\xe3o\xa3
(
r
);

427
	`\x\xe3o\xa3
(
r
);

428
	}
}

	@mm/table.cpp

5 
	~"../h/cڡ.h\xb5
"

6 
	~"../h/ty\xb3.h\xb5
"

7 
	~"cڡ.h\xb5
"

9 #unde\xe0
EXTERN


10 
	#EXTERN


	)

12 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

13 
	~"glo.h\xb5
"

14 
	~"m\xb4oc.h\xb5
"

15 
	~"\xb7\xbfm.h\xb5
"

16 
	~<c\xa1d\x9\xa9
>

17 
	~<c\xa1ddef
>

20 
	gc\xd\xfb_\xc7me
[] = {"core"};

21
u\x9\xa916_t

	gc\xd\xfb_b\x99s
 = 0x0EFC;

23 
mm_\xa1ack
[];

25 *
	g\xa1ack\xb1
 = &
mm_\xa1ack
[
MM_STACK_BYTES
];

30 
	$do_mm_ex\x99
(\xe8
n\xdbx\xfb\xb1
;

31 
	$do_f\xdck
(\xe8
n\xdbx\xfb\xb1
;

32 
	$do_wa\x99
(\xe8
n\xdbx\xfb\xb1
;

33 
	$do_brk
(\xe8
n\xdbx\xfb\xb1
;

34 
	$do_g\x91\xa3t
(\xe8
n\xdbx\xfb\xb1
;

35 
	$do_exec
(\xe8
n\xdbx\xfb\xb1
;

36 
	$do_sig\xc7l
(\xe8
n\xdbx\xfb\xb1
;

37 
	$do_k\x9\x96
(\xe8
n\xdbx\xfb\xb1
;

38 
	$do_\xb7u\xa3
(\xe8
n\xdbx\xfb\xb1
;

39 
	$do_\x\xab\xacm
(\xe8
n\xdbx\xfb\xb1
;

40 
	$no_sys
(\xe8
n\xdbx\xfb\xb1
;

42 
	$do_ksig
(\xe8
n\xdbx\xfb\xb1
;

43 
	$do_brk2
(\xe8
n\xdbx\xfb\xb1
;

46 (*
\xff\xce_vec
[
NCALLS
])() = {

47
no_sys
,

48
do_mm_ex\x99
,

49
do_f\xdck
,

50
no_sys
,

51
no_sys
,

52
no_sys
,

53
no_sys
,

54
do_wa\x99
,

55
no_sys
,

56
no_sys
,

57
no_sys
,

58
no_sys
,

61
no_sys
,

62
no_sys
,

63
no_sys
,

64
no_sys
,

65
no_sys
,

66
do_brk
,

67
no_sys
,

68
no_sys
,

69
do_g\x91\xa3t
,

70
no_sys
,

71
no_sys
,

72
do_g\x91\xa3t
,

73
do_g\x91\xa3t
,

74
no_sys
,

75
no_sys
,

76
do_\x\xab\xacm
,

77
no_sys
,

78
do_\xb7u\xa3
,

79
no_sys
,

80
no_sys
,

81
no_sys
,

82
no_sys
,

83
no_sys
,

84
no_sys
,

85
no_sys
,

86
do_k\x9\x96
,

87
no_sys
,

88
no_sys
,

89
no_sys
,

90
no_sys
,

91
no_sys
,

92
no_sys
,

93
no_sys
,

94
no_sys
,

95
do_g\x91\xa3t
,

96
do_g\x91\xa3t
,

97
do_sig\xc7l
,

98
no_sys
,

99
no_sys
,

100
no_sys
,

101
no_sys
,

102
no_sys
,

103
no_sys
,

104
no_sys
,

105
no_sys
,

106
no_sys
,

107
no_sys
,

108
do_exec
,

109
no_sys
,

110
no_sys
,

111
no_sys
,

112
no_sys
,

114
do_ksig
,

115
no_sys
,

116
do_brk2
,

117
no_sys
,

118
no_sys


119
	}
};

	@mm/token.hpp

1 #\xb4agm\xa8
\xda\xfb


7 
	~<c\xa1d\x9\xa9
>

8 
	~<\xb\xe2dom
>

17 [[
nodis\xf\xe4d
]]
\x9al\x9ae

	g\xa1d
::
u\x9\xa964_t

	$g\x92\x94\xa9e_tok\x92
(\xe8
n\xdbx\xfb\xb1
 {

18 
\xa1d
::
mt19937_64

\x92g\x9ae
{\xa1d::
\xbfndom_devi\xfb
{}()};

19 
\xa1d
::
unif\xdcm_\x9\xa9_di\xa1ributi\xda
<\xa1d::
u\x9\xa964_t
>
di\xa1
;

20 
	`di\xa1
(
\x92g\x9ae
);

21
	}
}

	@mm/type.hpp

12 
	~"../h/ty\xb3.h\xb5
"

	@mm/utility.cpp

9 
	~"../h/\xff\x\xfb\xc4.h\xb5
"

10 
	~"../h/com.h\xb5
"

11 
	~"../h/cڡ.h\xb5
"

12 
	~"../h/\x94r\xdc.h\xb5
"

13 
	~"../h/\xa1\xa9.h
"

14 
	~"../h/ty\xb3.h\xb5
"

15 
	~"cڡ.h\xb5
"

16 
	~"glo.h\xb5
"

17 
	~"m\xb4oc.h\xb5
"

19 
	~<\xfb\xb\xfao
>

20 
	~<c\xa1ddef
>

21 
	~<c\xa1d\x9\xa9
>

22 
	~<c\xa1dio
>

23 
	~<f\x9\x93sy\xa1em
>

24 
	~<mem\xdcy
>

26
PRIVATE

mes\xa7ge

	gc\xddy_mess
;

28
	g\xc7me\xa5a\xfb
 {

30 
	sF\x9\x93Des\xfc\x9dt\xdc
 {

31 
	gfd
{-1};

32
ex\xb6ic\x99

F\x9\x93Des\xfc\x9dt\xdc
(
f
\xe8:
fd
(f) {}

33 ~
F\x9\x93Des\xfc\x9dt\xdc
(\xe8
n\xdbx\xfb\xb1
 {

34 i\xe0(
fd
 >= 0) {

38
\xfeo\xa3
(
fd
);

42
F\x9\x93Des\xfc\x9dt\xdc
(cڡ F\x9eeDes\xfc\x9dt\xdc &\xe8\xf0
d\x96\x91e
;

43
	gF\x9\x93Des\xfc\x9dt\xdc
 &
	gݔ\xa9\xdc
=(cڡ
F\x9\x93Des\xfc\x9dt\xdc
 &\xe8\xf0
d\x96\x91e
;

45
F\x9\x93Des\xfc\x9dt\xdc
(F\x9eeDes\xfc\x9dt\xdc &&
\xd9h\x94
\xe8
	gn\xdbx\xfb\xb1
 :
fd
(other.fd) { other.fd = -1; }

46
	gF\x9\x93Des\xfc\x9dt\xdc
 &
	gݔ\xa9\xdc
=(
F\x9\x93Des\xfc\x9dt\xdc
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

47 i\xe0(
this
 !\xf0&
\xd9h\x94
) {

48 i\xe0(
fd
 >= 0)

49
\xfeo\xa3
(
fd
);

50
	gfd
 =
\xd9h\x94
.
fd
;

51
	g\xd9h\x94
.
	gfd
 = -1;

53  *
	gthis
;

56 [[
nodis\xf\xe4d
]] 
\xbb\xcba\xa3
(\xe8
	gn\xdbx\xfb\xb1
 {

57 
	g\xded
 =
fd
;

58
	gfd
 = -1;

59 
	g\xded
;

72
PUBLIC
 
	$\x\xablowed
(cڡ *
\xc7me_buf
, 
\xa1\xa9
 *
s_buf
, 
mask
\xe8
n\xdbx\xfb\xb1
 {

73 
\xbfw_fd
 =
	`ݒ
(
\xc7me_buf
, 0);

74 i\xe0(
\xbfw_fd
 < 0) {

75  -
\x94\xbao
;

77
F\x9\x93Des\xfc\x9dt\xdc

	`fd
(
\xbfw_fd
);

78 i\xe0(
	`f\xa1\xa9
(
fd
.fd,
s_buf
) < 0) {

79
	`\xb7nic
("\xaelowed: f\xa1\xa9 fa\x9eed",
NO_NUM
);

83 cڡ 
mode
 =
s_buf
->
\xa1_mode
 &
I_TYPE
;

84 i\xe0(
mask
 =\xf0
X_BIT
 &&
mode
 !\xf0
I_REGULAR
) {

85  (
E\xbc\xdcCode
::
EACCES
);

88 i\xe0(
mp
->
mp_effuid
 =\xf0
SUPER_USER
 &&
mask
 =\xf0
X_BIT
 &&

89 (
s_buf
->
\xa1_mode
 & (
X_BIT
 << 6 | X_BIT << 3 | X_BIT)))

90 
fd
.
	`\xbb\xcba\xa3
();

93 
shi\xe1
 = 0;

94 i\xe0(
mp
->
mp_effuid
 =\xf0
s_buf
->
\xa1_uid
)

95
shi\xe1
 = 6;

96 i\xe0(
mp
->
mp_effgid
 =\xf0
s_buf
->
\xa1_gid
)

97
shi\xe1
 = 3;

99 i\xe0(
mp
->
mp_effuid
 =\xf0
SUPER_USER
 &&
mask
 !\xf0
X_BIT
)

100 
fd
.
	`\xbb\xcba\xa3
();

101 i\xe0(
s_buf
->
\xa1_mode
 >>
shi\xe1
 &
mask
)

102 
fd
.
	`\xbb\xcba\xa3
();

103  (
E\xbc\xdcCode
::
EACCES
);

104
	}
}

112
PUBLIC
 
	$mem_c\xddy
(
\xa4c_\xb4oc
, 
\xa4c_\xa3g
,
u\x9a\x8d\x8c_t

\xa4c_v\x9c
, 
d\xa1_\xb4oc
, 
d\xa1_\xa3g
,

113
u\x9a\x8d\x8c_t

d\xa1_v\x9c
,
\xa1d
::
size_t

by\x8bs
\xe8
n\xdbx\xfb\xb1
 {

119 i\xe0(
by\x8bs
 == 0)

120  (
OK
);

121
	`\xa4c_\xa5a\xfb
(
c\xddy_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
\xa4c_\xa3g
);

122
	`\xa4c_\xb4oc_\xc4
(
c\xddy_mess
\xe8\xf0
\xa4c_\xb4oc
;

124
	`\xa4c_buf\xe3r
(
c\xddy_mess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\xa4c_v\x9c
);

126
	`d\xa1_\xa5a\xfb
(
c\xddy_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
d\xa1_\xa3g
);

127
	`d\xa1_\xb4oc_\xc4
(
c\xddy_mess
\xe8\xf0
d\xa1_\xb4oc
;

129
	`d\xa1_buf\xe3r
(
c\xddy_mess
\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
d\xa1_v\x9c
);

134
	`c\xddy_by\x8bs
(
c\xddy_mess
\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
by\x8bs
);

135
	`sys_c\xddy
(&
c\xddy_mess
);

136  (
c\xddy_mess
.
m_ty\xb3
);

137
	}
}

143
PUBLIC
 
	$no_sys
(\xe8
n\xdbx\xfb\xb1
 {

146  (
E\xbc\xdcCode
::
EINVAL
);

147
	}
}

154
PUBLIC
 
	$\xb7nic
(cڡ *
f\xdcm\xa9
, 
num
\xe8
n\xdbx\xfb\xb1
 {

160
	`\xb4\x9\xa9f
("Mem\xdcy m\xaaag\x94\x85\xaaic: %\xa0",
f\xdcm\xa9
);

161 i\xe0(
num
 !\xf0
NO_NUM
)

162
	`\xb4\x9\xa9f
("%d",
num
);

163
	`\xb4\x9\xa9f
("\n");

164
	`\x8b\x\xfb_fs
(
SYNC
, 0, 0, 0);

165
	`sys_ab\xd\xf9
();

166
	}
}

	@mm/vm.cpp

1 
	~"../\x9a\x\xe3ude/vm.h\xb5
"

2 
	~"cڡ.h\xb5
"

3 
	~"m\xb4oc.h\xb5
"

4 
	~<ve\xf9\xdc
>

13 
	g\xa1d
::
ve\xf9\xdc
<
vm_\xb4oc
>
vm_\xb4oc_\x8fb\xcb
(
NR_PROCS
);

16 
	g\xbag_\xa1\xa9e
 = 1;

29 
	$\xc3xt_\xb\xe2d
() {

30
\xbag_\xa1\xa9e
 =\x84ng_state * 1103515245 + 12345;

31 
\xbag_\xa1\xa9e
;

32
	}
}

43 
	$vm_\x9a\x99
(\xe8
n\xdbx\xfb\xb1
 {

44 aut\xd8&
p
 :
vm_\xb4oc_\x8fb\xcb
) {

45
p
.
\xac\x97_cou\xc1
 = 0;

47
\xbag_\xa1\xa9e
 = 1;

48
	}
}

65 *
	$vm_\x\xabloc
(
u64_t

by\x8bs
,
VmF\xcfgs

\xe6ags
\xe8
n\xdbx\xfb\xb1
 {

66
v\x9\xf9_addr64

ba\xa3
;

67 
\xb7ges
;

70
ba\xa3
 =
	`U64_C
(0x0000000010000000\xe8+ (
	`\xc3xt_\xb\xe2d
() & 0xFFFFF000);

71
\xb7ges
 = (
by\x8bs
 +
PAGE_SIZE_4K
 - 1) / PAGE_SIZE_4K;

72 ()
\xe6ags
;

73  (*)(
ba\xa3
 +
\xb7ges
 *
PAGE_SIZE_4K
);

74
	}
}

89 
	$vm_h\x\xafd\xcb_\xe7u\xc9
(
\xb4oc
,
v\x9\xf9_addr64

addr
\xe8
n\xdbx\xfb\xb1
 {

93 aut\xd8&
p
 =
vm_\xb4oc_\x8fb\xcb
[
\xb4oc
];

94 i\xe0(
p
.
\xac\x97_cou\xc1
 <
VM_MAX_AREAS
) {

95 aut\xd8&
a
 =
p
.
\xac\x97s
[p.
\xac\x97_cou\xc1
++];

96
a
.
\xa1\xact
 =
addr
 & ~(
PAGE_SIZE_4K
 - 1);

97
a
.
\x92d
 =\x87.
\xa1\xact
 +
PAGE_SIZE_4K
;

98
a
.
\xe6ags
 =
VmF\xcfgs
::
VM_READ
 | VmF\xcfgs::
VM_WRITE
 | VmF\xcfgs::
VM_PRIVATE
;

100
	}
}

113 
	$vm_f\xdck
(
\xb7\xbb\xc1
, 
ch\x9ed
\xe8
n\xdbx\xfb\xb1
 {

114
vm_\xb4oc_\x8fb\xcb
[
ch\x9ed
] = vm_\xb4oc_\x8fb\xcb[
\xb7\xbb\xc1
];

115 
OK
;

116
	}
}

131 *
	$vm_mm\xad
(
\xb4oc
, *
addr
,
u64_t

\xcbngth
,
VmF\xcfgs

\xe6ags
\xe8
n\xdbx\xfb\xb1
 {

132 aut\xd8&
p
 =
vm_\xb4oc_\x8fb\xcb
[
\xb4oc
];

133
v\x9\xf9_addr64

ba\xa3
 = (v\x9ct_addr64)
addr
;

135 i\xe0(!
ba\xa3
) {

136
ba\xa3
 = (
v\x9\xf9_addr64
)
	`vm_\x\xabloc
(
\xcbngth
,
\xe6ags
);

139 i\xe0(
p
.
\xac\x97_cou\xc1
 <
VM_MAX_AREAS
) {

140 aut\xd8&
a
 =
p
.
\xac\x97s
[p.
\xac\x97_cou\xc1
++];

141
a
.
\xa1\xact
 =
ba\xa3
;

142
a
.
\x92d
 =
ba\xa3
 +
\xcbngth
;

143
a
.
\xe6ags
 = flags;

146  (*)
ba\xa3
;

147
	}
}

	@multiboot.h

1 #i\xe2de\xe0
MULTIBOOT_H


2 
	#MULTIBOOT_H


	)

4 
	~<\xa1d\x9\xa9.h
>

7 
	#MULTIBOOT_TAG_TYPE_END
 0

	)

8 
	#MULTIBOOT_TAG_TYPE_CMDLINE
 1

	)

9 
	#MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
 2

	)

10 
	#MULTIBOOT_TAG_TYPE_MODULE
 3

	)

11 
	#MULTIBOOT_TAG_TYPE_BASIC_MEMINFO
 4

	)

12 
	#MULTIBOOT_TAG_TYPE_BOOTDEV
 5

	)

13 
	#MULTIBOOT_TAG_TYPE_MMAP
 6

	)

14 
	#MULTIBOOT_TAG_TYPE_VBE
 7

	)

15 
	#MULTIBOOT_TAG_TYPE_FRAMEBUFFER
 8

	)

16 
	#MULTIBOOT_TAG_TYPE_ELF_SECTIONS
 9

	)

17 
	#MULTIBOOT_TAG_TYPE_APM
 10

	)

18 
	#MULTIBOOT_TAG_TYPE_EFI32
 11

	)

19 
	#MULTIBOOT_TAG_TYPE_EFI64
 12

	)

20 
	#MULTIBOOT_TAG_TYPE_SMBIOS
 13

	)

21 
	#MULTIBOOT_TAG_TYPE_ACPI_OLD
 14

	)

22 
	#MULTIBOOT_TAG_TYPE_ACPI_NEW
 15

	)

23 
	#MULTIBOOT_TAG_TYPE_NETWORK
 16

	)

24 
	#MULTIBOOT_TAG_TYPE_EFI_MMAP
 17

	)

25 
	#MULTIBOOT_TAG_TYPE_EFI_BS
 18

	)

26 
	#MULTIBOOT_TAG_TYPE_EFI32_IH
 19

	)

27 
	#MULTIBOOT_TAG_TYPE_EFI64_IH
 20

	)

28 
	#MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDR
 21

	)

31 
	smu\xc9ibo\xd9_\x8fg
 {

32
u\x9\xa932_t

	mty\xb3
;

33
u\x9\xa932_t

	msize
;

38 
	smu\xc9ibo\xd9_\x8fg_mm\xad
 {

39
u\x9\xa932_t

	mty\xb3
;

40
u\x9\xa932_t

	msize
;

41
u\x9\xa932_t

	m\x92\x8cy_size
;

42
u\x9\xa932_t

	m\x92\x8cy_v\x94si\xda
;

47 
	smu\xc9ibo\xd9_mm\xad_\x92\x8cy
 {

48
u\x9\xa964_t

	maddr
;

49
u\x9\xa964_t

	m\xcbn
;

50
u\x9\xa932_t

	mty\xb3
;

51
u\x9\xa932_t

	mz\x94o
;

52 }
__\xa9\x8cibu\x8b__
((
\xb7cked
));

55 
	#MULTIBOOT_MEMORY_AVAILABLE
 1

	)

56 
	#MULTIBOOT_MEMORY_RESERVED
 2

	)

57 
	#MULTIBOOT_MEMORY_ACPI_RECLAIMABLE
 3

	)

58 
	#MULTIBOOT_MEMORY_NVS
 4

	)

59 
	#MULTIBOOT_MEMORY_BADRAM
 5

	)

62 
	smu\xc9ibo\xd9_\x8fg_basic_mem\x9afo
 {

63
u\x9\xa932_t

	mty\xb3
;

64
u\x9\xa932_t

	msize
;

65
u\x9\xa932_t

	mmem_low\x94
;

66
u\x9\xa932_t

	mmem_u\xb5\x94
;

70 
	smu\xc9ibo\xd9_\x8fg_\x96f_\xa3\xf9i\xdas
 {

71
u\x9\xa932_t

	mty\xb3
;

72
u\x9\xa932_t

	msize
;

73
u\x9\xa932_t

	mnum
;

74
u\x9\xa932_t

	m\x92tsize
;

75
u\x9\xa932_t

	mshndx
;

80 
	#mu\xc9ibo\xd9_\x8fg_\x\xabign
(
size
\xe8(((size\xe8+ 7\xe8& ~7)

	)

	@pmm.cpp

1 
	~"pmm.h
"

2 
	~"c\xdas\xd\x93.h
"

3 
	~<\xa1d\x9\xa9.h
>

4 
	~<\xa1ddef.h
>

7 
u\x9\xa932_t
*
	g\xb7ge_b\x99m\xad
 =
NULL
;

8 
size_t

	gtٮ_\xb7ges
 = 0;

9 
size_t

	gu\xa3d_\xb7ges
 = 0;

10 
u\x9a\x8d\x8c_t

	ghighe\xa1_add\xbbss
 = 0;

13 
\x9al\x9ae
 
	$b\x99m\xad_\xa3t
(
size_t

b\x99
) {

14
\xb7ge_b\x99m\xad
[
b\x99
 / 32] |= (1 << (bit % 32));

15
	}
}

18 
\x9al\x9ae
 
	$b\x99m\xad_\x\xe3\x97r
(
size_t

b\x99
) {

19
\xb7ge_b\x99m\xad
[
b\x99
 / 32] &= ~(1 << (bit % 32));

20
	}
}

23 
\x9al\x9ae

bo\xde

	$b\x99m\xad_\x8b\xa1
(
size_t

b\x99
) {

24  (
\xb7ge_b\x99m\xad
[
b\x99
 / 32] & (1 << (bit % 32))) != 0;

25
	}
}

28 
	$pmm_m\xack_\xbbgi\xda_u\xa3d
(
u\x9a\x8d\x8c_t

ba\xa3_addr
,
size_t

size_\x9a_by\x8bs
) {

29
u\x9a\x8d\x8c_t

\xaeig\xc3d_ba\xa3
 =
ba\xa3_addr
 /
PAGE_SIZE
;

30
u\x9a\x8d\x8c_t

\xaeig\xc3d_\x92d
 = (
ba\xa3_addr
 +
size_\x9a_by\x8bs
 -1\xe8/
PAGE_SIZE
;

32 
u\x9a\x8d\x8c_t

\xb7ge
 =
\xaeig\xc3d_ba\xa3
;\x85ag\x90<\xf0
\xaeig\xc3d_\x92d
 &&\x85ag\x90<
tٮ_\xb7ges
; ++page) {

33 i\xe0(!
	`b\x99m\xad_\x8b\xa1
(
\xb7ge
)) {

34
	`b\x99m\xad_\xa3t
(
\xb7ge
);

35
u\xa3d_\xb7ges
++;

38
	}
}

41 
	$pmm_m\xack_\xbbgi\xda_\xe4\x93
(
u\x9a\x8d\x8c_t

ba\xa3_addr
,
size_t

size_\x9a_by\x8bs
) {

42
u\x9a\x8d\x8c_t

\xaeig\xc3d_ba\xa3
 =
ba\xa3_addr
 /
PAGE_SIZE
;

43
u\x9a\x8d\x8c_t

\xaeig\xc3d_\x92d
 = (
ba\xa3_addr
 +
size_\x9a_by\x8bs
 - 1\xe8/
PAGE_SIZE
;

45 
u\x9a\x8d\x8c_t

\xb7ge
 =
\xaeig\xc3d_ba\xa3
;\x85ag\x90<\xf0
\xaeig\xc3d_\x92d
 &&\x85ag\x90<
tٮ_\xb7ges
; ++page) {

46 i\xe0(
	`b\x99m\xad_\x8b\xa1
(
\xb7ge
)) {

47
	`b\x99m\xad_\x\xe3\x97r
(
\xb7ge
);

48
u\xa3d_\xb7ges
--;

51
	}
}

54 
	$pmm_\x9a\x99
(
mu\xc9ibo\xd9_\x8fg_mm\xad
*
mm\xad_\x8fg
,
u\x9a\x8d\x8c_t

k\x94\xc3l_\xa1\xa\xf9_phys
, u\x9a\x8d\x8c_\x88
k\x94\xc3l_\x92d_phys
, u\x9a\x8d\x8c_\x88
mu\xc9ibo\xd9_\x9afo_addr_phys
) {

55 i\xe0(!
mm\xad_\x8fg
) {

56
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("PMM E\xbc\xdc: N\xd8mem\xdcy m\xad\x85rovided!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

61
highe\xa1_add\xbbss
 = 0;

62
u\x9a\x8d\x8c_t

tٮ_\xbfm_by\x8bs
 = 0;

63 
mu\xc9ibo\xd9_mm\xad_\x92\x8cy
*
\x92\x8cy
 = (mu\xc9ibo\xd9_mm\xad_\x92\x8cy*)((
u\x9\xa98_t
*)
mm\xad_\x8fg
 + (
mu\xc9ibo\xd9_\x8fg_mm\xad
\xe8- (mu\xc9ibo\xd9_mm\xad_\x92\x8cy\xe8+ mm\xad_\x8fg->
\x92\x8cy_size
);

65
\x92\x8cy
 = (
mu\xc9ibo\xd9_mm\xad_\x92\x8cy
*)\xd0(
u\x9a\x8d\x8c_t
)
mm\xad_\x8fg
 + (
u\x9\xa932_t
) * 4);

67 
i
 = 0; i < (
mm\xad_\x8fg
->
size
 - (
mu\xc9ibo\xd9_\x8fg_mm\xad
)\xe8/ mm\xad_\x8fg->
\x92\x8cy_size
; ++i) {

68 i\xe0(
\x92\x8cy
[
i
].
addr
 +\x83\xc1ry[i].
\xcbn
 >
highe\xa1_add\xbbss
) {

69
highe\xa1_add\xbbss
 =
\x92\x8cy
[
i
].
addr
 +\x83\xc1ry[i].
\xcbn
;

71 i\xe0(
\x92\x8cy
[
i
].
ty\xb3
 =\xf0
MULTIBOOT_MEMORY_AVAILABLE
) {

72
tٮ_\xbfm_by\x8bs
 +\xf0
\x92\x8cy
[
i
].
\xcbn
;

76
tٮ_\xb7ges
 =
highe\xa1_add\xbbss
 /
PAGE_SIZE
;

77 i\xe0(
highe\xa1_add\xbbss
 %
PAGE_SIZE
 !\xf00\xe8
tٮ_\xb7ges
++;

79
size_t

b\x99m\xad_size_by\x8bs
 = (
tٮ_\xb7ges
 + 7) / 8;

86
u\x9a\x8d\x8c_t

b\x99m\xad_phys_addr
 = 0;

87
\x92\x8cy
 = (
mu\xc9ibo\xd9_mm\xad_\x92\x8cy
*)\xd0(
u\x9a\x8d\x8c_t
)
mm\xad_\x8fg
 + (
u\x9\xa932_t
) * 4);

88 
i
 = 0; i < (
mm\xad_\x8fg
->
size
 - (
mu\xc9ibo\xd9_\x8fg_mm\xad
)\xe8/ mm\xad_\x8fg->
\x92\x8cy_size
; ++i) {

89 i\xe0(
\x92\x8cy
[
i
].
ty\xb3
 =\xf0
MULTIBOOT_MEMORY_AVAILABLE
 &&\x83\xc1ry[i].
\xcbn
 >\xf0
b\x99m\xad_size_by\x8bs
) {

91
u\x9a\x8d\x8c_t

pْt\x9\xe6_addr
 =
\x92\x8cy
[
i
].
addr
;

92 i\xe0(
pْt\x9\xe6_addr
 < 0x100000) {

93 i\xe0(
\x92\x8cy
[
i
].
addr
 +\x83\xc1ry[i].
\xcbn
 > 0x100000) {

94
pْt\x9\xe6_addr
 = 0x100000;

102 i\xe0(
pْt\x9\xe6_addr
 +
b\x99m\xad_size_by\x8bs
 <\xf0
\x92\x8cy
[
i
].
addr
 +\x83\xc1ry[i].
\xcbn
) {

104
bo\xde

ov\x94\xc\xe5s_k\x94\xc3l
 = (
pْt\x9\xe6_addr
 <
k\x94\xc3l_\x92d_phys
 &&\x85ْt\x9fl_add\xb8+
b\x99m\xad_size_by\x8bs
 >
k\x94\xc3l_\xa1\xa\xf9_phys
);

105 i\xe0(!
ov\x94\xc\xe5s_k\x94\xc3l
 ||
pْt\x9\xe6_addr
 >\xf0
k\x94\xc3l_\x92d_phys
) {

106
b\x99m\xad_phys_addr
 =
pْt\x9\xe6_addr
;

110 i\xe0(
pْt\x9\xe6_addr
 >\xf0
k\x94\xc3l_\x92d_phys
) ;

116 i\xe0(
b\x99m\xad_phys_addr
 == 0) {

118
\x92\x8cy
 = (
mu\xc9ibo\xd9_mm\xad_\x92\x8cy
*)\xd0(
u\x9a\x8d\x8c_t
)
mm\xad_\x8fg
 + (
u\x9\xa932_t
) * 4);

119 
i
 = 0; i < (
mm\xad_\x8fg
->
size
 - (
mu\xc9ibo\xd9_\x8fg_mm\xad
)\xe8/ mm\xad_\x8fg->
\x92\x8cy_size
; ++i) {

120 i\xe0(
\x92\x8cy
[
i
].
ty\xb3
 =\xf0
MULTIBOOT_MEMORY_AVAILABLE
 &&\x83\xc1ry[i].
\xcbn
 >\xf0
b\x99m\xad_size_by\x8bs
) {

121
u\x9a\x8d\x8c_t

pْt\x9\xe6_addr
 =
\x92\x8cy
[
i
].
addr
;

123 i\xe0(
pْt\x9\xe6_addr
 < 0x1000 &&
\x92\x8cy
[
i
].
\xcbn
 <
b\x99m\xad_size_by\x8bs
) ;

124 i\xe0(
pْt\x9\xe6_addr
 +
b\x99m\xad_size_by\x8bs
 <\xf0
\x92\x8cy
[
i
].
addr
 +\x83\xc1ry[i].
\xcbn
) {

125
bo\xde

ov\x94\xc\xe5s_k\x94\xc3l
 = (
pْt\x9\xe6_addr
 <
k\x94\xc3l_\x92d_phys
 &&\x85ْt\x9fl_add\xb8+
b\x99m\xad_size_by\x8bs
 >
k\x94\xc3l_\xa1\xa\xf9_phys
);

126 i\xe0(!
ov\x94\xc\xe5s_k\x94\xc3l
) {

127
b\x99m\xad_phys_addr
 =
pْt\x9\xe6_addr
;

136 i\xe0(
b\x99m\xad_phys_addr
 == 0) {

137
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("PMM E\xbc\xdc: Nكnough c\xdat\x9auou\xa0mem\xdcy f\xdc b\x99m\xad!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

141
\xb7ge_b\x99m\xad
 = (
u\x9\xa932_t
*)
b\x99m\xad_phys_addr
;

144
u\xa3d_\xb7ges
 =
tٮ_\xb7ges
;

145 
size_t

i
 = 0; i < (
b\x99m\xad_size_by\x8bs
 / (
u\x9\xa932_t
)); ++i) {

146
\xb7ge_b\x99m\xad
[
i
] = 0xFFFFFFFF;

149 i\xe0(
b\x99m\xad_size_by\x8bs
 % (
u\x9\xa932_t
) != 0) {

150
size_t

\xbbma\x9ad\x94_b\x99s
 =
tٮ_\xb7ges
 % 32;

151 if(
\xbbma\x9ad\x94_b\x99s
 > 0) {

152
\xb7ge_b\x99m\xad
[
b\x99m\xad_size_by\x8bs
 / (
u\x9\xa932_t
)] = (1 <<
\xbbma\x9ad\x94_b\x99s
) -1 ;

154
\xb7ge_b\x99m\xad
[
b\x99m\xad_size_by\x8bs
 / (
u\x9\xa932_t
)] = 0xFFFFFFFF;

161
\x92\x8cy
 = (
mu\xc9ibo\xd9_mm\xad_\x92\x8cy
*)\xd0(
u\x9a\x8d\x8c_t
)
mm\xad_\x8fg
 + (
u\x9\xa932_t
) * 4);

162 
i
 = 0; i < (
mm\xad_\x8fg
->
size
 - (
mu\xc9ibo\xd9_\x8fg_mm\xad
)\xe8/ mm\xad_\x8fg->
\x92\x8cy_size
; ++i) {

163 i\xe0(
\x92\x8cy
[
i
].
ty\xb3
 =\xf0
MULTIBOOT_MEMORY_AVAILABLE
) {

166
	`pmm_m\xack_\xbbgi\xda_\xe4\x93
(
\x92\x8cy
[
i
].
addr
,\x83\xc1ry[i].
\xcbn
);

177
	`pmm_m\xack_\xbbgi\xda_u\xa3d
(
k\x94\xc3l_\xa1\xa\xf9_phys
,
k\x94\xc3l_\x92d_phys
 - kernel_start_phys);

180
	`pmm_m\xack_\xbbgi\xda_u\xa3d
(
b\x99m\xad_phys_addr
,
b\x99m\xad_size_by\x8bs
);

186
u\x9a\x8d\x8c_t

mb_\x9afo_\x92d
 =
mu\xc9ibo\xd9_\x9afo_addr_phys
 +
PAGE_SIZE
;

187 
mu\xc9ibo\xd9_\x8fg
*
\x8fg
 = (mu\xc9ibo\xd9_\x8fg*)(
mu\xc9ibo\xd9_\x9afo_addr_phys
 + 8);

188 ;
\x8fg
->
ty\xb3
 !\xf0
MULTIBOOT_TAG_TYPE_END
;\x81ag = (
mu\xc9ibo\xd9_\x8fg
*)((
u\x9\xa98_t
*\xe9ag +
	`mu\xc9ibo\xd9_\x8fg_\x\xabign
\xd1ag->
size
))) {

191
mb_\x9afo_\x92d
 = (
u\x9a\x8d\x8c_t
)
\x8fg
 + (
mu\xc9ibo\xd9_\x8fg
) ;

192
	`pmm_m\xack_\xbbgi\xda_u\xa3d
(
mu\xc9ibo\xd9_\x9afo_addr_phys
,
mb_\x9afo_\x92d
 - multiboot_info_addr_phys);

195
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("PMM In\x99\x9flized. Tٮ Pages: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
tٮ_\xb7ges
, DEFAULT_COLOR);

196
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(" (",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
tٮ_\xb7ges
 *
PAGE_SIZE
 / (1024*1024), DEFAULT_COLOR); console_write_string("MB)\n", DEFAULT_COLOR);

197
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("U\xa3d Pages: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
u\xa3d_\xb7ges
, DEFAULT_COLOR);

198
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(" (B\x99m\xad @ 0x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
b\x99m\xad_phys_addr
, DEFAULT_COLOR);

199
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(", Size: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
b\x99m\xad_size_by\x8bs
 / 1024, DEFAULT_COLOR); console_write_string(" KB)\n", DEFAULT_COLOR);

200
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("F\xbb\x90Pages: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
(
tٮ_\xb7ges
 -
u\xa3d_\xb7ges
, DEFAULT_COLOR);

201
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n',
DEFAULT_COLOR
);

202
	}
}

205
u\x9a\x8d\x8c_t

	$pmm_\x\xabloc_\xb7ge
() {

206 i\xe0(!
\xb7ge_b\x99m\xad
)  0;

209 
size_t

i
 = 0; i <
tٮ_\xb7ges
; ++i) {

210 i\xe0(!
	`b\x99m\xad_\x8b\xa1
(
i
)) {

211
	`b\x99m\xad_\xa3t
(
i
);

212
u\xa3d_\xb7ges
++;

213  (
u\x9a\x8d\x8c_t
)(
i
 *
PAGE_SIZE
);

216
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("PMM: Ou\x88o\xe0mem\xdcy!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

218
	}
}

220 
	$pmm_\xe4\x93_\xb7ge
(
u\x9a\x8d\x8c_t

\xb7ge_addr
) {

221 i\xe0(!
\xb7ge_b\x99m\xad
 ||
\xb7ge_addr
 %
PAGE_SIZE
 != 0) {

226
size_t

\xb7ge_\x9adex
 =
\xb7ge_addr
 /
PAGE_SIZE
;

227 i\xe0(
\xb7ge_\x9adex
 >\xf0
tٮ_\xb7ges
) {

232 i\xe0(
	`b\x99m\xad_\x8b\xa1
(
\xb7ge_\x9adex
)) {

233
	`b\x99m\xad_\x\xe3\x97r
(
\xb7ge_\x9adex
);

234
u\xa3d_\xb7ges
--;

238
	}
}

240
size_t

	$pmm_g\x91_tٮ_\xb7ges
() {

241 
tٮ_\xb7ges
;

242
	}
}

244
size_t

	$pmm_g\x91_u\xa3d_\xb7ges
() {

245 
u\xa3d_\xb7ges
;

246
	}
}

248
size_t

	$pmm_g\x91_\xe4\x93_\xb7ges
() {

249 
tٮ_\xb7ges
 -
u\xa3d_\xb7ges
;

250
	}
}

	@pmm.h

1 #i\xe2de\xe0
PMM_H


2 
	#PMM_H


	)

4 
	~"mu\xc9ibo\xd9.h
"

5 
	~<\xa1ddef.h
>

6 
	~<\xa1d\x9\xa9.h
>

8 
	#PAGE_SIZE
 4096

9 
	#PMM_INVALID_PAGE
 ( (
u\x9\xa932_t
)-1 )

10

	)

14 
pmm_\x9a\x99
(
mu\xc9ibo\xd9_\x8fg_mm\xad
*
mm\xad_\x8fg
,
u\x9a\x8d\x8c_t

k\x94\xc3l_\xa1\xa\xf9_phys
, u\x9a\x8d\x8c_\x88
k\x94\xc3l_\x92d_phys
, u\x9a\x8d\x8c_\x88
mu\xc9ibo\xd9_\x9afo_addr_phys
);

18
u\x9a\x8d\x8c_t

pmm_\x\xabloc_\xb7ge
();

22 
pmm_\xe4\x93_\xb7ge
(
u\x9a\x8d\x8c_t

\xb7ge_addr
);

25
size_t

pmm_g\x91_tٮ_\xb7ges
();

28
size_t

pmm_g\x91_u\xa3d_\xb7ges
();

31
size_t

pmm_g\x91_\xe4\x93_\xb7ges
();

	@test/t10a.cpp

1 
	~<c\xa1dlib
>

13 
	$ma\x9a
() {

15
	}
}

	@test/t11a.cpp

1 
	~<c\xa1dio
>

2 
	~<c\xa1dlib
>

3 
	~<f\x\xe7\x8e.h
>

4 
	~<uni\xa1d.h
>

15 
bo\xde

	$diff
(cڡ *
s1
, cڡ *
s2
) {

16 
\x8cue
) {

17 i\xe0(*
s1
 =\xf0'\0' && *
s2
 == '\0')

18 
\xe7l\xa3
;

19 i\xe0(*
s1
 !\xf0*
s2
)

20 
\x8cue
;

21 ++
s1
;

22 ++
s2
;

24
	}
}

29 
	$e
(
n
\xe8{
\xa1d
::
	`\xb4\x9\xa9f
("E\xbc\xdc %d\n",\x82);
	}
}

36 
	$ma\x9a
(
\xacgc
, *
\xacgv
[], *
\x92vp
[]) {

37 
\xaf
[4];

39 i\xe0(
	`diff
(
\xacgv
[0], "t11a"))

40
	`e
(21);

41 i\xe0(
	`diff
(
\xacgv
[1], "arg0"))

42
	`e
(22);

43 i\xe0(
	`diff
(
\xacgv
[2], "arg1"))

44
	`e
(23);

45 i\xe0(
	`diff
(
\xacgv
[3], "arg2"))

46
	`e
(24);

47 i\xe0(
	`diff
(
\x92vp
[0], "spring"))

48
	`e
(25);

49 i\xe0(
	`diff
(
\x92vp
[1], "summer"))

50
	`e
(26);

51 i\xe0(
\xacgc
 != 4)

52
	`e
(27);

55 i\xe0(
	`\xbbad
(3,
\xaf
, 1000) != 2)

56
	`e
(28);

57 i\xe0(
\xaf
[0] != 7 ||\x87a[1] != 9)

58
	`e
(29);

60 i\xe0(
	`g\x91uid
() == 10)

61
	`e
(30);

62 i\xe0(
	`g\x91euid
() != 10)

63
	`e
(31);

64 i\xe0(
	`g\x91gid
() == 20)

65
	`e
(32);

66 i\xe0(
	`g\x91egid
() != 20)

67
	`e
(33);

69 i\xe0(
	`ݒ
("t1",
O_RDONLY
) < 0)

70
	`e
(34);

71 i\xe0(
	`ݒ
("t2",
O_RDONLY
) < 0)

72
	`e
(35);

74
	}
}

	@test/t11b.cpp

1 
	~<c\xa1dio
>

2 
	~<c\xa1dlib
>

12 
bo\xde

	$diff
(cڡ *
s1
, cڡ *
s2
) {

13 
\x8cue
) {

14 i\xe0(*
s1
 =\xf0'\0' && *
s2
 == '\0')

15 
\xe7l\xa3
;

16 i\xe0(*
s1
 !\xf0*
s2
)

17 
\x8cue
;

18 ++
s1
;

19 ++
s2
;

21
	}
}

26 
	$e
(
n
\xe8{
\xa1d
::
	`\xb4\x9\xa9f
("E\xbc\xdc %d\n",\x82);
	}
}

33 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

34 i\xe0(
	`diff
(
\xacgv
[0], "t11b"))

35
	`e
(31);

36 i\xe0(
	`diff
(
\xacgv
[1], "abc"))

37
	`e
(32);

38 i\xe0(
	`diff
(
\xacgv
[2], "defghi"))

39
	`e
(33);

40 i\xe0(
	`diff
(
\xacgv
[3], "j"))

41
	`e
(34);

42 i\xe0(
\xacgv
[4] !\xf0
nuαr
)

43
	`e
(35);

44 i\xe0(
\xacgc
 != 4)

45
	`e
(36);

47
	}
}

	@test/t15a.cpp

1 
	~<c\xa1dlib
>

13 
	$ma\x9a
(\xe8{  0;
	}
}

	@test/t16a.cpp

1 
	~<c\xa1dio
>

2 
	~<c\xa1dlib
>

3 
	~<f\x\xe7\x8e.h
>

4 
	~<uni\xa1d.h
>

15 
bo\xde

	$diff
(cڡ *
s1
, cڡ *
s2
) {

16 
\x8cue
) {

17 i\xe0(*
s1
 =\xf0'\0' && *
s2
 == '\0')

18 
\xe7l\xa3
;

19 i\xe0(*
s1
 !\xf0*
s2
)

20 
\x8cue
;

21 ++
s1
;

22 ++
s2
;

24
	}
}

29 
	$e
(
n
\xe8{
\xa1d
::
	`\xb4\x9\xa9f
("E\xbc\xdc %d\n",\x82);
	}
}

36 
	$ma\x9a
(
\xacgc
, *
\xacgv
[], *
\x92vp
[]) {

37 
\xaf
[4];

39 i\xe0(
	`diff
(
\xacgv
[0], "t4a"))

40
	`e
(21);

41 i\xe0(
	`diff
(
\xacgv
[1], "arg0"))

42
	`e
(22);

43 i\xe0(
	`diff
(
\xacgv
[2], "arg1"))

44
	`e
(23);

45 i\xe0(
	`diff
(
\xacgv
[3], "arg2"))

46
	`e
(24);

47 i\xe0(
	`diff
(
\x92vp
[0], "spring"))

48
	`e
(25);

49 i\xe0(
	`diff
(
\x92vp
[1], "summer"))

50
	`e
(26);

51 i\xe0(
\xacgc
 != 4)

52
	`e
(27);

54 i\xe0(
	`\xbbad
(3,
\xaf
, 1000) != 2)

55
	`e
(28);

56 i\xe0(
\xaf
[0] != 7 ||\x87a[1] != 9)

57
	`e
(29);

59 i\xe0(
	`g\x91uid
() == 10)

60
	`e
(30);

61 i\xe0(
	`g\x91euid
() != 10)

62
	`e
(31);

63 i\xe0(
	`g\x91gid
() == 20)

64
	`e
(32);

65 i\xe0(
	`g\x91egid
() != 20)

66
	`e
(33);

68 i\xe0(
	`ݒ
("t1",
O_RDONLY
) < 0)

69
	`e
(34);

70 i\xe0(
	`ݒ
("t2",
O_RDONLY
) < 0)

71
	`e
(35);

73
	}
}

	@test/t16b.cpp

1 
	~<c\xa1dio
>

2 
	~<c\xa1dlib
>

12 
bo\xde

	$diff
(cڡ *
s1
, cڡ *
s2
) {

13 
\x8cue
) {

14 i\xe0(*
s1
 =\xf0'\0' && *
s2
 == '\0')

15 
\xe7l\xa3
;

16 i\xe0(*
s1
 !\xf0*
s2
)

17 
\x8cue
;

18 ++
s1
;

19 ++
s2
;

21
	}
}

26 
	$e
(
n
\xe8{
\xa1d
::
	`\xb4\x9\xa9f
("E\xbc\xdc %d\n",\x82);
	}
}

33 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

34 i\xe0(
	`diff
(
\xacgv
[0], "t4b"))

35
	`e
(31);

36 i\xe0(
	`diff
(
\xacgv
[1], "abc"))

37
	`e
(32);

38 i\xe0(
	`diff
(
\xacgv
[2], "defghi"))

39
	`e
(33);

40 i\xe0(
	`diff
(
\xacgv
[3], "j"))

41
	`e
(34);

42 i\xe0(
\xacgv
[4] !\xf0
nuαr
)

43
	`e
(35);

44 i\xe0(
\xacgc
 != 4)

45
	`e
(36);

47
	}
}

	@test/test0.cpp

1 
	~"\xa1\xa9.h\xb5
"

7 
\x94\xbao
;

8 
	g\x94r\xf9
;

9 
	g\x8b\xa1\xc4
;

10 
l\xa3ek
();

13 
\xfe\xbfa
();

15 
\x8b\xa100
();

17 
\x8b\xa101
();

19 
e
(
n
);

21 
	#NB
 30L

	)

26 
	$ma\x9a
() {

27 
i
;

28 
\xcbt
;

30
	`\xb4\x9\xa9f
("Test 0 ");

31 
i
 = 0; i < 4; i++) {

32
	`\x8b\xa100
();

33
	`\x8b\xa101
();

35 i\xe0(
\x94r\xf9
 == 0)

36
	`\xb4\x9\xa9f
("ok\n");

38
	`\xb4\x9\xa9f
(" %d\x83\xbc\xdcs\n",
\x94r\xf9
);

39 
\x94r\xf9
;

40
	}
}

42 
	g\xaf
[100];

43 
	gb
[4] = {0, 1, 2, 3},
	gc
[4] = {10, 20, 30, 40},
	gd
[4] = {6, 7, 8, 9};

44 
	gt1
;

47 
	$\x8b\xa100
() {

48 
i
,
n
,
n1
,
n2
;

49 
t
,
	`time
(),
abuf
[4];

50 
\xa1\xa9

s
;

52
\x8b\xa1\xc4
 = 1;

53 i\xe0((
n
 =
	`\xfc\x97t
("foop", 0777)) != 3) {

54
	`\xb4\x9\xa9f
("C\xbb\xa9\x9ag\x87 f\x9e\x90\xbbtu\xbaed f\x9e\x90des\xfc\x9dt\xdc %d in\xa1\x97d o\xe03\n",
n
);

55
	`e
(1);

57 i\xe0((
n1
 =
	`\xfc\x97t
("foop", 0777)) != 4)

58
	`e
(2);

59 i\xe0((
n2
 =
	`\xfc\x97t
("/", 0777)) != -1)

60
	`e
(3);

61 i\xe0(
	`\x\xe3o\xa3
(
n
) != 0)

62
	`e
(4);

63 i\xe0((
n
 =
	`ݒ
("foop", 0)) != 3)

64
	`e
(5);

65 i\xe0((
n2
 =
	`ݒ
("nofile", 0)) != -1)

66
	`e
(6);

67 i\xe0(
	`\x\xe3o\xa3
(
n1
) != 0)

68
	`e
(7);

71 
i
 = 0; i < 2; i++) {

72
n1
 =
	`\xfc\x97t
("File2", 0777);

73 i\xe0(
n1
 != 4) {

74
	`\xb4\x9\xa9f
("\xfc\x97\x88y\x9blded fd=%d,\x83x\xb3\xf9ed 4\n",
n1
);

75
	`e
(8);

77 i\xe0((
n2
 =
	`ݒ
("File2", 0)) != 5)

78
	`e
(9);

79 i\xe0(
	`\x\xe3o\xa3
(
n1
) != 0)

80
	`e
(10);

81 i\xe0(
	`\x\xe3o\xa3
(
n2
) != 0)

82
	`e
(11);

84
	`uƚk
("File2");

85 i\xe0(
	`\x\xe3o\xa3
(
n
) != 0)

86
	`e
(12);

89 
i
 = 0; i < 2; i++) {

90
t
 = 105L;

91 i\xe0((
n
 =
	`\xfc\x97t
("foop", 0777)) != 3)

92
	`e
(13);

93 i\xe0(
	`\x\xe3o\xa3
(
n
) != 0)

94
	`e
(14);

95 i\xe0((
n
 =
	`ݒ
("foop", 2)) != 3)

96
	`e
(15);

99 i\xe0(
	`wr\x99e
(
n
,
b
, 4) != 4)

100
	`e
(16);

101 i\xe0(
	`\xbbad
(
n
,
\xaf
, 4) != 0)

102
	`e
(17);

103 i\xe0(
	`l\xa3ek
(
n
, 0L, 0) != 0L)

104
	`e
(18);

105 i\xe0(
	`\xbbad
(
n
,
\xaf
, 4) != 4)

106
	`e
(19);

107 i\xe0(
\xaf
[0] != 0 ||\x87a[1] != 1 ||\x87a[2] != 2 ||\x87a[3] != 3)

108
	`e
(20);

109 i\xe0(
	`l\xa3ek
(
n
, 0L, 0) != 0L)

110
	`e
(21);

111 i\xe0(
	`l\xa3ek
(
n
, 2L, 1) != 2L)

112
	`e
(22);

113 i\xe0(
	`\xbbad
(
n
,
\xaf
, 4) != 2)

114
	`e
(23);

115 i\xe0(
\xaf
[0] != 2 ||\x87a[1] != 3 ||\x87a[2] != 2 ||\x87a[3] != 3)

116
	`e
(24);

117 i\xe0(
	`l\xa3ek
(
n
, 2L, 0) != 2L)

118
	`e
(25);

119
	`\x\xe3\xb\xe7
();

120 i\xe0(
	`wr\x99e
(
n
,
c
, 4) != 4)

121
	`e
(26);

122 i\xe0(
	`l\xa3ek
(
n
, 0L, 0) != 0L)

123
	`e
(27);

124 i\xe0(
	`\xbbad
(
n
,
\xaf
, 10) != 6)

125
	`e
(28);

126 i\xe0(
\xaf
[0] != 0 ||\x87a[1] != 1 ||\x87a[2] != 10 ||\x87a[3] != 20)

127
	`e
(29);

128 i\xe0(
	`l\xa3ek
(
n
, 16L, 0) != 16L)

129
	`e
(30);

130 i\xe0(
	`l\xa3ek
(
n
, 2040L, 2) != 2046L)

131
	`e
(31);

132 i\xe0(
	`\xbbad
(
n
,
\xaf
, 10) != 0)

133
	`e
(32);

134 i\xe0(
	`l\xa3ek
(
n
, 0L, 1) != 2046L)

135
	`e
(33);

136
	`\x\xe3\xb\xe7
();

137 i\xe0(
	`wr\x99e
(
n
,
c
, 4) != 4)

138
	`e
(34);

139 i\xe0(
	`l\xa3ek
(
n
, 0L, 1) != 2050L)

140
	`e
(35);

141 i\xe0(
	`l\xa3ek
(
n
, 2040L, 0) != 2040L)

142
	`e
(36);

143
	`\x\xe3\xb\xe7
();

144 i\xe0(
	`\xbbad
(
n
,
\xaf
, 20) != 10)

145
	`e
(37);

146 i\xe0(
\xaf
[0] != 0 ||\x87a[5] != 0 ||\x87a[6] != 10 ||\x87a[9] != 40)

147
	`e
(38);

148 i\xe0(
	`l\xa3ek
(
n
, 10239L, 0) != 10239L)

149
	`e
(39);

150 i\xe0(
	`wr\x99e
(
n
,
d
, 2) != 2)

151
	`e
(40);

152 i\xe0(
	`l\xa3ek
(
n
, -2L, 2) != 10239L)

153
	`e
(41);

154 i\xe0(
	`\xbbad
(
n
,
\xaf
, 2) != 2)

155
	`e
(42);

156 i\xe0(
\xaf
[0] != 6 ||\x87a[1] != 7)

157
	`e
(43);

158 i\xe0(
	`l\xa3ek
(
n
,
NB
 * 1024L - 2L, 0) != NB * 1024L - 2L)

159
	`e
(44);

160 i\xe0(
	`wr\x99e
(
n
,
b
, 4) != 4)

161
	`e
(45);

162 i\xe0(
	`l\xa3ek
(
n
, 0L, 0) != 0L)

163
	`e
(46);

164 i\xe0(
	`l\xa3ek
(
n
, -6L, 2\xe8!\xf01024L *
NB
 - 4)

165
	`e
(47);

166
	`\x\xe3\xb\xe7
();

167 i\xe0(
	`\xbbad
(
n
,
\xaf
, 100) != 6)

168
	`e
(48);

169 i\xe0(
\xaf
[0] != 0 ||\x87a[1] != 0 ||\x87a[3] != 1 ||\x87a[4] != 2 ||\x87a[5] != 3)

170
	`e
(49);

171 i\xe0(
	`l\xa3ek
(
n
, 20000L, 0) != 20000L)

172
	`e
(50);

173 i\xe0(
	`wr\x99e
(
n
,
c
, 4) != 4)

174
	`e
(51);

175 i\xe0(
	`l\xa3ek
(
n
, -4L, 1) != 20000L)

176
	`e
(52);

177 i\xe0(
	`\xbbad
(
n
,
\xaf
, 4) != 4)

178
	`e
(53);

179 i\xe0(
\xaf
[0] != 10 ||\x87a[1] != 20 ||\x87a[2] != 30 ||\x87a[3] != 40)

180
	`e
(54);

181 i\xe0(
	`\x\xe3o\xa3
(
n
) != 0)

182
	`e
(55);

183 i\xe0((
n1
 =
	`\xfc\x97t
("foop", 0777)) != 3)

184
	`e
(56);

185 i\xe0(
	`\x\xe3o\xa3
(
n1
) != 0)

186
	`e
(57);

187
	`uƚk
("foop");

216
	}
}

219 
	$\x\xe3\xb\xe7
() {

220 
i
;

221 
i
 = 0; i < 100; i++)

222
\xaf
[
i
] = 0;

223
	}
}

226 
	$\x8b\xa101
() {

228 
i
,
j
,
n
,
n1
,
\xe6ag
;

229 
a
[255],
b
[255];

230 
\xa1\xa9

s
,
s1
;

232
\x8b\xa1\xc4
 = 2;

233 
i
 = 0; i < 2; i++) {

234
	`umask
(0);

236 i\xe0((
n
 =
	`\xfc\x97t
("T3", 0702)) < 0)

237
	`e
(1);

238 i\xe0(
	`l\x9ak
("T3", "newT3") < 0)

239
	`e
(2);

240 i\xe0((
n1
 =
	`ݒ
("newT3", 2)) < 0)

241
	`e
(3);

242 
j
 = 0; j < 255; j++)

243
a
[
j
] = j;

244 i\xe0(
	`wr\x99e
(
n
,
a
, 255) != 255)

245
	`e
(4);

246 i\xe0(
	`\xbbad
(
n1
,
b
, 255) != 255)

247
	`e
(5);

248
\xe6ag
 = 0;

249 
j
 = 0; j < 255; j++)

250 i\xe0(
a
[
j
] !\xf0
b
[j])

251
\xe6ag
++;

252 i\xe0(
\xe6ag
)

253
	`e
(6);

254 i\xe0(
	`uƚk
("T3") < 0)

255
	`e
(7);

256 i\xe0(
	`\x\xe3o\xa3
(
n
) < 0)

257
	`e
(8);

258 i\xe0(
	`\x\xe3o\xa3
(
n1
) < 0)

259
	`e
(9);

260 i\xe0((
n1
 =
	`ݒ
("newT3", 0)) < 0)

261
	`e
(10);

262 i\xe0(
	`\xbbad
(
n1
,
b
, 255) != 255)

263
	`e
(11);

264
\xe6ag
 = 0;

265 
j
 = 0; j < 255; j++)

266 i\xe0(
a
[
j
] !\xf0
b
[j])

267
\xe6ag
++;

268 i\xe0(
\xe6ag
)

269
	`e
(12);

272 i\xe0(
	`\xa1\xa9
("\xc3wT3", &
s
) < 0)

273
	`e
(13);

274 i\xe0(
s
.
\xa1_mode
 != 0100702)

275
	`e
(14);

276 i\xe0(
s
.
\xa1_ƚk
 != 1)

277
	`e
(15);

278 i\xe0(
s
.
\xa1_size
 != 255L)

279
	`e
(16);

280 i\xe0(
	`f\xa1\xa9
(
n1
, &
s1
) < 0)

281
	`e
(17);

282 i\xe0(
s
.
\xa1_dev
 !\xf0
s1
.st_dev)

283
	`e
(18);

284 i\xe0(
s
.
\xa1_\x9ao
 !\xf0
s1
.st_ino)

285
	`e
(19);

286 i\xe0(
s
.
\xa1_mode
 !\xf0
s1
.st_mode)

287
	`e
(20);

288 i\xe0(
s
.
\xa1_ƚk
 !\xf0
s1
.st_nlink)

289
	`e
(21);

290 i\xe0(
s
.
\xa1_uid
 !\xf0
s1
.st_uid)

291
	`e
(22);

292 i\xe0(
s
.
\xa1_gid
 !\xf0
s1
.st_gid)

293
	`e
(23);

294 i\xe0(
s
.
\xa1_rdev
 !\xf0
s1
.st_rdev)

295
	`e
(24);

296 i\xe0(
s
.
\xa1_size
 !\xf0
s1
.st_size)

297
	`e
(25);

298 i\xe0(
s
.
\xa1_\xa9ime
 !\xf0
s1
.st_atime)

299
	`e
(26);

300 i\xe0(
	`\x\xe3o\xa3
(
n1
) < 0)

301
	`e
(27);

302 i\xe0(
	`uƚk
("newT3") < 0)

303
	`e
(28);

305
	`umask
(040);

306 i\xe0((
n
 =
	`\xfc\x97t
("T3a", 0777)) < 0)

307
	`e
(29);

308 i\xe0(
	`\xa1\xa9
("T3a", &
s
) < 0)

309
	`e
(30);

310 i\xe0(
s
.
\xa1_mode
 != 0100737)

311
	`e
(31);

312 i\xe0(
	`uƚk
("T3a") < 0)

313
	`e
(32);

314 i\xe0(
	`\x\xe3o\xa3
(
n1
) < 0)

315
	`e
(33);

318 i\xe0((
n
 =
	`\xfc\x97t
("T3b", 0777)) < 0)

319
	`e
(34);

320 i\xe0(
	`\x\xe3o\xa3
(
n
) < 0)

321
	`e
(35);

322 i\xe0((
n
 =
	`ݒ
("T3b", 2)) < 0)

323
	`e
(36);

324 i\xe0((
n1
 =
	`dup
(
n
)) !=\x82 + 1)

325
	`e
(37);

326 i\xe0(
	`wr\x99e
(
n
,
a
, 255) != 255)

327
	`e
(38);

328
	`\xbbad
(
n1
,
b
, 20);

329 i\xe0(
	`l\xa3ek
(
n
, 0L, 0) != 0L)

330
	`e
(39);

331 i\xe0((
j
 =
	`\xbbad
(
n1
,
b
, 1024)) != 255)

332
	`e
(40);

333 i\xe0(
	`uƚk
("T3b") < 0)

334
	`e
(41);

335 i\xe0(
	`\x\xe3o\xa3
(
n
) < 0)

336
	`e
(42);

337 i\xe0(
	`\x\xe3o\xa3
(
n1
) < 0)

338
	`e
(43);

340
	}
}

343 
	$e
(
n
) {

344
	`\xb4\x9\xa9f
("Sub\x8b\xa1 %d,\x83\xbc\xdc %d\x83\xbcno=%d ",
\x8b\xa1\xc4
,
n
,
\x94\xbao
);

345
	`\xb3\xbc\xdc
("");

346
\x94r\xf9
++;

347
	}
}

	@test/test1.cpp

1 
	~"sig\xc7l.h\xb5
"

8 
	gglov
,
	gg\xf9
;

9 
\x94\xbao
;

10 
	g\x94r\xf9
;

11 
l\xa3ek
();

12 
	g\x9a\x99\xa1ack
[2048];

17
	$ma\x9a
() {

18 
i
;

20
	`\xb4\x9\xa9f
("Test 1 ");

22 
i
 = 0; i < 15; i++) {

23
	`\x8b\xa110
();

24
	`\x8b\xa111
();

26 i\xe0(
\x94r\xf9
 == 0)

27
	`\xb4\x9\xa9f
("ok\n");

29
	`\xb4\x9\xa9f
(" %d\x83\xbc\xdcs\n",
\x94r\xf9
);

30
	`ex\x99
(0);

31
	}
}

33
	$\x8b\xa110
() {

34 
i
,
n
,
pid
;

36
n
 = 4;

37 
i
 = 0; i <
n
; i++) {

38 i\xe0((
pid
 =
	`f\xdck
())) {

39 i\xe0(
pid
 < 0) {

40
	`\xb4\x9\xa9f
("\nTest 1 fork failed\n");

41
	`ex\x99
(1);

43
	`\xb7\xbb\xc1
();

45
	`ch\x9ed
(
i
);

47
	}
}

49
	$\xb7\xbb\xc1
() {

51 
n
;

53
n
 =
	`g\x91pid
();

54
	`wa\x99
(&
n
);

55
	}
}

57
	$ch\x9ed
(
i
) i;

59 
n
;

61
n
 =
	`g\x91pid
();

62
	`ex\x99
(
i
);

63
	}
}

65
	$\x8b\xa111
() {

66 
i
,
k
;

68 
i
 = 0; i < 4; i++) {

69
glov
 = 0;

70 i\xe0((
k
 =
	`f\xdck
())) {

71 i\xe0(
k
 < 0) {

72
	`\xb4\x9\xa9f
("Test 1 fork failed\n");

73
	`ex\x99
(1);

75
	`\xb7\xbb\xc11
(
k
);

77
	`ch\x9ed1
(
k
);

79
	}
}

81
	$\xb7\xbb\xc11
(
ch\x9edpid
) childpid;

84 
	`func
(),
n
;

86 
n
 = 0;\x82 < 5000;\x82++)

88
	`k\x9\x96
(
ch\x9edpid
, 2);

89
	`wa\x99
(&
n
);

90
	}
}

92
	$func
() {

93
glov
++;

94
g\xf9
++;

95
	}
}

96
	$ch\x9ed1
(
k
) k;

98
	`sig\xc7l
(2,
func
);

99 
glov
 == 0)

101
	`ex\x99
(
g\xf9
);

102
	}
}

104
	$e
(
n
) n;

106
	`\xb4\x9\xa9f
("\nE\xbc\xdc %d\x83\xbcno=%d ",
n
,
\x94\xbao
);

107
	`\xb3\xbc\xdc
("");

108
\x94r\xf9
++;

109
	}
}

	@test/test10.cpp

6 *
	g\xc7me
[] = {"t10a", "t10b", "t10c", "t10d", "t10e", "t10f", "t10g", "t10h", "t10i", "t10j"};

8 
\x94\xbao
;

9 
	g\x94r\xf9
;

10 
	g\xb4og
[300];

11 
	gpsize
;

16
	$ma\x9a
() {

17 
i
,
n
,
pid
;

19
	`\xb4\x9\xa9f
("Test 10 ");

20
pid
 =
	`g\x91pid
();

23
	`mkf\x9\x93s
();

25 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

26 i\xe0(
	`f\xdck
() == 0) {

27
	`exe\x\xe3
("t10a", 0);

28
	`ex\x99
(0);

30 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

31 i\xe0(
	`f\xdck
() == 0) {

32
	`exe\x\xe3
("t10b", 0);

33
	`ex\x99
(0);

35 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

36 i\xe0(
	`f\xdck
() == 0) {

37
	`exe\x\xe3
("t10c", 0);

38
	`ex\x99
(0);

40 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

41 i\xe0(
	`f\xdck
() == 0) {

42
	`exe\x\xe3
("t10d", 0);

43
	`ex\x99
(0);

46 
i
 = 0; i < 60; i++) {

47
	`\xa5awn
(
	`\xb\xe2d
() & 07);

49 
i
 = 0; i < 4; i++)

50
	`wa\x99
(&
n
);

51 i\xe0(
\x94r\xf9
 == 0)

52
	`\xb4\x9\xa9f
("ok\n");

54
	`\xb4\x9\xa9f
(" %d\x83\xbc\xdcs\n",
\x94r\xf9
);

55
	`rmf\x9\x93s
();

56
	`ex\x99
(0);

57
	}
}

59
	$\xa5awn
(
n
) n;

61 
pid
,
k
;

63 i\xe0(
pid
 =
	`f\xdck
()) {

64
	`wa\x99
(&
n
);

66
k
 =
	`exe\x\xe3
(
\xc7me
[
n
], 0);

67
\x94r\xf9
++;

68
	`\xb4\x9\xa9f
("Ch\x9ed\x83xe\xfe didn'\x88\x8fke. f\x9ee=%\xa0\x94\xbao=%d\n",
\xc7me
[
n
],
\x94\xbao
);

69
	`rmf\x9\x93s
();

70
	`ex\x99
(0);

71
	`\xb4\x9\xa9f
("Worse yet, EXIT didn't\x83xit\n");

73
	}
}

75
	$mkf\x9\x93s
() {

76 
fd
;

77
fd
 =
	`ݒ
("t10a", 0);

78 i\xe0(
fd
 < 0) {

79
	`\xb4\x9\xa9f
("Can't open\x8110a\n");

80
	`ex\x99
(1);

82
psize
 =
	`\xbbad
(
fd
,
\xb4og
, 300 * 4);

83
	`\xfc_f\x9\x93
("t10b", 1600);

84
	`\xfc_f\x9\x93
("t10c", 1400);

85
	`\xfc_f\x9\x93
("t10d", 2300);

86
	`\xfc_f\x9\x93
("t10e", 3100);

87
	`\xfc_f\x9\x93
("t10f", 2400);

88
	`\xfc_f\x9\x93
("t10g", 1700);

89
	`\xfc_f\x9\x93
("t10h", 1500);

90
	`\xfc_f\x9\x93
("t10i", 4000);

91
	`\xfc_f\x9\x93
("t10j", 2250);

92
	`\x\xe3o\xa3
(
fd
);

93
	}
}

95
	$\xfc_f\x9\x93
(
\xc7me
,
size
) *name;

96 
size
;

99 
fd
;

101
\xb4og
[6] = ()
size
;

102
fd
 =
	`\xfc\x97t
(
\xc7me
, 0755);

103
	`wr\x99e
(
fd
,
\xb4og
,
psize
);

104
	`\x\xe3o\xa3
(
fd
);

105
	}
}

107
	$rmf\x9\x93s
() {

108
	`uƚk
("t10b");

109
	`uƚk
("t10c");

110
	`uƚk
("t10d");

111
	`uƚk
("t10e");

112
	`uƚk
("t10f");

113
	`uƚk
("t10g");

114
	`uƚk
("t10h");

115
	`uƚk
("t10i");

116
	`uƚk
("t10j");

117
	}
}

	@test/test11.cpp

6 *
	g\x92vp
[3] = {"spring", "summer", 0};

8
\x94\xbao
;

9 
	g\x94r\xf9
;

14
	$ma\x9a
() {

15 
i
;

17
	`\xb4\x9\xa9f
("Test 11 ");

18 
i
 = 0; i < 9; i++) {

19
	`\x8b\xa1110
();

20
	`\x8b\xa1111
();

22 i\xe0(
\x94r\xf9
 == 0)

23
	`\xb4\x9\xa9f
("ok\n");

25
	`\xb4\x9\xa9f
(" %d\x83\xbc\xdcs\n",
\x94r\xf9
);

26
	`ex\x99
(0);

27
	}
}

29
	$e
(
n
) n;

31
	`\xb4\x9\xa9f
("\nE\xbc\xdc %d.\x83\xbcn\xd8\xf0%d ",
n
,
\x94\xbao
);

32
	`\xb3\xbc\xdc
("");

33
\x94r\xf9
++;

34
	}
}

36
	$\x8b\xa1110
() {

38 
n
,
fd
,
fd1
,
i
;

39 
\xaf
[4];

41 i\xe0(
	`f\xdck
()) {

42
	`wa\x99
(&
n
);

43 i\xe0(
n
 != 25600)

44
	`e
(1);

45
	`uƚk
("t1");

46
	`uƚk
("t2");

48 i\xe0(
	`chown
("t11a", 10, 20) < 0)

49
	`e
(2);

50
	`chmod
("t11a", 0666);

56
	`exe\x\xe3
("t11a", 0,
\x92vp
);

59
	`chmod
("t11a", 06555);

60 i\xe0((
fd
 =
	`\xfc\x97t
("t1", 0600)) != 3)

61
	`e
(3);

62 i\xe0(
	`\x\xe3o\xa3
(
fd
) < 0)

63
	`e
(4);

64 i\xe0(
	`ݒ
("t1", 2) != 3)

65
	`e
(5);

66 i\xe0(
	`chown
("t1", 10, 99) < 0)

67
	`e
(6);

68 i\xe0((
fd
 =
	`\xfc\x97t
("t2", 0060)) != 4)

69
	`e
(7);

70 i\xe0(
	`\x\xe3o\xa3
(
fd
) < 0)

71
	`e
(8);

72 i\xe0(
	`ݒ
("t2", 2) != 4)

73
	`e
(9);

74 i\xe0(
	`chown
("t2", 99, 20) < 0)

75
	`e
(10);

76 i\xe0(
	`\xa3tgid
(6) < 0)

77
	`e
(11);

78 i\xe0(
	`\xa3tuid
(5) < 0)

79
	`e
(12);

80 i\xe0(
	`g\x91uid
() != 5)

81
	`e
(13);

82 i\xe0(
	`g\x91euid
() != 5)

83
	`e
(14);

84 i\xe0(
	`g\x91gid
() != 6)

85
	`e
(15);

86 i\xe0(
	`g\x91egid
() != 6)

87
	`e
(16);

88
\xaf
[0] = 3;

89
\xaf
[1] = 5;

90
\xaf
[2] = 7;

91
\xaf
[3] = 9;

92 i\xe0(
	`wr\x99e
(3,
\xaf
, 4) != 4)

93
	`e
(17);

94
	`l\xa3ek
(3, 2L, 0);

95
	`exe\x\xe3e
("t11a", "t11a", "\xacg0", "\xacg1", "\xacg2", 0,
\x92vp
);

96
	`e
(18);

97
	`\xb4\x9\xa9f
("Can't\x83xec\x8111a\n");

98
	`ex\x99
(3);

100
	}
}

102
	$\x8b\xa1111
() {

103 
n
;

104 *
\xacgv
[5];

106 i\xe0(
	`f\xdck
()) {

107
	`wa\x99
(&
n
);

108 i\xe0(
n
 != (75 << 8))

109
	`e
(20);

112
\xacgv
[0] = "t11b";

113
\xacgv
[1] = "abc";

114
\xacgv
[2] = "defghi";

115
\xacgv
[3] = "j";

116
\xacgv
[4] = 0;

117
	`execv
("t11b",
\xacgv
);

118
	`e
(19);

120
	}
}

	@test/test12.cpp

1 
	#_LARGEFILE64_SOURCE


	)

7 
	~<f\x\xe7\x8e.h
>

8 
	~<\xa1dio.h
>

9 
	~<\xa1dlib.h
>

10 
	~<sys/\xa1\xa9.h
>

11 
	~<sys/ty\xb3s.h
>

12 
	~<uni\xa1d.h
>

17 
	$ma\x9a
() {

19 cڡ *
\xe2ame
 = "bigfile";

21 cڡ
off64_t

off
 = (off64_t)4 * 1024 * 1024 * 1024;

22 
fd
;

23 
c
 = 'x';

24 
\xa1\xa964

\xa1
;

26
	`\xb4\x9\xa9f
("Test 12 ");

29
fd
 =
	`ݒ
(
\xe2ame
,
O_WRONLY
 |
O_CREAT
 |
O_TRUNC
, 0666);

30 i\xe0(
fd
 < 0) {

31
	`\xb3\xbc\xdc
("open");

36 i\xe0(
	`l\xa3ek64
(
fd
,
off
,
SEEK_SET
) != off) {

37
	`\xb3\xbc\xdc
("lseek64");

38
	`\x\xe3o\xa3
(
fd
);

43 i\xe0(
	`wr\x99e
(
fd
, &
c
, 1) != 1) {

44
	`\xb3\xbc\xdc
("write");

45
	`\x\xe3o\xa3
(
fd
);

48
	`\x\xe3o\xa3
(
fd
);

51 i\xe0(
	`\xa1\xa964
(
\xe2ame
, &
\xa1
) != 0) {

52
	`\xb3\xbc\xdc
("stat64");

55 i\xe0(
\xa1
.
\xa1_size
 !\xf0
off
 + 1) {

56
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "size mismatch\n");

61
fd
 =
	`ݒ
(
\xe2ame
,
O_RDONLY
);

62 i\xe0(
fd
 < 0) {

63
	`\xb3\xbc\xdc
("open");

66 i\xe0(
	`l\xa3ek64
(
fd
,
off
,
SEEK_SET
) != off) {

67
	`\xb3\xbc\xdc
("lseek64");

68
	`\x\xe3o\xa3
(
fd
);

71 i\xe0(
	`\xbbad
(
fd
, &
c
, 1) != 1) {

72
	`\xb3\xbc\xdc
("read");

73
	`\x\xe3o\xa3
(
fd
);

76 i\xe0(
c
 != 'x') {

77
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "data mismatch\n");

78
	`\x\xe3o\xa3
(
fd
);

81
	`\x\xe3o\xa3
(
fd
);

83
	`uƚk
(
\xe2ame
);

84
	`\xb4\x9\xa9f
("ok\n");

86
	}
}

	@test/test2.cpp

6
\x94\xbao
;

7 
	gkk
 = 0;

9 
	gbuf
[2048];

13
	$ma\x9a
() {

14 
i
;

16
	`\xb4\x9\xa9f
("Test 2 ");

17 
i
 = 0; i < 19; i++) {

18
	`\x8b\xa120
();

20
	`\xb4\x9\xa9f
("ok\n");

21
	`ex\x99
(0);

22
	}
}

24
	$\x8b\xa120
() {

27 
fd
[2];

28 
n
,
i
,
j
,
ij
,
q
 = 0,
\xc2
,
m
 = 0,
k
;

30 i\xe0(
	`p\x9de
(
fd
) < 0) {

31
	`\xb4\x9\xa9f
("p\x9d\x90\x94r\xdc.\x83\xbcno\xf0%d\n",
\x94\xbao
);

32
	`ex\x99
(0);

35
i
 =
	`f\xdck
();

36 i\xe0(
i
 < 0) {

37
	`\xb4\x9\xa9f
("fork failed\n");

38
	`ex\x99
(0);

40 i\xe0(
i
 != 0) {

42
	`\x\xe3o\xa3
(
fd
[0]);

43 
i
 = 0; i < 2048; i++)

44
buf
[
i
] = i & 0377;

45 
q
 = 0; q < 8; q++) {

46 i\xe0(
	`wr\x99e
(
fd
[1],
buf
, 2048) < 0) {

47
	`\xb4\x9\xa9f
("wr\x99\x90p\x9d\x90\x94r.\x83\xbcno=%d\n",
\x94\xbao
);

48
	`ex\x99
(0);

51
	`\x\xe3o\xa3
(
fd
[1]);

52
	`wa\x99
(&
q
);

53 i\xe0(
q
 != 256 * 58) {

54
	`\xb4\x9\xa9f
("wr\xdag\x83x\x99 cod\x90%d\n",
q
);

55
	`ex\x99
(0);

59
	`\x\xe3o\xa3
(
fd
[1]);

60 
q
 = 0; q < 32; q++) {

61
n
 =
	`\xbbad
(
fd
[0],
buf
, 512);

62 i\xe0(
n
 != 512) {

63
	`\xb4\x9\xa9f
("\xbbad y\x9blded %d by\x8bs,\x82\xd9 512\n",
n
);

64
	`ex\x99
(0);

66 
j
 = 0; j <
n
; j++)

67 i\xe0((
buf
[
j
] & 0377\xe8!\xf0(
kk
 & 0377)) {

68
	`\xb4\x9\xa9f
("wr\xdag d\xa9a: %d %d %d \\xc0",
j
,
buf
[j] & 0377,
kk
 & 0377);

70
kk
++;

73
	`ex\x99
(58);

75
	}
}

	@test/test3.cpp

1 
	~"sig\xc7l.h\xb5
"

7 
	g\xb7rsigs
,
	g\xb7\xbdid
,
	g\xb7rcum
;

8 
	gsig\xf9
,
	gcumsig
,
	g\x94r\xf9
;

13
	$ma\x9a
() {

14 
i
;

16
	`\xb4\x9\xa9f
("Test 3 ");

17 
i
 = 0; i < 9; i++) {

18
	`\x8b\xa191
();

19
	`\x8b\xa192
();

21 i\xe0(
cumsig
 != 9)

22
	`e
(3);

23 i\xe0(
\x94r\xf9
 == 0)

24
	`\xb4\x9\xa9f
("ok\n");

26
	`\xb4\x9\xa9f
("%d\x83\xbc\xdcs\n",
\x94r\xf9
);

27
	}
}

29
	$\x8b\xa190
() {

30
	`\xf\xe1ch
 ();

32 
n
,
pid
;

34
\xb7\xbdid
 =
	`g\x91pid
();

35
	`sig\xc7l
(10,
\xfftch
);

37 i\xe0(
pid
 =
	`f\xdck
()) {

38 
\xb7rsigs
 == 0)

40 i\xe0(
	`k\x9\x96
(
pid
, 9) < 0)

41
	`e
(1);

42
	`wa\x99
(&
n
);

43 i\xe0(
n
 != 9)

44
	`e
(2);

46
	`k\x9\x96
(
\xb7\xbdid
, 10);

47
	`\xb7u\xa3
();

49
	}
}

51
	$\xf\xe1ch
 () {

52
\xb7rsigs
++;

53
\xb7rcum
++;

54
	}
}

56
	$e
(
n
) n;

58
	`\xb4\x9\xa9f
("E\xbc\xdc %d ",
n
);

59
\x94r\xf9
++;

60
	`\xb3\xbc\xdc
("");

61
	}
}

63
	$\x8b\xa191
() {

64 
fd
[2],
n
,
	`sigp\x9d
();

65 
buf
[4];

67
sig\xf9
 = 0;

68
	`sig\xc7l
(
SIGPIPE
,
sigp\x9d
);

69
	`p\x9de
(
fd
);

70 i\xe0(
	`f\xdck
()) {

72
	`\x\xe3o\xa3
(
fd
[0]);

73 
sig\xf9
 == 0) {

74
	`wr\x99e
(
fd
[1],
buf
, 1);

76
	`wa\x99
(&
n
);

79
	`\x\xe3o\xa3
(
fd
[0]);

80
	`\x\xe3o\xa3
(
fd
[1]);

81
	`ex\x99
(0);

83
	}
}

85
	$sigp\x9d
() {

86
sig\xf9
++;

87
cumsig
++;

88
	}
}

90
	$\x8b\xa192
() {

91 
pid
,
n
;

93
	`sig\xc7l
(
SIGQUIT
,
SIG_DFL
);

94 i\xe0(
	`f\xdck
()) {

95 i\xe0(
	`f\xdck
()) {

96 i\xe0(
	`f\xdck
()) {

97 i\xe0(
	`f\xdck
()) {

98
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

99
	`k\x9\x96
(0,
SIGQUIT
);

100
	`wa\x99
(&
n
);

101
	`wa\x99
(&
n
);

102
	`wa\x99
(&
n
);

103
	`wa\x99
(&
n
);

105
	`\xb7u\xa3
();

108
	`\xb7u\xa3
();

111
	`\xb7u\xa3
();

114
	`\xb7u\xa3
();

116
	}
}

	@test/test4.cpp

6 
	gpid0
,
	gpid1
,
	gpid2
,
	gpid3
,
	gs
;

7 
	gi
,
	gfd
;

8 
	g\xc3xtb
;

9 
	gbuf
[1024];

14
	$ma\x9a
() {

15 
k
 = 0;

16
	`\xb4\x9\xa9f
("Test 4 ");

17
	`subr
();

18
	`\xb4\x9\xa9f
("ok\n");

19
	}
}

21
	$subr
() {

22 i\xe0(
pid0
 =
	`f\xdck
()) {

24 i\xe0(
pid0
 < 0)

25
	`nof\xdck
();

26 i\xe0(
pid1
 =
	`f\xdck
()) {

28 i\xe0(
pid1
 < 0)

29
	`nof\xdck
();

30 i\xe0(
pid2
 =
	`f\xdck
()) {

32 i\xe0(
pid2
 < 0)

33
	`nof\xdck
();

34 i\xe0(
pid3
 =
	`f\xdck
()) {

36 i\xe0(
pid3
 < 0)

37
	`nof\xdck
();

38 
i
 = 0; i < 10000; i++)

40
	`k\x9\x96
(
pid2
, 9);

41
	`k\x9\x96
(
pid1
, 9);

42
	`k\x9\x96
(
pid0
, 9);

43
	`wa\x99
(&
s
);

44
	`wa\x99
(&
s
);

45
	`wa\x99
(&
s
);

46
	`wa\x99
(&
s
);

48
fd
 =
	`ݒ
("/dev/fd0", 0);

49
	`l\xa3ek
(
fd
, 20480L *
\xc3xtb
, 0);

50 
i
 = 0; i < 10; i++)

51
	`\xbbad
(
fd
,
buf
, 1024);

52
\xc3xtb
++;

53
	`\x\xe3o\xa3
(
fd
);

54
	`ex\x99
(0);

58
	`g\x91pid
();

62
	`g\x91pid
();

66
	`g\x91pid
();

68
	}
}

70
	$nof\xdck
() {

71
	`\xb4\x9\xa9f
("Fork failed. Not\x83nough memory.\n");

72
	`ex\x99
(1);

73
	}
}

	@test/test5.cpp

1 
	~"\x94\xbao.h\xb5
"

7 
	~"sig\xc7l.h\xb5
"

8 
\x94\xbao
;

9 
	g\x94r\xf9
;

11 
func1
(),
func10
(),
func8
(),
fun\xff\xccm
(),
func11
();

12 
	gch\x9edsigs
,
	g\xb7rsigs
,
	g\x\xab\xacms
;

13 
	gz\x94o
[1024];

18
	$ma\x9a
() {

19 
i
;

21
	`\xb4\x9\xa9f
("Test 5 ");

22 
i
 = 0; i < 1; i++) {

23
	`\x8b\xa150
();

24
	`\x8b\xa151
();

25
	`\x8b\xa153
();

26
	`\x8b\xa154
();

27
	`\x8b\xa155
();

28
	`\x8b\xa156
();

30 i\xe0(
\x94r\xf9
 == 0)

31
	`\xb4\x9\xa9f
("ok\n");

33
	`\xb4\x9\xa9f
("%d\x83\xbc\xdcs\n",
\x94r\xf9
);

34
	`ex\x99
(0);

35
	}
}

37
	$e
(
n
) n;

39
	`\xb4\x9\xa9f
("\nE\xbc\xdc %d.\x83\xbcno=%d\n",
n
,
\x94\xbao
);

40
\x94r\xf9
++;

41
	}
}

43
	$\x8b\xa150
() {

44 
\xb7\xbdid
,
ch\x9edpid
,
\xe6ag
, *
zp
;

46
\xe6ag
 = 0;

47 
zp
 = &
z\x94o
[0]; zp < &zero[1024]; zp++)

48 i\xe0(*
zp
 != 0)

49
\xe6ag
 = 1;

50 i\xe0(
\xe6ag
)

51
	`e
(0);

52 i\xe0(
	`sig\xc7l
(1,
func1
) < 0)

53
	`e
(1);

54 i\xe0(
	`sig\xc7l
(10,
func10
) < 0)

55
	`e
(2);

56
\xb7\xbdid
 =
	`g\x91pid
();

57 i\xe0(
ch\x9edpid
 =
	`f\xdck
()) {

58 i\xe0(
ch\x9edpid
 < 0)

59
	`ex
();

60
	`\xb7\xbb\xc1
(
ch\x9edpid
);

62
	`ch\x9ed
(
\xb7\xbdid
);

64 i\xe0(
	`sig\xc7l
(1,
SIG_DFL
) < 0)

65
	`e
(4);

66 i\xe0(
	`sig\xc7l
(10,
SIG_DFL
) < 0)

67
	`e
(5);

68
	}
}

70
	$\xb7\xbb\xc1
(
ch\x9edpid
) childpid;

72 
i
;

74 
i
 = 0; i < 3; i++) {

75 i\xe0(
	`k\x9\x96
(
ch\x9edpid
, 1) < 0)

76
	`e
(6);

77 
\xb7rsigs
 == 0)

79
\xb7rsigs
--;

81 i\xe0(
	`wa\x99
(&
i
) < 0)

82
	`e
(7);

83 i\xe0(
i
 != 256 * 6)

84
	`e
(8);

85
	}
}

87
	$ch\x9ed
(
\xb7\xbdid
) parpid;

90 
i
;

92 
i
 = 0; i < 3; i++) {

93 
ch\x9edsigs
 == 0)

95
ch\x9edsigs
--;

96 i\xe0(
	`k\x9\x96
(
\xb7\xbdid
, 10) < 0)

97
	`e
(9);

99
	`ex\x99
(6);

100
	}
}

102
	$func1
() {

103 i\xe0(
	`sig\xc7l
(1,
func1
) < 0)

104
	`e
(10);

105
ch\x9edsigs
++;

106
	}
}

108
	$func10
() {

109 i\xe0(
	`sig\xc7l
(10,
func10
) < 0)

110
	`e
(11);

111
\xb7rsigs
++;

112
	}
}

114
	$\x8b\xa151
() {

115 
\xfdid
,
n
,
pid
;

117 i\xe0((
pid
 =
	`f\xdck
())) {

118 i\xe0(
pid
 < 0)

119
	`ex
();

120 i\xe0((
pid
 =
	`f\xdck
())) {

121 i\xe0(
pid
 < 0)

122
	`ex
();

123 i\xe0(
\xfdid
 =
	`f\xdck
()) {

124 i\xe0(
\xfdid
 < 0)

125
	`ex
();

126 i\xe0(
	`k\x9\x96
(
\xfdid
, 9) < 0)

127
	`e
(12);

128 i\xe0(
	`wa\x99
(&
n
) < 0)

129
	`e
(13);

130 i\xe0(
	`wa\x99
(&
n
) < 0)

131
	`e
(14);

132 i\xe0(
	`wa\x99
(&
n
) < 0)

133
	`e
(15);

135
	`\xb7u\xa3
();

140
	`ex\x99
(0);

143
	`ex\x99
(0);

145
	}
}

147
	$\x8b\xa152
() {

148 
pid
,
n
,
k
;

150
pid
 =
	`g\x91pid
();

151 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

152
k
 =
	`f\xdck
();

153 i\xe0(
k
 < 0)

154
	`ex
();

155 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

156
k
 =
	`f\xdck
();

157 i\xe0(
k
 < 0)

158
	`ex
();

159 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
)

160
k
 =
	`f\xdck
();

161 i\xe0(
k
 < 0)

162
	`ex
();

164 i\xe0(
	`g\x91pid
(\xe8=\xf0
pid
) {

165 i\xe0(
	`k\x9\x96
(0, 9) < 0)

166
	`e
(16);

167 i\xe0(
	`wa\x99
(&
n
) < 0)

168
	`e
(17);

169 i\xe0(
	`wa\x99
(&
n
) < 0)

170
	`e
(18);

171 i\xe0(
	`wa\x99
(&
n
) < 0)

172
	`e
(19);

174
	`\xb7u\xa3
();

175
	}
}

177 
	gsigm\xad
[5] = {9, 10, 11};

178
	$\x8b\xa153
() {

179 
n
,
i
,
pid
,
wpid
;

182 
i
 = 0; i < 3; i++) {

183 i\xe0(
pid
 =
	`f\xdck
()) {

184 i\xe0(
pid
 < 0)

185
	`ex
();

186
	`\xa6\x93p
(3);

187 i\xe0(
	`k\x9\x96
(
pid
,
sigm\xad
[
i
]) < 0) {

188
	`e
(20);

189
	`ex\x99
(1);

191 i\xe0((
wpid
 =
	`wa\x99
(&
n
)) < 0)

192
	`e
(21);

193 i\xe0((
n
 & 077\xe8!\xf0
sigm\xad
[
i
])

194
	`e
(22);

195 i\xe0(
pid
 !\xf0
wpid
)

196
	`e
(23);

198
	`\xb7u\xa3
();

199
	`ex\x99
(0);

202
	}
}

204
	$\x8b\xa154
() {

207 
i
;

209
\xae\xacms
 = 0;

210 
i
 = 0; i < 8; i++) {

211
	`sig\xc7l
(
SIGALRM
,
fun\xff\xccm
);

212
	`\x\xab\xacm
(1);

213
	`\xb7u\xa3
();

214 i\xe0(
\xae\xacms
 !\xf0
i
 + 1)

215
	`e
(24);

217
	}
}

219
	$\x8b\xa155
() {

223 
n
,
j
,
i
;

225 i\xe0(
	`sig\xc7l
(8,
func8
) < 0)

226
	`e
(25);

227 i\xe0(
n
 =
	`f\xdck
()) {

229 i\xe0(
n
 < 0)

230
	`ex
();

231
	`\xa6\x93p
(1);

232 i\xe0(
	`k\x9\x96
(
n
, 8) < 0)

233
	`e
(26);

234 i\xe0(
	`wa\x99
(&
n
) < 0)

235
	`e
(27);

236 i\xe0(
	`sig\xc7l
(8,
SIG_DFL
) < 0)

237
	`e
(28);

239
j
 =
	`\xb7u\xa3
();

240 i\xe0(
\x94\xbao
 !\xf0
E\xbc\xdcCode
::
EINTR
 && -errno != ErrorCode::EINTR)

241
	`e
(29);

242
	`ex\x99
(0);

244
	}
}

245
	$func8
(\xe8{
	}
}

246
	$\x8b\xa156
() {

247 
i
,
j
,
k
,
n
;

249
n
 =
	`f\xdck
();

250 i\xe0(
n
 < 0)

251
	`ex
();

252 i\xe0(
n
) {

253
	`wa\x99
(&
i
);

254
i
 = (i >> 8) & 0377;

255 i\xe0(
i
 !\xf0(
n
 & 0377))

256
	`e
(30);

258
i
 =
	`g\x91gid
();

259
j
 =
	`g\x91egid
();

260
k
 = (
i
 +
j
 + 7) & 0377;

261 i\xe0(
	`\xa3tgid
(
k
) < 0)

262
	`e
(31);

263 i\xe0(
	`g\x91gid
(\xe8!\xf0
k
)

264
	`e
(32);

265 i\xe0(
	`g\x91egid
(\xe8!\xf0
k
)

266
	`e
(33);

267
i
 =
	`g\x91uid
();

268
j
 =
	`g\x91euid
();

269
k
 = (
i
 +
j
 + 1) & 0377;

270 i\xe0(
	`\xa3tuid
(
k
) < 0)

271
	`e
(34);

272 i\xe0(
	`g\x91uid
(\xe8!\xf0
k
)

273
	`e
(35);

274 i\xe0(
	`g\x91euid
(\xe8!\xf0
k
)

275
	`e
(36);

276
i
 =
	`g\x91pid
() & 0377;

277 i\xe0(
	`wa\x99
(&
j
) != -1)

278
	`e
(37);

279
	`ex\x99
(
i
);

281
	}
}

283
	$func11
(\xe8{
	`e
(38);
	}
}

285
	$\x8b\xa157
() {

286 
n
;

288
	`sig\xc7l
(11,
func11
);

289
	`sig\xc7l
(11,
SIG_IGN
);

290
n
 =
	`g\x91pid
();

291
	`k\x9\x96
(
n
, 11);

292
	`sig\xc7l
(11,
SIG_DFL
);

293
	}
}

295
	$fun\xff\xccm
(\xe8{
\xae\xacms
++;
	}
}

297
	$\x8b\xa158
() {

301 
n
,
j
,
i
,
fd
[2];

303 i\xe0(
	`sig\xc7l
(8,
func8
) < 0)

304
	`e
(38);

305
	`p\x9de
(
fd
);

306 i\xe0(
n
 =
	`f\xdck
()) {

308 i\xe0(
n
 < 0)

309
	`ex
();

310
	`\xa6\x93p
(3);

311 i\xe0(
	`k\x9\x96
(
n
, 8) < 0)

312
	`e
(39);

313 i\xe0(
	`wa\x99
(&
n
) < 0)

314
	`e
(40);

315 i\xe0(
	`sig\xc7l
(8,
SIG_DFL
) < 0)

316
	`e
(41);

317
	`\x\xe3o\xa3
(
fd
[0]);

318
	`\x\xe3o\xa3
(
fd
[1]);

320
j
 =
	`\xbbad
(
fd
[0], &
n
, 1);

321 i\xe0(
\x94\xbao
 !\xf0
E\xbc\xdcCode
::
EINTR
)

322
	`e
(42);

323
	`ex\x99
(0);

325
	}
}

327
	$ex
() {

328
	`\xb4\x9\xa9f
("Te\xa1 5. f\xdck fa\x9eed. E\xbcno=%d\n",
\x94\xbao
);

329
	`ex\x99
(1);

330
	}
}

	@test/test6.cpp

7 *
brk
(), *
sbrk
();

8 
\x94\xbao
;

9 
	g\x94r\xf9
;

13
	$ma\x9a
() {

14 
i
;

16
	`\xb4\x9\xa9f
("Test 6 ");

17 
i
 = 0; i < 70; i++) {

18
	`\x8b\xa160
();

20 i\xe0(
\x94r\xf9
 == 0)

21
	`\xb4\x9\xa9f
("ok\n");

23
	`\xb4\x9\xa9f
(" %d\x83\xbc\xdcs\n",
\x94r\xf9
);

24
	`ex\x99
(0);

25
	}
}

26
	$e
(
n
) n;

28
	`\xb4\x9\xa9f
("\nE\xbc\xdc %d ",
n
);

29
	`\xb3\xbc\xdc
("");

30
	}
}

32
	$\x8b\xa160
() {

35 *
addr
, *
addr2
, *
addr3
;

36 
i
,
d\x96
,
\xfeick
,
\xfeick2
;

38
addr
 =
	`sbrk
(0);

39
addr
 =
	`sbrk
(0);

40 
i
 = 0; i < 10; i++)

41
	`sbrk
(7 *
i
);

42 
i
 = 0; i < 10; i++)

43
	`sbrk
(-7 *
i
);

44 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

45
	`e
(1);

46
	`sbrk
(30);

47 i\xe0(
	`brk
(
addr
) != 0)

48
	`e
(2);

49 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

50
	`e
(3);

52
d\x96
 = 0;

54
d\x96
++;

55
	`brk
(
addr
 +
d\x96
);

56
addr2
 =
	`sbrk
(0);

57 } 
addr2
 =\xf0
addr
);

58
\xfeick
 =
addr2
 -
addr
;

59
	`sbrk
((*)-1);

60 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

61
	`e
(4);

62
	`brk
(
addr
);

63 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

64
	`e
(5);

66
d\x96
 = 0;

68
d\x96
++;

69
	`brk
(
addr
 -
d\x96
);

70
addr3
 =
	`sbrk
(0);

71 } 
addr3
 =\xf0
addr
);

72
\xfeick2
 =
addr
 -
addr3
;

73
	`sbrk
((*)1);

74 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

75
	`e
(6);

76
	`brk
(
addr
);

77 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

78
	`e
(8);

79 i\xe0(
\xfeick
 !\xf0
\xfeick2
)

80
	`e
(9);

82
	`brk
(
addr
 + 2 *
\xfeick
);

83 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
 + 2 *
\xfeick
)

84
	`e
(10);

85
	`sbrk
(3 *
\xfeick
);

86 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
 + 5 *
\xfeick
)

87
	`e
(11);

88
	`sbrk
(-5 *
\xfeick
);

89 i\xe0(
	`sbrk
(0\xe8!\xf0
addr
)

90
	`e
(12);

91
	}
}

	@test/test7.cpp

1 
	~"sig\xc7l.h\xb5
"

7 
\x94\xbao
;

8 
	g\x8b\xa1\xc4
;

9 
	g\x94r\xf9
;

11 
	gz\x9ech
[5000];

16
	$ma\x9a
() {

17 
i
;

19
	`\xb4\x9\xa9f
("Test 7 ");

20 
i
 = 0; i < 150; i++) {

21
	`\x8b\xa170
();

23 i\xe0(
\x94r\xf9
 == 0)

24
	`\xb4\x9\xa9f
("ok\n");

26
	`\xb4\x9\xa9f
("%d\x83\xbc\xdcs\n",
\x94r\xf9
);

27
	}
}

29
	$\x8b\xa170
() {

30 
i
,
\x94r
,
pid
;

32
	`sig\xc7l
(
SIGQUIT
,
SIG_IGN
);

33
\x94r
 = 0;

34 
i
 = 0; i < 5000; i++)

35 i\xe0(
z\x9ech
[
i
] != 0)

36
\x94r
++;

37 i\xe0(
\x94r
 > 0)

38
	`e
(1);

39
	`k\x9\x96
(
	`g\x91pid
(),
SIGQUIT
);

40
	}
}

42
	$e
(
n
) n;

44
	`\xb4\x9\xa9f
("Sub\x8b\xa1 %d,\x83\xbc\xdc %d\x83\xbcno=%d ",
\x8b\xa1\xc4
,
n
,
\x94\xbao
);

45
	`\xb3\xbc\xdc
("");

46
\x94r\xf9
++;

47
	}
}

	@test/test8.cpp

1 
	~"\xa1\xa9.h\xb5
"

7 
\x94\xbao
;

8 
	g\x8b\xa1\xc4
;

9 
l\xa3ek
();

14
	$ma\x9a
() {

15 
i
;

17
	`\xb4\x9\xa9f
("Test 8 ");

18 
i
 = 0; i < 4; i++) {

19
	`\x8b\xa180
();

21
	`\xb4\x9\xa9f
("ok\n");

22
	}
}

24
	$\x8b\xa180
() {

27 
i
,
j
;

28 
\xa1\xa9

s
;

30
\x8b\xa1\xc4
 = 0;

31 
j
 = 0; j < 2; j++) {

32
	`umask
(0);

34 i\xe0(
	`chd\x9c
("/") < 0)

35
	`e
(1);

36 i\xe0(
	`mknod
("dir", 040700, 0) < 0)

37
	`e
(2);

38 i\xe0(
	`l\x9ak
("/", "/dir/..") < 0)

39
	`e
(3);

40 i\xe0(
	`mknod
("T3a", 0777, 0) < 0)

41
	`e
(4);

42 i\xe0(
	`mknod
("/dir/T3b", 0777, 0) < 0)

43
	`e
(5);

44 i\xe0(
	`mknod
("dir/T3c", 0777, 0) < 0)

45
	`e
(6);

46 i\xe0((
i
 =
	`ݒ
("/dir/T3b", 0)) < 0)

47
	`e
(7);

48 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

49
	`e
(8);

50 i\xe0((
i
 =
	`ݒ
("dir/T3c", 0)) < 0)

51
	`e
(9);

52 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

53
	`e
(10);

54 i\xe0(
	`chd\x9c
("dir") < 0)

55
	`e
(11);

56 i\xe0((
i
 =
	`ݒ
("T3b", 0)) < 0)

57
	`e
(12);

58 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

59
	`e
(13);

60 i\xe0((
i
 =
	`ݒ
("../T3a", 0)) < 0)

61
	`e
(14);

62 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

63
	`e
(15);

64 i\xe0((
i
 =
	`ݒ
("../dir/../dir/../dir/../dir/../dir/T3c", 0)) < 0)

65
	`e
(16);

66 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

67
	`e
(17);

69 i\xe0(
	`chmod
("../dir/../dir/../dir/../dir/../T3a", 0123) < 0)

70
	`e
(18);

71 i\xe0(
	`\xa1\xa9
("../d\x9c/../d\x9c/../d\x9c/../T3a", &
s
) < 0)

72
	`e
(19);

73 i\xe0((
s
.
\xa1_mode
 & 077777) != 0123)

74
	`e
(20);

75 i\xe0(
	`chmod
("../dir/../dir/../T3a", 0456) < 0)

76
	`e
(21);

77 i\xe0(
	`\xa1\xa9
("../T3a", &
s
) < 0)

78
	`e
(22);

79 i\xe0((
s
.
\xa1_mode
 & 077777) != 0456)

80
	`e
(23);

81 i\xe0(
	`chown
("../dir/../dir/../T3a", 20, 30) < 0)

82
	`e
(24);

83 i\xe0(
	`\xa1\xa9
("../T3a", &
s
) < 0)

84
	`e
(25);

85 i\xe0(
s
.
\xa1_uid
 != 20)

86
	`e
(26);

87 i\xe0(
s
.
\xa1_gid
 != 30)

88
	`e
(27);

90 i\xe0((
i
 =
	`ݒ
("/T3c", 0)) >= 0)

91
	`e
(28);

92 i\xe0((
i
 =
	`ݒ
("/T3a", 0)) < 0)

93
	`e
(29);

94 i\xe0(
	`\x\xe3o\xa3
(
i
) < 0)

95
	`e
(30);

97 i\xe0(
	`ac\xfbss
("/T3a", 4) < 0)

98
	`e
(31);

99 i\xe0(
	`ac\xfbss
("/dir/T3b", 4) < 0)

100
	`e
(32);

101 i\xe0(
	`ac\xfbss
("/dir/T3d", 4) >= 0)

102
	`e
(33);

104 i\xe0(
	`uƚk
("T3b") < 0)

105
	`e
(34);

106 i\xe0(
	`uƚk
("T3c") < 0)

107
	`e
(35);

108 i\xe0(
	`uƚk
("..") < 0)

109
	`e
(36);

110 i\xe0(
	`chd\x9c
("/") < 0)

111
	`e
(37);

112 i\xe0(
	`uƚk
("dir") < 0)

113
	`e
(38);

114 i\xe0(
	`uƚk
("/T3a") < 0)

115
	`e
(39);

117
	}
}

119
	$e
(
n
) n;

121
	`\xb4\x9\xa9f
("Sub\x8b\xa1 %d,\x83\xbc\xdc %d\x83\xbcno=%d ",
\x8b\xa1\xc4
,
n
,
\x94\xbao
);

122
	`\xb3\xbc\xdc
("");

123
	}
}

	@test/test9.cpp

7 
	~"\xa3tjmp.h\xb5
"

8 
	~"sig\xc7l.h\xb5
"

9 
	~"\xa1dio.h\xb5
"

11 
	gwhich\x8b\xa1
;

12 
	gü\xdcs
;

13 *
	gtm\xb7
;

18
	$ma\x9a
() {

19
jmp_buf

\x92vm
;

20 
i
;

21 
j
;

23
	`\xb4\x9\xa9f
("Test 9 ");

24 
j
 = 0; j < 100; j++) {

25
	`\x8b\xa11
();

26
	`\x8b\xa12
();

27
	`\x8b\xa13
();

28
	`\x8b\xa14
();

29
	`\x8b\xa15
();

30
	`\x8b\xa16
();

32 i\xe0(
ü\xdcs
) {

33
	`\xb4\x9\xa9f
("%d\x83\xbcܠd\x91e\xf9ed\n",
ü\xdcs
);

34
	`ex\x99
(
ü\xdcs
);

37
i
 = 1;

38 i\xe0(
	`\xa3tjmp
(
\x92vm
) == 0) {

39
i
 = 2;

40
	`l\xdagjmp
(
\x92vm
, 1);

42 i\xe0(
i
 == 2) {

44 } i\xe0(
i
 == 1) {

45
	`\xb4\x9\xa9f
("WARNING: The setjmp/longjmp of\x81his machine\x84estore\x84egister variables\n\
\x81he value\x81hey had\x87t\x81he\x81ime of\x81he \"setjmp\"\n");

48
	`\xb4\x9\xa9f
("Aha, I just found one\x86ast\x83rror\n");

52
	`\xb4\x9\xa9f
("ok\n");

53
	}
}

55
	$e
(
n
) {

56
ü\xdcs
++;

57
	`\xe5r\x9\xa9f
(
\xa1d\x94r
, "E\xbc\xdc %d i\xc0\x8b\xa1 %d\n",
n
,
which\x8b\xa1
);

58
	}
}

60
	$\x8b\xa11
() {

61 
p
;

63
which\x8b\xa1
 = 1;

64
p
 = 200;

65
	`g\xacbage
();

66 i\xe0(
p
 != 200)

67
	`e
(1);

68
	}
}

70
	$\x8b\xa12
() {

71 
p
,
q
;

73
which\x8b\xa1
 = 2;

74
p
 = 200;

75
q
 = 300;

76
	`g\xacbage
();

77 i\xe0(
p
 != 200)

78
	`e
(1);

79 i\xe0(
q
 != 300)

80
	`e
(2);

81
	}
}

83
	$\x8b\xa13
() {

84 
p
,
q
,
r
;

86
which\x8b\xa1
 = 3;

87
p
 = 200;

88
q
 = 300;

89
r
 = 400;

90
	`g\xacbage
();

91 i\xe0(
p
 != 200)

92
	`e
(1);

93 i\xe0(
q
 != 300)

94
	`e
(2);

95 i\xe0(
r
 != 400)

96
	`e
(3);

97
	}
}

99 
	gbuf
[512];

101
	$\x8b\xa14
() {

102 *
p
;

104
which\x8b\xa1
 = 4;

105
p
 = &
buf
[100];

106
	`g\xacbage
();

107 i\xe0(
p
 !\xf0&
buf
[100])

108
	`e
(1);

109
	}
}

111
	$\x8b\xa15
() {

112 *
p
, *
q
;

114
which\x8b\xa1
 = 5;

115
p
 = &
buf
[100];

116
q
 = &
buf
[200];

117
	`g\xacbage
();

118 i\xe0(
p
 !\xf0&
buf
[100])

119
	`e
(1);

120 i\xe0(
q
 !\xf0&
buf
[200])

121
	`e
(2);

122
	}
}

124
	$\x8b\xa16
() {

125 *
p
, *
q
, *
r
;

127
which\x8b\xa1
 = 6;

128
p
 = &
buf
[100];

129
q
 = &
buf
[200];

130
r
 = &
buf
[300];

131
	`g\xacbage
();

132 i\xe0(
p
 !\xf0&
buf
[100])

133
	`e
(1);

134 i\xe0(
q
 !\xf0&
buf
[200])

135
	`e
(2);

136 i\xe0(
r
 !\xf0&
buf
[300])

137
	`e
(3);

138
	}
}

140
jmp_buf

	g\x92v
;

145 *
	$addr
() {

146 
a
;

148  &
a
;

149
	}
}

151
	$g\xacbage
() {

152 
i
,
j
,
k
;

153 *
p
, *
q
, *
r
;

154 *
a
;

155 
t
;

157
p
 = &
buf
[300];

158
q
 = &
buf
[400];

159
r
 = &
buf
[500];

160
i
 = 10;

161
j
 = 20;

162
k
 = 30;

163 
	`\xa3tjmp
(
\x92v
)) {

165
a
 =
	`addr
();

166
	`l\xdagjmp
(
\x92v
, 1);

169 i\xe0(
i
 != 10)

170
	`e
(11);

171 i\xe0(
j
 != 20)

172
	`e
(12);

173 i\xe0(
k
 != 30)

174
	`e
(13);

175 i\xe0(
p
 !\xf0&
buf
[300])

176
	`e
(14);

177 i\xe0(
q
 !\xf0&
buf
[400])

178
	`e
(15);

179 i\xe0(
r
 !\xf0&
buf
[500])

180
	`e
(16);

181
tm\xb7
 =
	`addr
();

182 i\xe0(
a
 !\xf0
tm\xb7
)

183
	`e
(17);

184
	`\xcbv\x961
();

187 i\xe0(
i
 != 10)

188
	`e
(21);

189 i\xe0(
j
 != 20)

190
	`e
(22);

191 i\xe0(
k
 != 30)

192
	`e
(23);

193 i\xe0(
p
 !\xf0&
buf
[300])

194
	`e
(24);

195 i\xe0(
q
 !\xf0&
buf
[400])

196
	`e
(25);

197 i\xe0(
r
 !\xf0&
buf
[500])

198
	`e
(26);

199
tm\xb7
 =
	`addr
();

200 i\xe0(
a
 !\xf0
tm\xb7
)

201
	`e
(27);

202
	`\xcbv\x962
();

205 i\xe0(
i
 != 10)

206
	`e
(31);

207 i\xe0(
j
 != 20)

208
	`e
(32);

209 i\xe0(
k
 != 30)

210
	`e
(33);

211 i\xe0(
p
 !\xf0&
buf
[300])

212
	`e
(34);

213 i\xe0(
q
 !\xf0&
buf
[400])

214
	`e
(35);

215 i\xe0(
r
 !\xf0&
buf
[500])

216
	`e
(36);

217
tm\xb7
 =
	`addr
();

218 i\xe0(
a
 !\xf0
tm\xb7
)

219
	`e
(37);

220
	`h\xacd
();

222 i\xe0(
i
 != 10)

223
	`e
(41);

224 i\xe0(
j
 != 20)

225
	`e
(42);

226 i\xe0(
k
 != 30)

227
	`e
(43);

228 i\xe0(
p
 !\xf0&
buf
[300])

229
	`e
(44);

230 i\xe0(
q
 !\xf0&
buf
[400])

231
	`e
(45);

232 i\xe0(
r
 !\xf0&
buf
[500])

233
	`e
(46);

234
tm\xb7
 =
	`addr
();

235 i\xe0(
a
 !\xf0
tm\xb7
)

236
	`e
(47);

240
	`e
(100);

242
	`e
(200);

243
	}
}

245
	$\xcbv\x961
() {

246 *
p
;

247 
i
;

249
i
 = 1000;

250
p
 = &
buf
[10];

251
i
 = 200;

252
p
 = &
buf
[20];

253
	`l\xdagjmp
(
\x92v
, 2);

254
	}
}

256
	$\xcbv\x962
() {

257 *
p
;

258 
i
;

260
i
 = 0200;

261
p
 = &
buf
[2];

262 *
p
 =
i
;

263
	`d\xd\x93v
();

264
	}
}

266
	$d\xd\x93v
() {

267 *
p
;

268 
i
;

270
i
 = 010;

271
p
 = &
buf
[3];

272 *
p
 =
i
;

273
	`l\xdagjmp
(
\x92v
, 3);

274
	}
}

276
	$\xf\xe1ch
 () {

277
	`l\xdagjmp
(
\x92v
, 4);

278
	}
}

280
	$h\xacd
() {

281 *
p
;

283
	`sig\xc7l
(
SIGHUP
,
\xfftch
);

284 
p
 =
buf
;\x85 <= &buf[511];\x85++)

285 *
p
 = 025;

286
	`k\x9\x96
(
	`g\x91pid
(),
SIGHUP
);

287
	}
}

	@tests/crypto/test_constant_time_equal.cpp

1 
	~"cڡ\x\xaft_time.h\xb5
"

3 
	~<\xac\xbfy
>

4 
	~<\xffs\xa3\xb9
>

5 
	~<c\xa1ddef
>

6 
	~<\xa5\x\xaf
>

11 
	$ma\x9a
() {

12
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 16>
a
{};

13
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 16>
b
{};

14
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 16>
c
{};

16 
\xa1d
::
size_t

i
 = 0; i <
a
.
	`size
(); ++i) {

17
a
[
i
] =
\xa1d
::
by\x8b
{
\xa1\xa9ic_\xff\xa1
<>(i)};

18
b
[
i
] =
a
[i];

19
c
[
i
] =
\xa1d
::
by\x8b
{
\xa1\xa9ic_\xff\xa1
<>(i + 1)};

22
	`as\xa3\xb9
(
pq\xfcy\xb1o
::
	`cڡ\x\xaft_time_equ\x\xab
(
a
,
b
));

23
	`as\xa3\xb9
(!
pq\xfcy\xb1o
::
	`cڡ\x\xaft_time_equ\x\xab
(
a
,
c
));

24
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 15>
d
{};

25
	`as\xa3\xb9
(!
pq\xfcy\xb1o
::
	`cڡ\x\xaft_time_equ\x\xab
(
\xa1d
::
\xa5\xaa
{
a
.
	`d\xa9a
(), 15},
d
));

27
	}
}

	@tests/crypto/test_kyber.cpp

1 
	~"kyb\x94.h\xb5
"

3 
	~<\xffs\xa3\xb9
>

4 
	~<c\xa1ddef
>

5 
	~<\xa1r\x9ag_v\x9bw
>

6 
	~<ve\xf9\xdc
>

8 
	$ma\x9a
() {

9 aut\xd8
kp
 =
pq
::
kyb\x94
::
	`key\xb7\x9c
();

11 cڡ
\xa1d
::
\xa1r\x9ag_v\x9bw

mes\xa7ge
 = "hello kyber";

12
\xa1d
::
ve\xf9\xdc
<\xa1d::
by\x8b
>
	`\x9\xadut
(
mes\xa7ge
.
	`size
());

13 
size_t

i
 = 0; i <
mes\xa7ge
.
	`size
(); ++i) {

14
\x9aput
[
i
] =
\xa1d
::
by\x8b
{
\xa1\xa9ic_\xff\xa1
<>(
mes\xa7ge
[i])};

17 aut\xd8
c\x9dh\x94
 =
pq
::
kyb\x94
::
	`\x92\xfcy\xb1
(
\x9aput
,
kp
.
public_key
);

18 aut\xd8
\xb6a\x9a
 =
pq
::
kyb\x94
::
	`de\xfcy\xb1
(
c\x9dh\x94
,
kp
.
\xb4iv\xa9e_key
);

20 
size_t

i
 = 0; i <
mes\xa7ge
.
	`size
(); ++i) {

21
	`as\xa3\xb9
(
\xa1\xa9ic_\xff\xa1
<>(
\xb6a\x9a
[
i
]\xe8=\xf0\xa1\xa9ic_\xff\xa1<>(
\x9aput
[i]));

24
	}
}

	@tests/crypto/test_shared_secret_failure.cpp

6 
	~"kyb\x94.h\xb5
"

7 
	~"pq\xfcy\xb1o.h\xb5
"

9 
	~<\x\xabgܙhm
>

10 
	~<\xac\xbfy
>

11 
	~<\xffs\xa3\xb9
>

12 
	~<c\xa1d\x9\xa9
>

13 
	~<\xb\xe2dom
>

24 
	$ma\x9a
() {

26 aut\xd8
\xaei\xfb_kp
 =
pq
::
kyb\x94
::
	`key\xb7\x9c
();

27 aut\xd8
bob_kp
 =
pq
::
kyb\x94
::
	`key\xb7\x9c
();

30
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
\xaei\xfb_pk
{};

31
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
\xaei\xfb_sk
{};

32
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_PUBLICKEYBYTES
>
bob_pk
{};

33
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
,
pq\xfcy\xa1\x\xabs_kyb\x94512_SECRETKEYBYTES
>
bob_sk
{};

35
\xa1d
::
	`\x8c\x\xafsf\xdcm
(
\xaei\xfb_kp
.
public_key
.
	`beg\x9a
(),\x87li\xfb_kp.public_key.
	`\x92d
(),
\xaei\xfb_pk
.begin(),

36 [](
\xa1d
::
by\x8b

b
\xe8{ 
\xa1\xa9ic_\xff\xa1
<\xa1d::
u\x9\xa98_t
>(b); });

37
\xa1d
::
	`\x8c\x\xafsf\xdcm
(
\xaei\xfb_kp
.
\xb4iv\xa9e_key
.
	`beg\x9a
(),\x87li\xfb_kp.\xb4iv\xa9e_key.
	`\x92d
(),
\xaei\xfb_sk
.begin(),

38 [](
\xa1d
::
by\x8b

b
\xe8{ 
\xa1\xa9ic_\xff\xa1
<\xa1d::
u\x9\xa98_t
>(b); });

39
\xa1d
::
	`\x8c\x\xafsf\xdcm
(
bob_kp
.
public_key
.
	`beg\x9a
(), bob_kp.public_key.
	`\x92d
(),
bob_pk
.begin(),

40 [](
\xa1d
::
by\x8b

b
\xe8{ 
\xa1\xa9ic_\xff\xa1
<\xa1d::
u\x9\xa98_t
>(b); });

41
\xa1d
::
	`\x8c\x\xafsf\xdcm
(
bob_kp
.
\xb4iv\xa9e_key
.
	`beg\x9a
(), bob_kp.\xb4iv\xa9e_key.
	`\x92d
(),
bob_sk
.begin(),

42 [](
\xa1d
::
by\x8b

b
\xe8{ 
\xa1\xa9ic_\xff\xa1
<\xa1d::
u\x9\xa98_t
>(b); });

45 aut\xd8
\xbb\xe3\xbbn\xfb
 =
pq\xfcy\xb1o
::
	`compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
bob_pk
,
\xaei\xfb_sk
);

48 aut\xd8
c\xd\xfcu\xb1ed_pk
 =
bob_pk
;

49
c\xd\xfcu\xb1ed_pk
[0] ^= 0xFFu;

52 aut\xd8
c\xd\xfcu\xb1ed
 =
pq\xfcy\xb1o
::
	`compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
c\xd\xfcu\xb1ed_pk
,
\xaei\xfb_sk
);

55 cڡ
bo\xde

mism\xa9ch
 = !
\xa1d
::
	`equ\x\xab
(
\xbb\xe3\xbbn\xfb
.
	`beg\x9a
(),\x84e\xe3\xbbn\xfb.
	`\x92d
(),
c\xd\xfcu\xb1ed
.begin());

56
	`as\xa3\xb9
(
mism\xa9ch
);

58
	}
}

	@tests/randombytes_stub.c

1 
	~"\xb\xe2domby\x8bs.h
"

2 
	~<\xa1ddef.h
>

3 
	~<\xa1d\x9\xa9.h
>

4 
	~<\xa1dlib.h
>

9 
	$\xb\xe2domby\x8bs
(
u\x9\xa98_t
 *
out
,
size_t

ou\x8e\x92
) {

10 
size_t

i
 = 0; i <
ou\x8e\x92
; ++i) {

11
out
[
i
] = (
u\x9\xa98_t
)(
	`\xb\xe2d
() % 256);

13
	}
}

	@tests/sodium.h

1 #\xb4agm\xa8
\xda\xfb


2 
	~<\xa1ddef.h
>

3 
	~<\xa1d\x9\xa9.h
>

5 #ifde\xe0
__\xfdlu\xa5lus


9 
sodium_\x9a\x99
();

10 
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(*
c
, *
\xfe\x92
,

11 cڡ *
m
, 
m\xcbn
,

12 cڡ *
ad
, 
ad\xcbn
,

13 cڡ *
n\xa3c
, cڡ *
\xc5ub
,

14 cڡ *
k
);

15 
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_de\xfcy\xb1
(*
m
, *
m\xcbn
,

16 *
n\xa3c
, cڡ *
c
,

17 
\xfe\x92
, cڡ *
ad
,

18 
ad\xcbn
, cڡ *
\xc5ub
,

19 cڡ *
k
);

20 
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(*
c
, *
\xfe\x92
,

21 cڡ *
m
, 
m\xcbn
,

22 cڡ *
ad
, 
ad\xcbn
,

23 cڡ *
n\xa3c
, cڡ *
\xc5ub
,

24 cڡ *
k
);

25 
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_de\xfcy\xb1
(*
m
, *
m\xcbn
,

26 *
n\xa3c
, cڡ *
c
,

27 
\xfe\x92
, cڡ *
ad
,

28 
ad\xcbn
, cڡ *
\xc5ub
,

29 cڡ *
k
);

30 
\xbfndomby\x8bs_buf
(*
buf
,
size_t

size
);

32 
	#\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
 16

	)

33 
	#\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_ABYTES
 16

	)

34 
	#\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_KEYBYTES
 32

	)

35 
	#\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_NPUBBYTES
 24

	)

37 #ifde\xe0
__\xfdlu\xa5lus


	@tests/sodium_stub.cpp

1 
	~"sodium.h
"

2 
	~<c\xa1ddef
>

3 
	~<c\xa1d\x9\xa9
>

4 
	~<c\xa1r\x9ag
>

5 
	~<\xb\xe2dom
>

16 
sodium_\x9a\x99
() {  0; }

19 
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(*
c
, *
\xfe\x92
,

20 cڡ *
m
, 
m\xcbn
,

24
\xa1d
::
mem\xfdy
(
c
,
m
,
m\xcbn
);

25
\xa1d
::
mem\xa3t
(
c
 +
m\xcbn
, 0,
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
);

26 *
\xfe\x92
 =
m\xcbn
 +
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
;

31 
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_de\xfcy\xb1
(*
m
, *
m\xcbn
,

32 *, cڡ *
c
,

33 
\xfe\x92
, const *,

36 i\xe0(
\xfe\x92
 <
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
) {

39 *
m\xcbn
 =
\xfe\x92
 -
\xfcy\xb1o_\xabad_chacha20p\xdey1305_\x9btf_ABYTES
;

40
\xa1d
::
mem\xfdy
(
m
,
c
, *
m\xcbn
);

45 
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_\x92\xfcy\xb1
(*
c
, *
\xfe\x92
,

46 cڡ *
m
, 
m\xcbn
,

50
\xa1d
::
mem\xfdy
(
c
,
m
,
m\xcbn
);

51
\xa1d
::
mem\xa3t
(
c
 +
m\xcbn
, 0,
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_ABYTES
);

52 *
\xfe\x92
 =
m\xcbn
 +
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_ABYTES
;

57 
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_de\xfcy\xb1
(*
m
, *
m\xcbn
,

58 *, cڡ *
c
,

59 
\xfe\x92
, const *,

62 i\xe0(
\xfe\x92
 <
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_ABYTES
) {

65 *
m\xcbn
 =
\xfe\x92
 -
\xfcy\xb1o_\xabad_xchacha20p\xdey1305_\x9btf_ABYTES
;

66
\xa1d
::
mem\xfdy
(
m
,
c
, *
m\xcbn
);

71 
\xbfndomby\x8bs_buf
(*
buf
,
size_t

size
) {

72 
\xa1d
::
\xbfndom_devi\xfb

rd
;

73 
size_t

i
 = 0; i <
size
; ++i) {

74 
\xa1d
::
unif\xdcm_\x9\xa9_di\xa1ributi\xda
<>
di\xa1
(0, 255);

75 
\xa1d
::
mt19937

g\x92
(
rd
());

76
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
buf
)[
i
] =
\xa1\xa9ic_\xff\xa1
<>(
di\xa1
(
g\x92
));

	@tests/task_stubs.cpp

1 
	~"../k\x94\xc3l/\xb4oc.h\xb5
"

19 
	$\xb4\x9a\x8br_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

27 
	$\x89y_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

35 
	$w\x9ache\xa1\x94_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

43 
	$\xe6\xddpy_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

51 
	$\x\xe3ock_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

59 
	$sys_\x8fsk
(\xe8
n\xdbx\xfb\xb1
 {
	}
}

	@tests/test_fastpath.cpp

1 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

2 
	~"../k\x94\xc3l/w\xdcmh\xd\x93.h\xb5
"

3 
	~<\xffs\xa3\xb9
>

5
us\x9ag

\xc7me\xa5a\xfb

	g硷th
;

8 
	$ma\x9a
() {

9
us\x9ag

sched
::
schedu\xcbr
;

10
S\x8f\x8b

s
{};

11
	`\xbb\xa3t_硷th_queues
();

12
schedu\xcbr
.
	`\x92queue
(1);

13
schedu\xcbr
.
	`\x92queue
(2);

14
schedu\xcbr
.
	`\xb4\x93m\xb1
();

15
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

buf\xe3r
[8]{};

16
	`\xa3t_mes\xa7ge_\xbbgi\xda
(
s
,
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
buf\xe3r
), (buffer)));

17
s
.
\xa3nd\x94
.
tid
 = 1;

18
s
.
\xa3nd\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

19
s
.
\xa3nd\x94
.
\xb4iܙy
 = 5;

20
s
.
\xa3nd\x94
.
doma\x9a
 = 0;

21
s
.
\xa3nd\x94
.
c\xd\xfb
 = 0;

22
s
.
\xa3nd\x94
.
badge
 = 0;

23
s
.
\xa3nd\x94
.
\xbb\xb6y_to
 = 0;

24
s
.
\xa3nd\x94
.
mrs
[0] = 42;

25
s
.
msg_\xcbn
 = 1;

26
s
.
ex\x8\xff_\xf\xe5s
 = 0;

28
s
.
\xbb\xfbiv\x94
.
tid
 = 2;

29
s
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
RecvBlocked
;

30
s
.
\xbb\xfbiv\x94
.
\xb4iܙy
 = 5;

31
s
.
\xbb\xfbiv\x94
.
doma\x9a
 = 0;

32
s
.
\xbb\xfbiv\x94
.
c\xd\xfb
 = 0;

33
s
.
\xbb\xfbiv\x94
.
badge
 = 0;

34
s
.
\xbb\xfbiv\x94
.
\xbb\xb6y_to
 = 0;

36
s
.
\x92dpo\x9at
.
eid
 = 1;

37
s
.
\x92dpo\x9at
.
\xa1\xa9e
 =
Endpo\x9\xa9S\x8f\x8b
::
Recv
;

38
s
.
\x92dpo\x9at
.
queue
.
	`push_back
(2);

40
s
.
\xffp
.
\xfd\x8c
 = 1;

41
s
.
\xffp
.
ty\xb3
 =
C\xadTy\xb3
::
Endpo\x9\xa9
;

42
s
.
\xffp
.
rights
.
wr\x99e
 =
\x8cue
;

43
s
.
\xffp
.
obje\xf9
 = 1;

44
s
.
\xffp
.
badge
 = 123;

46
s
.
cu\xbc\x92t_tid
 =
schedu\xcbr
.
	`cu\xbc\x92t
();

48
Fa\xa1\xb7thS\x8\xe1s

\xa1\xa9s
;

49
bo\xde

ok
 =
	`execu\x8b_硷th
(
s
, &
\xa1\xa9s
);

50
	`as\xa3\xb9
(
ok
);

51
	`as\xa3\xb9
(
\xa1\xa9s
.
suc\xfbss_cou\xc1
 == 1);

52
	`as\xa3\xb9
(
\xa1\xa9s
.
h\x99_cou\xc1
 == 1);

53
	`as\xa3\xb9
(
\xa1\xa9s
.
\xe7\xceback_cou\xc1
 == 0);

54
	`as\xa3\xb9
(
s
.
\xbb\xfbiv\x94
.
mrs
[0] == 42);

55
	`as\xa3\xb9
(
s
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =\xf0
Th\xbbadS\x8\xe1us
::
Rug
);

56
	`as\xa3\xb9
(
s
.
\xa3nd\x94
.
\xa1\xa9us
 =\xf0
Th\xbbadS\x8\xe1us
::
Blocked
);

57
	`as\xa3\xb9
(
s
.
\xbb\xfbiv\x94
.
badge
 =\xf0s.
\xffp
.badge);

58
	`as\xa3\xb9
(
s
.
\xa3nd\x94
.
\xbb\xb6y_to
 =\xf0s.
\xbb\xfbiv\x94
.
tid
);

59
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
(\xe8=\xf0
s
.
\xbb\xfbiv\x94
.
tid
);

60
	`as\xa3\xb9
(
s
.
cu\xbc\x92t_tid
 =\xf0s.
\xbb\xfbiv\x94
.
tid
);

62
	}
}

	@tests/test_fastpath_cache_performance.cpp

1 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

2 
	~"../k\x94\xc3l/w\xdcmh\xd\x93.h\xb5
"

3 
	~<\xffs\xa3\xb9
>

4 
	~<chr\xdao
>

5 
	~<io\xa1\xbbam
>

7
us\x9ag

\xc7me\xa5a\xfb

	g硷th
;

12 
	$b\x92ch
(
S\x8f\x8b
 &
\xa1\xa9e
,
\xa1d
::
size_t

\x99\x94s
) {

13
us\x9ag

\xfeock
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
;

14 aut\xd8
\xa1\xact
 =
\xfeock
::
	`now
();

15 
\xa1d
::
size_t

i
 = 0; i <
\x99\x94s
; ++i) {

16
\xa1\xa9e
.
\xa3nd\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

17
\xa1\xa9e
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
RecvBlocked
;

18
\xa1\xa9e
.
\x92dpo\x9at
.\xa1\xa9\x90\xf0
Endpo\x9\xa9S\x8f\x8b
::
Recv
;

19
\xa1\xa9e
.
\x92dpo\x9at
.
queue
 = {\xa1\xa9e.
\xbb\xfbiv\x94
.
tid
};

20
	`execu\x8b_硷th
(
\xa1\xa9e
);

21
sched
::
schedu\xcbr
.
	`\x92queue
(
\xa1\xa9e
.
\xa3nd\x94
.
tid
);

22
sched
::
schedu\xcbr
.
	`\x92queue
(
\xa1\xa9e
.
\xbb\xfbiv\x94
.
tid
);

23
sched
::
schedu\xcbr
.
	`\xb4\x93m\xb1
();

25 aut\xd8
\x92d
 =
\xfeock
::
	`now
();

26 
\xa1d
::
chr\xdao
::
du\xb\xe1i\xda
<, std::
mi\xfco
>(
\x92d
 -
\xa1\xact
).
	`cou\xc1
();

27
	}
}

29 
	$ma\x9a
() {

30
us\x9ag

sched
::
schedu\xcbr
;

31
S\x8f\x8b

s
{};

32
schedu\xcbr
.
	`\x92queue
(1);

33
schedu\xcbr
.
	`\x92queue
(2);

34
schedu\xcbr
.
	`\xb4\x93m\xb1
();

36
s
.
\xa3nd\x94
.
tid
 = 1;

37
s
.
\xa3nd\x94
.
\xb4iܙy
 = 5;

38
s
.
\xa3nd\x94
.
doma\x9a
 = 0;

39
s
.
\xa3nd\x94
.
c\xd\xfb
 = 0;

40
s
.
\xbb\xfbiv\x94
.
tid
 = 2;

41
s
.
\xbb\xfbiv\x94
.
\xb4iܙy
 = 5;

42
s
.
\xbb\xfbiv\x94
.
doma\x9a
 = 0;

43
s
.
\xbb\xfbiv\x94
.
c\xd\xfb
 = 0;

44
s
.
\x92dpo\x9at
.
eid
 = 1;

45
s
.
\xffp
.
\xfd\x8c
 = 1;

46
s
.
\xffp
.
ty\xb3
 =
C\xadTy\xb3
::
Endpo\x9\xa9
;

47
s
.
\xffp
.
rights
.
wr\x99e
 =
\x8cue
;

48
s
.
\xffp
.
obje\xf9
 = 1;

49
s
.
msg_\xcbn
 = 1;

51
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

l1
[8]{};

52
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

l2
[8]{};

53
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

l3
[8]{};

54
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

ma\x9a_buf
[8]{};

55
s
.
l1_buf\xe3r
 =
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
l1
), (l1));

56
s
.
l2_buf\xe3r
 =
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
l2
), (l2));

57
s
.
l3_buf\xe3r
 =
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
l3
), (l3));

58
	`\xa3t_mes\xa7ge_\xbbgi\xda
(
s
,

59
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
ma\x9a_buf
), (main_buf)));

60
s
.
cu\xbc\x92t_tid
 =
schedu\xcbr
.
	`cu\xbc\x92t
();

62 cڡ
\xa1d
::
size_t

lo\xdds
 = 1000;

63 
t_l1
 =
	`b\x92ch
(
s
,
lo\xdds
);

65
s
.
l1_buf\xe3r
 = {0, 0};

66 
t_l2
 =
	`b\x92ch
(
s
,
lo\xdds
);

68
s
.
l2_buf\xe3r
 = {0, 0};

69 
t_l3
 =
	`b\x92ch
(
s
,
lo\xdds
);

71
s
.
l3_buf\xe3r
 = {0, 0};

72 
t_ma\x9a
 =
	`b\x92ch
(
s
,
lo\xdds
);

74
	`as\xa3\xb9
(
t_l1
 > 0);

75
	`as\xa3\xb9
(
t_l2
 > 0);

76
	`as\xa3\xb9
(
t_l3
 > 0);

77
	`as\xa3\xb9
(
t_ma\x9a
 > 0);

78
\xa1d
::
cout
 << "L1: " <<
t_l1
 << " us\n"

79 << "L2: " <<
t_l2
 << " us\n"

80 << "L3: " <<
t_l3
 << " us\n"

81 << "Ma\x9a: " <<
t_ma\x9a
 << " us\n";

83
	}
}

	@tests/test_fastpath_fallback.cpp

1 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

2 
	~"../k\x94\xc3l/w\xdcmh\xd\x93.h\xb5
"

3 
	~<\xffs\xa3\xb9
>

5
us\x9ag

\xc7me\xa5a\xfb

	g硷th
;

10 
	$ma\x9a
() {

11
us\x9ag

sched
::
schedu\xcbr
;

12
S\x8f\x8b

s
{};

13
	`\xbb\xa3t_硷th_queues
();

14
schedu\xcbr
.
	`\x92queue
(1);

15
schedu\xcbr
.
	`\x92queue
(2);

16
schedu\xcbr
.
	`\xb4\x93m\xb1
();

17
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

buf\xe3r
[8]{};

18
	`\xa3t_mes\xa7ge_\xbbgi\xda
(
s
,
	`Mes\xa7geRegi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
buf\xe3r
), (buffer)));

20
s
.
\xa3nd\x94
.
tid
 = 1;

21
s
.
\xa3nd\x94
.
\xb4iܙy
 = 5;

22
s
.
\xa3nd\x94
.
doma\x9a
 = 0;

23
s
.
\xa3nd\x94
.
c\xd\xfb
 = 0;

24
s
.
\xa3nd\x94
.
mrs
[0] = 99;

25
s
.
msg_\xcbn
 = 1;

26
s
.
ex\x8\xff_\xf\xe5s
 = 0;

28
s
.
\xbb\xfbiv\x94
.
tid
 = 2;

29
s
.
\xbb\xfbiv\x94
.
\xb4iܙy
 = 5;

30
s
.
\xbb\xfbiv\x94
.
doma\x9a
 = 0;

31
s
.
\xbb\xfbiv\x94
.
c\xd\xfb
 = 0;

33
s
.
\x92dpo\x9at
.
eid
 = 1;

34
s
.
\xffp
.
\xfd\x8c
 = 1;

35
s
.
\xffp
.
ty\xb3
 =
C\xadTy\xb3
::
Endpo\x9\xa9
;

36
s
.
\xffp
.
rights
.
wr\x99e
 =
\x8cue
;

37
s
.
\xffp
.
obje\xf9
 = 1;

39
s
.
cu\xbc\x92t_tid
 =
schedu\xcbr
.
	`cu\xbc\x92t
();

40
Fa\xa1\xb7thS\x8\xe1s

\xa1\xa9s
;

42 
\xa1d
::
size_t

i
 = 0; i <
FASTPATH_QUEUE_SIZE
; ++i) {

43
s
.
\xa3nd\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

44
s
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
RecvBlocked
;

45
s
.
\x92dpo\x9at
.
\xa1\xa9e
 =
Endpo\x9\xa9S\x8f\x8b
::
Recv
;

46
s
.
\x92dpo\x9at
.
queue
 = {2};

47
bo\xde

ok
 =
	`execu\x8b_硷th
(
s
, &
\xa1\xa9s
);

48
	`as\xa3\xb9
(
ok
);

49
schedu\xcbr
.
	`\x92queue
(1);

50
schedu\xcbr
.
	`\x92queue
(2);

51
schedu\xcbr
.
	`\xb4\x93m\xb1
();

54
s
.
\xa3nd\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

55
s
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
RecvBlocked
;

56
s
.
\x92dpo\x9at
.
\xa1\xa9e
 =
Endpo\x9\xa9S\x8f\x8b
::
Recv
;

57
s
.
\x92dpo\x9at
.
queue
 = {2};

58
bo\xde

ok
 =
	`execu\x8b_硷th
(
s
, &
\xa1\xa9s
);

59
	`as\xa3\xb9
(
ok
);

60
	`as\xa3\xb9
(
\xa1\xa9s
.
\xe7\xceback_cou\xc1
 == 1);

61
	`as\xa3\xb9
(
\xa1\xa9s
.
h\x99_cou\xc1
 =\xf0
FASTPATH_QUEUE_SIZE
);

63
	}
}

	@tests/test_fastpath_preconditions.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~"../k\x94\xc3l/w\xdcmh\xd\x93.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

10
us\x9ag

\xc7me\xa5a\xfb

	g硷th
;

26 
	$ma\x9a
() {

27
us\x9ag

sched
::
schedu\xcbr
;

28
S\x8f\x8b

s
{};

31
schedu\xcbr
.
	`\x92queue
(1);

32
schedu\xcbr
.
	`\x92queue
(2);

33
schedu\xcbr
.
	`\xb4\x93m\xb1
();

36
	`\x\xabig\xc7s
(64\xe8
u\x9\xa964_t

buf
[2]{};

37
Mes\xa7geRegi\xda

	`\xbbgi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
buf
), (buf));

38
	`\xa3t_mes\xa7ge_\xbbgi\xda
(
s
,
\xbbgi\xda
);

39
	`as\xa3\xb9
(
	`mes\xa7ge_\xbbgi\xda_v\x\xabid
(
\xbbgi\xda
, 1));

42
s
.
\xa3nd\x94
.
tid
 = 1;

43
s
.
\xa3nd\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
Rug
;

44
s
.
\xa3nd\x94
.
\xb4iܙy
 = 1;

45
s
.
\xa3nd\x94
.
doma\x9a
 = 0;

46
s
.
\xa3nd\x94
.
c\xd\xfb
 = 0;

47
s
.
\xbb\xfbiv\x94
.
tid
 = 2;

48
s
.
\xbb\xfbiv\x94
.
\xa1\xa9us
 =
Th\xbbadS\x8\xe1us
::
RecvBlocked
;

49
s
.
\xbb\xfbiv\x94
.
\xb4iܙy
 = 1;

50
s
.
\xbb\xfbiv\x94
.
doma\x9a
 = 0;

51
s
.
\xbb\xfbiv\x94
.
c\xd\xfb
 = 0;

54
s
.
\x92dpo\x9at
.
eid
 = 1;

55
s
.
\x92dpo\x9at
.
\xa1\xa9e
 =
Endpo\x9\xa9S\x8f\x8b
::
Recv
;

56
s
.
\x92dpo\x9at
.
queue
.
	`push_back
(2);

57
s
.
\xffp
.
\xfd\x8c
 = 1;

58
s
.
\xffp
.
ty\xb3
 =
C\xadTy\xb3
::
Endpo\x9\xa9
;

59
s
.
\xffp
.
rights
.
wr\x99e
 =
\x8cue
;

60
s
.
\xffp
.
obje\xf9
 = 1;

61
s
.
\xffp
.
badge
 = 7;

63
s
.
msg_\xcbn
 = 1;

64
s
.
ex\x8\xff_\xf\xe5s
 = 1;

65
s
.
cu\xbc\x92t_tid
 =
schedu\xcbr
.
	`cu\xbc\x92t
();

67
Fa\xa1\xb7thS\x8\xe1s

\xa1\xa9s
;

68
bo\xde

ok
 =
	`execu\x8b_硷th
(
s
, &
\xa1\xa9s
);

69
	`as\xa3\xb9
(!
ok
);

70
	`as\xa3\xb9
(
\xa1\xa9s
.
\xe7\x9eu\xbb_cou\xc1
 == 1);

71 aut\xd8
idx
 =
\xa1\xa9ic_\xff\xa1
<
size_t
>(
P\xbbc\xdad\x99i\xda
::
P1
);

72
	`as\xa3\xb9
(
\xa1\xa9s
.
\xb4ec\xdad\x99i\xda_\xe7\x9eu\xbbs
[
idx
] == 1);

73
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
(\xe8=\xf0
s
.
cu\xbc\x92t_tid
);

76
Mes\xa7geRegi\xda

	`sm\x\xabl_\xbbgi\xda
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9a\x8d\x8c_t
>(
buf
), (
u\x9\xa964_t
));

77
	`as\xa3\xb9
(!
	`mes\xa7ge_\xbbgi\xda_v\x\xabid
(
sm\x\xabl_\xbbgi\xda
, 2));

80
	}
}

	@tests/test_hypercomplex.cpp

1 
	~"../k\x94\xc3l/\xe7no_o\xf9\xdai\xda.h\xb5
"

2 
	~"../k\x94\xc3l/qu\xa9\x94ni\xda_\xa5\x9\xaeock.h\xb5
"

3 
	~"../k\x94\xc3l/\xa3d\x92i\xda.h\xb5
"

4 
	~<\xac\xbfy
>

5 
	~<\xffs\xa3\xb9
>

6 
	~<th\xbbad
>

8 
	$ma\x9a
() {

9
us\x9ag

hy\xb3r
::
Qu\xa9\x94ni\xda
;

10
us\x9ag

hy\xb3r
::
Qu\xa9\x94ni\xdaSp\x9\xaeock
;

11
Qu\xa9\x94ni\xdaSp\x9\xaeock

lock
;

12
Qu\xa9\x94ni\xda

tick\x91
{0.0F, 1.0F, 0.0F, 0.0F};

13
lock
.
	`lock
(
tick\x91
);

14
lock
.
	`u\xc6ock
(
tick\x91
);

16
ωi\xfb
::
O\xf9\xdai\xda

a
{};

17
a
.
comp
[1] = 1;

18
ωi\xfb
::
O\xf9\xdai\xda

b
{};

19
b
.
comp
[2] = 1;

20 aut\xd8
\xb4od
 =
ωi\xfb
::
	`\xe7no_muɝly
(
a
,
b
);

21
	`as\xa3\xb9
(
\xb4od
.
comp
[3] == 1);

23 aut\xd8
\xb7\x9c
 =
hy\xb3r
::
	`z\xb7\x9c_g\x92\x94\xa9e
();

24
\xa1d
::
\xac\xbfy
<
u\x9\xa98_t
, 16>
msg
{};

25
msg
[0] = 42;

26 aut\xd8
c\x9dh\x94
 =
hy\xb3r
::
	`zlock_\x92\xfcy\xb1
(
\xb7\x9c
.
pub
,
msg
);

27 aut\xd8
\xb6a\x9a
 =
hy\xb3r
::
	`zlock_de\xfcy\xb1
(
\xb7\x9c
.
pub
,
c\x9dh\x94
);

28
	`as\xa3\xb9
(
\xb6a\x9a
[0] == 42);

30
	}
}

	@tests/test_lattice.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

9 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

10 
	~"../k\x94\xc3l/pq\xfcy\xb1o.h\xb5
"

11 
	~<\x\xabgܙhm
>

12 
	~<\xffs\xa3\xb9
>

17 
	$ma\x9a
() {

18
us\x9ag

\xc7me\xa5a\xfb

ωi\xfb
;

20
g_g\xb\xe5h
 =
G\xb\xe5h
{};

22
mes\xa7ge

msg
{};

23
msg
.
m_ty\xb3
 = 42;

25
	`as\xa3\xb9
(
	`ωi\xfb_c\xda\xc3\xf9
(1, 2\xe8=\xf0
OK
);

26
	`as\xa3\xb9
(
g_g\xb\xe5h
.
	`f\x9ad
(1, 2,
\xc3t
::
	`lo\xf\xe6_node
()\xe8!\xf0
nuαr
);

29
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

30 aut\xd8*
ch
 =
g_g\xb\xe5h
.
	`f\x9ad
(1, 2,
\xc3t
::
	`lo\xf\xe6_node
());

31
	`as\xa3\xb9
(
ch
 && ch->
queue
.
	`size
() == 1);

33
mes\xa7ge

out
{};

34
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(2, &
out
\xe8=\xf0
OK
);

35
	`as\xa3\xb9
(
out
.
m_ty\xb3
 == 42);

36
	`as\xa3\xb9
(
ch
->
queue
.
	`em\xb1y
());

39
	`ωi\xfb_li\xa1\x92
(2);

40
msg
.
m_ty\xb3
 = 99;

41
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

42
	`as\xa3\xb9
(
g_g\xb\xe5h
.
\x9abox_
.
	`f\x9ad
(2\xe8!\xf0g_g\xbfph.\x9abox_.
	`\x92d
());

43
mes\xa7ge

out2
{};

44
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(2, &
out2
\xe8=\xf0
OK
);

45
	`as\xa3\xb9
(
out2
.
m_ty\xb3
 == 99);

51 aut\xd8
a
 =
pq\xfcy\xb1o
::
	`g\x92\x94\xa9e_key\xb7\x9c
();

52 aut\xd8
b
 =
pq\xfcy\xb1o
::
	`g\x92\x94\xa9e_key\xb7\x9c
();

53 aut\xd8
\xa3\xfc\x91
 =
pq\xfcy\xb1o
::
	`compu\x8b_sh\xa\xfbd_\xa3\xfc\x91
(
a
,
b
);

55
	`as\xa3\xb9
(
\xa3\xfc\x91
.
	`size
(\xe8=\xf0
pq\xfcy\xa1\x\xabs_kyb\x94512_BYTES
);

56
bo\xde

n\xdaz\x94o
 =
\xa1d
::
	`\x\xafy_of
(
\xa3\xfc\x91
.
	`beg\x9a
(), se\xfc\x91.
	`\x92d
(), [](\xa1d::
u\x9\xa98_t

b
) {  b != 0; });

57
	`as\xa3\xb9
(
n\xdaz\x94o
 && "Secret must contain\x83ntropy");

60
	}
}

	@tests/test_lattice_blocking.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

8 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

10 
	~<\xffs\xa3\xb9
>

11 
	~<chr\xdao
>

12 
	~<th\xbbad
>

14
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

22 
	$\xbb\xfbiv\x94_\x8fsk
(*
rc
,
mes\xa7ge
 *
out
\xe8{ *r\xf8\xf0
	`ωi\xfb_\xbbcv
(2, out);
	}
}

24 
	$ma\x9a
() {

25
us\x9ag

sched
::
schedu\xcbr
;

27
g_g\xb\xe5h
 =
G\xb\xe5h
{};

28
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

30
schedu\xcbr
.
	`\x92queue
(1);

31
schedu\xcbr
.
	`\x92queue
(2);

32
schedu\xcbr
.
	`\xb4\x93m\xb1
();

34
	`ωi\xfb_c\xda\xc3\xf9
(1, 2);

36
mes\xa7ge

out
{};

37 
\xbbsu\xc9
 = 0;

38
\xa1d
::
th\xbbad

	`\xbb\xfbiv\x94
(
\xbb\xfbiv\x94_\x8fsk
, &
\xbbsu\xc9
, &
out
);

39
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

40
	`as\xa3\xb9
(
schedu\xcbr
.
	`is_blocked
(2));

42
mes\xa7ge

msg
{};

43
msg
.
m_ty\xb3
 = 77;

44
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

46
\xbb\xfbiv\x94
.
	`jo\x9a
();

47
	`as\xa3\xb9
(
\xbbsu\xc9
 =\xf0
OK
);

48
	`as\xa3\xb9
(
out
.
m_ty\xb3
 == 77);

49
	`as\xa3\xb9
(!
schedu\xcbr
.
	`is_blocked
(2));

52
	}
}

	@tests/test_lattice_ipc.cpp

13 
	~<\x\xabgܙhm
>

14 
	~<\xffs\xa3\xb9
>

15 
	~<c\xa1ddef
>

16 
	~<\xa5\x\xaf
>

17 
	~<\xa1r\x9ag_v\x9bw
>

18 
	~<ve\xf9\xdc
>

20 
	~"../\xfcy\xb1o/kyb\x94.h\xb5
"

21 
	~"../h/cڡ.h\xb5
"

22 
	~"../h/\x94r\xdc.h\xb5
"

23 
	~"../h/ty\xb3.h\xb5
"

24 
	~"../k\x94\xc3l/cڡ.h\xb5
"

25 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

27
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

32 
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
	$to_by\x8bs
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\x8bxt
) {

33
\xa1d
::
ve\xf9\xdc
<\xa1d::
by\x8b
>
out
;

34
out
.
	`\xbb\xa3rve
(
\x8bxt
.
	`size
());

35 
c
 :
\x8bxt
) {

36
out
.
	`push_back
(
\xa1d
::
by\x8b
{
\xa1\xa9ic_\xff\xa1
<>(
c
)});

38 
out
;

39
	}
}

44 
bo\xde

by\x8bs_equ\x\xab
(
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
a
, std::\xa5\xaa<cڡ std::by\x8b>
b
\xe8
n\xdbx\xfb\xb1
 {

45 
a
.
size
(\xe8=\xf0
b
.size(\xe8&&
\xa1d
::
equ\x\xab
\xd7.
beg\x9a
(),\x87.
\x92d
(), b.begin());

48 
	$ma\x9a
() {

50
g_g\xb\xe5h
 =
G\xb\xe5h
{};

52
cڡex\xb4

pid_t

SRC
 = 40;

53
cڡex\xb4

pid_t

DST
 = 41;

54
cڡex\xb4

\xa1d
::
\xa1r\x9ag_v\x9bw

PAYLOAD
 = "lattice secret";

57
	`as\xa3\xb9
(
	`ωi\xfb_c\xda\xc3\xf9
(
SRC
,
DST
\xe8=\xf0
OK
);

58
Ch\x\xaf\xc3l
 *
ch
 =
g_g\xb\xe5h
.
	`f\x9ad
(
SRC
,
DST
);

59
	`as\xa3\xb9
(
ch
 !\xf0
nuαr
 && "Channel must\x83xist\x87fter connect()");

61 aut\xd8
\xb6a\x9a\x8bxt
 =
	`to_by\x8bs
(
PAYLOAD
);

62 aut\xd8
kp
 =
pq
::
kyb\x94
::
	`key\xb7\x9c
();

63 aut\xd8
c\x9dh\x94
 =
pq
::
kyb\x94
::
	`\x92\xfcy\xb1
(
\xb6a\x9a\x8bxt
,
kp
.
public_key
);

65
mes\xa7ge

\xa3nd_msg
{};

66
\xa3nd_msg
.
m_ty\xb3
 = 1;

67
\xa3nd_msg
.
	`m1_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
c\x9dh\x94
.
	`size
());

68
\xa3nd_msg
.
	`m1_p1
(\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x94
.
	`d\xa9a
());

71
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(
SRC
,
DST
,
\xa3nd_msg
\xe8=\xf0
OK
);

72
	`as\xa3\xb9
(!
ch
->
queue
.
	`em\xb1y
() && "Message should be queued");

75
mes\xa7ge

\xbbcv_msg
{};

76
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(
DST
, &
\xbbcv_msg
\xe8=\xf0
OK
);

77
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
\xbbcv_by\x8bs
{
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ std::by\x8b *>(
\xbbcv_msg
.
	`m1_p1
()),

78
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xbbcv_msg
.
	`m1_i1
())};

79 aut\xd8
de\xfcy\xb1ed1
 =
pq
::
kyb\x94
::
	`de\xfcy\xb1
(
\xbbcv_by\x8bs
,
kp
.
\xb4iv\xa9e_key
);

80
	`as\xa3\xb9
(
	`by\x8bs_equ\x\xab
(
de\xfcy\xb1ed1
,
\xb6a\x9a\x8bxt
));

81
	`as\xa3\xb9
(
ch
->
queue
.
	`em\xb1y
() && "Queue should be\x83mpty\x87fter\x84ecv");

84
	`ωi\xfb_li\xa1\x92
(
DST
);

86 aut\xd8
c\x9dh\x942
 =
pq
::
kyb\x94
::
	`\x92\xfcy\xb1
(
\xb6a\x9a\x8bxt
,
kp
.
public_key
);

87
\xa3nd_msg
.
	`m1_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
c\x9dh\x942
.
	`size
());

88
\xa3nd_msg
.
	`m1_p1
(\xe8\xf0
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
c\x9dh\x942
.
	`d\xa9a
());

90
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(
SRC
,
DST
,
\xa3nd_msg
\xe8=\xf0
OK
);

91
	`as\xa3\xb9
(
g_g\xb\xe5h
.
\x9abox_
.
	`f\x9ad
(
DST
\xe8!\xf0g_g\xbfph.\x9abox_.
	`\x92d
() &&

94
mes\xa7ge

\xbbcv2
{};

95
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(
DST
, &
\xbbcv2
\xe8=\xf0
OK
);

96
\xa1d
::
\xa5\xaa
<cڡ std::
by\x8b
>
\xbbcv_by\x8bs2
{
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ std::by\x8b *>(
\xbbcv2
.
	`m1_p1
()),

97
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
\xbbcv2
.
	`m1_i1
())};

98 aut\xd8
de\xfcy\xb1ed2
 =
pq
::
kyb\x94
::
	`de\xfcy\xb1
(
\xbbcv_by\x8bs2
,
kp
.
\xb4iv\xa9e_key
);

99
	`as\xa3\xb9
(
	`by\x8bs_equ\x\xab
(
de\xfcy\xb1ed2
,
\xb6a\x9a\x8bxt
));

102
mes\xa7ge

n\xd\xab
{};

103 
\xbbs
 =
	`ωi\xfb_\xbbcv
(
DST
, &
n\xd\xab
);

104
	`as\xa3\xb9
(
\xbbs
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E_NO_MESSAGE
));

107
	}
}

	@tests/test_lattice_ipv6.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

9 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

11 
	~<\xa9omic
>

12 
	~<\xffs\xa3\xb9
>

13 
	~<chr\xdao
>

14 
	~<c\xa1r\x9ag
>

15 
	~<sys/wa\x99.h
>

16 
	~<th\xbbad
>

18
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

21 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

23 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

25 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 12600;

27 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 12601;

29
	g\xc7me\xa5a\xfb
 {

32 
	g\xc3t
::
Pack\x91

g_\xff\xb1u\xbbd
{};

34 
	g\xa1d
::
\xa9omic
<
bo\xde
>
g_have_\xb7ck\x91
{
\xe7l\xa3
};

41 
\xb7ck\x91_hook
(cڡ
\xc3t
::
Pack\x91
 &
pkt
) {

42 i\xe0(!
g_have_\xb7ck\x91
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
)) {

43
g_\xff\xb1u\xbbd
 =
pkt
;

44
	gg_have_\xb7ck\x91
.
\xa1\xdce
(
\x8cue
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
);

56 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

57
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
});

58
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "::1",
CHILD_PORT
);

60
g_g\xb\xe5h
 =
G\xb\xe5h
{};

61
	`ωi\xfb_c\xda\xc3\xf9
(1, 2,
CHILD_NODE
);

63
mes\xa7ge

msg
{};

64
msg
.
m_ty\xb3
 = 42;

65
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

67
mes\xa7ge

\xbb\xb6y
{};

69
	`p\xd\x96_\xc3tw\xdck
();

70 i\xe0(
	`ωi\xfb_\xbbcv
(2, &
\xbb\xb6y
\xe8=\xf0
OK
) {

73
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

75
	`as\xa3\xb9
(
\xbb\xb6y
.
m_ty\xb3
 == 99);

77 
\xa1\xa9us
 = 0;

78
	`wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

79
\xc3t
::
	`shutdown
();

80 
\xa1\xa9us
;

81
	}
}

88 
	$ch\x9ed_\xb4oc
() {

89
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

90
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "::1",
PARENT_PORT
);

91
\xc3t
::
	`\xa3t_\xbbcv_\xff\x\xfbback
(
\xb7ck\x91_hook
);

93
g_g\xb\xe5h
 =
G\xb\xe5h
{};

94
	`ωi\xfb_c\xda\xc3\xf9
(2, 1,
PARENT_NODE
);

97 !
g_have_\xb7ck\x91
.
	`l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
)) {

98
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(1));

102
\xa1d
::
ve\xf9\xdc
<\xa1d::
by\x8b
>
	`\xb6a\x9a
((
x\x9aim
::
pid_t
\xe8* 2 + (
mes\xa7ge
));

103 aut\xd8*
ids
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
x\x9aim
::
pid_t
 *>(
\xb6a\x9a
.
	`d\xa9a
());

104
ids
[0] = 1;

105
ids
[1] = 2;

106
mes\xa7ge

ex\xb3\xf9
{};

107
ex\xb3\xf9
.
m_ty\xb3
 = 42;

108
\xa1d
::
	`mem\xfdy
(
\xb6a\x9a
.
	`d\xa9a
(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2, &
ex\xb3\xf9
, (expect));

111
	`as\xa3\xb9
(
g_\xff\xb1u\xbbd
.
\xb7yl\xdfd
 !\xf0
\xb6a\x9a
);

114
Ch\x\xaf\xc3l
 *
ch
 =
nuαr
;

116
	`p\xd\x96_\xc3tw\xdck
();

117
ch
 =
g_g\xb\xe5h
.
	`f\x9ad
(1, 2,
PARENT_NODE
);

118 i\xe0(
ch
 && !ch->
queue
.
	`em\xb1y
()) {

121
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

123
	`as\xa3\xb9
(
ch
 && ch->
queue
.
	`size
() == 1);

126
mes\xa7ge

\x9acom\x9ag
{};

127
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(2, &
\x9acom\x9ag
\xe8=\xf0
OK
);

128
	`as\xa3\xb9
(
\x9acom\x9ag
.
m_ty\xb3
 == 42);

129
	`as\xa3\xb9
(
ch
->
queue
.
	`em\xb1y
());

132
mes\xa7ge

ack
{};

133
ack
.
m_ty\xb3
 = 99;

134
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(2, 1,
ack
\xe8=\xf0
OK
);

136
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(50));

137
\xc3t
::
	`shutdown
();

139
	}
}

144 
	$ma\x9a
() {

145
pid_t

pid
 =
	`f\xdck
();

146 i\xe0(
pid
 == 0) {

147 
	`ch\x9ed_\xb4oc
();

149 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

150
	}
}

	@tests/test_lattice_network.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

9 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

11 
	~<\xffs\xa3\xb9
>

12 
	~<chr\xdao
>

13 
	~<csig\xc7l
>

14 
	~<sys/wa\x99.h
>

15 
	~<th\xbbad
>

17
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

19 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

20 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

21 
cڡex\xb4

u\x9\xa916_t

	gPARENT_PORT
 = 12000;

22 
cڡex\xb4

u\x9\xa916_t

	gCHILD_PORT
 = 12001;

25 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

26
\xc3t
::
	`\x9a\x99
({
PARENT_NODE
,
PARENT_PORT
});

27
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

29
g_g\xb\xe5h
 =
G\xb\xe5h
{};

30
	`ωi\xfb_c\xda\xc3\xf9
(1, 2,
CHILD_NODE
);

32
mes\xa7ge

msg
{};

33
msg
.
m_ty\xb3
 = 42;

34
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

36
mes\xa7ge

\xbb\xb6y
{};

38
	`p\xd\x96_\xc3tw\xdck
();

39 i\xe0(
	`ωi\xfb_\xbbcv
(2, &
\xbb\xb6y
\xe8=\xf0
OK
) {

42
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

44
	`as\xa3\xb9
(
\xbb\xb6y
.
m_ty\xb3
 == 99);

46 
\xa1\xa9us
 = 0;

47
	`wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

48
\xc3t
::
	`shutdown
();

49 
\xa1\xa9us
;

50
	}
}

53 
	$ch\x9ed_\xb4oc
() {

54
\xc3t
::
	`\x9a\x99
({
CHILD_NODE
,
CHILD_PORT
});

55
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

57
g_g\xb\xe5h
 =
G\xb\xe5h
{};

58
	`ωi\xfb_c\xda\xc3\xf9
(2, 1,
PARENT_NODE
);

60
mes\xa7ge

\x9acom\x9ag
{};

62
	`p\xd\x96_\xc3tw\xdck
();

63 i\xe0(
	`ωi\xfb_\xbbcv
(1, &
\x9acom\x9ag
\xe8=\xf0
OK
) {

66
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

68
	`as\xa3\xb9
(
\x9acom\x9ag
.
m_ty\xb3
 == 42);

70
mes\xa7ge

ack
{};

71
ack
.
m_ty\xb3
 = 99;

72
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(2, 1,
ack
\xe8=\xf0
OK
);

74
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(50));

75
\xc3t
::
	`shutdown
();

77
	}
}

79 
	$ma\x9a
() {

80
pid_t

pid
 =
	`f\xdck
();

81 i\xe0(
pid
 == 0) {

82 
	`ch\x9ed_\xb4oc
();

84 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

85
	}
}

	@tests/test_lattice_network_encrypted.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../h/ty\xb3.h\xb5
"

8 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

9 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

11 
	~<\xa9omic
>

12 
	~<\xffs\xa3\xb9
>

13 
	~<chr\xdao
>

14 
	~<csig\xc7l
>

15 
	~<c\xa1r\x9ag
>

16 
	~<sys/wa\x99.h
>

17 
	~<th\xbbad
>

19
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

22 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

23 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

26 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 12500;

27 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 12501;

29
	g\xc7me\xa5a\xfb
 {

32 
	g\xc3t
::
Pack\x91

g_\xff\xb1u\xbbd
{};

34 
	g\xa1d
::
\xa9omic
<
bo\xde
>
g_have_\xb7ck\x91
{
\xe7l\xa3
};

39 
\xb7ck\x91_hook
(cڡ
\xc3t
::
Pack\x91
 &
pkt
) {

40 i\xe0(!
g_have_\xb7ck\x91
.
l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
)) {

41
g_\xff\xb1u\xbbd
 =
pkt
;

42
	gg_have_\xb7ck\x91
.
\xa1\xdce
(
\x8cue
,
\xa1d
::
mem\xdcy_\xdcd\x94_\xbb\xcba\xa3
);

51 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

52
\xc3t
::
	`\x9a\x99
({
PARENT_NODE
,
PARENT_PORT
});

53
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

55
g_g\xb\xe5h
 =
G\xb\xe5h
{};

56
	`ωi\xfb_c\xda\xc3\xf9
(1, 2,
CHILD_NODE
);

58
mes\xa7ge

msg
{};

59
msg
.
m_ty\xb3
 = 77;

60
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

62
mes\xa7ge

\xbb\xb6y
{};

64
	`p\xd\x96_\xc3tw\xdck
();

65 i\xe0(
	`ωi\xfb_\xbbcv
(2, &
\xbb\xb6y
\xe8=\xf0
OK
) {

68
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

70
	`as\xa3\xb9
(
\xbb\xb6y
.
m_ty\xb3
 == 88);

72 
\xa1\xa9us
 = 0;

73
	`wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

74
\xc3t
::
	`shutdown
();

75 
\xa1\xa9us
;

76
	}
}

81 
	$ch\x9ed_\xb4oc
() {

82
\xc3t
::
	`\x9a\x99
({
CHILD_NODE
,
CHILD_PORT
});

83
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

84
\xc3t
::
	`\xa3t_\xbbcv_\xff\x\xfbback
(
\xb7ck\x91_hook
);

86
g_g\xb\xe5h
 =
G\xb\xe5h
{};

87
	`ωi\xfb_c\xda\xc3\xf9
(2, 1,
PARENT_NODE
);

90 !
g_have_\xb7ck\x91
.
	`l\xdfd
(
\xa1d
::
mem\xdcy_\xdcd\x94_acqu\x9\xfb
)) {

91
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(1));

95
\xa1d
::
ve\xf9\xdc
<\xa1d::
by\x8b
>
	`\xb6a\x9a
((
x\x9aim
::
pid_t
\xe8* 2 + (
mes\xa7ge
));

96 aut\xd8*
ids
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
x\x9aim
::
pid_t
 *>(
\xb6a\x9a
.
	`d\xa9a
());

97
ids
[0] = 1;

98
ids
[1] = 2;

99
mes\xa7ge

ex\xb3\xf9
{};

100
ex\xb3\xf9
.
m_ty\xb3
 = 77;

101
\xa1d
::
	`mem\xfdy
(
\xb6a\x9a
.
	`d\xa9a
(\xe8+ (
x\x9aim
::
pid_t
\xe8* 2, &
ex\xb3\xf9
, (expect));

104
	`as\xa3\xb9
(
g_\xff\xb1u\xbbd
.
\xb7yl\xdfd
 !\xf0
\xb6a\x9a
);

107
mes\xa7ge

\x9acom\x9ag
{};

109
	`p\xd\x96_\xc3tw\xdck
();

110 i\xe0(
	`ωi\xfb_\xbbcv
(1, &
\x9acom\x9ag
\xe8=\xf0
OK
) {

113
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

115
	`as\xa3\xb9
(
\x9acom\x9ag
.
m_ty\xb3
 == 77);

118
mes\xa7ge

ack
{};

119
ack
.
m_ty\xb3
 = 88;

120
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(2, 1,
ack
\xe8=\xf0
OK
);

122
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(50));

123
\xc3t
::
	`shutdown
();

125
	}
}

130 
	$ma\x9a
() {

131
pid_t

pid
 =
	`f\xdck
();

132 i\xe0(
pid
 == 0) {

133 
	`ch\x9ed_\xb4oc
();

135 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

136
	}
}

	@tests/test_lattice_send_error.cpp

6 
	~"../h/\x94r\xdc.h\xb5
"

7 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

9 
	~<\xffs\xa3\xb9
>

11
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

16 
	$ma\x9a
() {

17
g_g\xb\xe5h
 =
G\xb\xe5h
{};

18
	`ωi\xfb_c\xda\xc3\xf9
(1, 2, 99);

20
mes\xa7ge

msg
{};

21
msg
.
m_ty\xb3
 = 1;

22 
rc
 =
	`ωi\xfb_\xa3nd
(1, 2,
msg
);

23
	`as\xa3\xb9
(
rc
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
EIO
));

25
	}
}

	@tests/test_lattice_send_recv.cpp

10 
	~"../h/\x94r\xdc.h\xb5
"

11 
	~"../h/ty\xb3.h\xb5
"

12 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

13 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

14 
	~<\xffs\xa3\xb9
>

16
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

21 
	$\x8b\xa1_d\x9\xfb\xf9_d\x96iv\x94y
() {

22
us\x9ag

sched
::
schedu\xcbr
;

24
g_g\xb\xe5h
 =
G\xb\xe5h
{};

25
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

27
schedu\xcbr
.
	`\x92queue
(1);

28
schedu\xcbr
.
	`\x92queue
(2);

29
schedu\xcbr
.
	`\xb4\x93m\xb1
();

31
	`ωi\xfb_c\xda\xc3\xf9
(1, 2);

32
	`ωi\xfb_li\xa1\x92
(2);

34
mes\xa7ge

msg
{};

35
msg
.
m_ty\xb3
 = 7;

37
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 1);

38
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

39
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 2);

40
	`as\xa3\xb9
(
g_g\xb\xe5h
.
\x9abox_
.
	`cڏ\x9as
(2));

42
mes\xa7ge

out
{};

43
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(2, &
out
\xe8=\xf0
OK
);

44
	`as\xa3\xb9
(
out
.
m_ty\xb3
 == 7);

45
	}
}

50 
	$\x8b\xa1_queued_d\x96iv\x94y
() {

51
us\x9ag

sched
::
schedu\xcbr
;

53
g_g\xb\xe5h
 =
G\xb\xe5h
{};

54
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

56
schedu\xcbr
.
	`\x92queue
(1);

57
schedu\xcbr
.
	`\x92queue
(2);

58
schedu\xcbr
.
	`\xb4\x93m\xb1
();

60
	`ωi\xfb_c\xda\xc3\xf9
(1, 2);

62
mes\xa7ge

msg
{};

63
msg
.
m_ty\xb3
 = 8;

65
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

66
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 1);

68
Ch\x\xaf\xc3l
 *
ch
 =
g_g\xb\xe5h
.
	`f\x9ad
(1, 2);

69
	`as\xa3\xb9
(
ch
 && ch->
queue
.
	`size
() == 1);

71
mes\xa7ge

out
{};

72
	`as\xa3\xb9
(
	`ωi\xfb_\xbbcv
(2, &
out
\xe8=\xf0
OK
);

73
	`as\xa3\xb9
(
out
.
m_ty\xb3
 == 8);

74
	`as\xa3\xb9
(
ch
->
queue
.
	`em\xb1y
());

75
	}
}

80 
	$\x8b\xa1_n\xdablock\x9ag_\xe7\x9eu\xbbs
() {

81
us\x9ag

sched
::
schedu\xcbr
;

83
g_g\xb\xe5h
 =
G\xb\xe5h
{};

84
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

86
schedu\xcbr
.
	`\x92queue
(1);

87
schedu\xcbr
.
	`\x92queue
(2);

88
schedu\xcbr
.
	`\xb4\x93m\xb1
();

90
	`ωi\xfb_c\xda\xc3\xf9
(1, 2);

92
mes\xa7ge

msg
{};

93
msg
.
m_ty\xb3
 = 9;

95 
rc
 =
	`ωi\xfb_\xa3nd
(1, 2,
msg
,
IpcF\xcfgs
::
NONBLOCK
);

96
	`as\xa3\xb9
(
rc
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E_TRY_AGAIN
));

97
Ch\x\xaf\xc3l
 *
ch
 =
g_g\xb\xe5h
.
	`f\x9ad
(1, 2);

98
	`as\xa3\xb9
(
ch
 && ch->
queue
.
	`em\xb1y
());

99
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 1);

101
mes\xa7ge

out
{};

102
rc
 =
	`ωi\xfb_\xbbcv
(2, &
out
,
IpcF\xcfgs
::
NONBLOCK
);

103
	`as\xa3\xb9
(
rc
 =\xf0
\xa1\xa9ic_\xff\xa1
<>(
E\xbc\xdcCode
::
E_NO_MESSAGE
));

104
	}
}

109 
	$ma\x9a
() {

110
	`\x8b\xa1_d\x9\xfb\xf9_d\x96iv\x94y
();

111
	`\x8b\xa1_queued_d\x96iv\x94y
();

112
	`\x8b\xa1_n\xdablock\x9ag_\xe7\x9eu\xbbs
();

114
	}
}

	@tests/test_lib.cpp

1 
	~<\xffs\xa3\xb9
>

4 
\xa1\xbe\x92
(*
s
);

6 
\xa1rcmp
(*
s1
, *
s2
);

8 
\xbfnd
();

11 
	$ma\x9a
() {

14
	`as\xa3\xb9
(
	`\xa1\xbe\x92
(
cڡ_\xff\xa1
<*>("hello")) == 5);

17
	`as\xa3\xb9
(
	`\xa1rcmp
(
cڡ_\xff\xa1
<*>("a"), const_cast<*>("a")) == 0);

19 
r
 =
	`\xb\xe2d
();

20
	`as\xa3\xb9
(
r
 >= 0);

22
	}
}

	@tests/test_memory_stream.cpp

3 
	~"m\x9aix/io/mem\xdcy_\xa1\xbbam.h\xb5
"

5 
	~<\xac\xbfy
>

6 
	~<c\xa1ddef
>

7 
	~<c\xa1r\x9ag
>

8 
	~<io\xa1\xbbam
>

10 
	$ma\x9a
() {

11
m\x9aix
::
io
::
Mem\xdcyS\x8c\x97m

\xa1\xbbam
;

12 cڡ *
msg
 = "Hello MemoryStream!";

13 aut\xd8
wr\x99e_\xbbs
 =
\xa1\xbbam
.
	`wr\x99e
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
by\x8b
 *>(
msg
), std::
	`\xa1\xbe\x92
(msg));

14 i\xe0(!
wr\x99e_\xbbs
 || *wr\x99e_\xbb\xa0!\xf0
\xa1d
::
	`\xa1\xbe\x92
(
msg
)) {

15
\xa1d
::
cout
 << "write failed\n";

19
\xa1\xbbam
.
	`\xa3ek
(0);

21
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 64>
buf
{};

22 aut\xd8
\xbbad_\xbbs
 =
\xa1\xbbam
.
	`\xbbad
(
buf
.
	`d\xa9a
(),
\xa1d
::
	`\xa1\xbe\x92
(
msg
));

23 i\xe0(!
\xbbad_\xbbs
 || *\xbbad_\xbb\xa0!\xf0
\xa1d
::
	`\xa1\xbe\x92
(
msg
)) {

24
\xa1d
::
cout
 << "read failed\n";

28
\xa1d
::
\xa1r\x9ag_v\x9bw

	`\xbbsu\xc9
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
buf
.
	`d\xa9a
()), std::
	`\xa1\xbe\x92
(
msg
));

29 i\xe0(
\xbbsu\xc9
 !\xf0
msg
) {

30
\xa1d
::
cout
 << "content mismatch\n";

34
\xa1d
::
cout
 << "MemoryStream\x81est\x85assed!\n";

36
	}
}

	@tests/test_net_driver.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

13 
	~<uni\xa1d.h
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

18 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

19 
cڡex\xb4

u\x9\xa916_t

	gPARENT_PORT
 = 14000;

20 
cڡex\xb4

u\x9\xa916_t

	gCHILD_PORT
 = 14001;

23 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed_pid
) {

25
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
});

28
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 1>
bogus
{std::byte{0}};

29
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(99,
bogus
\xe8=\xf0
\xa1d
::
\x94rc
::
ho\xa1_uėchab\xcb
);

32
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
,\x82\x91::
Pr\xd9oc\xde
::
UDP
);

33
	`as\xa3\xb9
(
\xc3t
::
	`lo\xf\xe6_node
() != 0);

36
\xc3t
::
Pack\x91

pkt
;

37 !
\xc3t
::
	`\xbbcv
(
pkt
)) {

38
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

40
	`as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

43
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 3>
d\xa9a
{std::byte{1}, std::byte{2}, std::byte{3}};

44
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
CHILD_NODE
,
d\xa9a
\xe8=\xf0
\xa1d
::
\x94rc
{});

47 !
\xc3t
::
	`\xbbcv
(
pkt
)) {

48
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

50
	`as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

51
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
	`size
(\xe8=\xf0
d\xa9a
.size());

52
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[0] =\xf0
\xa1d
::
by\x8b
{9});

53
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[1] =\xf0
\xa1d
::
by\x8b
{8});

54
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[2] =\xf0
\xa1d
::
by\x8b
{7});

57
	`wa\x99pid
(
ch\x9ed_pid
,
nuαr
, 0);

58
\xc3t
::
	`shutdown
();

60
	}
}

63 
	$ch\x9ed_\xb4oc
() {

65
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

68
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 1>
bogus
{std::byte{0}};

69
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(77,
bogus
\xe8=\xf0
\xa1d
::
\x94rc
::
ho\xa1_uėchab\xcb
);

72
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
,\x82\x91::
Pr\xd9oc\xde
::
UDP
);

75
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 1>
\xbbady
{std::byte{0}};

76
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
PARENT_NODE
,
\xbbady
\xe8=\xf0
\xa1d
::
\x94rc
{});

79
\xc3t
::
Pack\x91

pkt
;

80 !
\xc3t
::
	`\xbbcv
(
pkt
)) {

81
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

83
	`as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

84
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
	`size
() == 3);

87
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 3>
\xbb\xb6y
{std::byte{9}, std::byte{8}, std::byte{7}};

88
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
PARENT_NODE
,
\xbb\xb6y
\xe8=\xf0
\xa1d
::
\x94rc
{});

91
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(50
ms
);

92
\xc3t
::
	`shutdown
();

94
	}
}

96 
	$ma\x9a
() {

97
pid_t

pid
 =
	`f\xdck
();

98
	`as\xa3\xb9
(
pid
 >= 0);

99 i\xe0(
pid
 == 0) {

100 
	`ch\x9ed_\xb4oc
();

102 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

104
	}
}

	@tests/test_net_driver_concurrency.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xa9omic
>

10 
	~<\xffs\xa3\xb9
>

11 
	~<chr\xdao
>

12 
	~<th\xbbad
>

13 
	~<ve\xf9\xdc
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17 
	$ma\x9a
() {

18
cڡex\xb4

\xc3t
::
node_t

SELF
 = 50;

19
cڡex\xb4

u\x9\xa916_t

PORT
 = 16550;

20
cڡex\xb4
 
THREADS
 = 4;

22
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
SELF
,
PORT
});

24
\xa1d
::
\xa9omic
<>
\xbb\xfbived
{0};

25
\xc3t
::
	`\xa3t_\xbbcv_\xff\x\xfbback
([&](cڡ\x82\x91::
Pack\x91
 &\xe8{
\xbb\xfbived
.
	`\xe3tch_add
(1); });

27 aut\xd8
w\xdck\x94
 = [&](
idx
) {

28
\xc3t
::
node_t

node
 =
\xa1\xa9ic_\xff\xa1
<\xc3t::node_t>(
idx
 + 1);

29
\xc3t
::
	`add_\xbbm\xd9e
(
node
, "127.0.0.1",
PORT
);

30
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 1>
\xb7yl\xdfd
{\xa1d::by\x8b{
\xa1\xa9ic_\xff\xa1
<>(
idx
)}};

31
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
node
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
{});

34
\xa1d
::
ve\xf9\xdc
<\xa1d::
th\xbbad
>
th\xbbads
;

35 
i
 = 0; i <
THREADS
; ++i) {

36
th\xbbads
.
	`em\xb6a\xfb_back
(
w\xdck\x94
,
i
);

38 aut\xd8&
t
 :
th\xbbads
) {

39
t
.
	`jo\x9a
();

42 aut\xd8
\xa1\xact
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
	`now
();

43 
\xbb\xfbived
.
	`l\xdfd
(\xe8<
THREADS
 &&
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
	`now
(\xe8-
\xa1\xact
 < 5
s
) {

44
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

47
	`as\xa3\xb9
(
\xbb\xfbived
.
	`l\xdfd
(\xe8=\xf0
THREADS
);

49
\xc3t
::
	`shutdown
();

51
	}
}

	@tests/test_net_driver_drop_newest.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 
	~<chr\xdao
>

10 
	~<io\xa1\xbbam
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

13 
	~<ve\xf9\xdc
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17
	g\xc7me\xa5a\xfb
 {

19
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

20
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

21
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 14200;

22
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 14201;

34 
\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

35
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
, 1,\x82\x91::
Ov\x94\xe6owP\xdeicy
::
Dr\xddNewe\xa1
});

36
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

38
	g\xc3t
::
Pack\x91

pkt
{};

39
cڡex\xb4
\x87ut\xd8
	gtimeout
 = 5
s
;

40 aut\xd8
	g\xa1\xa\xf9
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

41 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

42 i\xe0(
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
(\xe8-
\xa1\xact
 >
timeout
) {

43
\xa1d
::
\xfb\xbc
 << "Timeou\x88wa\x99\x9ag f\xdc ch\x9ed\x84\x97d\x9aess." << std::
\x92dl
;

44
	g\xa1d
::
ex\x99
(
EXIT_FAILURE
);

46
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

49
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xa1\xa\xf9_pkt
{std::byte{0}};

50
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
\xa1\xact_pkt
\xe8=\xf0
\xa1d
::
\x94rc
{});

52
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(100
ms
);

54
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xbb\xfbived
{};

55 
	g\xc3t
::
\xbbcv
(
pkt
)) {

56 i\xe0(!
pkt
.
\xb7yl\xdfd
.
em\xb1y
()) {

57
\xbb\xfbived
.
push_back
(
pkt
.
\xb7yl\xdfd
.
\xe4\xdat
());

61
as\xa3\xb9
(
\xbb\xfbived
.
size
() == 1);

62
as\xa3\xb9
(
\xbb\xfbived
[0] =\xf0
\xa1d
::
by\x8b
{1});

64 
	g\xa1\xa9us
 = 0;

65
wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

66
	g\xc3t
::
shutdown
();

67 
	g\xa1\xa9us
;

78 
ch\x9ed_\xb4oc
() {

79
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

80
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

82
	g\xc3t
::
Pack\x91

pkt
{};

83 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

84
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

87
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xd\xab
{std::byte{1}};

88
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	gtwo
{std::byte{2}};

89
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xdae
\xe8=\xf0
\xa1d
::
\x94rc
{});

90
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
two
\xe8=\xf0
\xa1d
::
\x94rc
{});

92
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

93
	g\xc3t
::
shutdown
();

102 
	$ma\x9a
() {

103
pid_t

pid
 =
	`f\xdck
();

104 i\xe0(
pid
 == 0) {

105 
	`ch\x9ed_\xb4oc
();

107 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

108
	}
}

	@tests/test_net_driver_id.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 #i\xe0
def\x9\xabd
(
_WIN32
)

10 
	~<\x9dhͭi.h
>

11 
	~<w\x9asock2.h
>

12 
	~<ws2t\xfd\x9d.h
>

13 #\xb4agm\xa8
comm\x92t
(
lib
, "iphlpapi.lib")

15 
	~<i\xe7ddrs.h
>

16 
	~<\xc3t/if.h
>

17 #i\xe0
def\x9\xabd
(
__APPLE__
\xe8|| def\x9aed(
__F\xbbeBSD__
\xe8|| def\x9aed(
__N\x91BSD__
\xe8|| def\x9aed(
__O\xb3nBSD__
) || \

18
	$def\x9\xabd
(
__D\xbfg\xdaFly__
)

19 
	~<\xc3t/if_dl.h
>

21 
	~<Íack\x91/\xb7ck\x91.h
>

23 
	~<uni\xa1d.h
>

25 
	~<\xa1r\x9ag_v\x9bw
>

27
\xc7me\xa5a\xfb
 {

33 [[
nodis\xf\xe4d
]]
\xc3t
::
node_t

	`compu\x8b_ex\xb3\xf9ed
() {

34 #i\xe0
	`def\x9\xabd
(
_WIN32
)

35
ULONG

size
 = 0;

36 i\xe0(
	`G\x91Ad\xad\x8brsAdd\xbbs\xa3s
(
AF_UNSPEC
, 0,
nuαr
,\x82uαr, &
size
\xe8=\xf0
ERROR_BUFFER_OVERFLOW
) {

37
\xa1d
::
ve\xf9\xdc
<>
	`buf
(
size
);

38 aut\xd8*
\xaf
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
PIP_ADAPTER_ADDRESSES
>(
buf
.
	`d\xa9a
());

39 i\xe0(
	`G\x91Ad\xad\x8brsAdd\xbbs\xa3s
(
AF_UNSPEC
, 0,
nuαr
,
\xaf
, &
size
\xe8=\xf0
NO_ERROR
) {

40 aut\xd8*
cur
 =
\xaf
; cur; cu\xb8\xf0cur->
Next
) {

41 i\xe0(
cur
->
O\xb3rS\x8\xe1us
 !\xf0
IfO\xb3rS\x8\xe1usUp
 || cur->
IfTy\xb3
 =\xf0
IF_TYPE_SOFTWARE_LOOPBACK
) {

44 i\xe0(
cur
->
Physi\xf\xe6Add\xbbssL\x92gth
 > 0) {

45
\xa1d
::
size_t

v\x\xabue
 = 0;

46 
i
 = 0; i <
cur
->
Physi\xf\xe6Add\xbbssL\x92gth
; ++i) {

47
v\x\xabue
 = v\xaeu\x90* 131 +
cur
->
Physi\xf\xe6Add\xbbss
[
i
];

49 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

51 aut\xd8*
ua
 =
cur
->
F\x9c\xa1Uni\xff\xa1Add\xbbss
; ua; u\xa8\xf0ua->
Next
) {

52 aut\xd8
\xe7m
 =
ua
->
Add\xbbss
.
\xcdSockaddr
->
\xa7_\xe7m\x9ey
;

53 i\xe0(
\xe7m
 =\xf0
AF_INET
) {

54 aut\xd8*
s\x9a
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x9a
 *>(
ua
->
Add\xbbss
.
\xcdSockaddr
);

55
\xa1d
::
size_t

v\x\xabue
 = 0;

56 cڡ\x87ut\xd8*
b
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(&
s\x9a
->
s\x9a_addr
);

57 
i
 = 0; i < (
s\x9a
->
s\x9a_addr
); ++i) {

58
v\x\xabue
 = v\xaeu\x90* 131 +
b
[
i
];

60 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

62 i\xe0(
\xe7m
 =\xf0
AF_INET6
) {

63 aut\xd8*
s\x9a6
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x9a6
 *>(
ua
->
Add\xbbss
.
\xcdSockaddr
);

64
\xa1d
::
size_t

v\x\xabue
 = 0;

65 cڡ\x87ut\xd8*
b
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(&
s\x9a6
->
s\x9a6_addr
);

66 
i
 = 0; i < (
s\x9a6
->
s\x9a6_addr
); ++i) {

67
v\x\xabue
 = v\xaeu\x90* 131 +
b
[
i
];

69 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

76
i\xe7ddrs
 *
i\xe7
 =
nuαr
;

77 i\xe0(
	`g\x91i\xe7ddrs
(&
i\xe7
) == 0) {

78 aut\xd8*
cur
 =
i\xe7
; cu\xb8!\xf0
nuαr
; cu\xb8\xf0cur->
i\xe7_\xc3xt
) {

79 i\xe0(!(
cur
->
i\xe7_\xe6ags
 &
IFF_UP
\xe8|| (cur->i\xe7_\xe6ag\xa0&
IFF_LOOPBACK
)) {

82 #i\xe0
	`def\x9\xabd
(
__APPLE__
\xe8|| def\x9aed(
__F\xbbeBSD__
\xe8|| def\x9aed(
__N\x91BSD__
\xe8|| def\x9aed(
__O\xb3nBSD__
) || \

83
	`def\x9\xabd
(
__D\xbfg\xdaFly__
)

84 i\xe0(
cur
->
i\xe7_addr
 && cur->i\xe7_addr->
\xa7_\xe7m\x9ey
 =\xf0
AF_LINK
) {

85 aut\xd8*
sdl
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_dl
 *>(
cur
->
i\xe7_addr
);

86 i\xe0(
sdl
->
sdl_\x\xab\x92
 > 0) {

87
\xa1d
::
size_t

v\x\xabue
 = 0;

88 cڡ\x87ut\xd8*
b
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
	`LLADDR
(
sdl
));

89 
i
 = 0; i <
sdl
->
sdl_\x\xab\x92
; ++i) {

90
v\x\xabue
 = v\xaeu\x90* 131 +
b
[
i
];

92
	`\xe4\x93i\xe7ddrs
(
i\xe7
);

93 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

97 i\xe0(
cur
->
i\xe7_addr
 && cur->i\xe7_addr->
\xa7_\xe7m\x9ey
 =\xf0
AF_PACKET
) {

98 aut\xd8*
\xce
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x\xfb
 *>(
cur
->
i\xe7_addr
);

99
\xa1d
::
size_t

v\x\xabue
 = 0;

100 
i
 = 0; i <
\xce
->
\xa6l_h\xae\x92
; ++i) {

101
v\x\xabue
 = v\xaeu\x90* 131 +
\xce
->
\xa6l_addr
[
i
];

103
	`\xe4\x93i\xe7ddrs
(
i\xe7
);

104 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

107 i\xe0(
cur
->
i\xe7_addr
 && cur->i\xe7_addr->
\xa7_\xe7m\x9ey
 =\xf0
AF_INET
) {

108 aut\xd8*
s\x9a
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x9a
 *>(
cur
->
i\xe7_addr
);

109
\xa1d
::
size_t

v\x\xabue
 = 0;

110 cڡ\x87ut\xd8*
by\x8bs
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(&
s\x9a
->
s\x9a_addr
);

111 
i
 = 0; i < (
s\x9a
->
s\x9a_addr
); ++i) {

112
v\x\xabue
 = v\xaeu\x90* 131 +
by\x8bs
[
i
];

114
	`\xe4\x93i\xe7ddrs
(
i\xe7
);

115 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

117 i\xe0(
cur
->
i\xe7_addr
 && cur->i\xe7_addr->
\xa7_\xe7m\x9ey
 =\xf0
AF_INET6
) {

118 aut\xd8*
s\x9a6
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
sockaddr_\x9a6
 *>(
cur
->
i\xe7_addr
);

119
\xa1d
::
size_t

v\x\xabue
 = 0;

120 cڡ\x87ut\xd8*
b
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(&
s\x9a6
->
s\x9a6_addr
);

121 
i
 = 0; i < (
s\x9a6
->
s\x9a6_addr
); ++i) {

122
v\x\xabue
 = v\xaeu\x90* 131 +
b
[
i
];

124
	`\xe4\x93i\xe7ddrs
(
i\xe7
);

125 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
 & 0x7fffffff);

128
	`\xe4\x93i\xe7ddrs
(
i\xe7
);

131 
ho\xa1
[256]{};

132 i\xe0(
	`g\x91ho\xa1\xc7me
(
ho\xa1
, (host)) == 0) {

133 aut\xd8
v\x\xabue
 =
\xa1d
::
hash
<\xa1d::
\xa1r\x9ag_v\x9bw
>{}(\xa1d::\xa1r\x9ag_v\x9bw{
ho\xa1
}) & 0x7fffffff;

134 
\xa1\xa9ic_\xff\xa1
<
\xc3t
::
node_t
>(
v\x\xabue
);

139
	}
}

144 
	$ma\x9a
() {

145 cڡ\x87ut\xd8
ex\xb3\xf9
 =
	`compu\x8b_ex\xb3\xf9ed
();

146
\xc3t
::
	`\x9a\x99
({0, 15000});

147 cڡ\x87ut\xd8
a\xf9u\x\xab
 =
\xc3t
::
	`lo\xf\xe6_node
();

148
	`as\xa3\xb9
(
a\xf9u\x\xab
 =\xf0
ex\xb3\xf9
);

149
\xc3t
::
	`shutdown
();

151
	}
}

	@tests/test_net_driver_ipv6.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

13 
	~<uni\xa1d.h
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17
	g\xc7me\xa5a\xfb
 {

19
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

20
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

21
cڡex\xb4

u\x9\xa916_t

	gUDP_PARENT_PORT
 = 17000;

22
cڡex\xb4

u\x9\xa916_t

	gUDP_CHILD_PORT
 = 17001;

23
cڡex\xb4

u\x9\xa916_t

	gTCP_PARENT_PORT
 = 17002;

24
cڡex\xb4

u\x9\xa916_t

	gTCP_CHILD_PORT
 = 17003;

29 
udp_ch\x9ed
() {

30
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
UDP_CHILD_PORT
});

31
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "::1",
UDP_PARENT_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
UDP
);

33
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xbbady
{std::byte{0}};

34
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbbady
\xe8=\xf0
\xa1d
::
\x94rc
{});

36
	g\xc3t
::
Pack\x91

pkt
;

37 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

38
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

40
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

41
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() == 3);

43
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xbb\xb6y
{std::byte{9}, std::byte{8}, std::byte{7}};

44
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbb\xb6y
\xe8=\xf0
\xa1d
::
\x94rc
{});

46
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

47
	g\xc3t
::
shutdown
();

54 
udp_\xb7\xbb\xc1
(
pid_t

ch\x9ed
) {

55
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
UDP_PARENT_PORT
});

56
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "::1",
UDP_CHILD_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
UDP
);

58
	g\xc3t
::
Pack\x91

pkt
;

59 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

60
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

62
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

64
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xb7yl\xdfd
{std::byte{1}, std::byte{2}, std::byte{3}};

65
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
{});

68
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

69 } !
	g\xc3t
::
\xbbcv
(
pkt
));

71
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

72
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() ==\x85ayload.size());

74 
	g\xa1\xa9us
 = 0;

75
wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

76
	g\xc3t
::
shutdown
();

77 
	g\xa1\xa9us
;

83 
t\xfd_ch\x9ed
() {

84
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
TCP_CHILD_PORT
});

85
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "::1",
TCP_PARENT_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

87
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xbbady
{std::byte{0}};

88
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbbady
\xe8=\xf0
\xa1d
::
\x94rc
{});

90
	g\xc3t
::
Pack\x91

pkt
;

91 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

92
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

94
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

95
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() == 3);

97
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xbb\xb6y
{std::byte{9}, std::byte{8}, std::byte{7}};

98
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbb\xb6y
\xe8=\xf0
\xa1d
::
\x94rc
{});

100
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

101
	g\xc3t
::
shutdown
();

108 
t\xfd_\xb7\xbb\xc1
(
pid_t

ch\x9ed
) {

109
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
TCP_PARENT_PORT
});

110
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "::1",
TCP_CHILD_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

112
	g\xc3t
::
Pack\x91

pkt
;

113 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

114
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

116
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

118
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xb7yl\xdfd
{std::byte{1}, std::byte{2}, std::byte{3}};

119
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
{});

122
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

123 } !
	g\xc3t
::
\xbbcv
(
pkt
));

125
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

126
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() ==\x85ayload.size());

128 
	g\xa1\xa9us
 = 0;

129
wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

130
	g\xc3t
::
shutdown
();

131 
	g\xa1\xa9us
;

139 
	$ma\x9a
() {

140
pid_t

pid
 =
	`f\xdck
();

141 i\xe0(
pid
 == 0) {

142 
	`udp_ch\x9ed
();

144 i\xe0(
	`udp_\xb7\xbb\xc1
(
pid
) != 0) {

148
pid
 =
	`f\xdck
();

149 i\xe0(
pid
 == 0) {

150 
	`t\xfd_ch\x9ed
();

152 
	`t\xfd_\xb7\xbb\xc1
(
pid
);

153
	}
}

	@tests/test_net_driver_loopback.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<th\xbbad
>

13
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

15 
	$ma\x9a
() {

16
cڡex\xb4

\xc3t
::
node_t

SELF
 = 42;

17
cڡex\xb4

u\x9\xa916_t

PORT
 = 16050;

19
\xc3t
::
C\xdafig

cfg
{
SELF
,
PORT
};

20
\xc3t
::
	`\x9a\x99
(
cfg
);

21
\xc3t
::
	`add_\xbbm\xd9e
(
SELF
, "127.0.0.1",
PORT
);

23
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 2>
\xb7yl\xdfd
{std::byte{0xAA}, std::byte{0x55}};

24
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
SELF
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
{});

26
\xc3t
::
Pack\x91

pkt
{};

27 
i
 = 0; i < 100 && !
\xc3t
::
	`\xbbcv
(
pkt
); ++i) {

28
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(10
ms
);

30
	`as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
SELF
);

31
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
	`size
() ==\x85ayload.size());

32
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[0] ==\x85ayload[0]);

33
	`as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[1] ==\x85ayload[1]);

35
\xc3t
::
	`shutdown
();

37
	}
}

	@tests/test_net_driver_overflow.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 
	~<chr\xdao
>

10 
	~<io\xa1\xbbam
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

14
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

16
	g\xc7me\xa5a\xfb
 {

18
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

19
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

20
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 14100;

21
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 14101;

34 
\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

35
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
, 1,\x82\x91::
Ov\x94\xe6owP\xdeicy
::
Dr\xddOlde\xa1
});

36
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

38
	g\xc3t
::
Pack\x91

pkt
{};

40
cڡex\xb4
\x87ut\xd8
	gtimeout
 = 5
s
;

41 aut\xd8
	g\xa1\xa\xf9
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

42 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

43 i\xe0(
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
(\xe8-
\xa1\xact
 >
timeout
) {

44
\xa1d
::
\xfb\xbc
 << "Timeou\x88wa\x99\x9ag f\xdc ch\x9ed\x81\xd8sig\xc7Ȼad\x9aess." << std::
\x92dl
;

45
	g\xa1d
::
ex\x99
(
EXIT_FAILURE
);

47
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

50
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	gpkt_\xa1\xa\xf9
{std::byte{0}};

51
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
pkt_\xa1\xa\xf9
\xe8=\xf0
\xa1d
::
\x94rc
{});

54
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(100
ms
);

56
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
by\x8b
>
\xbb\xfbived
{};

57 
	g\xc3t
::
\xbbcv
(
pkt
)) {

58 i\xe0(!
pkt
.
\xb7yl\xdfd
.
em\xb1y
()) {

59
\xbb\xfbived
.
push_back
(
pkt
.
\xb7yl\xdfd
.
\xe4\xdat
());

63
as\xa3\xb9
(
\xbb\xfbived
.
size
() == 1);

64
as\xa3\xb9
(
\xbb\xfbived
[0] =\xf0
\xa1d
::
by\x8b
{2});

66 
	g\xa1\xa9us
 = 0;

67
wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

68
	g\xc3t
::
shutdown
();

69 
	g\xa1\xa9us
;

81 
ch\x9ed_\xb4oc
() {

82
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

83
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

85
	g\xc3t
::
Pack\x91

pkt
{};

86 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

87
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

90
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xd\xab
{std::byte{1}};

91
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	gtwo
{std::byte{2}};

92
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xdae
\xe8=\xf0
\xa1d
::
\x94rc
{});

93
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
two
\xe8=\xf0
\xa1d
::
\x94rc
{});

95
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

96
	g\xc3t
::
shutdown
();

105 
	$ma\x9a
() {

106
pid_t

pid
 =
	`f\xdck
();

107 i\xe0(
pid
 == 0) {

108 
	`ch\x9ed_\xb4oc
();

110 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

111
	}
}

	@tests/test_net_driver_persistent_id.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 
	~<f\x9\x93sy\xa1em
>

10 
	~<uni\xa1d.h
>

12 
	$ma\x9a
() {

13
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

d\x9c
{"/tmp/xinim_persist"};

14
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove_\x\xabl
(
d\x9c
);

15
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xfc\x97\x8b_d\x9\xfb\xf9ܛs
(
d\x9c
);

16 cڡ\x87ut\xd8
f\x9\x93
 =
d\x9c
 / "node_id";

17 ::
	`uƚk
(
f\x9\x93
.
	`c_\xa1r
());

19
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{0, 16000, 0,\x82\x91::
Ov\x94\xe6owP\xdeicy
::
Dr\xddNewe\xa1
,
d\x9c
});

20 cڡ\x87ut\xd8
f\x9c\xa1
 =
\xc3t
::
	`lo\xf\xe6_node
();

21
	`as\xa3\xb9
(
f\x9c\xa1
 != 0);

22
\xc3t
::
	`shutdown
();

24
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{0, 16000, 0,\x82\x91::
Ov\x94\xe6owP\xdeicy
::
Dr\xddNewe\xa1
,
d\x9c
});

25 cڡ\x87ut\xd8
\xa3c\xdad
 =
\xc3t
::
	`lo\xf\xe6_node
();

26
	`as\xa3\xb9
(
f\x9c\xa1
 =\xf0
\xa3c\xdad
);

27
\xc3t
::
	`shutdown
();

29
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove_\x\xabl
(
d\x9c
);

31
	}
}

	@tests/test_net_driver_reconnect.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

13 
	~<uni\xa1d.h
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17
	g\xc7me\xa5a\xfb
 {

19
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

20
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

21
cڡex\xb4

u\x9\xa916_t

	gPARENT_PORT
 = 15500;

22
cڡex\xb4

u\x9\xa916_t

	gCHILD_PORT
 = 15501;

28 
ch\x9ed_\xda\xfb
() {

29
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

30
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

32
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xbbady
{std::byte{0}};

33
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbbady
\xe8=\xf0
\xa1d
::
\x94rc
{});

35
	g\xc3t
::
Pack\x91

pkt
;

36 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

37
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

39
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

40
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() == 3);

42
	g\xc3t
::
shutdown
();

47 
ch\x9ed_\xa3c\xdad
() {

48
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

49
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

51
	g\xc3t
::
Pack\x91

pkt
;

52 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

53
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

55
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

56
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() == 3);

58
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	gack
{std::byte{1}};

59
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
ack
\xe8=\xf0
\xa1d
::
\x94rc
{});

60
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

61
	g\xc3t
::
shutdown
();

66 
\xb7\xbb\xc1_\xb4oc
() {

67
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
});

68
pid_t

	gf\x9c\xa1_ch\x9ed
 =
f\xdck
();

69 i\xe0(
	gf\x9c\xa1_ch\x9ed
 == 0) {

70 
ch\x9ed_\xda\xfb
();

73 
	g\xa9\x8bm\xb1
 = 0;; ++attempt) {

74
	g\x8cy
 {

75
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

77 }
\xfftch
 (cڡ
\xa1d
::
sy\xa1em_\x94r\xdc
 &) {

78 i\xe0(
\xa9\x8bm\xb1
 > 50) {

79
throw
;

81
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

85
	g\xc3t
::
Pack\x91

pkt
;

86 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

87
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

89
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

91
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\x9a\x99\x9\xe6
{std::byte{1}, std::byte{2}, std::byte{3}};

92
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
\x9a\x99\x9fl
\xe8=\xf0
\xa1d
::
\x94rc
{});

94 
	g\xa1\xa9us
 = 0;

95
wa\x99pid
(
f\x9c\xa1_ch\x9ed
, &
\xa1\xa9us
, 0);

96
as\xa3\xb9
(
\xa1\xa9us
 == 0);

98
pid_t

	g\xa3c\xdad_ch\x9ed
 =
f\xdck
();

99 i\xe0(
	g\xa3c\xdad_ch\x9ed
 == 0) {

100 
ch\x9ed_\xa3c\xdad
();

103
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xb7yl\xdfd
{std::byte{1}, std::byte{2}, std::byte{3}};

104
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
{});

107
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

108 } !
	g\xc3t
::
\xbbcv
(
pkt
));

109
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

111
wa\x99pid
(
\xa3c\xdad_ch\x9ed
, &
\xa1\xa9us
, 0);

112
	g\xc3t
::
shutdown
();

113 
	g\xa1\xa9us
;

118 
	$ma\x9a
(\xe8{ 
	`\xb7\xbb\xc1_\xb4oc
();
	}
}

	@tests/test_net_driver_socket_failure.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<th\xbbad
>

13
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

15 
	$ma\x9a
() {

16
cڡex\xb4

\xc3t
::
node_t

SELF
 = 200;

17
cڡex\xb4

\xc3t
::
node_t

PEER
 = 201;

18
cڡex\xb4

u\x9\xa916_t

PORT_SELF
 = 17050;

19
cڡex\xb4

u\x9\xa916_t

PORT_PEER
 = 17051;

21
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
SELF
,
PORT_SELF
});

22
\xc3t
::
	`add_\xbbm\xd9e
(
PEER
, "127.0.0.1",
PORT_PEER
);

24
\xc3t
::
	`simuϋ_sock\x91_\xe7\x9eu\xbb
();

25
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(50
ms
);

27
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 1>
\xb7yl\xdfd
{std::byte{0}};

28
	`as\xa3\xb9
(
\xc3t
::
	`\xa3nd
(
PEER
,
\xb7yl\xdfd
\xe8=\xf0
\xa1d
::
\x94rc
::
io_\x94r\xdc
);

30
\xc3t
::
	`shutdown
();

32
	}
}

	@tests/test_net_driver_tcp.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xac\xbfy
>

9 
	~<\xffs\xa3\xb9
>

10 
	~<chr\xdao
>

11 
	~<sys/wa\x99.h
>

12 
	~<th\xbbad
>

13 
	~<uni\xa1d.h
>

15
us\x9ag

\xc7me\xa5a\xfb

	g\xa1d
::
chr\xdao_l\x99\x94\x\xabs
;

17
	g\xc7me\xa5a\xfb
 {

19
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

20
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

21
cڡex\xb4

u\x9\xa916_t

	gPARENT_PORT
 = 15000;

22
cڡex\xb4

u\x9\xa916_t

	gCHILD_PORT
 = 15001;

25 
\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed_pid
) {

26
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
});

27
	g\xc3t
::
add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

30
	g\xc3t
::
Pack\x91

pkt
;

31 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

32
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

34
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

37
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	gd\xa9a
{std::byte{1}, std::byte{2}, std::byte{3}};

38
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
CHILD_NODE
,
d\xa9a
\xe8=\xf0
\xa1d
::
\x94rc
{});

42
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

43 } !
	g\xc3t
::
\xbbcv
(
pkt
));

45
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
CHILD_NODE
);

46
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
(\xe8=\xf0
d\xa9a
.size());

47
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[0] =\xf0
\xa1d
::
by\x8b
{9});

48
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[1] =\xf0
\xa1d
::
by\x8b
{8});

49
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
[2] =\xf0
\xa1d
::
by\x8b
{7});

52 
	g\xa1\xa9us
 = 0;

53
wa\x99pid
(
ch\x9ed_pid
, &
\xa1\xa9us
, 0);

54
	g\xc3t
::
shutdown
();

55 
	g\xa1\xa9us
;

59 
ch\x9ed_\xb4oc
() {

60
	g\xc3t
::
\x9a\x99
(
\xc3t
::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

61
	g\xc3t
::
add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
,
\xc3t
::
Pr\xd9oc\xde
::
TCP
);

64
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 1>
	g\xbbady
{std::byte{0}};

65
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbbady
\xe8=\xf0
\xa1d
::
\x94rc
{});

68
	g\xc3t
::
Pack\x91

pkt
;

69 !
	g\xc3t
::
\xbbcv
(
pkt
)) {

70
\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(10
ms
);

72
as\xa3\xb9
(
pkt
.
\xa4c_node
 =\xf0
PARENT_NODE
);

73
as\xa3\xb9
(
pkt
.
\xb7yl\xdfd
.
size
() == 3);

76
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
by\x8b
, 3>
	g\xbb\xb6y
{std::byte{9}, std::byte{8}, std::byte{7}};

77
as\xa3\xb9
(
\xc3t
::
\xa3nd
(
PARENT_NODE
,
\xbb\xb6y
\xe8=\xf0
\xa1d
::
\x94rc
{});

80
	g\xa1d
::
this_th\xbbad
::
\xa6\x93p_f\xdc
(50
ms
);

81
	g\xc3t
::
shutdown
();

87 
	$ma\x9a
() {

88
pid_t

pid
 =
	`f\xdck
();

89 i\xe0(
pid
 == 0) {

90 
	`ch\x9ed_\xb4oc
();

91 } i\xe0(
pid
 > 0) {

92 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

97
	}
}

	@tests/test_net_driver_unpriv_id.cpp

6 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 
	~<c\xa1dlib
>

10 
	~<f\x9\x93sy\xa1em
>

11 
	~<uni\xa1d.h
>

13 
	$ma\x9a
() {

14 cڡ *
tmp
 =
\xa1d
::
	`g\x91\x92v
("TMPDIR");

15 i\xe0(!
tmp
)

16
tmp
 = "/tmp";

17
\xa1d
::
f\x9\x93sy\xa1em
::
\xb7th

d\x9c
 = std::f\x9eesy\xa1em::\xb7th{
tmp
} / "xinim_unpriv";

18
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove_\x\xabl
(
d\x9c
);

19
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xfc\x97\x8b_d\x9\xfb\xf9ܛs
(
d\x9c
);

20
	`\xa3\x8bnv
("XDG_STATE_HOME",
d\x9c
.
	`c_\xa1r
(), 1);

21
	`\xa3tuid
(65534);

23
\xc3t
::
	`\x9a\x99
({0, 16010});

24 cڡ\x87ut\xd8
f\x9c\xa1
 =
\xc3t
::
	`lo\xf\xe6_node
();

25
	`as\xa3\xb9
(
f\x9c\xa1
 != 0);

26
\xc3t
::
	`shutdown
();

28
\xc3t
::
	`\x9a\x99
({0, 16010});

29 cڡ\x87ut\xd8
\xa3c\xdad
 =
\xc3t
::
	`lo\xf\xe6_node
();

30
	`as\xa3\xb9
(
\xa3c\xdad
 =\xf0
f\x9c\xa1
);

31
\xc3t
::
	`shutdown
();

33
	`as\xa3\xb9
(
\xa1d
::
f\x9\x93sy\xa1em
::
	`exi\xa1s
(
d\x9c
 / "xinim" / "node_id"));

34
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove_\x\xabl
(
d\x9c
);

36
	}
}

	@tests/test_net_two_node.cpp

16 
	~"../h/\x94r\xdc.h\xb5
"

17 
	~"../h/ty\xb3.h\xb5
"

18 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

19 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

21 
	~<\xffs\xa3\xb9
>

22 
	~<chr\xdao
>

23 
	~<csig\xc7l
>

24 
	~<sys/wa\x99.h
>

25 
	~<th\xbbad
>

27
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

30 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

32 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

34 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 13000;

36 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 13001;

46 
	$ch\x9ed_\xb4oc
() {

47
\xc3t
::
	`\x9a\x99
({
CHILD_NODE
,
CHILD_PORT
});

48
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

50
g_g\xb\xe5h
 =
G\xb\xe5h
{};

51
	`ωi\xfb_c\xda\xc3\xf9
(2, 1,
PARENT_NODE
);

53
mes\xa7ge

\x9acom\x9ag
{};

55
	`p\xd\x96_\xc3tw\xdck
();

56 i\xe0(
	`ωi\xfb_\xbbcv
(1, &
\x9acom\x9ag
\xe8=\xf0
OK
) {

59
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

61
	`as\xa3\xb9
(
\x9acom\x9ag
.
m_ty\xb3
 == 0x1234);

63
mes\xa7ge

\xbb\xb6y
{};

64
\xbb\xb6y
.
m_ty\xb3
 =
\xc3t
::
	`lo\xf\xe6_node
();

65
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(2, 1,
\xbb\xb6y
\xe8=\xf0
OK
);

67
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(50));

68
\xc3t
::
	`shutdown
();

70
	}
}

78 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

79
\xc3t
::
	`\x9a\x99
({
PARENT_NODE
,
PARENT_PORT
});

80
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

82
g_g\xb\xe5h
 =
G\xb\xe5h
{};

83
	`ωi\xfb_c\xda\xc3\xf9
(1, 2,
CHILD_NODE
);

85
mes\xa7ge

msg
{};

86
msg
.
m_ty\xb3
 = 0x1234;

87
	`as\xa3\xb9
(
	`ωi\xfb_\xa3nd
(1, 2,
msg
\xe8=\xf0
OK
);

89
mes\xa7ge

\xbb\xb6y
{};

91
	`p\xd\x96_\xc3tw\xdck
();

92 i\xe0(
	`ωi\xfb_\xbbcv
(2, &
\xbb\xb6y
\xe8=\xf0
OK
) {

95
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

98 aut\xd8
\xb7\xbb\xc1_id
 =
\xc3t
::
	`lo\xf\xe6_node
();

99 aut\xd8
ch\x9ed_id
 =
\xbb\xb6y
.
m_ty\xb3
;

100
	`as\xa3\xb9
(
\xb7\xbb\xc1_id
 !\xf0
ch\x9ed_id
);

102 
\xa1\xa9us
 = 0;

103
	`wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

104
\xc3t
::
	`shutdown
();

105 
\xa1\xa9us
;

106
	}
}

111 
	$ma\x9a
() {

112
pid_t

pid
 =
	`f\xdck
();

113 i\xe0(
pid
 == 0) {

114 
	`ch\x9ed_\xb4oc
();

116 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

117
	}
}

	@tests/test_poll_network.cpp

17 
	~"../h/\x94r\xdc.h\xb5
"

18 
	~"../h/ty\xb3.h\xb5
"

19 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

20 
	~"../k\x94\xc3l/\xc3t_driv\x94.h\xb5
"

22 
	~<\xffs\xa3\xb9
>

23 
	~<chr\xdao
>

24 
	~<csig\xc7l
>

25 
	~<sys/wa\x99.h
>

26 
	~<th\xbbad
>

28
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

31 
cڡex\xb4

	g\xc3t
::
node_t

PARENT_NODE
 = 0;

33 
cڡex\xb4

	g\xc3t
::
node_t

CHILD_NODE
 = 1;

35 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

PARENT_PORT
 = 15000;

37 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

CHILD_PORT
 = 15001;

47 
	$ch\x9ed_\xb4oc
() {

48
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
CHILD_NODE
,
CHILD_PORT
});

49
\xc3t
::
	`add_\xbbm\xd9e
(
PARENT_NODE
, "127.0.0.1",
PARENT_PORT
);

51
g_g\xb\xe5h
 =
G\xb\xe5h
{};

52
	`ωi\xfb_c\xda\xc3\xf9
(2, 1,
PARENT_NODE
);

54
mes\xa7ge

\x9acom\x9ag
{};

56
	`p\xd\x96_\xc3tw\xdck
();

57 i\xe0(
	`ωi\xfb_\xbbcv
(1, &
\x9acom\x9ag
\xe8=\xf0
OK
) {

60
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

62
	`as\xa3\xb9
(
\x9acom\x9ag
.
m_ty\xb3
 == 0xCAFE);

64
mes\xa7ge

\xbb\xb6y
{};

65
\xbb\xb6y
.
m_ty\xb3
 =
\xc3t
::
	`lo\xf\xe6_node
();

66
	`ωi\xfb_\xa3nd
(2, 1,
\xbb\xb6y
);

68
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(50));

69
\xc3t
::
	`shutdown
();

71
	}
}

79 
	$\xb7\xbb\xc1_\xb4oc
(
pid_t

ch\x9ed
) {

80
\xc3t
::
	`\x9a\x99
ґ::
C\xdafig
{
PARENT_NODE
,
PARENT_PORT
});

81
\xc3t
::
	`add_\xbbm\xd9e
(
CHILD_NODE
, "127.0.0.1",
CHILD_PORT
);

83
g_g\xb\xe5h
 =
G\xb\xe5h
{};

84
	`ωi\xfb_c\xda\xc3\xf9
(1, 2,
CHILD_NODE
);

86
mes\xa7ge

msg
{};

87
msg
.
m_ty\xb3
 = 0xCAFE;

88
	`ωi\xfb_\xa3nd
(1, 2,
msg
);

90
mes\xa7ge

\xbb\xb6y
{};

92
	`p\xd\x96_\xc3tw\xdck
();

93 i\xe0(
	`ωi\xfb_\xbbcv
(2, &
\xbb\xb6y
\xe8=\xf0
OK
) {

96
\xa1d
::
this_th\xbbad
::
	`\xa6\x93p_f\xdc
(\xa1d::
chr\xdao
::
	`m\x9\x96i\xa3c\xdads
(10));

99 aut\xd8
\xb7\xbb\xc1_id
 =
\xc3t
::
	`lo\xf\xe6_node
();

100 aut\xd8
ch\x9ed_id
 =
\xbb\xb6y
.
m_ty\xb3
;

101
	`as\xa3\xb9
(
\xb7\xbb\xc1_id
 !\xf0
ch\x9ed_id
);

103 
\xa1\xa9us
 = 0;

104
	`wa\x99pid
(
ch\x9ed
, &
\xa1\xa9us
, 0);

105
\xc3t
::
	`shutdown
();

106 
\xa1\xa9us
;

107
	}
}

112 
	$ma\x9a
() {

113
pid_t

pid
 =
	`f\xdck
();

114 i\xe0(
pid
 == 0) {

115 
	`ch\x9ed_\xb4oc
();

117 
	`\xb7\xbb\xc1_\xb4oc
(
pid
);

118
	}
}

	@tests/test_scheduler.cpp

1 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

2 
	~<\xffs\xa3\xb9
>

4 
	$ma\x9a
() {

5
us\x9ag

sched
::
schedu\xcbr
;

6
schedu\xcbr
.
	`\x92queue
(1);

7
schedu\xcbr
.
	`\x92queue
(2);

8 aut\xd8
f\x9c\xa1
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

9
	`as\xa3\xb9
(
f\x9c\xa1
 && *first == 1);

10 aut\xd8
\xa3c\xdad
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

11
	`as\xa3\xb9
(
\xa3c\xdad
 && *second == 2);

12
schedu\xcbr
.
	`y\x9bld_to
(1);

13
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 1);

15
	}
}

	@tests/test_scheduler_deadlock.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~<\xffs\xa3\xb9
>

12 
	$ma\x9a
() {

13
us\x9ag

sched
::
schedu\xcbr
;

15
schedu\xcbr
.
	`\x92queue
(1);

16
schedu\xcbr
.
	`\x92queue
(2);

19 aut\xd8
cur
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

20
	`as\xa3\xb9
(
cur
 && *cur == 1);

23
	`as\xa3\xb9
(
schedu\xcbr
.
	`block_\xda
(1, 2));

26
cur
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

27
	`as\xa3\xb9
(
cur
 && *cur == 2);

30
	`as\xa3\xb9
(!
schedu\xcbr
.
	`block_\xda
(2, 1));

31
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 2);

34
schedu\xcbr
.
	`unblock
(1);

35
schedu\xcbr
.
	`y\x9bld_to
(1);

36
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 1);

39
	}
}

	@tests/test_scheduler_edge.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~<\xffs\xa3\xb9
>

25 
	$ma\x9a
() {

26
us\x9ag

sched
::
schedu\xcbr
;

29
	`as\xa3\xb9
(!
schedu\xcbr
.
	`\xb4\x93m\xb1
().
	`has_v\x\xabue
());

32
schedu\xcbr
.
	`\x92queue
(10);

33 aut\xd8
f\x9c\xa1
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

34
	`as\xa3\xb9
(
f\x9c\xa1
 && *first == 10);

37
	`as\xa3\xb9
(!
schedu\xcbr
.
	`\xb4\x93m\xb1
().
	`has_v\x\xabue
());

40
schedu\xcbr
.
	`\x92queue
(11);

41
schedu\xcbr
.
	`\x92queue
(12);

42
schedu\xcbr
.
	`\xb4\x93m\xb1
();

45
schedu\xcbr
.
	`y\x9bld_to
(42);

46
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 11);

49
schedu\xcbr
.
	`\x92queue
(13);

50
schedu\xcbr
.
	`y\x9bld_to
(13);

51
	`as\xa3\xb9
(
schedu\xcbr
.
	`cu\xbc\x92t
() == 13);

54
	}
}

	@tests/test_semantic_region.cpp

1 
	~"../\x9a\x\xe3ude/psd/vm/\xa3m\x\xaftic_mem\xdcy.h\xb5
"

2 
	~<\xffs\xa3\xb9
>

4 
	$ma\x9a
() {

5
us\x9ag

\xc7me\xa5a\xfb

psd
::
vm
;

6
\xa3m\xaatic_\xbbgi\xda
<
\xa3m\xaatic_code_\x8fg
>
	`code_\xbbgi\xda
(0x1001, 4096);

7 aut\xd8
\xaeig\xc3d
 =
code_\xbbgi\xda
.
	`ba\xa3
(\xe8%
\xa3m\xaatic_\x8ca\x99s
<
\xa3m\xaatic_code_\x8fg
>::
\xaeignm\x92t
 == 0;

8
	`as\xa3\xb9
(
\xaeig\xc3d
);

10
	}
}

	@tests/test_service_contract.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~"../k\x94\xc3l/\xa3rvi\xfb.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

13 
	$ma\x9a
() {

14
us\x9ag

sched
::
schedu\xcbr
;

15
us\x9ag

svc
::
\xa3rvi\xfb_m\xaaag\x94
;

17
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(1, {}, 1);

19
schedu\xcbr
.
	`\xb4\x93m\xb1
();

20
schedu\xcbr
.
	`\xf\xffsh
(1);

22
schedu\xcbr
.
	`\xb4\x93m\xb1
();

23
schedu\xcbr
.
	`\xf\xffsh
(1);

25 aut\xd8
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

26
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

27
	`as\xa3\xb9
(!
\xc3xt
);

28
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(1).
\xbb\xa1\xacts
 == 1);

29
	`as\xa3\xb9
(!
\xa3rvi\xfb_m\xaaag\x94
.
	`is_rug
(1));

32
	}
}

	@tests/test_service_manager_dag.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~"../k\x94\xc3l/\xa3rvi\xfb.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

13 
	$ma\x9a
() {

14
us\x9ag

sched
::
schedu\xcbr
;

15
us\x9ag

svc
::
\xa3rvi\xfb_m\xaaag\x94
;

17
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(1);

18
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(2, {1});

19
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(3, {2});

22
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

25
\xa3rvi\xfb_m\xaaag\x94
.
	`add_d\x95\x92d\x92cy
(1, 3);

28
schedu\xcbr
.
	`\xf\xffsh
(3);

29 aut\xd8
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

30
	`as\xa3\xb9
(
\xc3xt
 && *next == 3);

31
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(1).
\xbb\xa1\xacts
 == 0);

32
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(2).
\xbb\xa1\xacts
 == 0);

33
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(3).
\xbb\xa1\xacts
 == 1);

36
schedu\xcbr
 =
sched
::
Schedu\xcbr
{};

39
schedu\xcbr
.
	`\xf\xffsh
(1);

40
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

41
	`as\xa3\xb9
(
\xc3xt
 && *next == 1);

42
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

43
	`as\xa3\xb9
(
\xc3xt
 && *next == 2);

44
\xc3xt
 =
schedu\xcbr
.
	`\xb4\x93m\xb1
();

45
	`as\xa3\xb9
(
\xc3xt
 && *next == 3);

48
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(1).
\xbb\xa1\xacts
 == 1);

49
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(2).
\xbb\xa1\xacts
 == 1);

50
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(3).
\xbb\xa1\xacts
 == 2);

53
	}
}

	@tests/test_service_manager_updates.cpp

6 
	~"../k\x94\xc3l/schedu\xcb.h\xb5
"

7 
	~"../k\x94\xc3l/\xa3rvi\xfb.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

10 
	$ma\x9a
() {

11
us\x9ag

sched
::
schedu\xcbr
;

12
us\x9ag

svc
::
\xa3rvi\xfb_m\xaaag\x94
;

15
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(42);

16
\xa3rvi\xfb_m\xaaag\x94
.
	`u\xc4egi\xa1\x94_\xa3rvi\xfb
(42);

17
	`as\xa3\xb9
(!
\xa3rvi\xfb_m\xaaag\x94
.
	`is_rug
(42));

18
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(42).
id
 == 0);

19
	`as\xa3\xb9
(!
\xa3rvi\xfb_m\xaaag\x94
.
	`h\x\xafd\xcb_\xf\xffsh
(42));

22
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(1);

23
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(2, {1});

25
schedu\xcbr
.
	`\xb4\x93m\xb1
();

26
schedu\xcbr
.
	`\xb4\x93m\xb1
();

28
\xa3rvi\xfb_m\xaaag\x94
.
	`\xbbmove_d\x95\x92d\x92cy
(2, 1);

30
schedu\xcbr
.
	`\xf\xffsh
(1);

31
schedu\xcbr
.
	`\xb4\x93m\xb1
();

32
	`as\xa3\xb9
(
\xa3rvi\xfb_m\xaaag\x94
.
	`cڌa\xf9
(2).
\xbb\xa1\xacts
 == 0);

35
	}
}

	@tests/test_service_serialization.cpp

6 
	~"../k\x94\xc3l/\xa3rvi\xfb.h\xb5
"

7 
	~<\xffs\xa3\xb9
>

8 
	~<f\x9\x93sy\xa1em
>

13 
	$ma\x9a
() {

14
us\x9ag

svc
::
S\x94vi\xfbM\x\xafag\x94
;

15 cڡ
\xa1d
::
\xa1r\x9ag

\xb7th
{"services_test.json"};

17
S\x94vi\xfbM\x\xafag\x94

mgr
;

18
mgr
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(1, {}, 2);

19
mgr
.
	`\xbbgi\xa1\x94_\xa3rvi\xfb
(2, {1}, 1);

20
mgr
.
	`\xa7ve
(
\xb7th
);

24
S\x94vi\xfbM\x\xafag\x94

mgr2
;

25 cڡ
\xa1d
::
\xa1r\x9ag

miss\x9ag_\xb7th
{"nonexistent_services.json"};

26
bo\xde

l\xdfd_\xbbsu\xc9
 =
mgr2
.
	`l\xdfd
(
miss\x9ag_\xb7th
);

27
	`as\xa3\xb9
(!
l\xdfd_\xbbsu\xc9
 && "Loading from\x87\x82on-existent file should fail");

32 cڡ
\xa1d
::
\xa1r\x9ag

m\x\xabf\xdcmed_\xb7th
{"malformed_services.json"};

34
\xa1d
::
of\xa1\xbbam

	`ofs
(
m\x\xabf\xdcmed_\xb7th
);

35
ofs
 << "{\x81his is\x82ot valid JSON! ";

36
ofs
.
	`\x\xe3o\xa3
();

38
S\x94vi\xfbM\x\xafag\x94

mgr3
;

39
bo\xde

l\xdfd_\xbbsu\xc9
 =
mgr3
.
	`l\xdfd
(
m\x\xabf\xdcmed_\xb7th
);

40
	`as\xa3\xb9
(!
l\xdfd_\xbbsu\xc9
 && "Loading from\x87 malformed file should fail");

43
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove
(
m\x\xabf\xdcmed_\xb7th
);

45
S\x94vi\xfbM\x\xafag\x94

l\xdfded
;

46
l\xdfded
.
	`l\xdfd
(
\xb7th
);

48
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(1).
p\xdeicy
.
lim\x99
 == 2);

49
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
p\xdeicy
.
lim\x99
 == 1);

52
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(1).
id
 == 1);

53
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
id
 == 2);

56
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(1).
\xbb\xa1\xacts
 == 0);

57
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
\xbb\xa1\xacts
 == 0);

60
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(1).
d\x95s
.
	`em\xb1y
());

61
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
d\x95s
.
	`size
() == 1);

62
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
d\x95s
[0] == 1);

65
l\xdfded
.
	`h\x\xafd\xcb_\xf\xffsh
(1);

66
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(1).
\xbb\xa1\xacts
 == 1);

67
	`as\xa3\xb9
(
l\xdfded
.
	`cڌa\xf9
(2).
\xbb\xa1\xacts
 == 1);

69
\xa1d
::
f\x9\x93sy\xa1em
::
	`\xbbmove
(
\xb7th
);

71
	}
}

	@tests/test_stream_foundation.cpp

4 
	~"m\x9aix/io/f\x9\x93_ݔ\xa9i\xdas.h\xb5
"

5 
	~"m\x9aix/io/f\x9\x93_\xa1\xbbam.h\xb5
"

6 
	~"m\x9aix/io/\xa1\x\xafd\xacd_\xa1\xbbams.h\xb5
"

7 
	~<\xac\xbfy
>

8 
	~<\xffs\xa3\xb9
>

9 
	~<c\xa1r\x9ag
>

10 
	~<io\xa1\xbbam
>

13 
	$\xbbp\xd\xf9_\x94r\xdc
(cڡ *
\xc7me
, cڡ
\xa1d
::
\x94r\xdc_code
 &
ec
) {

14
\xa1d
::
\xfb\xbc
 << "\n" <<
\xc7me
 << " fa\x9eed: " <<
ec
.
	`mes\xa7ge
() << '\n';

15
	}
}

17 
	$ma\x9a
() {

18
\xa1d
::
cout
 << "=== MINIX Stream Foundation Verification ===\n";

21
\xa1d
::
cout
 << "Test 1: stdout write... ";

23 cڡ *
msg
 = "Hello from MINIX Stream!\n";

24 aut\xd8
\xbbs
 =
m\x9aix
::
io
::
	`\xa1dout
().
	`wr\x99e
(
\xa1d
::
	`as_by\x8bs
(\xa1d::
\xa5\xaa
{
msg
, std::
	`\xa1\xbe\x92
(msg)}));

25 i\xe0(!
\xbbs
) {

26
	`\xbbp\xd\xf9_\x94r\xdc
("\xa1dou\x88wr\x99e",
\xbbs
.
\x94r\xdc
);

29 i\xe0(*
\xbbs
 !\xf0
\xa1d
::
	`\xa1\xbe\x92
(
msg
)) {

30
\xa1d
::
\xfb\xbc
 << "wrong byte count\n";

33
\xa1d
::
cout
 << "OK" << std::
\x92dl
;

37
\xa1d
::
cout
 << "Test 2: create file... ";

39 aut\xd8
f\x9\x93
 =
m\x9aix
::
io
::
	`ݒ_\xa1\xbbam
("\xa1\xbbam_\x8b\xa1.txt", m\x9aix::io::
O\xb3nMode
::
wr\x99e
 |

40
m\x9aix
::
io
::
O\xb3nMode
::
\xfc\x97\x8b
 |

41
m\x9aix
::
io
::
O\xb3nMode
::
\x8cun\xff\x8b
);

42 i\xe0(!
f\x9\x93
) {

43
	`\xbbp\xd\xf9_\x94r\xdc
("f\x9e\x90\xfc\x97\x8b",
f\x9\x93
.
\x94r\xdc
);

46 cڡ *
cڋ\xc1
 = "This file validates\x81he Stream implementation.\n";

47 aut\xd8*
s
 =
f\x9\x93
.
v\x\xabue
.
	`v\x\xabue
().
	`g\x91
();

48 aut\xd8
wr
 =
s
->
	`wr\x99e
(
\xa1d
::
	`as_by\x8bs
(\xa1d::
\xa5\xaa
{
cڋ\xc1
, std::
	`\xa1\xbe\x92
(content)}));

49 i\xe0(!
wr
) {

50
	`\xbbp\xd\xf9_\x94r\xdc
("f\x9e\x90wr\x99e",
wr
.
\x94r\xdc
);

53
\xa1d
::
cout
 << "OK" << std::
\x92dl
;

57
\xa1d
::
cout
 << "Test 3:\x84ead file... ";

59 aut\xd8
f\x9\x93
 =
m\x9aix
::
io
::
	`ݒ_\xa1\xbbam
("\xa1\xbbam_\x8b\xa1.txt", m\x9aix::io::
O\xb3nMode
::
\xbbad
);

60 i\xe0(!
f\x9\x93
) {

61
	`\xbbp\xd\xf9_\x94r\xdc
("f\x9e\x90ݒ",
f\x9\x93
.
\x94r\xdc
);

64 aut\xd8*
s
 =
f\x9\x93
.
v\x\xabue
.
	`v\x\xabue
().
	`g\x91
();

65
\xa1d
::
\xac\xbfy
<\xa1d::
by\x8b
, 256>
buf
{};

66 aut\xd8
rd
 =
s
->
	`\xbbad
(
buf
);

67 i\xe0(!
rd
) {

68
	`\xbbp\xd\xf9_\x94r\xdc
("f\x9e\x90\xbbad",
rd
.
\x94r\xdc
);

71
\xa1d
::
\xa1r\x9ag_v\x9bw

	`d\xa9a
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
buf
.d\xa9a()), *
rd
);

72 i\xe0(
d\xa9a
 != "This file validates\x81he Stream implementation.\n") {

73
\xa1d
::
\xfb\xbc
 << "mismatched file content\n";

76
\xa1d
::
cout
 << "OK" << std::
\x92dl
;

80
\xa1d
::
cout
 << "Test 4: missing file\x83rror... ";

82 aut\xd8
f\x9\x93
 =
m\x9aix
::
io
::
	`ݒ_\xa1\xbbam
("no_such_f\x9ee.abc", m\x9aix::io::
O\xb3nMode
::
\xbbad
);

83 i\xe0(
f\x9\x93
) {

84
\xa1d
::
\xfb\xbc
 << "unexpected success\n";

87 i\xe0(
f\x9\x93
.
\x94r\xdc
 !\xf0
\xa1d
::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
) {

88
\xa1d
::
\xfb\xbc
 << "wrong\x83rror code\n";

91
\xa1d
::
cout
 << "OK" << std::
\x92dl
;

94
\xa1d
::
	`\xbbmove
("stream_test.txt");

95
\xa1d
::
cout
 << "\nAll Stream foundation\x81ests\x85assed!\n";

97
	}
}

	@tests/test_streams.cpp

1 
	~<\xffs\xa3\xb9
>

2 
	~<c\xa1dio
>

5 
	$ma\x9a
() {

7
\xa1d
::
	`\xb4\x9\xa9f
("=== MINIX Stream Architecture Tests ===\n\n");

10
\xa1d
::
	`\xb4\x9\xa9f
("Test 1: Create\x87nd write file... SKIPPED\n");

11
\xa1d
::
	`\xb4\x9\xa9f
("Test 2: Read from file... SKIPPED\n");

12
\xa1d
::
	`\xb4\x9\xa9f
("Test 3: Open\x82on-existent file... SKIPPED\n");

13
\xa1d
::
	`\xb4\x9\xa9f
("Test 4: Write\x81o\x84ead-only stream... SKIPPED\n");

14
\xa1d
::
	`\xb4\x9\xa9f
("Test 5: Multiple\x84eads... SKIPPED\n");

15
\xa1d
::
	`\xb4\x9\xa9f
("Test 6: Append mode... SKIPPED\n");

16
\xa1d
::
	`\xb4\x9\xa9f
("Test 7: Standard streams... SKIPPED\n\n");

18
\xa1d
::
	`\xb4\x9\xa9f
("All\x81ests SKIPPED!\n");

20
	}
}

	@tests/test_svcctl.cpp

6 
	~"../comm\x\xafds/svc\xf9l.h\xb5
"

7 
	~"../k\x94\xc3l/ωi\xfb_\x9dc.h\xb5
"

8 
	~<\xffs\xa3\xb9
>

9 
	~<un\xdcd\x94ed_m\xad
>

11
us\x9ag

\xc7me\xa5a\xfb

	gωi\xfb
;

12
us\x9ag

	gsvc\xf9l
::
Mes\xa7ge
;

15 \xfeas\xa0
	cMockS\x94vi\xfbM\x\xafag\x94
 {

16
	mpublic
:

17
\xa1d
::
un\xdcd\x94ed_m\xad
<
x\x9aim
::
pid_t
,
	mbo\xde
>
	m\xa3rvi\xfbs
;

20 
	$\xb4o\xfbss_\xda\xfb
() {

21
mes\xa7ge

msg
{};

22 i\xe0(
	`ωi\xfb_\xbbcv
(
svc\xf9l
::
MANAGER_PID
, &
msg
,
IpcF\xcfgs
::
NONBLOCK
\xe8!\xf0
x\x9aim
::
OK
) {

25 
\xa1\xa9ic_\xff\xa1
<
Mes\xa7ge
>(
msg
.
m_ty\xb3
)) {

26 
Mes\xa7ge
::
LIST
:

27 aut\xd8&[
pid
,
a\xf9ive
] :
\xa3rvi\xfbs
) {

28
mes\xa7ge

out
{};

29
out
.
m_ty\xb3
 =
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
LIST_RESPONSE
);

30
out
.
	`m1_i1
(\xe8\xf0
\xa1\xa9ic_\xff\xa1
<>(
pid
);

31
out
.
	`m1_i2
(\xe8\xf0
a\xf9ive
 ? 1 : 0;

32
	`ωi\xfb_\xa3nd
(
svc\xf9l
::
MANAGER_PID
, svc\xf9l::
CLIENT_PID
,
out
);

35
mes\xa7ge

\x92d
{};

36
\x92d
.
m_ty\xb3
 =
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
END
);

37
	`ωi\xfb_\xa3nd
(
svc\xf9l
::
MANAGER_PID
, svc\xf9l::
CLIENT_PID
,
\x92d
);

40 
Mes\xa7ge
::
START
:

41
\xa3rvi\xfbs
[
\xa1\xa9ic_\xff\xa1
<
x\x9aim
::
pid_t
>(
msg
.
	`m1_i1
())] =
\x8cue
;

42
	`\xa3nd_ack
();

44 
Mes\xa7ge
::
STOP
:

45
\xa3rvi\xfbs
[
\xa1\xa9ic_\xff\xa1
<
x\x9aim
::
pid_t
>(
msg
.
	`m1_i1
())] =
\xe7l\xa3
;

46
	`\xa3nd_ack
();

48 
Mes\xa7ge
::
RESTART
:

49
\xa3rvi\xfbs
[
\xa1\xa9ic_\xff\xa1
<
x\x9aim
::
pid_t
>(
msg
.
	`m1_i1
())] =
\x8cue
;

50
	`\xa3nd_ack
();

57
\xb4iv\xa9e
:

59 
	$\xa3nd_ack
() {

60
mes\xa7ge

ack
{};

61
ack
.
m_ty\xb3
 =
\xa1\xa9ic_\xff\xa1
<>(
Mes\xa7ge
::
ACK
);

62
	`ωi\xfb_\xa3nd
(
svc\xf9l
::
MANAGER_PID
, svc\xf9l::
CLIENT_PID
,
ack
);

63
	}
}

66 
	$ma\x9a
() {

67
g_g\xb\xe5h
 =
G\xb\xe5h
{};

68
	`ωi\xfb_c\xda\xc3\xf9
(
svc\xf9l
::
CLIENT_PID
, svc\xf9l::
MANAGER_PID
);

69
	`ωi\xfb_c\xda\xc3\xf9
(
svc\xf9l
::
MANAGER_PID
, svc\xf9l::
CLIENT_PID
);

71
MockS\x94vi\xfbM\x\xafag\x94

mgr
;

72
mgr
.
\xa3rvi\xfbs
[10] =
\xe7l\xa3
;

74 *
\xa1\xact_\xacgs
[] = {
cڡ_\xff\xa1
<*>("svcctl"), const_cast<*>("start"),

75
cڡ_\xff\xa1
<*>("10")};

76
	`as\xa3\xb9
(
svc\xf9l
::
	`run
({
\xa1\xact_\xacgs
, 3}) == 0);

77
mgr
.
	`\xb4o\xfbss_\xda\xfb
();

78
	`as\xa3\xb9
(
mgr
.
\xa3rvi\xfbs
[10]);

80 *
\xa1\xdd_\xacgs
[] = {
cڡ_\xff\xa1
<*>("svcctl"), const_cast<*>("stop"),

81
cڡ_\xff\xa1
<*>("10")};

82
	`as\xa3\xb9
(
svc\xf9l
::
	`run
({
\xa1\xdd_\xacgs
, 3}) == 0);

83
mgr
.
	`\xb4o\xfbss_\xda\xfb
();

84
	`as\xa3\xb9
(!
mgr
.
\xa3rvi\xfbs
[10]);

86 *
\xbb\xa1\xact_\xacgs
[] = {
cڡ_\xff\xa1
<*>("svcctl"), const_cast<*>("restart"),

87
cڡ_\xff\xa1
<*>("10")};

88
	`as\xa3\xb9
(
svc\xf9l
::
	`run
({
\xbb\xa1\xact_\xacgs
, 3}) == 0);

89
mgr
.
	`\xb4o\xfbss_\xda\xfb
();

90
	`as\xa3\xb9
(
mgr
.
\xa3rvi\xfbs
[10]);

92 *
li\xa1_\xacgs
[] = {
cڡ_\xff\xa1
<*>("svcctl"), const_cast<*>("list")};

93
	`as\xa3\xb9
(
svc\xf9l
::
	`run
({
li\xa1_\xacgs
, 2}) == 0);

94 
i
 = 0; i < 4; ++i) {

95
mgr
.
	`\xb4o\xfbss_\xda\xfb
();

99
	}
}

	@tests/test_syscall.cpp

1 
	~<\xffs\xa3\xb9
>

2 
	~<c\xa1r\x9ag
>

3 
	~<f\x\xe7\x8e.h
>

4 
	~<uni\xa1d.h
>

7 
	$ma\x9a
() {

8 cڡ *
msg
 = "hi";

9 
fd
 =
	`ݒ
("\x8bmpf\x9ee",
O_RDWR
 |
O_CREAT
 |
O_TRUNC
, 0600);

10
	`as\xa3\xb9
(
fd
 >= 0);

11
	`as\xa3\xb9
(
	`wr\x99e
(
fd
,
msg
, 2) == 2);

12
	`l\xa3ek
(
fd
, 0,
SEEK_SET
);

13 
buf
[3] = {0};

14
	`as\xa3\xb9
(
	`\xbbad
(
fd
,
buf
, 2) == 2);

16
	`as\xa3\xb9
(
	`\xa1rcmp
(
buf
,
cڡ_\xff\xa1
<*>(
msg
)) == 0);

17
	`\x\xe3o\xa3
(
fd
);

18
	`uƚk
("tempfile");

20
	}
}

	@tests/test_wait_graph.cpp

1 
	~"../k\x94\xc3l/wa\x99_g\xb\xe5h.h\xb5
"

2 
	~<\xffs\xa3\xb9
>

4 
	$ma\x9a
() {

5
ωi\xfb
::
Wa\x99F\xdcG\xb\xe5h

g
;

7
	`as\xa3\xb9
(!
g
.
	`add_edge
(1, 2));

9
	`as\xa3\xb9
(!
g
.
	`add_edge
(2, 3));

11
	`as\xa3\xb9
(
g
.
	`add_edge
(3, 1));

13
g
.
	`\xbbmove_edge
(1, 2);

14
g
.
	`\x\xe3\x97r
(2);

16
	}
}

	@tools/bootblok1.cpp

1 
	~"../\x9a\x\xe3ude/defs.h\xb5
"

2 
	~<\xac\xbfy
>

3 
	~<c\xa1d\x9\xa9
>

4 
	~<f\xa1\xbbam
>

5 
	~<io\xa1\xbbam
>

6 
	~<\xa1dex\xfb\xb1
>

7 
	~<\xa1r\x9ag
>

8 
	~<\xa1r\x9ag_v\x9bw
>

9 
	~<sy\xa1em_\x94r\xdc
>

12
\xc7me\xa5a\xfb

	gfs
 {

13
us\x9ag

	g\xb7th
 =
\xa1d
::
\xa1r\x9ag
;

14
\x9al\x9ae

bo\xde

\xfc\x97\x8b_d\x9ce\xf9ܛs
(cڡ
\xa1d
::
\xa1r\x9ag
 &
\xb7th
) {

15 
\x8cue
;

20
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
> c\xcfs\xa0
	c\xddtiڮ
 {

21
	m\xb4iv\xa9e
:

22
bo\xde

has_v\x\xabue_
;

23
T

	mv\x\xabue_
;

25
	mpublic
:

26
	$\xddtiڮ
(\xe8:
	$has_v\x\xabue_
(
\xe7l\xa3
) {}

27
	$\xddtiڮ
(
T

v\x\xab
\xe8:
	`has_v\x\xabue_
(
\x8cue
),
	$v\x\xabue_
(
v\x\xab
\xe8{
	}
}

29
ex\xb6ic\x99

ݔ\xa9\xdc

	$bo\xde
(\xe8cڡ { 
has_v\x\xabue_
;
	}
}

30
T

	gݔ\xa9\xdc
*(\xe8cڡ { 
	gv\x\xabue_
; }

32 
\xddtiڮ

	$nu\x\xfb\xddt
(\xe8{ 
	`\xddtiڮ
();
	}
}

35
\xc7me\xa5a\xfb

	gm\x9aix
::
bo\xd9l\xdfd\x94
 {

43 \xfeas\xa0
	cBo\xd9Se\xf9\xdc
 {

44
public
:

45 
cڡex\xb4

\xa1d
::
size_t

SECTOR_SIZE
 = 512;

46 
cڡex\xb4

	g\xa1d
::
size_t

BOOT_SIGNATURE_OFFSET
 = 510;

47 
cڡex\xb4

	g\xa1d
::
\xac\xbfy
<
u8_t
, 2>
	gBOOT_SIGNATURE
 = {0x55, 0xaa};

50 
cڡex\xb4

	g\xa1d
::
size_t

KERNEL_LBA_OFFSET
 = 0xeb;

51 
cڡex\xb4

	g\xa1d
::
size_t

KERNEL_ENTRY_OFFSET
 = 0xf5;

52 
cڡex\xb4

	g\xa1d
::
size_t

DRIVE_NUMBER_OFFSET
 = 0xfd;

54
	g\xb4iv\xa9e
:

73 
cڡex\xb4

\xa1d
::
\xac\xbfy
<
u8_t
,
	gSECTOR_SIZE
>
	gbo\xd9_\xa3\xf9\xdc_d\xa9a
 = {

111
	g\xa1d
::
\xac\xbfy
<
u8_t
,
	gSECTOR_SIZE
>
	g\xa3\xf9\xdc_buf\xe3r
;

113
	gpublic
:

118
Bo\xd9Se\xf9\xdc
(\xe8:
\xa3\xf9\xdc_buf\xe3r
(
bo\xd9_\xa3\xf9\xdc_d\xa9a
\xe8{
v\x\xabid\xa9e
(); }

124 
v\x\xabid\xa9e
() const {

126 i\xe0(
	g\xa3\xf9\xdc_buf\xe3r
[
BOOT_SIGNATURE_OFFSET
] !\xf0
BOOT_SIGNATURE
[0] ||

127
\xa3\xf9\xdc_buf\xe3r
[
BOOT_SIGNATURE_OFFSET
 + 1] !\xf0
BOOT_SIGNATURE
[1]) {

128
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Invalid boot sector signature");

132
\xa1\xa9ic_as\xa3\xb9
(
bo\xd9_\xa3\xf9\xdc_d\xa9a
.
size
(\xe8=\xf0
SECTOR_SIZE
,

140 
\xb7tch_k\x94\xc3l_lba
(
\xa1d
::
u\x9\xa932_t

lba
\xe8
n\xdbx\xfb\xb1
 {

141
\xa3\xf9\xdc_buf\xe3r
[
KERNEL_LBA_OFFSET
] =
\xa1\xa9ic_\xff\xa1
<
u8_t
>(
lba
 & 0xff);

142
	g\xa3\xf9\xdc_buf\xe3r
[
KERNEL_LBA_OFFSET
 + 1] =
\xa1\xa9ic_\xff\xa1
<
u8_t
>((
lba
 >> 8) & 0xff);

143
	g\xa3\xf9\xdc_buf\xe3r
[
KERNEL_LBA_OFFSET
 + 2] =
\xa1\xa9ic_\xff\xa1
<
u8_t
>((
lba
 >> 16) & 0xff);

144
	g\xa3\xf9\xdc_buf\xe3r
[
KERNEL_LBA_OFFSET
 + 3] =
\xa1\xa9ic_\xff\xa1
<
u8_t
>((
lba
 >> 24) & 0xff);

151 
\xb7tch_k\x94\xc3l_\x92\x8cy
(
\xa1d
::
u\x9\xa964_t

\x92\x8cy_po\x9at
\xe8
n\xdbx\xfb\xb1
 {

152 
\xa1d
::
size_t

i
 = 0;
	gi
 < 8; ++i) {

153
	g\xa3\xf9\xdc_buf\xe3r
[
KERNEL_ENTRY_OFFSET
 +
i
] =

154
\xa1\xa9ic_\xff\xa1
<
u8_t
>((
\x92\x8cy_po\x9at
 >> (
i
 * 8)) & 0xff);

162 
\xb7tch_drive_numb\x94
(
u8_t

drive_numb\x94
\xe8
	gn\xdbx\xfb\xb1
 {

163
	g\xa3\xf9\xdc_buf\xe3r
[
DRIVE_NUMBER_OFFSET
] =
drive_numb\x94
;

170 
wr\x99e_to_f\x9\x93
(cڡ
fs
::
\xb7th
 &
f\x9\x93_\xb7th
) const {

172
\xa1d
::
of\xa1\xbbam

f\x9\x93
(
f\x9\x93_\xb7th
, std::
ios
::
b\x9a\xacy
 | std::ios::
\x8cunc
);

173 i\xe0(!
	gf\x9\x93
.
is_ݒ
()) {

174
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
),

175 "Fa\x9eed\x81\xd8ݒ ou\x8du\x88f\x9ee: " +
f\x9\x93_\xb7th
);

179
	gf\x9\x93
.
wr\x99e
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
\xa3\xf9\xdc_buf\xe3r
.
d\xa9a
()),

180
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamsize
>(
\xa3\xf9\xdc_buf\xe3r
.
size
()));

182 i\xe0(!
	gf\x9\x93
.
good
()) {

183
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
io_\x94r\xdc
),

187
	gf\x9\x93
.
\xfeo\xa3
();

188 i\xe0(
	gf\x9\x93
.
\xe7\x9e
()) {

189
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
io_\x94r\xdc
),

198 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xa1r\x9ag

hexdump
() const {

199
\xa1d
::
\xa1r\x9ag

\xbbsu\xc9
;

200
	g\xbbsu\xc9
.
\xbb\xa3rve
(
SECTOR_SIZE
 * 4);

202 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	g\xa3\xf9\xdc_buf\xe3r
.
size
(); i += 16) {

204
\xbbsu\xc9
 +\xf0
\xa1d
::
to_\xa1r\x9ag
(
i
);

205
	g\xbbsu\xc9
 += ": ";

208 
	g\xa1d
::
size_t

j
 = 0;
	gj
 < 16 && (
	gi
 + j\xe8<
	g\xa3\xf9\xdc_buf\xe3r
.
size
(); ++j) {

209 i\xe0(
	gj
 == 8)

210
\xbbsu\xc9
 += " ";

212 cڡ\x87ut\xd8
	gby\x8b
 =
\xa3\xf9\xdc_buf\xe3r
[
i
 +
j
];

213
	g\xbbsu\xc9
 +\xf0"0123456789abcdef"[
by\x8b
 >> 4];

214
	g\xbbsu\xc9
 +\xf0"0123456789abcdef"[
by\x8b
 & 0xf];

215
	g\xbbsu\xc9
 += " ";

218
	g\xbbsu\xc9
 += "\n";

221 
	g\xbbsu\xc9
;

231 \xfeas\xa0
	cBo\xd9Se\xf9\xdcEx\x8\xff\xf9\xdc
 {

232
	gpublic
:

236 
ex\x8\xff\xf9
(cڡ
\xa1d
::
\xa1r\x9ag
 &
ou\x8dut_\xb7th
 = "bootblok",

237
\xddtiڮ
<
\xa1d
::
u\x9\xa932_t
>
k\x94\xc3l_lba
 = o\xb1iڮ<\xa1d::u\x9at32_t>::
nu\x\xfb\xddt
(),

238
\xddtiڮ
<
\xa1d
::
u\x9\xa964_t
>
k\x94\xc3l_\x92\x8cy
 = o\xb1iڮ<\xa1d::u\x9at64_t>::
nu\x\xfb\xddt
(),

239
\xddtiڮ
<
u8_t
>
drive_num
 = o\xb1iڮ<u8_t>::
nu\x\xfb\xddt
()) {

241
\x8cy
 {

242
Bo\xd9Se\xf9\xdc

bo\xd9_\xa3\xf9\xdc
;

245 i\xe0(
	gk\x94\xc3l_lba
) {

246
	gbo\xd9_\xa3\xf9\xdc
.
\xb7tch_k\x94\xc3l_lba
(*
k\x94\xc3l_lba
);

248 i\xe0(
	gk\x94\xc3l_\x92\x8cy
) {

249
	gbo\xd9_\xa3\xf9\xdc
.
\xb7tch_k\x94\xc3l_\x92\x8cy
(*
k\x94\xc3l_\x92\x8cy
);

251 i\xe0(
	gdrive_num
) {

252
	gbo\xd9_\xa3\xf9\xdc
.
\xb7tch_drive_numb\x94
(*
drive_num
);

256
	gbo\xd9_\xa3\xf9\xdc
.
wr\x99e_to_f\x9\x93
(
ou\x8dut_\xb7th
);

258
	g\xa1d
::
cout
 << "Bo\xd9 se\xf9܃x\x8ca\xf9ed\x81o: " <<
ou\x8dut_\xb7th
 << '\n';

259
	g\xa1d
::
cout
 << "Size: " <<
Bo\xd9Se\xf9\xdc
::
SECTOR_SIZE
 << " bytes\n";

261 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

262
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Bo\xd9 se\xf9܃x\x8ca\xf9i\xda fa\x9eed: " + std::
\xa1r\x9ag
(
e
.
wh\xa9
()));

269 
\xb4\x9at_u\xa7ge
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb4og\xbfm_\xc7me
\xe8
n\xdbx\xfb\xb1
 {

270
\xa1d
::
cout
 << "U\xa7ge: " <<
\xb4og\xbfm_\xc7me
 << " [output_file]\n"

291 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]\xe8
n\xdbx\xfb\xb1
 {

292
\x8cy
 {

293 i\xe0(
\xacgc
 > 2) {

294
m\x9aix
::
bo\xd9l\xdfd\x94
::
Bo\xd9Se\xf9\xdcEx\x8\xff\xf9\xdc
::
	`\xb4\x9\xa9_u\xa7ge
(
\xacgv
[0]);

298 cڡ
\xa1d
::
\xa1r\x9ag

ou\x8dut_f\x9\x93
 = (
\xacgc
 > 1\xe8?
\xacgv
[1] : "bootblok";

299
m\x9aix
::
bo\xd9l\xdfd\x94
::
Bo\xd9Se\xf9\xdcEx\x8\xff\xf9\xdc
::
	`ex\x8\xff\xf9
(
ou\x8dut_f\x9\x93
);

303 }
	`\xf\xe1ch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

304
\xa1d
::
\xfb\xbc
 << "E\xbc\xdc: " <<
e
.
	`wh\xa9
() << '\n';

306 }
	`\xf\xe1ch
 (...) {

307
\xa1d
::
\xfb\xbc
 << "Unknown\x83rror occurred\n";

310
	}
}

	@tools/build.cpp

45 
	~<\x\xabgܙhm
>

46 
	~<\xac\xbfy
>

47 
	~<c\xa1d\x9\xa9
>

48 
	~<f\xa1\xbbam
>

49 
	~<iom\x\xaf\x9d
>

50 
	~<io\xa1\xbbam
>

51 
	~<lim\x99s
>

52 
	~<mem\xdcy
>

53 
	~<\xa1dex\xfb\xb1
>

54 
	~<\xa1r\x9ag
>

55 
	~<\xa1r\x9ag_v\x9bw
>

56 
	~<sy\xa1em_\x94r\xdc
>

57 
	~<ve\xf9\xdc
>

59
\xc7me\xa5a\xfb

	gm\x9aix
::
bu\x9ed\x94
 {

68 
	sBy\x8bOff\xa3t
 {

69
\xa1d
::
size_t

v\x\xabue
;

76
ex\xb6ic\x99

By\x8bOff\xa3t
(
\xa1d
::
size_t

v\x\xab
\xe8:
v\x\xabue
(val) {}

83
ݔ\xa9\xdc

\xa1d
::
size_t
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
v\x\xabue
; }

93 
	sBu\x9edCڡ\x\xafts
 {

94 
cڡex\xb4

	g\xa1d
::
size_t

SECTOR_SIZE
 = 512;

95 
cڡex\xb4

	g\xa1d
::
size_t

PROGRAM_COUNT
 =

97 
cڡex\xb4

	g\xa1d
::
size_t

PROGRAM_ORIGIN
 = 1536;

98 
cڡex\xb4

	g\xa1d
::
size_t

CLICK_SHIFT
 = 4;

99 
cڡex\xb4

	g\xa1d
::
size_t

DS_OFFSET
 = 4;

102 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

KERNEL_DATA_MAGIC
 =

104 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

FS_DATA_MAGIC
 =

108 
cڡex\xb4

	g\xa1d
::
size_t

HEADER_SHORT
 = 32;

109 
cڡex\xb4

	g\xa1d
::
size_t

HEADER_LONG
 = 48;

110 
cڡex\xb4

	g\xa1d
::
size_t

SEP_ID_BIT
 =

114 
cڡex\xb4

	g\xa1d
::
u\x9\xa964_t

KERNEL_ENTRY
 = 0x00100000ULL;

123 \xfeas\xa0
	cProg\xbfmTy\xb3
 :
\xa1d
::
size_t
 {

124
KERNEL
 = 0,

125
	gMM
 = 1,

126
	gFS
 = 2,

127
	gINIT
 = 3,

128
	gFSCK
 = 4

138 
	sProg\xbfmInfo
 {

139
	g\xa1d
::
u\x9\xa932_t

\x8bxt_size
{0};

140
	g\xa1d
::
u\x9\xa932_t

d\xa9a_size
{0};

141
	g\xa1d
::
u\x9\xa932_t

bss_size
{0};

142
bo\xde

	g\xa3\xb7\xbf\x8b_id
{
	g\xe7l\xa3
};

143
	g\xa1d
::
\xa1r\x9ag

\xc7me
;

150 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

tٮ_size
(\xe8cڡ
n\xdbx\xfb\xb1
 {

151 
\x8bxt_size
 +
d\xa9a_size
 +
bss_size
;

160 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

\xaeig\xc3d_size
(\xe8cڡ
n\xdbx\xfb\xb1
 {

161 cڡ\x87ut\xd8
tٮ
 =
tٮ_size
();

162 cڡ\x87ut\xd8
	g\xbbma\x9ad\x94
 =
tٮ
 % 16;

163 
	gtٮ
 + (
	g\xbbma\x9ad\x94
 ? 16 -\x84emainder : 0);

172 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

\x8bxt_\xfeicks
(\xe8cڡ
n\xdbx\xfb\xb1
 {

173 
\xa3\xb7\xbf\x8b_id
 ? (
\x8bxt_size
 >>
Bu\x9edCڡ\x\xafts
::
CLICK_SHIFT
) : 0;

182 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

d\xa9a_\x\xe3icks
(\xe8cڡ
n\xdbx\xfb\xb1
 {

183 cڡ\x87ut\xd8
size
 =
\xa3\xb7\xbf\x8b_id
 ? (
d\xa9a_size
 +
bss_size
\xe8:
tٮ_size
();

184 
	gsize
 >>
	gBu\x9edCڡ\x\xafts
::
CLICK_SHIFT
;

195 \xfeas\xa0
	cSe\xf9\xdcBuf\xe3r
 {

196
	g\xb4iv\xa9e
:

197
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa98_t
,
	gBu\x9edCڡ\x\xafts
::
SECTOR_SIZE
>
buf\xe3r_
{};

198
	g\xa1d
::
size_t

u\xa3d_by\x8bs_
{0};

200
	gpublic
:

205
Se\xf9\xdcBuf\xe3r
() = ;

211 
\xfe\x97r
(\xe8
	gn\xdbx\xfb\xb1
 {

212
	gbuf\xe3r_
.
f\x9\x96
(0);

213
	gu\xa3d_by\x8bs_
 = 0;

221 [[
nodis\xf\xe4d
]]
bo\xde

is_fu\x\xfb
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

222 
	gu\xa3d_by\x8bs_
 >\xf0
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

230 [[
nodis\xf\xe4d
]]
bo\xde

is_em\xb1y
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gu\xa3d_by\x8bs_
 == 0; }

237 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

ava\x9\x97b\xcb
(\xe8cڡ
n\xdbx\xfb\xb1
 {

238 
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 -
u\xa3d_by\x8bs_
;

246 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

size
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
u\xa3d_by\x8bs_
; }

253 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
u\x9\xa98_t
 *
d\xa9a
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
buf\xe3r_
.data(); }

260 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t
 *
d\xa9a
(\xe8
n\xdbx\xfb\xb1
 { 
buf\xe3r_
.data(); }

270
	g\xa1d
::
size_t

wr\x99e
(cڡ
\xa1d
::
u\x9\xa98_t
 *
d\xa9a
, std::size_\x88
by\x8bs
) {

271 cڡ\x87ut\xd8
to_wr\x99e
 =
\xa1d
::
m\x9a
(
by\x8bs
,
ava\x9\x97b\xcb
());

272
	g\xa1d
::
c\xddy
(
d\xa9a
, d\xa9\xa8+
to_wr\x99e
,
buf\xe3r_
.d\xa9a(\xe8+
u\xa3d_by\x8bs_
);

273
	gu\xa3d_by\x8bs_
 +\xf0
to_wr\x99e
;

274 
	gto_wr\x99e
;

284 
\xa3t_by\x8b
(
\xa1d
::
size_t

off\xa3t
, std::
u\x9\xa98_t

v\x\xabue
) {

285 i\xe0(
off\xa3t
 <
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
) {

286
buf\xe3r_
[
off\xa3t
] =
v\x\xabue
;

296 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t

g\x91_by\x8b
(
\xa1d
::
size_t

off\xa3t
) const {

297 
off\xa3t
 <
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 ?
buf\xe3r_
[offset] : 0;

308 \xfeas\xa0
	cImageF\x9\x93
 {

309
	g\xb4iv\xa9e
:

310
\xa1d
::
f\xa1\xbbam

f\x9\x93_
;

311
	g\xa1d
::
size_t

cu\xbc\x92t_\xa3\xf9\xdc_
{0};

312
Se\xf9\xdcBuf\xe3r

	gbuf\xe3r_
;

320 
\xe6ush_buf\xe3r
() {

321 i\xe0(!
	gbuf\xe3r_
.
is_em\xb1y
()) {

322
wr\x99e_\xa3\xf9\xdc
(
cu\xbc\x92t_\xa3\xf9\xdc_
,
buf\xe3r_
);

323
	gbuf\xe3r_
.
\xfe\x97r
();

324 ++
	gcu\xbc\x92t_\xa3\xf9\xdc_
;

328
	gpublic
:

336
ex\xb6ic\x99

ImageF\x9\x93
(cڡ
\xa1d
::
\xa1r\x9ag
 &
\xb7th
) {

338
f\x9\x93_
.
ݒ
(
\xb7th
,
\xa1d
::
ios
::
b\x9a\xacy
 | std::ios::
\x9a
 | std::ios::
out
 | std::ios::
\x8cunc
);

339 i\xe0(!
	gf\x9\x93_
.
is_ݒ
()) {

340
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
),

341 "Fa\x9eed\x81\xd8\xfc\x97\x8b imag\x90f\x9ee: " +
\xb7th
);

350 ~
ImageF\x9\x93
() {

351
	g\x8cy
 {

352
\xe6ush_buf\xe3r
();

353 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &) {

355
\xa1d
::
\xfb\xbc
 << "Warning: Failed\x81o flush buffer in destructor\n";

367 
wr\x99e_d\xa9a
(cڡ
\xa1d
::
u\x9\xa98_t
 *
d\xa9a
, std::
size_t

size
) {

368
\xa1d
::
size_t

\xbbma\x9a\x9ag
 =
size
;

369 cڡ
	g\xa1d
::
u\x9\xa98_t
 *
\xb1r
 =
d\xa9a
;

371 
	g\xbbma\x9a\x9ag
 > 0) {

372 cڡ\x87ut\xd8
	gwr\x99\x8bn
 =
buf\xe3r_
.
wr\x99e
(
\xb1r
,
\xbbma\x9a\x9ag
);

373
	g\xb1r
 +\xf0
wr\x99\x8bn
;

374
	g\xbbma\x9a\x9ag
 -\xf0
wr\x99\x8bn
;

376 i\xe0(
	gbuf\xe3r_
.
is_fu\x\xfb
()) {

377
\xe6ush_buf\xe3r
();

390 
wr\x99e_\xa3\xf9\xdc
(
\xa1d
::
size_t

\xa3\xf9\xdc
, cڡ
Se\xf9\xdcBuf\xe3r
 &
d\xa9a
) {

391 i\xe0(
	g\xa3\xf9\xdc
 >
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
size_t
>(
\xa1d
::
num\x94ic_lim\x99s
<\xa1d::
\xa1\xbbamoff
>::
max
() /

392
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
)) {

393
throw

\xa1d
::
sy\xa1em_\x94r\xdc
(\xa1d::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
v\x\xabue_too_\xc\xe4ge
),

396 cڡ\x87ut\xd8
	gpos
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamoff
>(
\xa3\xf9\xdc
) *

397
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamoff
>(
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
);

398
	gf\x9\x93_
.
\xa3ekp
(
pos
);

399
	gf\x9\x93_
.
wr\x99e
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ *>(
d\xa9a
.data()),

400
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamsize
>(
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
));

401 i\xe0(!
	gf\x9\x93_
.
good
()) {

402
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
io_\x94r\xdc
),

403 "Fa\x9eed\x81\xd8wr\x99\x90\xa3\xf9\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\xa3\xf9\xdc
));

415 
\xbbad_\xa3\xf9\xdc
(
\xa1d
::
size_t

\xa3\xf9\xdc
,
Se\xf9\xdcBuf\xe3r
 &
d\xa9a
) {

416 i\xe0(
	g\xa3\xf9\xdc
 >
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
size_t
>(
\xa1d
::
num\x94ic_lim\x99s
<\xa1d::
\xa1\xbbamoff
>::
max
() /

417
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
)) {

418
throw

\xa1d
::
sy\xa1em_\x94r\xdc
(\xa1d::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
v\x\xabue_too_\xc\xe4ge
),

421 cڡ\x87ut\xd8
	gpos
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamoff
>(
\xa3\xf9\xdc
) *

422
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamoff
>(
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
);

423
	gf\x9\x93_
.
\xa3ekg
(
pos
);

424
	gf\x9\x93_
.
\xbbad
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
d\xa9a
.data()),

425
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamsize
>(
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
));

426 i\xe0(!
	gf\x9\x93_
.
good
()) {

427
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
io_\x94r\xdc
),

428 "Fa\x9eed\x81ػad se\xf9\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\xa3\xf9\xdc
));

440 
put_by\x8b
(
By\x8bOff\xa3t

off\xa3t
,
\xa1d
::
u\x9\xa98_t

v\x\xabue
) {

441 cڡ\x87ut\xd8
\xa3\xf9\xdc
 =
off\xa3t
.
v\x\xabue
 /
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

442 cڡ\x87ut\xd8
	gby\x8b_off\xa3t
 =
off\xa3t
.
v\x\xabue
 %
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

444
Se\xf9\xdcBuf\xe3r

	g\x8bmp
;

445
\xbbad_\xa3\xf9\xdc
(
\xa3\xf9\xdc
,
\x8bmp
);

446
	g\x8bmp
.
\xa3t_by\x8b
(
by\x8b_off\xa3t
,
v\x\xabue
);

447
wr\x99e_\xa3\xf9\xdc
(
\xa3\xf9\xdc
,
\x8bmp
);

457 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t

g\x91_by\x8b
(
By\x8bOff\xa3t

off\xa3t
) {

458 cڡ\x87ut\xd8
\xa3\xf9\xdc
 =
off\xa3t
.
v\x\xabue
 /
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

459 cڡ\x87ut\xd8
	gby\x8b_off\xa3t
 =
off\xa3t
.
v\x\xabue
 %
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

461
Se\xf9\xdcBuf\xe3r

	g\x8bmp
;

462
\xbbad_\xa3\xf9\xdc
(
\xa3\xf9\xdc
,
\x8bmp
);

463 
	g\x8bmp
.
g\x91_by\x8b
(
by\x8b_off\xa3t
);

472 
\xe6ush
() {

473
\xe6ush_buf\xe3r
();

474
	gf\x9\x93_
.
\xe6ush
();

483 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

cu\xbc\x92t_pos\x99i\xda
(\xe8cڡ
n\xdbx\xfb\xb1
 {

484 
cu\xbc\x92t_\xa3\xf9\xdc_
 *
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 +
buf\xe3r_
.
size
();

495 \xfeas\xa0
	cExecu\x8fb\xcbH\x97d\x94
 {

496
	g\xb4iv\xa9e
:

497
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa932_t
, 12>
	gh\x97d\x94_d\xa9a_
{};

499
	gpublic
:

507
ex\xb6ic\x99

Execu\x8fb\xcbH\x97d\x94
(
\xa1d
::
if\xa1\xbbam
 &
f\x9\x93
) {

509
\xa1d
::
\xac\xbfy
<\xa1d::
u\x9\xa916_t
, 4>
	g\x9a\x99\x9\xe6_d\xa9a
{};

510
	gf\x9\x93
.
\xbbad
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
\x9a\x99\x9fl_d\xa9a
.
d\xa9a
()), 8);

511 i\xe0(!
	gf\x9\x93
.
good
()) {

512
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
("Failed\x81o\x84ead\x83xecutable header");

515 cڡ\x87ut\xd8
	gh\x97d\x94_\xcbn
 =
\x9a\x99\x9fl_d\xa9a
[2];

516 i\xe0(
	gh\x97d\x94_\xcbn
 !\xf0
Bu\x9edCڡ\x\xafts
::
HEADER_SHORT
 &&

517
h\x97d\x94_\xcbn
 !\xf0
Bu\x9edCڡ\x\xafts
::
HEADER_LONG
) {

518
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Inv\xaeid h\x97d\x94\x86\x92gth: " + std::
to_\xa1r\x9ag
(
h\x97d\x94_\xcbn
));

522 cڡ\x87ut\xd8
	g\xbbma\x9a\x9ag
 =
h\x97d\x94_\xcbn
 - 8;

523
	gf\x9\x93
.
\xbbad
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
h\x97d\x94_d\xa9a_
.
d\xa9a
()),
\xbbma\x9a\x9ag
);

524 i\xe0(!
	gf\x9\x93
.
good
()) {

525
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
("Failed\x81o\x84ead complete header");

529
	g\xa1d
::
c\xddy
(
\x9a\x99\x9fl_d\xa9a
.
beg\x9a
(), in\x99\x9fl_d\xa9a.
\x92d
(),

530
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
 *>(
h\x97d\x94_d\xa9a_
.
d\xa9a
()));

539 [[
nodis\xf\xe4d
]]
bo\xde

is_\xa3\xb7\xbf\x8b_id
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

540 cڡ\x87ut\xd8*
	ghd
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa916_t
 *>(
h\x97d\x94_d\xa9a_
.
d\xa9a
());

541  (
	ghd
[1] &
	gBu\x9edCڡ\x\xafts
::
SEP_ID_BIT
) != 0;

550 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

\x8bxt_size
(\xe8cڡ
n\xdbx\xfb\xb1
 {

551 
h\x97d\x94_d\xa9a_
[2];

560 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

d\xa9a_size
(\xe8cڡ
n\xdbx\xfb\xb1
 {

561 
h\x97d\x94_d\xa9a_
[3];

570 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

bss_size
(\xe8cڡ
n\xdbx\xfb\xb1
 {

571 
h\x97d\x94_d\xa9a_
[4];

582 \xfeas\xa0
	cBo\xd9ImageBu\x9ed\x94
 {

583
	g\xb4iv\xa9e
:

584
\xa1d
::
\xac\xbfy
<
Prog\xbfmInfo
,
	gBu\x9edCڡ\x\xafts
::
PROGRAM_COUNT
>

585
\xb4og\xbfms_
;

586
	g\xa1d
::
unique_\xb1r
<
ImageF\x9\x93
>
image_
;

587
	g\xa1d
::
u\x9\xa964_t

os_size_
{0};

588
	g\xa1d
::
u\x9\xa964_t

tٮ_size_
{0};

591 
cڡex\xb4

	g\xa1d
::
\xac\xbfy
<cڡ *, 5>
	g\xb4og\xbfm_\xc7mes_
 = {"kernel", "mm", "fs", "init",

602 
c\xddy_bo\xd9block
(cڡ
\xa1d
::
\xa1r\x9ag
 &
bo\xd9block_\xb7th
) {

603
\xa1d
::
if\xa1\xbbam

f\x9\x93
(
bo\xd9block_\xb7th
, std::
ios
::
b\x9a\xacy
);

604 i\xe0(!
	gf\x9\x93
.
is_ݒ
()) {

605
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
),

606 "C\xaan\xd9 o\xb3\xc0bo\xd9block: " +
bo\xd9block_\xb7th
);

609
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa98_t
,
	gBu\x9edCڡ\x\xafts
::
SECTOR_SIZE
>
buf\xe3r
{};

610
	gf\x9\x93
.
\xbbad
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
buf\xe3r
.
d\xa9a
()),
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
);

611 cڡ\x87ut\xd8
	gby\x8bs_\xbbad
 =
f\x9\x93
.
gcou\xc1
();

613 i\xe0(
	gby\x8bs_\xbbad
 <= 0) {

614
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Empty bootblock file");

617
	gimage_
->
wr\x99e_d\xa9a
(
buf\xe3r
.
d\xa9a
(),
by\x8bs_\xbbad
);

630 
c\xddy_\xb4og\xbfm
(
Prog\xbfmTy\xb3

ty\xb3
, cڡ
\xa1d
::
\xa1r\x9ag
 &
\xb4og\xbfm_\xb7th
) {

631 cڡ\x87ut\xd8
\x9adex
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
ty\xb3
);

632 aut\xd8&
	g\xb4og
 =
\xb4og\xbfms_
[
\x9adex
];

633
	g\xb4og
.
	g\xc7me
 =
\xb4og\xbfm_\xc7mes_
[
\x9adex
];

635
	g\xa1d
::
if\xa1\xbbam

f\x9\x93
(
\xb4og\xbfm_\xb7th
,
\xa1d
::
ios
::
b\x9a\xacy
);

636 i\xe0(!
	gf\x9\x93
.
is_ݒ
()) {

637
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
),

638 "C\xaan\xd9 o\xb3\xc0\xb4og\xbfm: " +
\xb4og\xbfm_\xb7th
);

641
Execu\x8fb\xcbH\x97d\x94

h\x97d\x94
(
f\x9\x93
);

642
	g\xb4og
.
	g\x8bxt_size
 =
h\x97d\x94
.
\x8bxt_size
();

643
	g\xb4og
.
	gd\xa9a_size
 =
h\x97d\x94
.
d\xa9a_size
();

644
	g\xb4og
.
	gbss_size
 =
h\x97d\x94
.
bss_size
();

645
	g\xb4og
.
	g\xa3\xb7\xbf\x8b_id
 =
h\x97d\x94
.
is_\xa3\xb7\xbf\x8b_id
();

648 i\xe0(
	g\xb4og
.
	g\xa3\xb7\xbf\x8b_id
 && (\xb4og.
	g\x8bxt_size
 % 16) != 0) {

649
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Separate I&D\x84equires 16-byte\x87ligned\x81ext size in " +

650
\xb4og\xbfm_\xb7th
);

653 cڡ\x87ut\xd8
	gtٮ
 =
\xb4og
.
tٮ_size
();

654 cڡ\x87ut\xd8
	g\xbbma\x9ad\x94
 =
tٮ
 % 16;

655 cڡ\x87ut\xd8
	gf\x9e\xcbr
 =
\xbbma\x9ad\x94
 ? 16 -\x84emainder : 0;

656
	g\xb4og
.
	gbss_size
 +\xf0
f\x9e\xcbr
;

658 cڡ\x87ut\xd8
	gf\x9a\x\xab_size
 =
\xb4og
.
\xaeig\xc3d_size
();

659 i\xe0(
	gty\xb3
 !\xf0
Prog\xbfmTy\xb3
::
FSCK
) {

660
os_size_
 +\xf0
f\x9a\x\xab_size
;

662
	gtٮ_size_
 +\xf0
f\x9a\x\xab_size
;

665 i\xe0(
	gty\xb3
 !\xf0
Prog\xbfmTy\xb3
::
FSCK
) {

666
\xa1d
::
cout
 << std::
\xa3tw
(8\xe8<<
\xb4og
.
\xc7me
 << "\x81ext=" << std::\xa3tw(5\xe8<<\x85rog.
\x8bxt_size


667 << " d\xa9a=" <<
\xa1d
::
\xa3tw
(5\xe8<<
\xb4og
.
d\xa9a_size
 << " bss=" << std::setw(5)

668 <<
\xb4og
.
bss_size
 << "\x81\xd9=" <<
\xa1d
::
\xa3tw
(5\xe8<<
f\x9a\x\xab_size


669 << " hex=" <<
\xa1d
::
\xa3tw
(4\xe8<< std::
hex
 <<
f\x9a\x\xab_size
 << std::
dec


670 << (
\xb4og
.
\xa3\xb7\xbf\x8b_id
 ? " Separate I & D" : "") << '\n';

674 cڡ\x87ut\xd8
	gcode_size
 =
\xb4og
.
\x8bxt_size
 +\x85rog.
d\xa9a_size
;

675
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
u\x9\xa98_t
>
code_buf\xe3r
(
code_size
);

676
	gf\x9\x93
.
\xbbad
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<*>(
code_buf\xe3r
.
d\xa9a
()),
code_size
);

677 i\xe0(
	gf\x9\x93
.
gcou\xc1
(\xe8!\xf0
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\xa1\xbbamsize
>(
code_size
)) {

678
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Fa\x9eed\x81ػad\x85rog\xbfm cod\x90\xe4om " +
\xb4og\xbfm_\xb7th
);

681
	gimage_
->
wr\x99e_d\xa9a
(
code_buf\xe3r
.
d\xa9a
(),
code_size
);

684
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
u\x9\xa98_t
>
bss_buf\xe3r
(
\xb4og
.
bss_size
, 0);

685
	gimage_
->
wr\x99e_d\xa9a
(
bss_buf\xe3r
.
d\xa9a
(),
\xb4og
.
bss_size
);

698 
\xb7tch_bo\xd9block
() {

699 cڡ\x87ut\xd8
	g\xa3\xf9\xdcs
 =

700 (
tٮ_size_
 +
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 - 1) / BuildConstants::SECTOR_SIZE;

702
Se\xf9\xdcBuf\xe3r

	gbo\xd9_\xa3\xf9\xdc
;

703
	gimage_
->
\xbbad_\xa3\xf9\xdc
(0,
bo\xd9_\xa3\xf9\xdc
);

706 cڡ\x87ut\xd8
	g\x92\x8cy
 =
Bu\x9edCڡ\x\xafts
::
KERNEL_ENTRY
;

707 cڡ\x87ut\xd8
	gba\xa3_off\xa3t
 =
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 - 8;

709 aut\xd8*
	gd\xa9a
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
 *>(
bo\xd9_\xa3\xf9\xdc
.
d\xa9a
());

710
	gd\xa9a
[(
ba\xa3_off\xa3t
 / 2\xe8+ 0] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
>(
\xa3\xf9\xdcs
 + 1);

711
	gd\xa9a
[(
ba\xa3_off\xa3t
 / 2\xe8+ 1] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
>(
\x92\x8cy
 & 0xFFFF);

712
	gd\xa9a
[(
ba\xa3_off\xa3t
 / 2\xe8+ 2] =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
>((
\x92\x8cy
 >> 16) & 0xFFFF);

713
	gd\xa9a
[(
ba\xa3_off\xa3t
 / 2) + 3] = 0;

715
	gimage_
->
wr\x99e_\xa3\xf9\xdc
(0,
bo\xd9_\xa3\xf9\xdc
);

727 
\xb7tch_k\x94\xc3l_\x8fb\xcb
() {

729 cڡ\x87ut\xd8
	gd\xa9a_off\xa3t
 =
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 +
\xb4og\xbfms_
[0].
\x8bxt_size
;

732 cڡ\x87ut\xd8
	gmagic
 =

733 (
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
>(
image_
->
g\x91_by\x8b
(
By\x8bOff\xa3t
(
d\xa9a_off\xa3t
 + 1))) << 8) |

734
image_
->
g\x91_by\x8b
(
By\x8bOff\xa3t
(
d\xa9a_off\xa3t
));

735 i\xe0(
	gmagic
 !\xf0
Bu\x9edCڡ\x\xafts
::
KERNEL_DATA_MAGIC
) {

736
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Kernel data magic\x82umber\x82ot found");

740 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gBu\x9edCڡ\x\xafts
::
PROGRAM_COUNT
 - 1; ++i) {

741 cڡ\x87ut\xd8&
	g\xb4og
 =
\xb4og\xbfms_
[
i
];

742 cڡ\x87ut\xd8
	g\x8bxt_\x\xe3icks
 =
\xb4og
.
\x8bxt_\xfeicks
();

743 cڡ\x87ut\xd8
	gd\xa9a_\x\xe3icks
 =
\xb4og
.
d\xa9a_\x\xe3icks
();

745 cڡ\x87ut\xd8
	goff\xa3t
 =
d\xa9a_off\xa3t
 + 4 *
i
;

746
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
off\xa3t
 + 0),
\x8bxt_\xfeicks
 & 0xFF);

747
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
off\xa3t
 + 1), (
\x8bxt_\xfeicks
 >> 8) & 0xFF);

748
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
off\xa3t
 + 2),
d\xa9a_\x\xe3icks
 & 0xFF);

749
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
off\xa3t
 + 3), (
d\xa9a_\x\xe3icks
 >> 8) & 0xFF);

753 cڡ\x87ut\xd8
	gk\x94\xc3l_ds
 =
\xb4og\xbfms_
[0].
\xa3\xb7\xbf\x8b_id


754 ? (
Bu\x9edCڡ\x\xafts
::
PROGRAM_ORIGIN
 +
\xb4og\xbfms_
[0].
\x8bxt_size
) >>

755
Bu\x9edCڡ\x\xafts
::
CLICK_SHIFT


756 :
Bu\x9edCڡ\x\xafts
::
PROGRAM_ORIGIN
 >> Bu\x9edCڡ\xaats::
CLICK_SHIFT
;

758 cڡ\x87ut\xd8
	gds_off\xa3t
 =
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
 + Bu\x9edCڡ\xaats::
DS_OFFSET
;

759
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
ds_off\xa3t
),
k\x94\xc3l_ds
 & 0xFF);

760
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
ds_off\xa3t
 + 1), (
k\x94\xc3l_ds
 >> 8) & 0xFF);

772 
\xb7tch_fs_\x9a\x99_\x9afo
() {

774 aut\xd8
	gfs_off\xa3t
 =
Bu\x9edCڡ\x\xafts
::
SECTOR_SIZE
;

775
	gfs_off\xa3t
 +\xf0
\xb4og\xbfms_
[0].
\xaeig\xc3d_size
();

776
	gfs_off\xa3t
 +\xf0
\xb4og\xbfms_
[1].
\x8bxt_size
;

779 cڡ\x87ut\xd8
	gmagic
 =

780 (
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa916_t
>(
image_
->
g\x91_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 1))) << 8) |

781
image_
->
g\x91_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
));

782 i\xe0(
	gmagic
 !\xf0
Bu\x9edCڡ\x\xafts
::
FS_DATA_MAGIC
) {

783
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("File system data magic\x82umber\x82ot found");

787 aut\xd8
	g\x9a\x99_\xdcg
 =
Bu\x9edCڡ\x\xafts
::
PROGRAM_ORIGIN
;

788
	g\x9a\x99_\xdcg
 +\xf0
\xb4og\xbfms_
[0].
\xaeig\xc3d_size
();

789
	g\x9a\x99_\xdcg
 +\xf0
\xb4og\xbfms_
[1].
\xaeig\xc3d_size
();

790
	g\x9a\x99_\xdcg
 +\xf0
\xb4og\xbfms_
[2].
\xaeig\xc3d_size
();

792 cڡ\x87ut\xd8
	g\x9a\x99_\xdcg_\x\xe3icks
 =
\x9a\x99_\xdcg
 >>
Bu\x9edCڡ\x\xafts
::
CLICK_SHIFT
;

793 cڡ\x87ut\xd8
	g\x9a\x99_\x8bxt_\x\xe3icks
 =
\xb4og\xbfms_
[3].
\x8bxt_\xfeicks
();

794 cڡ\x87ut\xd8
	g\x9a\x99_d\xa9a_\x\xe3icks
 =
\xb4og\xbfms_
[3].
d\xa9a_\x\xe3icks
();

797
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 4),
\x9a\x99_\xdcg_\xfeicks
 & 0xFF);

798
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 5), (
\x9a\x99_\xdcg_\xfeicks
 >> 8) & 0xFF);

799
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 6),
\x9a\x99_\x8bxt_\xfeicks
 & 0xFF);

800
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 7), (
\x9a\x99_\x8bxt_\xfeicks
 >> 8) & 0xFF);

801
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 8),
\x9a\x99_d\xa9a_\xfeicks
 & 0xFF);

802
	gimage_
->
put_by\x8b
(
By\x8bOff\xa3t
(
fs_off\xa3t
 + 9), (
\x9a\x99_d\xa9a_\xfeicks
 >> 8) & 0xFF);

805
	gpublic
:

813
ex\xb6ic\x99

Bo\xd9ImageBu\x9ed\x94
(cڡ
\xa1d
::
\xa1r\x9ag
 &
ou\x8dut_\xb7th
) {

814
image_
 =
\xa1d
::
make_unique
<
ImageF\x9\x93
>(
ou\x8dut_\xb7th
);

830 
bu\x9ed
(cڡ
\xa1d
::
ve\xf9\xdc
<\xa1d::
\xa1r\x9ag
> &
\x9aput_f\x9ees
) {

831 i\xe0(
\x9aput_f\x9ees
.
size
() != 6) {

832
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Expected 6 input files");

835
	g\xa1d
::
cout
 << "Building MINIX boot image...\n\n";

838
c\xddy_bo\xd9block
(
\x9aput_f\x9ees
[0]);

841 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gBu\x9edCڡ\x\xafts
::
PROGRAM_COUNT
; ++i) {

842
c\xddy_\xb4og\xbfm
(
\xa1\xa9ic_\xff\xa1
<
Prog\xbfmTy\xb3
>(
i
),
\x9aput_f\x9ees
[i + 1]);

845
	gimage_
->
\xe6ush
();

848
	g\xa1d
::
cout
 << " ----- -----\n";

849
	g\xa1d
::
cout
 << "O\xb3\xbft\x9ag sy\xa1em siz\x90 " <<
\xa1d
::
\xa3tw
(29\xe8<<
os_size_
 << " "

850 <<
\xa1d
::
\xa3tw
(5\xe8<< std::
hex
 <<
os_size_
 << std::
dec
 << '\n';

851
	g\xa1d
::
cout
 << "\nTٮ siz\x90\x9a\xfeud\x9ag fsck i\xa0" <<
tٮ_size_
 << ".\n\n";

854
	g\xa1d
::
cout
 << "Applying\x85atches...\n";

855
\xb7tch_bo\xd9block
();

856
\xb7tch_k\x94\xc3l_\x8fb\xcb
();

857
\xb7tch_fs_\x9a\x99_\x9afo
();

859
	g\xa1d
::
cout
 << "Boot image successfully created.\n";

868 \xfeas\xa0
	cArgum\x92tP\xac\xa3r
 {

869
	gpublic
:

873 
	sArgum\x92ts
 {

874
\xa1d
::
\xa1r\x9ag

ou\x8dut_f\x9\x93
;

875
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
\xa1r\x9ag
>
\x9aput_f\x9ees
;

889 
Argum\x92ts

\xb7r\xa3
(
\xacgc
, *
\xacgv
[]) {

890 i\xe0(
	g\xacgc
 != 8) {

891
\xb4\x9at_u\xa7ge
(
\xacgv
[0]);

892
throw

	g\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Invalid\x82umber of\x87rguments");

895
Argum\x92ts

	g\xacgs
;

896
	g\xacgs
.
	gou\x8dut_f\x9\x93
 =
\xacgv
[7];

898 
	gi
 = 1; i < 7; ++i) {

899
	g\xacgs
.
	g\x9\xadut_f\x9\x93s
.
em\xb6a\xfb_back
(
\xacgv
[
i
]);

902
	g\xa1d
::
if\xa1\xbbam

\x8b\xa1_f\x9ee
(
\xacgs
.
\x9aput_f\x9ees
.
back
());

903 i\xe0(!
	g\x8b\xa1_f\x9\x93
.
good
()) {

904
throw

	g\xa1d
::
sy\xa1em_\x94r\xdc
(

905
\xa1d
::
make_\x94r\xdc_code
(\xa1d::
\x94rc
::
no_such_f\x9\x93_\xdc_d\x9\xfb\xf9\xdcy
),

906 "I\xc5u\x88f\x9e\x90n\xd9 found: " +
\xacgs
.
\x9aput_f\x9ees
.
back
());

910 
	g\xacgs
;

913
	g\xb4iv\xa9e
:

920 
\xb4\x9at_u\xa7ge
(cڡ *
\xb4og\xbfm_\xc7me
) {

921
\xa1d
::
cout
 << "U\xa7ge: " <<
\xb4og\xbfm_\xc7me


952 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]\xe8
n\xdbx\xfb\xb1
 {

953
\x8cy
 {

954 cڡ\x87ut\xd8
\xacgs
 =
m\x9aix
::
bu\x9ed\x94
::
Argum\x92tP\xac\xa3r
::
	`\xb7r\xa3
(
\xacgc
,
\xacgv
);

956
m\x9aix
::
bu\x9ed\x94
::
Bo\xd9ImageBu\x9ed\x94

	`bu\x9ed\x94
(
\xacgs
.
ou\x8dut_f\x9\x93
);

957
bu\x9ed\x94
.
	`bu\x9ed
(
\xacgs
.
\x9aput_f\x9ees
);

961 }
	`\xf\xe1ch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

962
\xa1d
::
\xfb\xbc
 << "E\xbc\xdc: " <<
e
.
	`wh\xa9
() << '\n';

964 }
	`\xf\xe1ch
 (...) {

965
\xa1d
::
\xfb\xbc
 << "Unknown\x83rror occurred\n";

968
	}
}

	@tools/c86/dos2out.cpp

41 
	#D_FMT_SIZE
 28

	)

42 
	#IS_EXE
 0x5A4D

	)

46 
	sd_\xbblo\xf9ab
 {

47 
	mr_off\xa3t
;

48 
	mr_\xa3gm\x92t
;

54 
	sd_fmt_hdr
 {

55 
	mldsign
;

56 
	mϡ_\xb7ge_size
;

57 
	m\xc4_of_\xb7ges
;

58 
	m\xc4_of_\xbblocs
;

59 
	mhdr_size
;

60 
	mm\x9a_\xe4\x93
;

61 
	mmax_\xe4\x93
;

62 
	mss_\xa3g
;

63 
	m\xa5_\xbbg
;

64 
	mchksum
;

65 
	m\x9d_\xbbg
;

66 
	mcs_\xa3g
;

67 
	m\xbbloc_\x8fb\xcb
;

68 
	mov\x94\xcfy_num
;

71 
	#MAGIC0
 0x01

	)

72 
	#MAGIC1
 0x03

	)

73 
	#A_SEP
 0x20

	)

74 
	#A_EXEC
 0x10

	)

75 
	#A_I8086
 0x04

	)

76 
	#A_HDR_LEN
 32

	)

77 
	#DOS
 0xFFFF

	)

80 
	sa_out_hdr
 {

81 
	ma_magic
[2];

82 
	ma_\xe6ags
;

83 
	ma_\xfdu
;

84 
	ma_hd\xbe\x92
;

85 
	ma_unu\xa3d
;

86 
	ma_v\x94si\xda
;

87 
	ma_\x8bxt
;

88 
	ma_d\xa9a
;

89 
	ma_bss
;

90 
	ma_\x92\x8cy
;

91 
	ma_t\xd9b
;

92 
	ma_syms
;

97 
	#A_BLR
(
\xfduty\xb3
\xe8((\xfduty\xb3&0x01)!=0\xe8

	)

98 
	#A_WLR
(
\xfduty\xb3
\xe8((\xfduty\xb3&0x02)!=0\xe8

	)

101 
	~"/lib/C86/\xa1dio.h
"

104 
	#PH_SECTSIZE
 512

	)

105 
	#NOT_A_HDR_LEN
 (
PH_SECTSIZE
-
A_HDR_LEN
\xe8

	)

106 
	#FNAME
 32

	)

109 
	g\x9abuf
[
PH_SECTSIZE
];

110 
	g\x9abuf2
[
PH_SECTSIZE
];

111 
	goutbuf
[
PH_SECTSIZE
];

113 
a_out_hdr
 *
	ga_\xb1r
\xf0
outbuf
;

114 
d_fmt_hdr
 *
	gd_\xb1r
\xf0
\x9abuf
;

117
	$ma\x9a
 (
\xacgc
,
\xacgv
)

118 
\xacgc
;

119 *
\xacgv
[];

121 *
d\xb1r
,

122 *
\xa5\x8c
,

123
\x9a_\xc7me
[
FNAME
],

124
out_\xc7me
[
FNAME
];

125 
i
;

126 
\x9a_\xfat
,

127
out_\x\xe7t
,

128
block_\x\xe7t
,

129
ϡp_\x\xe7t
,

130
\x9af
,
outf
,

131
\xb4\x9at
=0,

132
d\x96\x91e
=0,

133
sym
,

134
sym_blk
,
sym_off
;

135 
d_size
,

136
t_size
,

137
l\xdfd_size
;

145 i\xe0(
\xacgc
<2 ||\x87rgc>3) {

146
	`\xb4\x9\xa9f
 ("usage: dos2out [-pd] fname[.ext]\n");

147
	`ex\x99
 (2);

150 --
\xacgc
)

151 
\xacgv
[
\xacgc
][0]) {

152 '-': *++
\xacgv
[
\xacgc
])

153 *
\xacgv
[
\xacgc
] & ~32) {

154 'P' :
\xb4\x9at
=1; ;

155 'D' :
d\x96\x91e
 =1; ;

157
	`\xb4\x9\xa9f
 ("Bad sw\x99ch %c, ign\xdced\n",*
\xacgv
[
\xacgc
]);

162
d\xb1r
=
\x9a_\xc7me
;
\xa5\x8c
=
out_\xc7me
;

163 *
\xacgv
[
\xacgc
] && *argv[argc]!='.') {

164 *
d\xb1r
++ = *
\xacgv
[
\xacgc
];

165 *
\xa5\x8c
++ = *
\xacgv
[
\xacgc
]++;

168 i\xe0(*
\xacgv
[
\xacgc
]=='.') {

169 *
\xacgv
[
\xacgc
]\xe8*
d\xb1r
++ = *argv[argc]++;

170 *
d\xb1r
=0;

173 *
d\xb1r
=0;

174
	`\xa1r\xf\xe1
(
d\xb1r
,".exe");

176 *
\xa5\x8c
=0;

177
	`\xa1r\xf\xe1
(
\xa5\x8c
,".out");

181 i\xe0((
\x9af
=
	`ݒ
(
\x9a_\xc7me
,
BREAD
)) <0) {

182
	`\xb4\x9\xa9f
 ("\x9apu\x88f\x9e\x90%\xa0n\xd9 found\n",
\x9a_\xc7me
);

183
	`ex\x99
(2);

188 i\xe0((
\x9a_\xfat
=
	`\xbbad
(
\x9af
,
\x9abuf
,
PH_SECTSIZE
))!=PH_SECTSIZE) {

189
	`\xb4\x9\xa9f
 ("\xbbad %d by\x8bs, should b\x90%d -\x87b\xdct\n",
\x9a_\xfat
,
PH_SECTSIZE
);

190
	`ex\x99
(2);

192 i\xe0(
d_\xb1r
->
ldsign
!=
IS_EXE
) {

193
	`\xb4\x9\xa9f
 ("not\x87 valid .exe file - stop\n");

194
	`ex\x99
(2);

196 i\xe0(
d_\xb1r
->
\xc4_of_\xbblocs
>1) {

197
	`\xb4\x9\xa9f
 ("Too many\x84elocations - stop\n");

198
	`ex\x99
(2);

201 i\xe0(
d_\xb1r
->
\xc4_of_\xbblocs
<1) {

202
	`\xb4\x9\xa9f
 ("Exactly one\x84elocation item\x84equired - can't\x85rocess\n");

203
	`ex\x99
(2);

205 i\xe0(
d_\xb1r
->
\x9d_\xbbg
) {

206
	`\xb4\x9\xa9f
 ("Warning -\x85rogram\x83ntry\x85oint\x82ot\x87t zero\n");

211 i\xe0((
outf
=
	`\xfc\x97t
(
out_\xc7me
,
BWRITE
)) <0) {

212
	`\xb4\x9\xa9f
 ("\xff\xc2\xd9 o\xb3\xc0ou\x8du\x88%s\n",
out_\xc7me
);

213
	`ex\x99
(2);

220
sym
 = (\xe8
\x9abuf
[
d_\xb1r
->
\xbbloc_\x8fb\xcb
+1] << 8;

221
sym
 +\xf0(\xe8
\x9abuf
[
d_\xb1r
->
\xbbloc_\x8fb\xcb
];

222
sym_blk
 =
sym
 /
PH_SECTSIZE
;

223
sym_off
 =
sym
 %
PH_SECTSIZE
;

226 
sym_blk
>=0) {

227
	`\xbbad
(
\x9af
,
\x9abuf2
,
PH_SECTSIZE
);

228
sym_blk
--;

232
t_size
 =
\x9abuf2
[
sym_off
+1] << 8;

233
t_size
+\xf0
\x9abuf2
[
sym_off
];

234
t_size
 <<= 4;

235
l\xdfd_size
 = (
d_\xb1r
->
\xc4_of_\xb7ges
-2\xe8*
PH_SECTSIZE
 +

236
d_\xb1r
->
ϡ_\xb7ge_size
;

237
d_size
 =
l\xdfd_size
 -
t_size
;

240
	`\x\xe3o\xa3
 (
\x9af
);

241
\x9af
=
	`ݒ
(
\x9a_\xc7me
,
BREAD
);

242
\x9a_\xfat
=
	`\xbbad
(
\x9af
,
\x9abuf2
,
PH_SECTSIZE
);

245
a_\xb1r
->
a_magic
[0] =
MAGIC0
;

246
a_\xb1r
->
a_magic
[1] =
MAGIC1
;

247
a_\xb1r
->
a_\xe6ags
 =
A_SEP
;

248
a_\xb1r
->
a_\xfdu
 =
A_I8086
;

249
a_\xb1r
->
a_hd\xbe\x92
 =
A_HDR_LEN
;

250
a_\xb1r
->
a_syms
 = 0;

251
a_\xb1r
->
a_unu\xa3d
 = 0;

252
a_\xb1r
->
a_v\x94si\xda
 =
DOS
;

253
a_\xb1r
->
a_d\xa9a
 =
d_size
;

254
a_\xb1r
->
a_\x8bxt
 =
t_size
;

255
a_\xb1r
->
a_bss
 = (
d_\xb1r
->
m\x9a_\xe4\x93
<<4\xe8- d_\xb1r->
\xa5_\xbbg
;

256
a_\xb1r
->
a_\x92\x8cy
 =
d_\xb1r
->
\x9d_\xbbg
;

257
a_\xb1r
->
a_t\xd9b
 =\x87_\xb1r->
a_\x8bxt
 +\x87_\xb1r->
a_bss
 +

258
a_\xb1r
->
a_d\xa9a
 +
d_\xb1r
->
\xa5_\xbbg
;

260 i\xe0(
\xb4\x9at
\xe8
	`\xb4\x9\xa9\x9afo
();

264
block_\x\xe7t
 =
d_\xb1r
->
\xc4_of_\xb7ges
-1;

265
ϡp_\x\xe7t
 =
d_\xb1r
->
ϡ_\xb7ge_size
;

266 
block_\x\xe7t
--) {

268 i\xe0((
\x9a_\xfat
=
	`\xbbad
(
\x9af
,
\x9abuf
,
PH_SECTSIZE
))!=PH_SECTSIZE)

269 i\xe0(
block_\x\xe7t
 || (!block_\xfa\x88&&
\x9a_\xfat
<
ϡp_\x\xe7t
)) {

270
	`\xb4\x9\xa9f
 ("read %d bytes, should be %d -\x87bort\n",

271
\x9a_\xfat
,(
block_\x\xe7t
 ?
PH_SECTSIZE
 :
ϡp_\x\xe7t
));

272
	`ex\x99
(2);

274
i
 = (!
block_\x\xe7t
 &&
ϡp_\x\xe7t
<
NOT_A_HDR_LEN
 ?

275
ϡp_\x\xe7t
 :
NOT_A_HDR_LEN
);

276
d\xb1r
 = &
outbuf
[
A_HDR_LEN
];

277
\xa5\x8c
 =
\x9abuf
;

278 
i
--\xe8*
d\xb1r
++ = *
\xa5\x8c
++;

280
i
 = (!
block_\x\xe7t
 &&
ϡp_\x\xe7t
<
NOT_A_HDR_LEN
 ?

281
ϡp_\x\xe7t
+
A_HDR_LEN
 :
PH_SECTSIZE
);

282 i\xe0((
out_\x\xe7t
=
	`wr\x99e
(
outf
,
outbuf
,
i
)) != i) {

283
	`\xb4\x9\xa9f
 ("wrِ%d by\x8bs, should b\x90%d -\x87b\xdct\n",
out_\x\xe7t
,
i
);

284
	`ex\x99
(2);

287
i
 = (i<
PH_SECTSIZE
 ? 0 :

288 (!
block_\x\xe7t
 ?
ϡp_\x\xe7t
-
NOT_A_HDR_LEN
 :
A_HDR_LEN
));

289
d\xb1r
 =
outbuf
;

290 
i
--\xe8*
d\xb1r
++ = *
\xa5\x8c
++;

294 i\xe0(
out_\x\xe7t
==
PH_SECTSIZE
) {

295
i
 =
ϡp_\x\xe7t
-
NOT_A_HDR_LEN
;

296 i\xe0((
out_\x\xe7t
=
	`wr\x99e
(
outf
,
outbuf
,
i
)) != i) {

297
	`\xb4\x9\xa9f
("wr\x99\x90\x94r܆a\xa1 block: %d, should b\x90%d\n",
out_\x\xe7t
,
i
);

298
	`ex\x99
(2);

301
	`\x\xe3o\xa3
 (
outf
);

302
	`\x\xe3o\xa3
 (
\x9af
);

303 i\xe0(
d\x96\x91e
\xe8
	`uƚk
 (
\x9a_\xc7me
);

304
	`\xb4\x9\xa9f
(" -done-\n");

305
	}
}

309
	$\xb4\x9\xa9\x9afo
 ()

311
	`\xb4\x9\xa9f
 ("\n\nDOS-header:\n");

312
	`\xb4\x9\xa9f
 ("\x82r of\x85ages: %4xh (%4d dec)\n",

313
d_\xb1r
->
\xc4_of_\xb7ges
, d_ptr->nr_of_pages);

314
	`\xb4\x9\xa9f
 (" bytes in\x86ast\x85age: %4xh (%4d dec)\n",

315
d_\xb1r
->
ϡ_\xb7ge_size
, d_ptr->last_page_size);

316
	`\xb4\x9\xa9f
 (" min. free mem *16: %4xh (%4d dec)\n",

317
d_\xb1r
->
m\x9a_\xe4\x93
, d_ptr->min_free);

318
	`\xb4\x9\xa9f
 (" stack-size: %4xh (%4d dec)\n",

319
d_\xb1r
->
ss_\xa3g
, d_ptr->ss_seg);

320
	`\xb4\x9\xa9f
 (" stack-pointer val: %4xh (%4d dec)\n",

321
d_\xb1r
->
\xa5_\xbbg
, d_ptr->sp_reg);

322
	`\xb4\x9\xa9f
 ("\x85rogram\x83ntry-point: %4xh (%4d dec)\n",

323
d_\xb1r
->
\x9d_\xbbg
, d_ptr->ip_reg);

324
	`\xb4\x9\xa9f
 (" code-segment val: %4xh (%4d dec)\n",

325
d_\xb1r
->
cs_\xa3g
, d_ptr->cs_seg);

327
	`\xb4\x9\xa9f
 ("\n\nOUT-header:\n");

328
	`\xb4\x9\xa9f
 ("\x81ext-size: %6lxh (%6ld dec)\n",

329
a_\xb1r
->
a_\x8bxt
,\x87_ptr->a_text);

330
	`\xb4\x9\xa9f
 (" data-size: %6lxh (%6ld dec)\n",

331
a_\xb1r
->
a_d\xa9a
,\x87_ptr->a_data);

332
	`\xb4\x9\xa9f
 (" bss-size: %6lxh (%6ld dec)\n",

333
a_\xb1r
->
a_bss
,\x87_ptr->a_bss);

334
	`\xb4\x9\xa9f
 ("\x83ntry-point: %6lxh (%6ld dec)\n",

335
a_\xb1r
->
a_\x92\x8cy
,\x87_ptr->a_entry);

336
	`\xb4\x9\xa9f
 ("\x81otalbytes: %6lxh (%6ld dec)\n\n",

337
a_\xb1r
->
a_t\xd9b
,\x87_ptr->a_totb);

338
	}
}

	@tools/diskio.cpp

6 
	~"diskio.h\xb5
"

8 
	~<\x\xabgܙhm
>

9 
	~<\xfb\xb\xfao
>

10 
	~<chr\xdao
>

11 
	~<c\xa1r\x9ag
>

13 #ifde\xe0
_WIN32


14 
	~<io.h
>

15 
	~<w\x9adows.h
>

16 
	#NOMINMAX


17 #\x96\xa3

	)

18 
	~<f\x\xe7\x8e.h
>

19 
	~<sys/\xa1\xa9.h
>

20 
	~<uni\xa1d.h
>

21 #ifde\xe0
__l\x9aux__


22 
	~<l\x9aux/fs.h
>

23 
	~<sys/io\xf9l.h
>

27
\xc7me\xa5a\xfb

	gdiskio
 {

29
	gDiskI\xc1\x94\xe7\xfb
::
DiskI\xc1\x94\xe7\xfb
(cڡ
\xa1d
::
\xa1r\x9ag
 &
devi\xfb_\xb7th
,
bo\xde

\xbbad_\xdaly
)

30 :
devi\xfb_\xb7th_
(
devi\xfb_\xb7th
),
\xbbad_\xdaly_
(
\xbbad_\xdaly
) {

31 i\xe0(
	gdevi\xfb_\xb7th_
.
em\xb1y
()) {

32
throw

	g\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Device\x85ath cannot be\x83mpty");

34
	g\xffche_
.
\xbb\xa3rve
(
CACHE_SIZE
);

35
ݒ_devi\xfb
();

38
	gDiskI\xc1\x94\xe7\xfb
::~
DiskI\xc1\x94\xe7\xfb
() {

39
\x8cy
 {

40 i\xe0(!
\xbbad_\xdaly_
) {

41
wr\x99eback_\xffche
();

42
sync
();

44
\xfeo\xa3_devi\xfb
();

45 }
\xfftch
 (...) {

50
	gDiskI\xc1\x94\xe7\xfb
::
DiskI\xc1\x94\xe7\xfb
(DiskI\xc1\x94\xe7\xfb &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1


51 :
devi\xfb_\xb7th_
(
\xa1d
::
move
(
\xd9h\x94
.devi\xfb_\xb7th_)),
\xbbad_\xdaly_
(\xd9h\x94.\xbbad_\xdaly_),
fd_
(other.fd_),

52
\xa1\xa9i\xa1ics_
(
\xa1d
::
move
(
\xd9h\x94
.\xa1\xa9i\xa1ics_)),
\xffche_
(std::move(other.cache_)),

53
\xffche_\xc3xt_vi\xf9im_
(
\xd9h\x94
.cache_next_victim_) {

54
	g\xd9h\x94
.
	gfd_
 = -1;

55
	g\xd9h\x94
.
	g\xffche_\xc3xt_vi\xf9im_
 = 0;

58
	gDiskI\xc1\x94\xe7\xfb
 &DiskI\xc1\x94\xe7\xfb::
ݔ\xa9\xdc
=(
DiskI\xc1\x94\xe7\xfb
 &&
\xd9h\x94
\xe8
n\xdbx\xfb\xb1
 {

59 i\xe0(
this
 !\xf0&
\xd9h\x94
) {

61
\x8cy
 {

62 i\xe0(!
\xbbad_\xdaly_
) {

63
wr\x99eback_\xffche
();

64
sync
();

66
\xfeo\xa3_devi\xfb
();

67 }
\xfftch
 (...) {

72
	gdevi\xfb_\xb7th_
 =
\xa1d
::
move
(
\xd9h\x94
.
devi\xfb_\xb7th_
);

73
	g\xbbad_\xd\xaey_
 =
\xd9h\x94
.
\xbbad_\xdaly_
;

74
	gfd_
 =
\xd9h\x94
.
fd_
;

75
	g\xa1\xa9i\xa1ics_
 =
\xa1d
::
move
(
\xd9h\x94
.
\xa1\xa9i\xa1ics_
);

76
	g\xffche_
 =
\xa1d
::
move
(
\xd9h\x94
.
\xffche_
);

77
	g\xffche_\xc3xt_vi\xf9im_
 =
\xd9h\x94
.
\xffche_\xc3xt_vi\xf9im_
;

80
	g\xd9h\x94
.
	gfd_
 = -1;

81
	g\xd9h\x94
.
	g\xffche_\xc3xt_vi\xf9im_
 = 0;

83  *
	gthis
;

86 
	gDiskI\xc1\x94\xe7\xfb
::
ݒ_devi\xfb
() {

87 #ifde\xe0
_WIN32


88
DWORD

ac\xfbss
 =
GENERIC_READ
;

89 i\xe0(!
	g\xbbad_\xd\xaey_
) {

90
	gac\xfbss
 |\xf0
GENERIC_WRITE
;

93
HANDLE

	gh\x\xafd\xcb
 =
C\xbb\xa9eF\x9\x93A
(

94
devi\xfb_\xb7th_
.
c_\xa1r
(),
ac\xfbss
,
FILE_SHARE_READ
 |
FILE_SHARE_WRITE
,
nuαr
,
OPEN_EXISTING
,

95
FILE_ATTRIBUTE_NORMAL
 |
FILE_FLAG_NO_BUFFERING
,

96
nuαr
);

98 i\xe0(
	gh\x\xafd\xcb
 =\xf0
INVALID_HANDLE_VALUE
) {

99 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

100
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "open",

101 "C\xbb\xa9eF\x9e\x90\xe7\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

104
	gfd_
 =
_ݒ_osfh\x\xafd\xcb
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\x9a\x8d\x8c_t
>(
h\x\xafd\xcb
),
\xbbad_\xdaly_
 ?
_O_RDONLY
 :
_O_RDWR
);

105 i\xe0(
	gfd_
 == -1) {

106
Clo\xa3H\x\xafd\xcb
(
h\x\xafd\xcb
);

107
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "open",

111 
	g\xe6ags
 =
\xbbad_\xdaly_
 ?
O_RDONLY
 :
O_RDWR
;

114 #ifde\xe0
O_DIRECT


115
	g\xe6ags
 |\xf0
O_DIRECT
;

118
	gfd_
 =
ݒ
(
devi\xfb_\xb7th_
.
c_\xa1r
(),
\xe6ags
);

120 i\xe0(
	gfd_
 == -1) {

121 cڡ 
\x94r\xdc
 =
\x94\xbao
;

122
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "open",

123
\xa1d
::
\xa1r\x9ag
(\xa1d::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
)));

127 i\xe0(!
	g\xbbad_\xd\xaey_
) {

128 #ifde\xe0
LOCK_EX


129 i\xe0(
\xe6ock
(
fd_
,
LOCK_EX
 |
LOCK_NB
) == -1) {

137 
	gDiskI\xc1\x94\xe7\xfb
::
\xfeo\xa3_devi\xfb
(\xe8
n\xdbx\xfb\xb1
 {

138 i\xe0(
fd_
 != -1) {

139 #ifde\xe0
_WIN32


140
_\x\xe3o\xa3
(
fd_
);

142
\xfeo\xa3
(
fd_
);

144
	gfd_
 = -1;

148
Se\xf9\xdcBuf\xe3r

	gDiskI\xc1\x94\xe7\xfb
::
\xbbad_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) {

149
v\x\xabid\xa9e_\xa3\xf9\xdc_add\xbbss
(
\xa3\xf9\xdc
);

152 aut\xd8
	g\xffche_\x99
 =
f\x9ad_\x9a_\xffche
(
\xa3\xf9\xdc
);

153 i\xe0(
	g\xffche_\x99
 !\xf0
\xffche_
.
\x92d
()) {

154
\xffche_\x99
->
ϡ_ac\xfbss
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

155 
	g\xffche_\x99
->
	gd\xa9a
;

159 aut\xd8
	gbuf\xe3r
 =
\xbbad_\xa3\xf9\xdc_\xbfw
(
\xa3\xf9\xdc
);

162
add_to_\xffche
(
\xa3\xf9\xdc
,
buf\xe3r
);

164 
	gbuf\xe3r
;

167
Se\xf9\xdcBuf\xe3r

	gDiskI\xc1\x94\xe7\xfb
::
\xbbad_\xa3\xf9\xdc_\xbfw
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) {

168 cڡ\x87ut\xd8
\xa1\xact_time
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

170
Se\xf9\xdcBuf\xe3r

buf\xe3r
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

171 cڡ\x87ut\xd8
	goff\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\x9at64_t
>(
\xa3\xf9\xdc
.
v\x\xabue
\xe8*
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

173 #ifde\xe0
_WIN32


174
LARGE_INTEGER

	gli
;

175
	gli
.
	gQuadP\xa\xf9
 =
off\xa3t
;

176
HANDLE

	gh\x\xafd\xcb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<HANDLE>(
_g\x91_osfh\x\xafd\xcb
(
fd_
));

178 i\xe0(
S\x91F\x9\x93Po\x9a\x8brEx
(
h\x\xafd\xcb
,
li
,
nuαr
,
FILE_BEGIN
) == 0) {

179 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

180
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "seek",

181 "S\x91F\x9eePo\x9a\x8brEx fa\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

184
DWORD

	gby\x8bs_\xbbad
;

185 i\xe0(
R\x97dF\x9\x93
(
h\x\xafd\xcb
,
buf\xe3r
.
d\xa9a
(),
DiskCڡ\x\xafts
::
SECTOR_SIZE
, &
by\x8bs_\xbbad
,
nuαr
) == 0) {

186 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

187
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "read",

188 "R\x97dF\x9e\x90\xe7\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

191 i\xe0(
	gby\x8bs_\xbbad
 !\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
) {

192
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "read",

193 "Sh܈\xbbad:\x83x\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
) +

194 " by\x8bs, g\xd9 " +
\xa1d
::
to_\xa1r\x9ag
(
by\x8bs_\xbbad
));

197 i\xe0(
l\xa3ek
(
fd_
,
off\xa3t
,
SEEK_SET
) == -1) {

198 cڡ 
\x94r\xdc
 =
\x94\xbao
;

199
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "\xa3ek",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

202
ssize_t

	gby\x8bs_\xbbad
 =
\xbbad
(
fd_
,
buf\xe3r
.
d\xa9a
(),
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

203 i\xe0(
	gby\x8bs_\xbbad
 == -1) {

204 cڡ 
\x94r\xdc
 =
\x94\xbao
;

205
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "\xbbad",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

208 i\xe0(
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
size_t
>(
by\x8bs_\xbbad
\xe8!\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
) {

209
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "read",

210 "Sh܈\xbbad:\x83x\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
) +

211 " by\x8bs, g\xd9 " +
\xa1d
::
to_\xa1r\x9ag
(
by\x8bs_\xbbad
));

216 cڡ\x87ut\xd8
	g\x92d_time
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

217 cڡ\x87ut\xd8
	gdu\xb\xe1i\xda
 =

218
\xa1d
::
chr\xdao
::
du\xb\xe1i\xda_\xff\xa1
<\xa1d::chr\xdao::
m\x9\x96i\xa3c\xdads
>(
\x92d_time
 -
\xa1\xact_time
);

220
	g\xa1\xa9i\xa1ics_
.
	gby\x8bs_\xbbad
 +\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

221
	g\xa1\xa9i\xa1ics_
.
	g\xbbad_ݔ\xa9i\xdas
++;

222
	g\xa1\xa9i\xa1ics_
.
	gtٮ_time_ms
 +\xf0
du\xb\xe1i\xda
.
cou\xc1
();

224 
	gbuf\xe3r
;

227 
	gDiskI\xc1\x94\xe7\xfb
::
wr\x99e_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
, cڡ
Se\xf9\xdcBuf\xe3r
 &
buf\xe3r
) {

228 i\xe0(
	g\xbbad_\xd\xaey_
) {

229
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "write", "Device opened in\x84ead-only mode");

232
v\x\xabid\xa9e_\xa3\xf9\xdc_add\xbbss
(
\xa3\xf9\xdc
);

234 i\xe0(
	gbuf\xe3r
.
size_by\x8bs
(\xe8!\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
) {

235
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Buffer size must be\x83xactly one sector (" +

236
\xa1d
::
to_\xa1r\x9ag
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
) + " bytes)");

240 aut\xd8
	g\xffche_\x99
 =
f\x9ad_\x9a_\xffche
(
\xa3\xf9\xdc
);

241 i\xe0(
	g\xffche_\x99
 !\xf0
\xffche_
.
\x92d
()) {

242
\xffche_\x99
->
d\xa9a
 =
buf\xe3r
;

243
	g\xffche_\x99
->
	gd\x9\xf9y
 =
\x8cue
;

244
	g\xffche_\x99
->
	gϡ_ac\xfbss
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

247
add_to_\xffche
(
\xa3\xf9\xdc
,
buf\xe3r
);

248 aut\xd8
	g\xc3w_\xffche_\x99
 =
f\x9ad_\x9a_\xffche
(
\xa3\xf9\xdc
);

249 i\xe0(
	g\xc3w_\xffche_\x99
 !\xf0
\xffche_
.
\x92d
()) {

250
\xc3w_\xffche_\x99
->
d\x9\xf9y
 =
\x8cue
;

255
wr\x99e_\xa3\xf9\xdc_\xbfw
(
\xa3\xf9\xdc
,
buf\xe3r
);

258 
	gDiskI\xc1\x94\xe7\xfb
::
wr\x99e_\xa3\xf9\xdc_\xbfw
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
, cڡ
Se\xf9\xdcBuf\xe3r
 &
buf\xe3r
) {

259 cڡ\x87ut\xd8
	g\xa1\xa\xf9_time
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

261 cڡ\x87ut\xd8
	goff\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
\x9at64_t
>(
\xa3\xf9\xdc
.
v\x\xabue
\xe8*
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

263 #ifde\xe0
_WIN32


264
LARGE_INTEGER

	gli
;

265
	gli
.
	gQuadP\xa\xf9
 =
off\xa3t
;

266
HANDLE

	gh\x\xafd\xcb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<HANDLE>(
_g\x91_osfh\x\xafd\xcb
(
fd_
));

268 i\xe0(
S\x91F\x9\x93Po\x9a\x8brEx
(
h\x\xafd\xcb
,
li
,
nuαr
,
FILE_BEGIN
) == 0) {

269 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

270
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "seek",

271 "S\x91F\x9eePo\x9a\x8brEx fa\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

274
DWORD

	gby\x8bs_wr\x99\x8bn
;

275 i\xe0(
Wr\x99eF\x9\x93
(
h\x\xafd\xcb
,
buf\xe3r
.
d\xa9a
(),
DiskCڡ\x\xafts
::
SECTOR_SIZE
, &
by\x8bs_wr\x99\x8bn
,
nuαr
) ==

277 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

278
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "write",

279 "Wr\x99eF\x9e\x90\xe7\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

282 i\xe0(
	gby\x8bs_wr\x99\x8bn
 !\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
) {

283
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "write",

284 "Sh܈wr\x99e:\x83x\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
) +

285 " by\x8bs, wrِ" +
\xa1d
::
to_\xa1r\x9ag
(
by\x8bs_wr\x99\x8bn
));

288 i\xe0(
l\xa3ek
(
fd_
,
off\xa3t
,
SEEK_SET
) == -1) {

289 cڡ 
\x94r\xdc
 =
\x94\xbao
;

290
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "\xa3ek",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

293
ssize_t

	gby\x8bs_wr\x99\x8bn
 =
wr\x99e
(
fd_
,
buf\xe3r
.
d\xa9a
(),
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

294 i\xe0(
	gby\x8bs_wr\x99\x8bn
 == -1) {

295 cڡ 
\x94r\xdc
 =
\x94\xbao
;

296
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "wr\x99e",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

299 i\xe0(
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
size_t
>(
by\x8bs_wr\x99\x8bn
\xe8!\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
) {

300
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa3\xf9\xdc
, "write",

301 "Sh܈wr\x99e:\x83x\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
DiskCڡ\x\xafts
::
SECTOR_SIZE
) +

302 " by\x8bs, wrِ" +
\xa1d
::
to_\xa1r\x9ag
(
by\x8bs_wr\x99\x8bn
));

307 cڡ\x87ut\xd8
	g\x92d_time
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

308 cڡ\x87ut\xd8
	gdu\xb\xe1i\xda
 =

309
\xa1d
::
chr\xdao
::
du\xb\xe1i\xda_\xff\xa1
<\xa1d::chr\xdao::
m\x9\x96i\xa3c\xdads
>(
\x92d_time
 -
\xa1\xact_time
);

311
	g\xa1\xa9i\xa1ics_
.
	gby\x8bs_wr\x99\x8bn
 +\xf0
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

312
	g\xa1\xa9i\xa1ics_
.
	gwr\x99e_ݔ\xa9i\xdas
++;

313
	g\xa1\xa9i\xa1ics_
.
	gtٮ_time_ms
 +\xf0
du\xb\xe1i\xda
.
cou\xc1
();

316
	g\xa1d
::
ve\xf9\xdc
<
Se\xf9\xdcBuf\xe3r
>
DiskI\xc1\x94\xe7\xfb
::
\xbbad_\xa3\xf9\xdcs
(
Se\xf9\xdcAdd\xbbss

\xa1\xact_\xa3\xf9\xdc
,

317
\xa1d
::
size_t

cou\xc1
) {

318 i\xe0(
cou\xc1
 == 0) {

322
	g\xa1d
::
ve\xf9\xdc
<
Se\xf9\xdcBuf\xe3r
>
buf\xe3rs
;

323
	gbuf\xe3rs
.
\xbb\xa3rve
(
cou\xc1
);

325 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gcou\xc1
; ++i) {

326
	gbuf\xe3rs
.
push_back
(
\xbbad_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss
(
\xa1\xact_\xa3\xf9\xdc
.
v\x\xabue
 +
i
)));

329 
	gbuf\xe3rs
;

332 
	gDiskI\xc1\x94\xe7\xfb
::
wr\x99e_\xa3\xf9\xdcs
(
Se\xf9\xdcAdd\xbbss

\xa1\xact_\xa3\xf9\xdc
,

333 cڡ
\xa1d
::
ve\xf9\xdc
<
Se\xf9\xdcBuf\xe3r
> &
buf\xe3rs
) {

334 i\xe0(
\xbbad_\xdaly_
) {

335
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
\xa1\xact_\xa3\xf9\xdc
, "write_sectors",

339 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gbuf\xe3rs
.
size
(); ++i) {

340
wr\x99e_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss
(
\xa1\xact_\xa3\xf9\xdc
.
v\x\xabue
 +
i
),
buf\xe3rs
[i]);

344 
	gDiskI\xc1\x94\xe7\xfb
::
sync
() {

345 i\xe0(
\xbbad_\xdaly_
) {

350
wr\x99eback_\xffche
();

352 #ifde\xe0
_WIN32


353
HANDLE

	gh\x\xafd\xcb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<HANDLE>(
_g\x91_osfh\x\xafd\xcb
(
fd_
));

354 i\xe0(
FlushF\x9\x93Buf\xe3rs
(
h\x\xafd\xcb
) == 0) {

355 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

356
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "sync",

357 "FlushF\x9eeBuf\xe3r\xa0\xe7\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

360 i\xe0(
fsync
(
fd_
) == -1) {

361 cڡ 
\x94r\xdc
 =
\x94\xbao
;

362
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "sync",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

367 
	gDiskI\xc1\x94\xe7\xfb
::
\xe6ush_\xffche
() {

368 i\xe0(!
\xbbad_\xdaly_
) {

369
wr\x99eback_\xffche
();

371
	g\xffche_
.
\xfe\x97r
();

372
	g\xffche_\xc3xt_vi\xf9im_
 = 0;

375
	g\xa1d
::
u\x9\xa964_t

DiskI\xc1\x94\xe7\xfb
::
g\x91_size
() const {

376 #ifde\xe0
_WIN32


377
HANDLE

h\x\xafd\xcb
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<HANDLE>(
_g\x91_osfh\x\xafd\xcb
(
fd_
));

378
LARGE_INTEGER

	gf\x9\x93_size
;

380 i\xe0(
G\x91F\x9\x93SizeEx
(
h\x\xafd\xcb
, &
f\x9\x93_size
) == 0) {

381 cڡ
DWORD

\x94r\xdc
 =
G\x91La\xa1E\xbc\xdc
();

382
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "get_size",

383 "G\x91F\x9eeSizeEx fa\x9eed w\x99h\x83\xbc\xdc " +
\xa1d
::
to_\xa1r\x9ag
(
\x94r\xdc
));

386 
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
u\x9\xa964_t
>(
f\x9\x93_size
.
QuadP\xa\xf9
);

388 
\xa1\xa9

	g\xa1
;

389 i\xe0(
f\xa1\xa9
(
fd_
, &
\xa1
) == -1) {

390 cڡ 
\x94r\xdc
 =
\x94\xbao
;

391
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "g\x91_size",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

394 i\xe0(
S_ISREG
(
\xa1
.
\xa1_mode
)) {

395 
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
u\x9\xa964_t
>(
\xa1
.
\xa1_size
);

396 } i\xe0(
S_ISBLK
(
\xa1
.
\xa1_mode
)) {

398 #ifde\xe0
__l\x9aux__


399
	g\xa1d
::
u\x9\xa964_t

size
;

400 i\xe0(
io\xf9l
(
fd_
,
BLKGETSIZE64
, &
size
) == 0) {

401 
size
;

406 cڡ\x87ut\xd8
	gcu\xbc\x92t_pos
 =
l\xa3ek
(
fd_
, 0,
SEEK_CUR
);

407 cڡ\x87ut\xd8
	g\x92d_pos
 =
l\xa3ek
(
fd_
, 0,
SEEK_END
);

408
l\xa3ek
(
fd_
,
cu\xbc\x92t_pos
,
SEEK_SET
);

410 i\xe0(
	g\x92d_pos
 == -1) {

411 cڡ 
\x94r\xdc
 =
\x94\xbao
;

412
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "g\x91_size",
\xa1d
::
\xa1\xbb\xbc\xdc
(
\x94r\xdc
));

415 
	g\xa1\xa9ic_\xff\xa1
<
	g\xa1d
::
u\x9\xa964_t
>(
\x92d_pos
);

417
throw

DiskIoE\xbc\xdc
(
devi\xfb_\xb7th_
,
Se\xf9\xdcAdd\xbbss
(0), "get_size", "Unsupported file\x81ype");

422
bo\xde

	gDiskI\xc1\x94\xe7\xfb
::
is_ac\xfbssib\xcb
(\xe8cڡ
n\xdbx\xfb\xb1
 {

423 i\xe0(
fd_
 == -1) {

424 
\xe7l\xa3
;

427
	g\x8cy
 {

429
	gcڡ_\xff\xa1
<
	gDiskI\xc1\x94\xe7\xfb
 *>(
	gthis
)->
\xbbad_\xa3\xf9\xdc_\xbfw
(
Se\xf9\xdcAdd\xbbss
(0));

430 
	g\x8cue
;

431 }
\xfftch
 (...) {

432 
	g\xe7l\xa3
;

436
	g\xa1d
::
ve\xf9\xdc
<
DiskI\xc1\x94\xe7\xfb
::
CacheE\xc1ry
>::
\x99\x94\xa9\xdc


437
DiskI\xc1\x94\xe7\xfb
::
f\x9ad_\x9a_\xffche
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) const {

438 
\xa1d
::
f\x9ad_if
(
\xffche_
.
beg\x9a
(), cache_.
\x92d
(),

439 [
\xa3\xf9\xdc
](cڡ
CacheE\xc1ry
 &
\x92\x8cy
\xe8{ \x83\xc1ry.
add\xbbss
 == sector; });

442 
	gDiskI\xc1\x94\xe7\xfb
::
add_to_\xffche
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
,
Se\xf9\xdcBuf\xe3r

d\xa9a
) const {

443 i\xe0(
	g\xffche_
.
size
(\xe8<
	gCACHE_SIZE
) {

445
	g\xffche_
.
em\xb6a\xfb_back
(
\xa3\xf9\xdc
,
\xa1d
::
move
(
d\xa9a
));

448 aut\xd8&
	gvi\xf9im
 =
\xffche_
[
\xffche_\xc3xt_vi\xf9im_
];

451 i\xe0(
	gvi\xf9im
.
	gd\x9\xf9y
 && !
	g\xbbad_\xd\xaey_
) {

452
	g\x8cy
 {

453
	gcڡ_\xff\xa1
<
	gDiskI\xc1\x94\xe7\xfb
 *>(
	gthis
)->
wr\x99e_\xa3\xf9\xdc_\xbfw
(
vi\xf9im
.
add\xbbss
, vi\xf9im.
d\xa9a
);

454
	gvi\xf9im
.
	gd\x9\xf9y
 =
\xe7l\xa3
;

455 }
\xfftch
 (...) {

461
	gvi\xf9im
.
	gadd\xbbss
 =
\xa3\xf9\xdc
;

462
	gvi\xf9im
.
	gd\xa9a
 =
\xa1d
::
move
(
d\xa9a
);

463
	gvi\xf9im
.
	gd\x9\xf9y
 =
\xe7l\xa3
;

464
	gvi\xf9im
.
	gϡ_ac\xfbss
 =
\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
();

467
	g\xffche_\xc3xt_vi\xf9im_
 = (
\xffche_\xc3xt_vi\xf9im_
 + 1\xe8%
CACHE_SIZE
;

471 
	gDiskI\xc1\x94\xe7\xfb
::
wr\x99eback_\xffche
() {

472 aut\xd8&
\x92\x8cy
 :
\xffche_
) {

473 i\xe0(
\x92\x8cy
.
d\x9\xf9y
) {

474
\x8cy
 {

475
wr\x99e_\xa3\xf9\xdc_\xbfw
(
\x92\x8cy
.
add\xbbss
,\x83\xc1ry.
d\xa9a
);

476
	g\x92\x8cy
.
	gd\x9\xf9y
 =
\xe7l\xa3
;

477 }
\xfftch
 (...) {

479
	gthrow
;

485 
	gDiskI\xc1\x94\xe7\xfb
::
v\x\xabid\xa9e_\xa3\xf9\xdc_add\xbbss
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) const {

486
\x8cy
 {

487 cڡ\x87ut\xd8
devi\xfb_size
 =
g\x91_size
();

488 cڡ\x87ut\xd8
	gmax_\xa3\xf9\xdc
 =
devi\xfb_size
 /
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

490 i\xe0(
	g\xa3\xf9\xdc
.
	gv\x\xabue
 >\xf0
max_\xa3\xf9\xdc
) {

491
throw

\xa1d
::
out_of_\xb\xe2ge
("Se\xf9\xdc " + std::
to_\xa1r\x9ag
(
\xa3\xf9\xdc
.
v\x\xabue
) +

492 " ou\x88o\xe0\xbfng\x90(max: " +
\xa1d
::
to_\xa1r\x9ag
(
max_\xa3\xf9\xdc
 - 1) + ")");

494 }
\xfftch
 (cڡ
\xa1d
::
out_of_\xb\xe2ge
 &) {

495
throw
;

496 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &) {

	@tools/diskio.hpp

15 #\xb4agm\xa8
\xda\xfb


17 
	~<\xa9omic
>

18 
	~<chr\xdao
>

19 
	~<c\xa1d\x9\xa9
>

20 
	~<mem\xdcy
>

21 
	~<\xa1dex\xfb\xb1
>

22 
	~<\xa1r\x9ag
>

23 
	~<ve\xf9\xdc
>

25
\xc7me\xa5a\xfb

	gdiskio
 {

30 
	sIoS\x8\xe1i\xa1ics
 {

31
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa964_t
>
by\x8bs_\xbbad
{0};

32
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa964_t
>
by\x8bs_wr\x99\x8bn
{0};

33
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa964_t
>
\xbbad_ݔ\xa9i\xdas
{0};

34
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa964_t
>
wr\x99e_ݔ\xa9i\xdas
{0};

35
	g\xa1d
::
\xa9omic
<
\xa1d
::
u\x9\xa964_t
>
tٮ_time_ms
{0};

37 
\xbb\xa3t
(\xe8
	gn\xdbx\xfb\xb1
 {

38
	gby\x8bs_\xbbad
 = 0;

39
	gby\x8bs_wr\x99\x8bn
 = 0;

40
	g\xbbad_ݔ\xa9i\xdas
 = 0;

41
	gwr\x99e_ݔ\xa9i\xdas
 = 0;

42
	gtٮ_time_ms
 = 0;

45 [[
nodis\xf\xe4d
]] 
g\x91_\xbbad_throughput_mbps
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

46 cڡ\x87ut\xd8
	gtime_s
 =
tٮ_time_ms
.
l\xdfd
() / 1000.0;

47 i\xe0(
	gtime_s
 <= 0.0)

49  (
	gby\x8bs_\xbbad
.
l\xdfd
(\xe8/ (1024.0 * 1024.0)\xe8/
	gtime_s
;

52 [[
nodis\xf\xe4d
]] 
g\x91_wr\x99e_throughput_mbps
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

53 cڡ\x87ut\xd8
	gtime_s
 =
tٮ_time_ms
.
l\xdfd
() / 1000.0;

54 i\xe0(
	gtime_s
 <= 0.0)

56  (
	gby\x8bs_wr\x99\x8bn
.
l\xdfd
(\xe8/ (1024.0 * 1024.0)\xe8/
	gtime_s
;

63 
	sDiskCڡ\x\xafts
 {

64 
cڡex\xb4

	g\xa1d
::
size_t

SECTOR_SIZE
 = 512;

65 
cڡex\xb4

	g\xa1d
::
size_t

MAX_SECTOR_SIZE
 = 4096;

66 
cڡex\xb4

	g\xa1d
::
size_t

DEFAULT_BUFFER_SIZE
 = 64 * 1024;

67 
cڡex\xb4

	g\xa1d
::
size_t

MAX_BUFFER_SIZE
 = 1024 * 1024;

68 
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

CACHE_LINE_SIZE
 = 64;

77 
	sSe\xf9\xdcAdd\xbbss
 {

78
	g\xa1d
::
u\x9\xa964_t

v\x\xabue
;

80
ex\xb6ic\x99

cڡex\xb4

Se\xf9\xdcAdd\xbbss
(
\xa1d
::
u\x9\xa964_t

addr
\xe8
n\xdbx\xfb\xb1
 :
v\x\xabue
(addr) {}

81
cڡex\xb4

ݔ\xa9\xdc

\xa1d
::
u\x9\xa964_t
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
v\x\xabue
; }

84
cڡex\xb4

Se\xf9\xdcAdd\xbbss

	gݔ\xa9\xdc
+(
	g\xa1d
::
u\x9\xa964_t

off\xa3t
\xe8cڡ
n\xdbx\xfb\xb1
 {

85 
Se\xf9\xdcAdd\xbbss
(
v\x\xabue
 +
off\xa3t
);

88
cڡex\xb4

Se\xf9\xdcAdd\xbbss

	gݔ\xa9\xdc
-(
	g\xa1d
::
u\x9\xa964_t

off\xa3t
\xe8cڡ
n\xdbx\xfb\xb1
 {

89 
Se\xf9\xdcAdd\xbbss
(
v\x\xabue
 -
off\xa3t
);

92
cڡex\xb4

	gSe\xf9\xdcAdd\xbbss
 &
	gݔ\xa9\xdc
+=(
\xa1d
::
u\x9\xa964_t

off\xa3t
\xe8
n\xdbx\xfb\xb1
 {

93
v\x\xabue
 +\xf0
off\xa3t
;

94  *
	gthis
;

97
cڡex\xb4

	gSe\xf9\xdcAdd\xbbss
 &
	gݔ\xa9\xdc
-=(
\xa1d
::
u\x9\xa964_t

off\xa3t
\xe8
n\xdbx\xfb\xb1
 {

98
v\x\xabue
 -\xf0
off\xa3t
;

99  *
	gthis
;

103
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
==(cڡ
Se\xf9\xdcAdd\xbbss
 &
\xd9h\x94
\xe8cڡ
n\xdbx\xfb\xb1
 {

104 
v\x\xabue
 =\xf0
\xd9h\x94
.value;

107
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
!=(cڡ
Se\xf9\xdcAdd\xbbss
 &
\xd9h\x94
\xe8cڡ
n\xdbx\xfb\xb1
 {

108 
v\x\xabue
 !\xf0
\xd9h\x94
.value;

111
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
<(cڡ
	gSe\xf9\xdcAdd\xbbss
 &
	g\xd9h\x94
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

112 
	gv\x\xabue
 <
	g\xd9h\x94
.value;

115
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
<=(cڡ
Se\xf9\xdcAdd\xbbss
 &
\xd9h\x94
\xe8cڡ
n\xdbx\xfb\xb1
 {

116 
v\x\xabue
 <\xf0
\xd9h\x94
.value;

119
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
>(cڡ
	gSe\xf9\xdcAdd\xbbss
 &
	g\xd9h\x94
\xe8cڡ
	gn\xdbx\xfb\xb1
 {

120 
	gv\x\xabue
 >
	g\xd9h\x94
.value;

123
cڡex\xb4

bo\xde

	gݔ\xa9\xdc
>=(cڡ
Se\xf9\xdcAdd\xbbss
 &
\xd9h\x94
\xe8cڡ
n\xdbx\xfb\xb1
 {

124 
v\x\xabue
 >\xf0
\xd9h\x94
.value;

134 \xfeas\xa0
	cSe\xf9\xdcBuf\xe3r
 {

135
	g\xb4iv\xa9e
:

136
\xa1d
::
ve\xf9\xdc
<\xa1d::
u\x9\xa98_t
>
d\xa9a_
;

139 [[
nodis\xf\xe4d
]] 
cڡex\xb4

	g\xa1d
::
size_t

\xaeign_size
(
\xa1d
::size_\x88
size
\xe8
n\xdbx\xfb\xb1
 {

140  (
size
 +
DiskCڡ\x\xafts
::
CACHE_LINE_SIZE
 - 1) & ~(DiskConstants::CACHE_LINE_SIZE - 1);

143
	gpublic
:

149
ex\xb6ic\x99

Se\xf9\xdcBuf\xe3r
(
\xa1d
::
size_t

size
 =
DiskCڡ\x\xafts
::
SECTOR_SIZE
)

150 :
d\xa9a_
(
\xaeign_size
(
size
), 0) {

151 i\xe0(
	gsize
 == 0) {

152
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Buffer size cannot be zero");

154 i\xe0(
	gsize
 >
	gDiskCڡ\x\xafts
::
MAX_BUFFER_SIZE
) {

155
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Buf\xe3\xb8siz\x90to\xd8\xcfrge: " + std::
to_\xa1r\x9ag
(
size
));

165
Se\xf9\xdcBuf\xe3r
(cڡ *
\xa4c
,
\xa1d
::
size_t

size
)

166 :
d\xa9a_
(
\xa1\xa9ic_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa98_t
 *>(
\xa4c
),

167
\xa1\xa9ic_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa98_t
 *>(
\xa4c
\xe8+
size
) {

168 i\xe0(
\xa4c
 =\xf0
nuαr
) {

169
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Source\x85ointer cannot be\x82ull");

171 i\xe0(
	gsize
 == 0) {

172
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Size cannot be zero");

174 i\xe0(
	gsize
 >
	gDiskCڡ\x\xafts
::
MAX_BUFFER_SIZE
) {

175
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Siz\x90to\xd8\xcfrge: " + std::
to_\xa1r\x9ag
(
size
));

180 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t
 *
d\xa9a
(\xe8
n\xdbx\xfb\xb1
 { 
d\xa9a_
.data(); }

181 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
u\x9\xa98_t
 *
d\xa9a
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
d\xa9a_
.data(); }

182 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

size_by\x8bs
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
d\xa9a_
.
size
(); }

183 [[
nodis\xf\xe4d
]]
bo\xde

em\xb1y
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gd\xa9a_
.empty(); }

191 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t
 &
\xa9
(
\xa1d
::
size_t

off\xa3t
) {

192 i\xe0(
off\xa3t
 >\xf0
d\xa9a_
.
size
()) {

193
throw

\xa1d
::
out_of_\xb\xe2ge
("Buf\xe3\xb8off\xa3\x88ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
off\xa3t
));

195 
	gd\xa9a_
[
off\xa3t
];

198 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
u\x9\xa98_t
 &
\xa9
(
\xa1d
::
size_t

off\xa3t
) const {

199 i\xe0(
off\xa3t
 >\xf0
d\xa9a_
.
size
()) {

200
throw

\xa1d
::
out_of_\xb\xe2ge
("Buf\xe3\xb8off\xa3\x88ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
off\xa3t
));

202 
	gd\xa9a_
[
off\xa3t
];

206 
\xbbsize
(
\xa1d
::
size_t

\xc3w_size
) {

207 i\xe0(
\xc3w_size
 >
DiskCڡ\x\xafts
::
MAX_BUFFER_SIZE
) {

208
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("New siz\x90to\xd8\xcfrge: " + std::
to_\xa1r\x9ag
(
\xc3w_size
));

210
	gd\xa9a_
.
\xbbsize
(
\xaeign_size
(
\xc3w_size
));

213 
\xfe\x97r
(\xe8{
	gd\xa9a_
.clear(); }

219 
f\x9\x96
(
\xa1d
::
u\x9\xa98_t

v\x\xabue
\xe8
n\xdbx\xfb\xb1
 { std::f\x9el(
d\xa9a_
.
beg\x9a
(), d\xa9a_.
\x92d
(), value); }

224 
z\x94o
(\xe8
	gn\xdbx\xfb\xb1
 {
f\x9\x96
(0); }

233 \xfeas\xa0
	cDiskI\xc1\x94\xe7\xfb
 {

234
	g\xb4iv\xa9e
:

235
\xa1d
::
\xa1r\x9ag

devi\xfb_\xb7th_
;

236
bo\xde

	g\xbbad_\xd\xaey_
;

237 
	gfd_
{-1};

238
mu\x8fb\xcb

IoS\x8\xe1i\xa1ics

	g\xa1\xa9i\xa1ics_
;

241 
	sCacheE\xc1ry
 {

242
Se\xf9\xdcAdd\xbbss

	gadd\xbbss
;

243
Se\xf9\xdcBuf\xe3r

	gd\xa9a
;

244
	g\xa1d
::
chr\xdao
::
\xa1\x97dy_\xfeock
::
time_po\x9\xa9

ϡ_ac\xfbss
;

245
bo\xde

	gd\x9\xf9y
{
	g\xe7l\xa3
};

247
CacheE\xc1ry
(
Se\xf9\xdcAdd\xbbss

addr
,
Se\xf9\xdcBuf\xe3r

buf
)

248 :
add\xbbss
(
addr
),
d\xa9a
(
\xa1d
::
move
(
buf
)),
ϡ_ac\xfbss
(\xa1d::
chr\xdao
::
\xa1\x97dy_\xfeock
::
now
()) {}

251 
cڡex\xb4

	g\xa1d
::
size_t

CACHE_SIZE
 = 64;

252
mu\x8fb\xcb

	g\xa1d
::
ve\xf9\xdc
<
CacheE\xc1ry
>
\xffche_
;

253
mu\x8fb\xcb

	g\xa1d
::
size_t

\xffche_\xc3xt_vi\xf9im_
{0};

255
	gpublic
:

262
ex\xb6ic\x99

DiskI\xc1\x94\xe7\xfb
(cڡ
\xa1d
::
\xa1r\x9ag
 &
devi\xfb_\xb7th
,
bo\xde

\xbbad_\xdaly
 =
\x8cue
);

267 ~
DiskI\xc1\x94\xe7\xfb
();

270
DiskI\xc1\x94\xe7\xfb
(cڡ DiskI\xc1\x94\xe7\xfb &\xe8\xf0
d\x96\x91e
;

271
	gDiskI\xc1\x94\xe7\xfb
 &
	gݔ\xa9\xdc
=(cڡ
DiskI\xc1\x94\xe7\xfb
 &\xe8\xf0
d\x96\x91e
;

272
DiskI\xc1\x94\xe7\xfb
(DiskI\xc1\x94\xe7\xfb &&\xe8
	gn\xdbx\xfb\xb1
;

273
	gDiskI\xc1\x94\xe7\xfb
 &
	gݔ\xa9\xdc
=(
DiskI\xc1\x94\xe7\xfb
 &&\xe8
n\xdbx\xfb\xb1
;

281 [[
nodis\xf\xe4d
]]
Se\xf9\xdcBuf\xe3r

\xbbad_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
);

289 
wr\x99e_\xa3\xf9\xdc
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
, cڡ
Se\xf9\xdcBuf\xe3r
 &
buf\xe3r
);

298 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
Se\xf9\xdcBuf\xe3r
>
\xbbad_\xa3\xf9\xdcs
(
Se\xf9\xdcAdd\xbbss

\xa1\xact_\xa3\xf9\xdc
,

299
\xa1d
::
size_t

cou\xc1
);

307 
wr\x99e_\xa3\xf9\xdcs
(
Se\xf9\xdcAdd\xbbss

\xa1\xact_\xa3\xf9\xdc
, cڡ
\xa1d
::
ve\xf9\xdc
<
Se\xf9\xdcBuf\xe3r
> &
buf\xe3rs
);

313 
sync
();

318 
\xe6ush_\xffche
();

325 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa964_t

g\x91_size
() const;

331 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa964_t

g\x91_\xa3\xf9\xdc_cou\xc1
() const {

332 
g\x91_size
(\xe8/
DiskCڡ\x\xafts
::
SECTOR_SIZE
;

336 [[
nodis\xf\xe4d
]]
bo\xde

is_\xbbad_\xd\xaey
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\xbbad_\xd\xaey_
; }

337 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
\xa1r\x9ag
 &
g\x91_devi\xfb_\xb7th
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
devi\xfb_\xb7th_
; }

338 [[
nodis\xf\xe4d
]] cڡ
	gIoS\x8\xe1i\xa1ics
 &
g\x91_\xa1\xa9i\xa1ics
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\xa1\xa9i\xa1ics_
; }

343 
\xbb\xa3t_\xa1\xa9i\xa1ics
(\xe8
	gn\xdbx\xfb\xb1
 {
	g\xa1\xa9i\xa1ics_
.
\xbb\xa3t
(); }

349 [[
nodis\xf\xe4d
]]
bo\xde

is_ac\xfbssib\xcb
(\xe8cڡ
	gn\xdbx\xfb\xb1
;

351
	g\xb4iv\xa9e
:

356 
ݒ_devi\xfb
();

361 
\xfeo\xa3_devi\xfb
(\xe8
	gn\xdbx\xfb\xb1
;

369 [[
nodis\xf\xe4d
]]
Se\xf9\xdcBuf\xe3r

\xbbad_\xa3\xf9\xdc_\xbfw
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
);

377 
wr\x99e_\xa3\xf9\xdc_\xbfw
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
, cڡ
Se\xf9\xdcBuf\xe3r
 &
buf\xe3r
);

384 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
CacheE\xc1ry
>::
\x99\x94\xa9\xdc

f\x9ad_\x9a_\xffche
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) const;

391 
add_to_\xffche
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
,
Se\xf9\xdcBuf\xe3r

d\xa9a
) const;

396 
wr\x99eback_\xffche
();

403 
v\x\xabid\xa9e_\xa3\xf9\xdc_add\xbbss
(
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
) const;

409 \xfeas\xa0
	cDiskIoE\xbc\xdc
 :
public

\xa1d
::
ru\xc1ime_\x94r\xdc
 {

410
\xb4iv\xa9e
:

411
\xa1d
::
\xa1r\x9ag

devi\xfb_\xb7th_
;

412
Se\xf9\xdcAdd\xbbss

	g\xa3\xf9\xdc_
;

413
	g\xa1d
::
\xa1r\x9ag

ݔ\xa9i\xda_
;

415
	gpublic
:

416
DiskIoE\xbc\xdc
(cڡ
\xa1d
::
\xa1r\x9ag
 &
devi\xfb_\xb7th
,
Se\xf9\xdcAdd\xbbss

\xa3\xf9\xdc
, cڡ std::\xa1r\x9ag &
ݔ\xa9i\xda
,

417 cڡ
\xa1d
::
\xa1r\x9ag
 &
mes\xa7ge
)

418 :
\xa1d
::
ru\xc1ime_\x94r\xdc
("Disk I/O\x83\xbc\xdc o\xc0" +
devi\xfb_\xb7th
 + " sector " +

419
\xa1d
::
to_\xa1r\x9ag
(
\xa3\xf9\xdc
.
v\x\xabue
\xe8+ " dur\x9ag " +
ݔ\xa9i\xda
 + ": " +

420
mes\xa7ge
),

421
devi\xfb_\xb7th_
(
devi\xfb_\xb7th
),
\xa3\xf9\xdc_
(
\xa3\xf9\xdc
),
ݔ\xa9i\xda_
(
ݔ\xa9i\xda
) {}

423 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
\xa1r\x9ag
 &
g\x91_devi\xfb_\xb7th
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
devi\xfb_\xb7th_
; }

424 [[
nodis\xf\xe4d
]]
Se\xf9\xdcAdd\xbbss

g\x91_\xa3\xf9\xdc
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\xa3\xf9\xdc_
; }

425 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
\xa1r\x9ag
 &
g\x91_ݔ\xa9i\xda
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
ݔ\xa9i\xda_
; }

	@tools/fsck.cpp

25 
	~"diskio.h\xb5
"

27 
	~<\x\xabgܙhm
>

28 
	~<\xac\xbfy
>

29 
	~<c\xf9y\xb3
>

30 
	~<c\xa1d\x9\xa9
>

31 
	~<c\xa1dlib
>

32 
	~<c\xa1r\x9ag
>

33 
	~<ex\xfb\xb1i\xda
>

34 
	~<io\xa1\xbbam
>

35 
	~<lim\x99s
>

36 
	~<mem\xdcy
>

37 
	~<\xddtiڮ
>

38 
	~<\xa1dex\xfb\xb1
>

39 
	~<\xa1r\x9ag
>

40 
	~<\xa1r\x9ag_v\x9bw
>

41 
	~<ty\xb3_\x8\xff\x99s
>

42 
	~<ve\xf9\xdc
>

45
us\x9ag

	g\x9aode_\xc4
 =
\xa1d
::
u\x9\xa916_t
;

46
us\x9ag

	gz\xd\xab_\xc4
 =
\xa1d
::
u\x9\xa916_t
;

47
us\x9ag

	gblock_\xc4
 =
\xa1d
::
u\x9\xa932_t
;

48
us\x9ag

	gf\x9\x93_pos
 =
\xa1d
::
u\x9\xa932_t
;

51
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

SUPER_MAGIC
 = 0x137F;

52
cڡex\xb4

\x9aode_\xc4

	gROOT_INODE
 = 1;

53
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

SUPER_BLOCK
 = 1;

54
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

BLOCK_SIZE
 = 1024;

55
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

INODE_SIZE
 = 32;

56
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

INODES_PER_BLOCK
 =
BLOCK_SIZE
 /
INODE_SIZE
;

59 
	sdsb
 {

60
\x9aode_\xc4

	ms_n\x9aodes
;

61
z\xd\xab_\xc4

	ms_nz\xd\xabs
;

62
	m\xa1d
::
u\x9\xa916_t

s_im\xad_blocks
;

63
	m\xa1d
::
u\x9\xa916_t

s_zm\xad_blocks
;

64
z\xd\xab_\xc4

	ms_f\x9c\xa1d\xa9az\xd\xab
;

65
	m\xa1d
::
u\x9\xa916_t

s_log_z\xd\xab_size
;

66
f\x9\x93_pos

	ms_maxsize
;

67
	m\xa1d
::
u\x9\xa916_t

s_magic
;

70
\xc7me\xa5a\xfb

	gm\x9aix
::
fsck
 {

75 
	sFsckCڡ\x\xafts
 {

76 
cڡex\xb4

\xa1d
::
size_t

MAX_PRINT_ERRORS
 = 8;

77 
cڡex\xb4

	g\xa1d
::
size_t

MAX_WIDTH
 = 32;

78 
cڡex\xb4

	g\xa1d
::
size_t

MAX_DIR_SIZE
 = 5000;

79 
cڡex\xb4

	g\xa1d
::
size_t

CHUNK_INDIRECT
 = 128;

80 
cڡex\xb4

	g\xa1d
::
size_t

CHUNK_DIRECT
 = 16;

81 
cڡex\xb4

	g\xa1d
::
size_t

BITMAP_SHIFT
 = 13;

82 
cڡex\xb4

	g\xa1d
::
size_t

BIT_SHIFT
 = 4;

83 
cڡex\xb4

	g\xa1d
::
u\x9\xa932_t

BITMAP_MASK
 = (1U <<
BIT_SHIFT
) - 1;

84 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

STICKY_BIT
 = 01000;

85 
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

MAX_LINKS
 =
\xa1d
::
num\x94ic_lim\x99s
<\xa1d::u\x9at16_t>::
max
();

91 \xfeas\xa0
	cFsckMode
 {

92
	gCHECK_ONLY
,

93
	gINTERACTIVE
,

94
	gAUTOMATIC
,

95
	gLIST_ONLY
,

96
	gCREATE_FS


102 \xfeas\xa0
	cInodeTy\xb3
 {

103
	gREGULAR_FILE
,

104
	gDIRECTORY
,

105
	gBLOCK_SPECIAL
,

106
	gCHAR_SPECIAL
,

107
	gBAD_INODE
,

108
	gFREE_INODE


114 \xfeas\xa0
	cZ\xd\xabLev\x96
 :
\xa1d
::
u\x9\xa98_t
 {

115
DIRECT
 = 0,

116
	gSINGLE_INDIRECT
 = 1,

117
	gDOUBLE_INDIRECT
 = 2,

118
	gTRIPLE_INDIRECT
 = 3

124 
	sB\x99Numb\x94
 {

125
	g\xa1d
::
u\x9\xa932_t

v\x\xabue
;

127
ex\xb6ic\x99

B\x99Numb\x94
(
\xa1d
::
u\x9\xa932_t

b\x99
\xe8:
v\x\xabue
(bit) {}

128
ݔ\xa9\xdc

\xa1d
::
u\x9\xa932_t
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
v\x\xabue
; }

130 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

w\xdcd_\x9adex
(\xe8cڡ
n\xdbx\xfb\xb1
 {

131 
v\x\xabue
 >>
FsckCڡ\x\xafts
::
BIT_SHIFT
;

134 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

b\x99_mask
(\xe8cڡ
n\xdbx\xfb\xb1
 {

135  1U << (
v\x\xabue
 &
FsckCڡ\x\xafts
::
BITMAP_MASK
);

142 \xfeas\xa0
	cB\x99m\xad
 {

143
	g\xb4iv\xa9e
:

144
\xa1d
::
ve\xf9\xdc
<\xa1d::
u\x9\xa932_t
>
d\xa9a_
;

145
	g\xa1d
::
size_t

b\x99_cou\xc1_
;

147
	gpublic
:

148
ex\xb6ic\x99

B\x99m\xad
(
\xa1d
::
size_t

b\x99_cou\xc1
)

149 :
d\xa9a_
((
b\x99_cou\xc1
 + 31\xe8/ 32, 0),
b\x99_cou\xc1_
(bit_count) {

150 i\xe0(
	gb\x99_cou\xc1
 == 0) {

151
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Bitmap size cannot be zero");

154
\xa3t_b\x99
(
B\x99Numb\x94
(0));

157 
\xa3t_b\x99
(
B\x99Numb\x94

b\x99
) {

158 i\xe0(
	gb\x99
.
	gv\x\xabue
 >\xf0
b\x99_cou\xc1_
) {

159
throw

\xa1d
::
out_of_\xb\xe2ge
("B\x99 index ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
b\x99
.
v\x\xabue
));

161
	gd\xa9a_
[
b\x99
.
w\xdcd_\x9adex
()] |\xf0b\x99.
b\x99_mask
();

164 
\xfe\x97r_b\x99
(
B\x99Numb\x94

b\x99
) {

165 i\xe0(
	gb\x99
.
	gv\x\xabue
 >\xf0
b\x99_cou\xc1_
) {

166
throw

\xa1d
::
out_of_\xb\xe2ge
("B\x99 index ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
b\x99
.
v\x\xabue
));

168
	gd\xa9a_
[
b\x99
.
w\xdcd_\x9adex
()] &\xf0~b\x99.
b\x99_mask
();

171 [[
nodis\xf\xe4d
]]
bo\xde

is_\xa3t
(
B\x99Numb\x94

b\x99
) const {

172 i\xe0(
	gb\x99
.
	gv\x\xabue
 >\xf0
b\x99_cou\xc1_
) {

173 
\xe7l\xa3
;

175  (
	gd\xa9a_
[
b\x99
.
w\xdcd_\x9adex
()] &
	gb\x99
.
b\x99_mask
()) != 0;

178 
\x9a\x99\x9flize_\xe4\x93_b\x99s
(
B\x99Numb\x94

\xa1\xact_b\x99
) {

179 
	g\xa1d
::
u\x9\xa932_t

b\x99
 =
\xa1\xact_b\x99
.
v\x\xabue
;
	gb\x99
 <
	gb\x99_cou\xc1_
; ++bit) {

180
\xa3t_b\x99
(
B\x99Numb\x94
(
b\x99
));

184 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

size_b\x99s
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
b\x99_cou\xc1_
; }

185 [[
nodis\xf\xe4d
]]
	g\xa1d
::
size_t

size_w\xdcds
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
d\xa9a_
.
size
(); }

186 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
u\x9\xa932_t
 *
d\xa9a
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
d\xa9a_
.data(); }

187 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t
 *
d\xa9a
(\xe8
n\xdbx\xfb\xb1
 { 
d\xa9a_
.data(); }

189 
l\xdfd_\xe4om_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, diskio::
Se\xf9\xdcAdd\xbbss

\xa1\xact_block
,

190
\xa1d
::
size_t

block_cou\xc1
) {

191 cڡ
\xa1d
::
size_t

w\xdcds_\xb3r_block
 =
BLOCK_SIZE
 / (\xa1d::
u\x9\xa932_t
);

193 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gblock_cou\xc1
; ++i) {

194 aut\xd8
	g\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa1\xact_block
.
v\x\xabue
 +
i
));

195 cڡ
	g\xa1d
::
size_t

de\xa1_off\xa3t
 =
i
 *
w\xdcds_\xb3r_block
;

196 cڡ
	g\xa1d
::
size_t

c\xddy_w\xdcds
 =
\xa1d
::
m\x9a
(
w\xdcds_\xb3r_block
,
d\xa9a_
.
size
(\xe8-
de\xa1_off\xa3t
);

197 cڡ
	g\xa1d
::
size_t

c\xddy_by\x8bs
 =
c\xddy_w\xdcds
 * (
\xa1d
::
u\x9\xa932_t
);

199 i\xe0(
	g\xa3\xf9\xdc_d\xa9a
.
size_by\x8bs
(\xe8>\xf0
c\xddy_by\x8bs
 &&
de\xa1_off\xa3t
 <
d\xa9a_
.
size
()) {

200
\xa1d
::
c\xddy
(
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
(), se\xf9\xdc_d\xa9a.d\xa9a(\xe8+
c\xddy_by\x8bs
,

201
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(
d\xa9a_
.
d\xa9a
(\xe8+
de\xa1_off\xa3t
));

205
\xa3t_b\x99
(
B\x99Numb\x94
(0));

208 
\xa7ve_to_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, diskio::
Se\xf9\xdcAdd\xbbss

\xa1\xact_block
,

209
\xa1d
::
size_t

block_cou\xc1
) {

210 cڡ
\xa1d
::
size_t

w\xdcds_\xb3r_block
 =
BLOCK_SIZE
 / (\xa1d::
u\x9\xa932_t
);

212 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gblock_cou\xc1
; ++i) {

213 cڡ
	g\xa1d
::
size_t

\xa4c_off\xa3t
 =
i
 *
w\xdcds_\xb3r_block
;

214 i\xe0(
	g\xa4c_off\xa3t
 <
	gd\xa9a_
.
size
()) {

215 cڡ
	g\xa1d
::
size_t

c\xddy_w\xdcds
 =
\xa1d
::
m\x9a
(
w\xdcds_\xb3r_block
,
d\xa9a_
.
size
(\xe8-
\xa4c_off\xa3t
);

216 cڡ
	g\xa1d
::
size_t

c\xddy_by\x8bs
 =
c\xddy_w\xdcds
 * (
\xa1d
::
u\x9\xa932_t
);

218
	gdiskio
::
Se\xf9\xdcBuf\xe3r

buf\xe3r
(

219
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa98_t
 *>(
d\xa9a_
.
d\xa9a
(\xe8+
\xa4c_off\xa3t
),
c\xddy_by\x8bs
);

220
	gdisk
.
wr\x99e_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa1\xact_block
.
v\x\xabue
 +
i
),
buf\xe3r
);

225 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
B\x99Numb\x94
>
f\x9ad_dif\xe3\xbbn\xfbs
(cڡ
B\x99m\xad
 &
\xd9h\x94
) const {

226
\xa1d
::
ve\xf9\xdc
<
B\x99Numb\x94
>
dif\xe3\xbbn\xfbs
;

227 cڡ\x87ut\xd8
	gm\x9a_w\xdcds
 =
\xa1d
::
m\x9a
(
d\xa9a_
.
size
(),
\xd9h\x94
.data_.size());

229 
	g\xa1d
::
size_t

w\xdcd_idx
 = 0;
	gw\xdcd_idx
 <
	gm\x9a_w\xdcds
; ++word_idx) {

230
	g\xa1d
::
u\x9\xa932_t

diff
 =
d\xa9a_
[
w\xdcd_idx
] ^
\xd9h\x94
.data_[word_idx];

231 
	g\xa1d
::
u\x9\xa98_t

b\x99_pos
 = 0;
	gdiff
 !\xf00 && b\x99_po\xa0< 32; ++
	gb\x99_pos
) {

232 i\xe0(
	gdiff
 & 1) {

233 cڡ\x87ut\xd8
	gb\x99_numb\x94
 =
w\xdcd_idx
 * 32 +
b\x99_pos
;

234 i\xe0(
	gb\x99_numb\x94
 <
	gb\x99_cou\xc1_
) {

235
	gdif\xe3\xbbn\xfbs
.
em\xb6a\xfb_back
(
B\x99Numb\x94
(
b\x99_numb\x94
));

238
	gdiff
 >>= 1;

241 
	gdif\xe3\xbbn\xfbs
;

248 
	sF\x9\x93sy\xa1emS\x8\xe1i\xa1ics
 {

249
	g\xa1d
::
u\x9\xa932_t

\xbbgu\xcfr_f\x9ees
{0};

250
	g\xa1d
::
u\x9\xa932_t

d\x9\xfb\xf9ܛs
{0};

251
	g\xa1d
::
u\x9\xa932_t

block_\xa5ec\x9\xe6
{0};

252
	g\xa1d
::
u\x9\xa932_t

ch\xac_\xa5ec\x9\xe6
{0};

253
	g\xa1d
::
u\x9\xa932_t

bad_\x9aodes
{0};

254
	g\xa1d
::
u\x9\xa932_t

\xe4\x93_\x9aodes
{0};

255
	g\xa1d
::
u\x9\xa932_t

\xe4\x93_z\xdaes
{0};

256
	g\xa1d
::
\xac\xbfy
<
\xa1d
::
u\x9\xa932_t
, 4>
	gz\xd\xab_ty\xb3s
{};

257
	g\xa1d
::
u\x9\xa932_t

\x94r\xdcs_found
{0};

258
	g\xa1d
::
u\x9\xa932_t

\x94r\xdcs_fixed
{0};

260 
\xbb\xa3t
(\xe8
	gn\xdbx\xfb\xb1
 { *
	gthis
 =
F\x9\x93sy\xa1emS\x8\xe1i\xa1ics
{}; }

262 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

tٮ_\x9aodes
(\xe8cڡ
n\xdbx\xfb\xb1
 {

263 
\xbbgu\xcfr_f\x9ees
 +
d\x9\xfb\xf9ܛs
 +
block_\xa5ec\x9\xe6
 +
ch\xac_\xa5ec\x9\xe6
 +
bad_\x9aodes
 +

264
\xe4\x93_\x9aodes
;

267 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

tٮ_z\xd\xabs
(\xe8cڡ
n\xdbx\xfb\xb1
 {

268
\xa1d
::
u\x9\xa932_t

tٮ
 =
\xe4\x93_z\xdaes
;

269 cڡ\x87ut\xd8&
	gcou\xc1
 :
z\xd\xab_ty\xb3s
) {

270
tٮ
 +\xf0
cou\xc1
;

272 
	gtٮ
;

279 \xfeas\xa0
	cP\xa9hT\xbfck\x94
 {

280
	g\xb4iv\xa9e
:

281 
	sP\xa9hNode
 {

282
\xa1d
::
\xa1r\x9ag

\xc7me
;

283
\x9aode_\xc4

	g\x9aode_numb\x94
;

284
	g\xa1d
::
sh\xa\xfbd_\xb1r
<
P\xa9hNode
>
\xb7\xbb\xc1
;

286
P\xa9hNode
(
\xa1d
::
\xa1r\x9ag

n
,
\x9aode_\xc4

\x9ao
, std::
sh\xa\xfbd_\xb1r
<P\xa9hNode>
p
 =
nuαr
)

287 :
\xc7me
(
\xa1d
::
move
(
n
)),
\x9aode_numb\x94
(
\x9ao
),
\xb7\xbb\xc1
(\xa1d::move(
p
)) {}

290
	g\xa1d
::
sh\xa\xfbd_\xb1r
<
P\xa9hNode
>
cu\xbc\x92t_
;

292
	gpublic
:

293
P\xa9hT\xbfck\x94
(\xe8:
cu\xbc\x92t_
(
\xa1d
::
make_sh\xa\xfbd
<
P\xa9hNode
>("",
ROOT_INODE
)) {}

295 
\x92\x8br_d\x9ce\xf9\xdcy
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xc7me
,
\x9aode_\xc4

\x9aode
) {

296
	gcu\xbc\x92t_
 =
\xa1d
::
make_sh\xa\xfbd
<
P\xa9hNode
>(\xa1d::
\xa1r\x9ag
(
\xc7me
),
	g\x9aode
, current_);

299 
ex\x99_d\x9\xfb\xf9\xdcy
() {

300 i\xe0(
	gcu\xbc\x92t_
->
	g\xb7\xbb\xc1
) {

301
	gcu\xbc\x92t_
 =
cu\xbc\x92t_
->
\xb7\xbb\xc1
;

305 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xa1r\x9ag

g\x91_cu\xbc\x92t_\xb7th
() const {

306
\xa1d
::
ve\xf9\xdc
<\xa1d::
\xa1r\x9ag
>
compڒts
;

307 aut\xd8
	gnode
 =
cu\xbc\x92t_
;

309 
	gnode
 &&\x82ode->
	g\xb7\xbb\xc1
) {

310 i\xe0(!
	gnode
->
	g\xc7me
.
em\xb1y
()) {

311
	gcompڒts
.
push_back
(
node
->
\xc7me
);

313
	gnode
 =
node
->
\xb7\xbb\xc1
;

316 i\xe0(
	gcompڒts
.
em\xb1y
()) {

320
	g\xa1d
::
\xa1r\x9ag

\xb7th
;

321 aut\xd8
	g\x99
 =
compڒts
.
rbeg\x9a
(); i\x88!\xf0compڒts.
\xbbnd
(); ++it) {

322
	g\xb7th
 +\xf0"/" + *
\x99
;

324 
	g\xb7th
;

327 [[
nodis\xf\xe4d
]]
\x9aode_\xc4

g\x91_cu\xbc\x92t_\x9aode
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gcu\xbc\x92t_
->
	g\x9aode_numb\x94
; }

329 [[
nodis\xf\xe4d
]]
\x9aode_\xc4

g\x91_\xb7\xbb\xc1_\x9aode
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

330 
	gcu\xbc\x92t_
->
	g\xb7\xbb\xc1
 ? cu\xbc\x92t_->\xb7\xbb\xc1->
	g\x9aode_numb\x94
 :
ROOT_INODE
;

337 \xfeas\xa0
	cU\xa3rI\xc1\x94\xe7\xfb
 {

338
	g\xb4iv\xa9e
:

339
FsckMode

mode_
;

340
bo\xde

	gch\x\xafges_made_
{
	g\xe7l\xa3
};

342
	gpublic
:

343
ex\xb6ic\x99

U\xa3rI\xc1\x94\xe7\xfb
(
FsckMode

mode
\xe8:
mode_
(mode) {}

345 
\xa3t_mode
(
FsckMode

mode
\xe8
n\xdbx\xfb\xb1
 {
mode_
 = mode; }

346 [[
nodis\xf\xe4d
]]
FsckMode

g\x91_mode
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gmode_
; }

347 [[
nodis\xf\xe4d
]]
bo\xde

ch\x\xafges_made
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gch\x\xafges_made_
; }

349 
\xb4\x9at_mes\xa7ge
(
\xa1d
::
\xa1r\x9ag_v\x9bw

mes\xa7ge
\xe8cڡ { std::
cout
 << mes\xa7g\x90<< std::
\xe6ush
; }

351 
\xb4\x9at_\x94r\xdc
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\x94r\xdc
, cڡ
P\xa9hT\xbfck\x94
 &
\xb7th
) const {

352
	g\xa1d
::
cout
 << "ERROR: " <<
\x94r\xdc
 << " i\xc0" <<
\xb7th
.
g\x91_cu\xbc\x92t_\xb7th
() << " (inode "

353 <<
\xb7th
.
g\x91_cu\xbc\x92t_\x9aode
(\xe8<< ")" <<
\xa1d
::
\x92dl
;

356 
\xb4\x9at_w\xacn\x9ag
(
\xa1d
::
\xa1r\x9ag_v\x9bw

w\xa\xfa\x9ag
) const {

357
\xa1d
::
cout
 << "WARNING: " <<
w\xa\xfa\x9ag
 << std::
\x92dl
;

360 [[
nodis\xf\xe4d
]]
bo\xde

ask_\xbb\xb7\x9c
(
\xa1d
::
\xa1r\x9ag_v\x9bw

que\xa1i\xda
) {

361 i\xe0(
mode_
 =\xf0
FsckMode
::
CHECK_ONLY
) {

362
\xa1d
::
cout
 << std::
\x92dl
;

363 
	g\xe7l\xa3
;

366
	g\xa1d
::
cout
 <<
que\xa1i\xda
 << "? ";

368 i\xe0(
	gmode_
 =\xf0
FsckMode
::
AUTOMATIC
) {

369
\xa1d
::
cout
 << "ye\xa0\xd7utom\xa9ic)" << std::
\x92dl
;

370
	gch\x\xafges_made_
 =
\x8cue
;

371 
	g\x8cue
;

375
	g\xa1d
::
\xa1r\x9ag

\xbb\xa5ڣ
;

376
	g\xa1d
::
g\x91l\x9\xab
(
\xa1d
::
c\x9a
,
\xbb\xa5ڣ
);

378 i\xe0(
	g\xbb\xa5ڣ
.
em\xb1y
(\xe8||\x84e\xa5ڣ[0] =\xf0'q' ||
\xbb\xa5ڣ
[0] == 'Q') {

379
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("User\x84equested\x83xit");

382 cڡ
bo\xde

	g\xbb\xb7\x9c
 = !(
\xbb\xa5ڣ
[0] == 'n' ||\x84esponse[0] == 'N');

383 i\xe0(
	g\xbb\xb7\x9c
) {

384
	gch\x\xafges_made_
 =
\x8cue
;

386 
	g\xbb\xb7\x9c
;

389
	g\x8bm\xb6\xa9e
 <
ty\xb3\xc7me

	gT
> [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xddtiڮ
<
T
>
g\x91_\x9\xadut
(
\xa1d
::
\xa1r\x9ag_v\x9bw

\xb4om\xb1
) {

390 i\xe0(
mode_
 =\xf0
FsckMode
::
CHECK_ONLY
) {

391 
\xa1d
::
nu\x\xfb\xddt
;

394
	g\xa1d
::
cout
 <<
\xb4om\xb1
 << ": ";

396
	g\xa1d
::
\xa1r\x9ag

\x9aput
;

397
	g\xa1d
::
g\x91l\x9\xab
(
\xa1d
::
c\x9a
,
\x9aput
);

399 i\xe0(
	g\x9\xadut
.
em\xb1y
()) {

400 
	g\xa1d
::
nu\x\xfb\xddt
;

403
	g\x8cy
 {

404 
cڡex\xb4
 (
\xa1d
::
is_\xa7me_v
<
T
, std::
\xa1r\x9ag
>) {

405 
T
(
\x9aput
);

406 } 
cڡex\xb4
 (
\xa1d
::
is_\x9a\x8bg\xb\xe6_v
<
T
>) {

407 
cڡex\xb4
 (
\xa1d
::
is_sig\xc3d_v
<
T
>) {

408 aut\xd8
v\x\xabue
 =
\xa1d
::
\xa1\xdel
(
\x9aput
);

409 i\xe0(
	gv\x\xabue
 <
	g\xa1d
::
num\x94ic_lim\x99s
<
T
>::
m\x9a
() ||

410
v\x\xabue
 >
\xa1d
::
num\x94ic_lim\x99s
<
T
>::
max
()) {

411
\xb4\x9at_\x94r\xdc
("V\xaeu\x90ou\x88o\xe0\xbfnge",
P\xa9hT\xbfck\x94
{});

412 
	g\xa1d
::
nu\x\xfb\xddt
;

414 
	g\xa1\xa9ic_\xff\xa1
<
	gT
>(
	gv\x\xabue
);

416 aut\xd8
	gv\x\xabue
 =
\xa1d
::
\xa1ou\xce
(
\x9aput
);

417 i\xe0(
	gv\x\xabue
 >
	g\xa1d
::
num\x94ic_lim\x99s
<
T
>::
max
()) {

418
\xb4\x9at_\x94r\xdc
("V\xaeu\x90ou\x88o\xe0\xbfnge",
P\xa9hT\xbfck\x94
{});

419 
	g\xa1d
::
nu\x\xfb\xddt
;

421 
	g\xa1\xa9ic_\xff\xa1
<
	gT
>(
	gv\x\xabue
);

424 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &) {

425
\xb4\x9at_\x94r\xdc
("Inv\xaeid i\xc5u\x88f\xdcm\xa9",
P\xa9hT\xbfck\x94
{});

427 
	g\xa1d
::
nu\x\xfb\xddt
;

434 \xfeas\xa0
	cSu\xb3rBlock
 {

435
	g\xb4iv\xa9e
:

436 
dsb

sb_
;

437
bo\xde

	gmodif\x9bd_
{
	g\xe7l\xa3
};

439
	gpublic
:

440 
l\xdfd_\xe4om_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
) {

441 aut\xd8
\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
SUPER_BLOCK
));

442 i\xe0(
	g\xa3\xf9\xdc_d\xa9a
.
size_by\x8bs
(\xe8< (
	gsb_
)) {

443
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
("Insufficient data for superblock");

445
	g\xa1d
::
c\xddy
(
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
(), se\xf9\xdc_d\xa9a.d\xa9a(\xe8+ (
sb_
),

446
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(&
sb_
));

449 
\xa7ve_to_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
) {

450 i\xe0(!
modif\x9bd_
)

453
	gdiskio
::
Se\xf9\xdcBuf\xe3r

buf\xe3r
(&
sb_
, (sb_));

454
	gdisk
.
wr\x99e_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
SUPER_BLOCK
),
buf\xe3r
);

455
	gmodif\x9bd_
 =
\xe7l\xa3
;

458 
v\x\xabid\xa9e
() const {

459 i\xe0(
	gsb_
.
	gs_magic
 !\xf0
SUPER_MAGIC
) {

460
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Invalid superblock magic\x82umber: 0x" +

461
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_magic
));

464 i\xe0(
	gsb_
.
	gs_n\x9aodes
 == 0) {

465
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("No inodes in filesystem");

468 i\xe0(
	gsb_
.
	gs_nz\xd\xabs
 <= 2) {

469
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Insufficient zones in filesystem");

472 i\xe0(
	gsb_
.
	gs_im\xad_blocks
 == 0) {

473
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("No inode bitmap blocks");

476 i\xe0(
	gsb_
.
	gs_zm\xad_blocks
 == 0) {

477
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("No zone bitmap blocks");

480 i\xe0(
	gsb_
.
	gs_f\x9c\xa1d\xa9az\xd\xab
 <= 1) {

481
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("First data zone\x81oo small");

486 i\xe0(
	gsb_
.
	gs_log_z\xd\xab_size
 > 16) {

487
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
("Zڐsiz\x90to\xd8\xcfrge: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_log_z\xd\xab_size
));

490 i\xe0(
	gsb_
.
	gs_maxsize
 == 0) {

491
throw

\xa1d
::
ru\xc1ime_\x94r\xdc
("Invalid maximum file size");

495 
check_c\xdasi\xa1\x92cy
(
U\xa3rI\xc1\x94\xe7\xfb
 &
ui
) {

496 cڡ\x87ut\xd8
	gex\xb3\xf9ed_im\xad_blocks
 =

497 (
sb_
.
s_n\x9aodes
 + (1 <<
FsckCڡ\x\xafts
::
BITMAP_SHIFT
) - 1) >> FsckConstants::BITMAP_SHIFT;

498 i\xe0(
	gsb_
.
	gs_im\xad_blocks
 !\xf0
ex\xb3\xf9ed_im\xad_blocks
) {

499
ui
.
\xb4\x9at_w\xacn\x9ag
("Ex\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
ex\xb3\xf9ed_im\xad_blocks
) +

500 " im\xad blocks, found " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_im\xad_blocks
));

503 cڡ\x87ut\xd8
	gex\xb3\xf9ed_zm\xad_blocks
 =

504 (
sb_
.
s_nz\xd\xabs
 + (1 <<
FsckCڡ\x\xafts
::
BITMAP_SHIFT
) - 1) >> FsckConstants::BITMAP_SHIFT;

505 i\xe0(
	gsb_
.
	gs_zm\xad_blocks
 !\xf0
ex\xb3\xf9ed_zm\xad_blocks
) {

506
ui
.
\xb4\x9at_w\xacn\x9ag
("Ex\xb3\xf9ed " +
\xa1d
::
to_\xa1r\x9ag
(
ex\xb3\xf9ed_zm\xad_blocks
) +

507 " zm\xad blocks, found " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_zm\xad_blocks
));

510 cڡ\x87ut\xd8
	gs\xff\xcb
 = 1U <<
sb_
.
s_log_z\xd\xab_size
;

511 cڡ\x87ut\xd8
	gex\xb3\xf9ed_f\x9c\xa1_z\xd\xab
 =

512 (
g\x91_\x9aode_li\xa1_\xa1\xa\xf9
(\xe8+
g\x91_\x9aode_li\xa1_blocks
(\xe8+
s\xff\xcb
 - 1\xe8>>
sb_
.
s_log_z\xd\xab_size
;

513 i\xe0(
	gsb_
.
	gs_f\x9c\xa1d\xa9az\xd\xab
 !\xf0
ex\xb3\xf9ed_f\x9c\xa1_z\xd\xab
) {

514
ui
.
\xb4\x9at_w\xacn\x9ag
("Ex\xb3\xf9ed f\x9c\xa1 d\xa9\xa8zڐ" +
\xa1d
::
to_\xa1r\x9ag
(
ex\xb3\xf9ed_f\x9c\xa1_z\xd\xab
) +

515 ", found " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_f\x9c\xa1d\xa9az\xd\xab
));

520 [[
nodis\xf\xe4d
]]
\x9aode_\xc4

g\x91_\x9aode_cou\xc1
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gsb_
.
	gs_n\x9aodes
; }

521 [[
nodis\xf\xe4d
]]
z\xd\xab_\xc4

g\x91_z\xd\xab_cou\xc1
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gsb_
.
	gs_nz\xd\xabs
; }

522 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa916_t

g\x91_im\xad_blocks
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
sb_
.
s_im\xad_blocks
; }

523 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa916_t

g\x91_zm\xad_blocks
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
sb_
.
s_zm\xad_blocks
; }

524 [[
nodis\xf\xe4d
]]
z\xd\xab_\xc4

g\x91_f\x9c\xa1_d\xa9a_z\xd\xab
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gsb_
.
	gs_f\x9c\xa1d\xa9az\xd\xab
; }

525 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa916_t

g\x91_log_z\xd\xab_size
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
sb_
.
s_log_z\xd\xab_size
; }

526 [[
nodis\xf\xe4d
]]
f\x9\x93_pos

g\x91_max_f\x9\x93_size
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gsb_
.
	gs_maxsize
; }

528 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

g\x91_s\xff\xcb
(\xe8cڡ
n\xdbx\xfb\xb1
 {  1U <<
sb_
.
s_log_z\xd\xab_size
; }

530 [[
nodis\xf\xe4d
]]
block_\xc4

g\x91_im\xad_\xa1\xa\xf9
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gSUPER_BLOCK
 + 1; }

532 [[
nodis\xf\xe4d
]]
block_\xc4

g\x91_zm\xad_\xa1\xa\xf9
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

533 
g\x91_im\xad_\xa1\xa\xf9
(\xe8+
	gsb_
.
	gs_im\xad_blocks
;

536 [[
nodis\xf\xe4d
]]
block_\xc4

g\x91_\x9aode_li\xa1_\xa1\xa\xf9
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

537 
g\x91_zm\xad_\xa1\xa\xf9
(\xe8+
	gsb_
.
	gs_zm\xad_blocks
;

540 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

g\x91_\x9aode_li\xa1_blocks
(\xe8cڡ
n\xdbx\xfb\xb1
 {

541  (
sb_
.
s_n\x9aodes
 +
INODES_PER_BLOCK
 - 1) / INODES_PER_BLOCK;

544 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa964_t

g\x91_\x9aode_add\xbbss
(
\x9aode_\xc4

\x9ao
) const {

545 i\xe0(
\x9ao
 =\xf00 || in\xd8>
sb_
.
s_n\x9aodes
) {

546
throw

\xa1d
::
out_of_\xb\xe2ge
("Inv\xaeid inod\x90numb\x94: " + std::
to_\xa1r\x9ag
(
\x9ao
));

548 cڡ\x87ut\xd8
	gby\x8b_off\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
\x9ao
 - 1\xe8*
INODE_SIZE
;

549 cڡ\x87ut\xd8
	gblock_off\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
g\x91_\x9aode_li\xa1_\xa1\xa\xf9
()\xe8*
BLOCK_SIZE
;

550 
	gby\x8b_off\xa3t
 +
	gblock_off\xa3t
;

553 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa964_t

g\x91_z\xd\xab_add\xbbss
(
z\xd\xab_\xc4

z\xd\xab
) const {

554 cڡ\x87ut\xd8
block
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
z\xd\xab
\xe8<<
sb_
.
s_log_z\xd\xab_size
;

555 
block
 *
	gBLOCK_SIZE
;

559 
\xa3t_\x9aode_cou\xc1
(
\x9aode_\xc4

cou\xc1
) {

560
	gsb_
.
	gs_n\x9aodes
 =
cou\xc1
;

561
	gmodif\x9bd_
 =
\x8cue
;

563 
\xa3t_z\xdae_cou\xc1
(
z\xd\xab_\xc4

cou\xc1
) {

564
	gsb_
.
	gs_nz\xd\xabs
 =
cou\xc1
;

565
	gmodif\x9bd_
 =
\x8cue
;

567 
\xa3t_im\xad_blocks
(
\xa1d
::
u\x9\xa916_t

blocks
) {

568
sb_
.
s_im\xad_blocks
 =
blocks
;

569
	gmodif\x9bd_
 =
\x8cue
;

571 
\xa3t_zm\xad_blocks
(
\xa1d
::
u\x9\xa916_t

blocks
) {

572
sb_
.
s_zm\xad_blocks
 =
blocks
;

573
	gmodif\x9bd_
 =
\x8cue
;

575 
\xa3t_f\x9c\xa1_d\xa9a_z\xdae
(
z\xd\xab_\xc4

z\xd\xab
) {

576
	gsb_
.
	gs_f\x9c\xa1d\xa9az\xd\xab
 =
z\xd\xab
;

577
	gmodif\x9bd_
 =
\x8cue
;

579 
\xa3t_log_z\xdae_size
(
\xa1d
::
u\x9\xa916_t

size
) {

580
sb_
.
s_log_z\xd\xab_size
 =
size
;

581
	gmodif\x9bd_
 =
\x8cue
;

583 
\xa3t_max_f\x9ee_size
(
f\x9\x93_pos

size
) {

584
	gsb_
.
	gs_maxsize
 =
size
;

585
	gmodif\x9bd_
 =
\x8cue
;

588 
\xb4\x9at_\x9afo
(
U\xa3rI\xc1\x94\xe7\xfb
 &
ui
) const {

589
	gui
.
\xb4\x9at_mes\xa7ge
("Superblock Information:\n");

590
	gui
.
\xb4\x9at_mes\xa7ge
(" Inodes: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_n\x9aodes
) + "\n");

591
	gui
.
\xb4\x9at_mes\xa7ge
(" Z\xdaes: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_nz\xd\xabs
) + "\n");

592
	gui
.
\xb4\x9at_mes\xa7ge
(" Im\xad blocks: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_im\xad_blocks
) + "\n");

593
	gui
.
\xb4\x9at_mes\xa7ge
(" Zm\xad blocks: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_zm\xad_blocks
) + "\n");

594
	gui
.
\xb4\x9at_mes\xa7ge
(" F\x9c\xa1 d\xa9\xa8z\xdae: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_f\x9c\xa1d\xa9az\xd\xab
) + "\n");

595
	gui
.
\xb4\x9at_mes\xa7ge
(" Log zڐsize: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_log_z\xd\xab_size
) + "\n");

596
	gui
.
\xb4\x9at_mes\xa7ge
(" Max f\x9e\x90size: " +
\xa1d
::
to_\xa1r\x9ag
(
sb_
.
s_maxsize
) + "\n");

597
	gui
.
\xb4\x9at_mes\xa7ge
(" Block size: " +
\xa1d
::
to_\xa1r\x9ag
(
BLOCK_SIZE
) + "\n");

598
	gui
.
\xb4\x9at_mes\xa7ge
(" Zڐsize: " +
\xa1d
::
to_\xa1r\x9ag
(
BLOCK_SIZE
 <<
sb_
.
s_log_z\xd\xab_size
) +

604 
	sd_\x9aode
 {

605
	g\xa1d
::
u\x9\xa916_t

i_mode
;

606
	g\xa1d
::
u\x9\xa916_t

i_uid
;

607
	g\xa1d
::
u\x9\xa932_t

i_size
;

608
	g\xa1d
::
u\x9\xa932_t

i_modtime
;

609
	g\xa1d
::
u\x9\xa98_t

i_gid
;

610
	g\xa1d
::
u\x9\xa98_t

i_ƚks
;

611
	g\xa1d
::
\xac\xbfy
<
z\xd\xab_\xc4
, 9>
	gi_z\xd\xab
;

615 
	sd\x9c_\xa1ru\xf9
 {

616
\x9aode_\xc4

	gd_\x9aum
;

617
	g\xa1d
::
\xac\xbfy
<, 14>
	gd_\xc7me
;

621
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

I_TYPE
 = 0170000;

622
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

I_REGULAR
 = 0100000;

623
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

I_BLOCK_SPECIAL
 = 0060000;

624
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

I_DIRECTORY
 = 0040000;

625
cڡex\xb4

	g\xa1d
::
u\x9\xa916_t

I_CHAR_SPECIAL
 = 0020000;

628
cڡex\xb4

	g\xa1d
::
size_t

NR_DIRECT_ZONES
 = 7;

629
cڡex\xb4

	g\xa1d
::
size_t

NR_INDIRECTS
 = 1;

630
cڡex\xb4

	g\xa1d
::
size_t

NR_DINDIRECTS
 = 1;

635 \xfeas\xa0
	cInode
 {

636
	g\xb4iv\xa9e
:

637
d_\x9aode

\x9aode_
;

638
\x9aode_\xc4

	gnumb\x94_
;

639
bo\xde

	gmodif\x9bd_
{
	g\xe7l\xa3
};

641
	gpublic
:

642
ex\xb6ic\x99

Inode
(
\x9aode_\xc4

numb\x94
 = 0\xe8:
numb\x94_
(number) {

643
\xa1d
::
f\x9\x96
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<\xa1d::
u\x9\xa98_t
 *>(&
\x9aode_
),

644
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
) + (inode_), 0);

648 
l\xdfd_\xe4om_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, cڡ
Su\xb3rBlock
 &
sb
) {

649 cڡ\x87ut\xd8
	gadd\xbbss
 =
sb
.
g\x91_\x9aode_add\xbbss
(
numb\x94_
);

650 cڡ\x87ut\xd8
	g\xa3\xf9\xdc
 =

651
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
add\xbbss
 /
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

652 cڡ\x87ut\xd8
	goff\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
add\xbbss
 %
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

654 aut\xd8
	g\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa3\xf9\xdc
));

655 i\xe0(
	goff\xa3t
 + (
	g\x9aode_
\xe8>
	g\xa3\xf9\xdc_d\xa9a
.
size_by\x8bs
()) {

656
throw

	g\xa1d
::
ru\xc1ime_\x94r\xdc
("Inode spans sector boundary");

659
	g\xa1d
::
c\xddy
(
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
(\xe8+
off\xa3t
, se\xf9\xdc_d\xa9a.d\xa9a(\xe8+ off\xa3\x88+ (
\x9aode_
),

660
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
));

664 
\xa7ve_to_disk
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, cڡ
Su\xb3rBlock
 &
sb
) {

665 i\xe0(!
	gmodif\x9bd_
)

668 cڡ\x87ut\xd8
	gadd\xbbss
 =
sb
.
g\x91_\x9aode_add\xbbss
(
numb\x94_
);

669 cڡ\x87ut\xd8
	g\xa3\xf9\xdc
 =

670
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
add\xbbss
 /
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

671 cڡ\x87ut\xd8
	goff\xa3t
 =
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
size_t
>(
add\xbbss
 %
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

673 aut\xd8
	g\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa3\xf9\xdc
));

674
	g\xa1d
::
c\xddy
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
),

675
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
) + (inode_),

676
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
(\xe8+
off\xa3t
);

678
	gdisk
.
wr\x99e_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa3\xf9\xdc
),
\xa3\xf9\xdc_d\xa9a
);

679
	gmodif\x9bd_
 =
\xe7l\xa3
;

683 [[
nodis\xf\xe4d
]]
InodeTy\xb3

g\x91_ty\xb3
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

684 cڡ\x87ut\xd8
	gmode
 =
\x9aode_
.
i_mode
 &
I_TYPE
;

685 
	gmode
) {

686 
	gI_REGULAR
:

687 
InodeTy\xb3
::
REGULAR_FILE
;

688 
	gI_DIRECTORY
:

689 
InodeTy\xb3
::
DIRECTORY
;

690 
	gI_BLOCK_SPECIAL
:

691 
InodeTy\xb3
::
BLOCK_SPECIAL
;

692 
	gI_CHAR_SPECIAL
:

693 
InodeTy\xb3
::
CHAR_SPECIAL
;

695 
is_\xe4\x93
(\xe8?
InodeTy\xb3
::
FREE_INODE
 : InodeTy\xb3::
BAD_INODE
;

699 [[
nodis\xf\xe4d
]]
bo\xde

is_\xe4\x93
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

700 
	g\x9aode_
.
	gi_mode
 =\xf00 &&
\x9aode_
.
i_ƚks
 == 0;

703 [[
nodis\xf\xe4d
]]
bo\xde

is_d\x9\xfb\xf9\xdcy
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

704  (
	g\x9aode_
.
	gi_mode
 &
	gI_TYPE
\xe8=\xf0
I_DIRECTORY
;

707 [[
nodis\xf\xe4d
]]
bo\xde

is_\xbbgu\xc\xe4_f\x9\x93
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

708  (
	g\x9aode_
.
	gi_mode
 &
	gI_TYPE
\xe8=\xf0
I_REGULAR
;

712 [[
nodis\xf\xe4d
]]
\x9aode_\xc4

g\x91_numb\x94
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	gnumb\x94_
; }

713 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa916_t

g\x91_mode
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_mode
; }

714 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa916_t

g\x91_uid
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_uid
; }

715 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

g\x91_size
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_size
; }

716 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa932_t

g\x91_mtime
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_modtime
; }

717 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t

g\x91_gid
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_gid
; }

718 [[
nodis\xf\xe4d
]]
	g\xa1d
::
u\x9\xa98_t

g\x91_ƚks
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x9aode_
.
i_ƚks
; }

719 [[
nodis\xf\xe4d
]]
z\xd\xab_\xc4

g\x91_z\xd\xab
(
\xa1d
::
size_t

\x9adex
) const {

720 i\xe0(
\x9adex
 >\xf0
\x9aode_
.
i_z\xd\xab
.
size
()) {

721
throw

\xa1d
::
out_of_\xb\xe2ge
("Zڐ\x9adex ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
\x9adex
));

723 
	g\x9aode_
.
	gi_z\xd\xab
[
\x9adex
];

727 
\xa3t_mode
(
\xa1d
::
u\x9\xa916_t

mode
) {

728
\x9aode_
.
i_mode
 =
mode
;

729
	gmodif\x9bd_
 =
\x8cue
;

731 
\xa3t_uid
(
\xa1d
::
u\x9\xa916_t

uid
) {

732
\x9aode_
.
i_uid
 =
uid
;

733
	gmodif\x9bd_
 =
\x8cue
;

735 
\xa3t_size
(
\xa1d
::
u\x9\xa932_t

size
) {

736
\x9aode_
.
i_size
 =
size
;

737
	gmodif\x9bd_
 =
\x8cue
;

739 
\xa3t_mtime
(
\xa1d
::
u\x9\xa932_t

mtime
) {

740
\x9aode_
.
i_modtime
 =
mtime
;

741
	gmodif\x9bd_
 =
\x8cue
;

743 
\xa3t_gid
(
\xa1d
::
u\x9\xa98_t

gid
) {

744
\x9aode_
.
i_gid
 =
gid
;

745
	gmodif\x9bd_
 =
\x8cue
;

747 
\xa3t_ƚks
(
\xa1d
::
u\x9\xa98_t

ƚks
) {

748
\x9aode_
.
i_ƚks
 =
ƚks
;

749
	gmodif\x9bd_
 =
\x8cue
;

751 
\xa3t_z\xdae
(
\xa1d
::
size_t

\x9adex
,
z\xd\xab_\xc4

z\xd\xab
) {

752 i\xe0(
	g\x9adex
 >\xf0
\x9aode_
.
i_z\xd\xab
.
size
()) {

753
throw

\xa1d
::
out_of_\xb\xe2ge
("Zڐ\x9adex ou\x88o\xe0\xbfnge: " + std::
to_\xa1r\x9ag
(
\x9adex
));

755
	g\x9aode_
.
	gi_z\xd\xab
[
\x9adex
] =
z\xd\xab
;

756
	gmodif\x9bd_
 =
\x8cue
;

759 
\xfe\x97r
() {

760
	g\xa1d
::
f\x9\x96
(
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
),

761
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<
\xa1d
::
u\x9\xa98_t
 *>(&
\x9aode_
) + (inode_), 0);

762
	gmodif\x9bd_
 =
\x8cue
;

766 [[
nodis\xf\xe4d
]]
bo\xde

v\x\xabid\xa9e
(cڡ
Su\xb3rBlock
 &
sb
,
U\xa3rI\xc1\x94\xe7\xfb
 &
ui
,

767 cڡ
P\xa9hT\xbfck\x94
 &
\xb7th
) const {

768
bo\xde

	gv\x\xabid
 =
\x8cue
;

771 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	g\x9aode_
.
	gi_z\xd\xab
.
size
(); ++i) {

772 cڡ\x87ut\xd8
	gz\xd\xab
 =
\x9aode_
.
i_z\xd\xab
[
i
];

773 i\xe0(
	gz\xd\xab
 !\xf00 && (
z\xd\xab
 <
sb
.
g\x91_f\x9c\xa1_d\xa9a_z\xd\xab
(\xe8|| zڐ>\xf0sb.
g\x91_z\xd\xab_cou\xc1
())) {

774
ui
.
\xb4\x9at_\x94r\xdc
(

775 "Inv\xaeid zڐ" +
\xa1d
::
to_\xa1r\x9ag
(
z\xd\xab
\xe8+ " i\xc0zڐ" + std::to_\xa1r\x9ag(
i
),
\xb7th
);

776
	gv\x\xabid
 =
\xe7l\xa3
;

781 i\xe0(
is_d\x9\xfb\xf9\xdcy
()) {

782 i\xe0(
	g\x9aode_
.
	gi_size
 % (
	gd\x9c_\xa1ru\xf9
) != 0) {

783
ui
.
\xb4\x9at_\x94r\xdc
("D\x9ce\xf9\xdcy siz\x90n\xd9 muɝ\xcb o\xe0d\x9ce\xf9\xdcy\x83\xc1ry size",
\xb7th
);

784
	gv\x\xabid
 =
\xe7l\xa3
;

789 i\xe0(!
is_\xe4\x93
(\xe8&&
	g\x9aode_
.
	gi_ƚks
 == 0) {

790
ui
.
\xb4\x9at_\x94r\xdc
("N\xda-\xe4\x93 inod\x90w\x99h z\x94\xd8l\x9ak cou\xc1",
\xb7th
);

791
	gv\x\xabid
 =
\xe7l\xa3
;

794 
	gv\x\xabid
;

798 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>
g\x91_\x\xabl_z\xd\xabs
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
,

799 cڡ
Su\xb3rBlock
 &
sb
) const {

800
	g\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>
z\xd\xabs
;

803 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gNR_DIRECT_ZONES
 &&
	g\x9aode_
.
	gi_z\xd\xab
[i] != 0; ++i) {

804
	gz\xd\xabs
.
push_back
(
\x9aode_
.
i_z\xd\xab
[
i
]);

808 i\xe0(
	g\x9aode_
.
	gi_z\xd\xab
[
NR_DIRECT_ZONES
] != 0) {

809 aut\xd8
\x9ad\x9ce\xf9_z\xdaes
 =
\xbbad_\x9ad\x9ce\xf9_z\xdaes
(
disk
,
sb
,
\x9aode_
.
i_z\xd\xab
[
NR_DIRECT_ZONES
]);

810
	gz\xd\xabs
.
\x9a\xa3\xb9
(
z\xd\xabs
.
\x92d
(),
\x9ad\x9ce\xf9_z\xdaes
.
beg\x9a
(), indirect_zones.end());

814 i\xe0(
	g\x9aode_
.
	gi_z\xd\xab
[
NR_DIRECT_ZONES
 + 1] != 0) {

815 aut\xd8
doub\xcb_\x9ad\x9\xfb\xf9_z\xd\xabs
 =

816
\xbbad_doub\xcb_\x9ad\x9ce\xf9_z\xdaes
(
disk
,
sb
,
\x9aode_
.
i_z\xd\xab
[
NR_DIRECT_ZONES
 + 1]);

817
	gz\xd\xabs
.
\x9a\xa3\xb9
(
z\xd\xabs
.
\x92d
(),
doub\xcb_\x9ad\x9\xfb\xf9_z\xd\xabs
.
beg\x9a
(), double_indirect_zones.end());

820 
	gz\xd\xabs
;

823
	g\xb4iv\xa9e
:

824 [[
nodis\xf\xe4d
]]
\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>
\xbbad_\x9ad\x9ce\xf9_z\xdaes
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
,

825 cڡ
Su\xb3rBlock
 &
sb
,

826
z\xd\xab_\xc4

\x9ad\x9ce\xf9_z\xdae
) const {

827
	g\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>
z\xd\xabs
;

828 cڡ\x87ut\xd8
	gz\xd\xab_add\xbbss
 =
sb
.
g\x91_z\xd\xab_add\xbbss
(
\x9ad\x9ce\xf9_z\xdae
);

829 cڡ\x87ut\xd8
	g\xa3\xf9\xdc
 =

830
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
z\xd\xab_add\xbbss
 /
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

832 aut\xd8
	g\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa3\xf9\xdc
));

833 cڡ\x87ut\xd8*
	gz\xd\xab_\xb1rs
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
z\xd\xab_\xc4
 *>(
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
());

834 cڡ\x87ut\xd8
	gmax_z\xd\xabs
 =
\xa3\xf9\xdc_d\xa9a
.
size_by\x8bs
(\xe8/ (
z\xd\xab_\xc4
);

836 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gmax_z\xd\xabs
 &&
	gz\xd\xab_\xb1rs
[i] != 0; ++i) {

837
	gz\xd\xabs
.
push_back
(
z\xd\xab_\xb1rs
[
i
]);

840 
	gz\xd\xabs
;

843 [[
nodis\xf\xe4d
]]
	g\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>

844
\xbbad_doub\xcb_\x9ad\x9ce\xf9_z\xdaes
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, cڡ
Su\xb3rBlock
 &
sb
,

845
z\xd\xab_\xc4

doub\xcb_\x9ad\x9\xfb\xf9_z\xd\xab
) const {

846
	g\xa1d
::
ve\xf9\xdc
<
z\xd\xab_\xc4
>
z\xd\xabs
;

848 aut\xd8
	g\x9ad\x9\xfb\xf9_z\xd\xabs
 =
\xbbad_\x9ad\x9ce\xf9_z\xdaes
(
disk
,
sb
,
doub\xcb_\x9ad\x9\xfb\xf9_z\xd\xab
);

849 cڡ\x87ut\xd8
	g\x9ad\x9\xfb\xf9_z\xd\xab
 :
\x9ad\x9ce\xf9_z\xdaes
) {

850 aut\xd8
d\xa9a_z\xd\xabs
 =
\xbbad_\x9ad\x9ce\xf9_z\xdaes
(
disk
,
sb
,
\x9ad\x9ce\xf9_z\xdae
);

851
	gz\xd\xabs
.
\x9a\xa3\xb9
(
z\xd\xabs
.
\x92d
(),
d\xa9a_z\xd\xabs
.
beg\x9a
(), data_zones.end());

854 
	gz\xd\xabs
;

861 \xfeas\xa0
	cD\x9\xfb\xf9\xdcyE\xc1ry
 {

862
	gpublic
:

863 
	sE\xc1ry
 {

864
\x9aode_\xc4

\x9aode_numb\x94
;

865
	g\xa1d
::
\xa1r\x9ag

\xc7me
;

867
E\xc1ry
(
\x9aode_\xc4

\x9ao
,
\xa1d
::
\xa1r\x9ag

n
\xe8:
\x9aode_numb\x94
(\x9ao),
\xc7me
(\xa1d::
move
(n)) {}

869 [[
nodis\xf\xe4d
]]
bo\xde

is_d\xd9
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\xc7me
 == "."; }

870 [[
nodis\xf\xe4d
]]
bo\xde

is_d\xd9_d\xd9
(\xe8cڡ
	gn\xdbx\xfb\xb1
 { 
	g\xc7me
 == ".."; }

871 [[
nodis\xf\xe4d
]]
bo\xde

is_v\x\xabid_\xc7me
(\xe8cڡ
	gn\xdbx\xfb\xb1
 {

872  !
	g\xc7me
.
em\xb1y
(\xe8&&\x82ame.
size
(\xe8<\xf014 &&
\xc7me
.
f\x9ad
('\0'\xe8=\xf0
\xa1d
::
\xa1r\x9ag
::
\xc5os
;

876
	g\xb4iv\xa9e
:

877
\xa1d
::
ve\xf9\xdc
<
E\xc1ry
>
\x92\x8c\x9bs_
;

879
	gpublic
:

880 
l\xdfd_\xe4om_\x9aode
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
, cڡ
Su\xb3rBlock
 &
sb
,

881 cڡ
Inode
 &
d\x9c_\x9aode
) {

882
	g\x92\x8c\x9bs_
.
\xfe\x97r
();

884 i\xe0(!
	gd\x9c_\x9aode
.
is_d\x9\xfb\xf9\xdcy
()) {

885
throw

	g\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Inode is\x82ot\x87 directory");

888 cڡ\x87ut\xd8
	gz\xd\xabs
 =
d\x9c_\x9aode
.
g\x91_\x\xabl_z\xd\xabs
(
disk
,
sb
);

890 cڡ\x87ut\xd8
	gz\xd\xab
 :
z\xd\xabs
) {

891 cڡ\x87ut\xd8
z\xd\xab_add\xbbss
 =
sb
.
g\x91_z\xd\xab_add\xbbss
(
z\xd\xab
);

892 cڡ\x87ut\xd8
	g\xa3\xf9\xdc
 =

893
\xa1\xa9ic_\xff\xa1
<
\xa1d
::
u\x9\xa964_t
>(
z\xd\xab_add\xbbss
 /
diskio
::
DiskCڡ\x\xafts
::
SECTOR_SIZE
);

895 aut\xd8
	g\xa3\xf9\xdc_d\xa9a
 =
disk
.
\xbbad_\xa3\xf9\xdc
(
diskio
::
Se\xf9\xdcAdd\xbbss
(
\xa3\xf9\xdc
));

896 cڡ\x87ut\xd8*
	gd\x9c_\x92\x8c\x9bs
 =
\xbb\x9a\x8b\xbd\xbbt_\xff\xa1
<cڡ
d\x9c_\xa1ru\xf9
 *>(
\xa3\xf9\xdc_d\xa9a
.
d\xa9a
());

897 cڡ\x87ut\xd8
	gmax_\x92\x8c\x9bs
 =
\xa3\xf9\xdc_d\xa9a
.
size_by\x8bs
(\xe8/ (
d\x9c_\xa1ru\xf9
);

899 
	g\xa1d
::
size_t

i
 = 0;
	gi
 <
	gmax_\x92\x8c\x9bs
; ++i) {

900 i\xe0(
	gd\x9c_\x92\x8c\x9bs
[
i
].
	gd_\x9aum
 != 0) {

902 cڡ *
\xc7me_\xb1r
 =
d\x9c_\x92\x8c\x9bs
[
i
].
d_\xc7me
.
d\xa9a
();

903
	g\xa1d
::
size_t

\xc7me_\xcbn
 = 0;

904 
	g\xc7me_\xcbn
 <
	gd\x9c_\x92\x8c\x9bs
[
i
].
	gd_\xc7me
.
size
(\xe8&&
	g\xc7me_\xb1r
[
\xc7me_\xcbn
] != '\0') {

905 ++
\xc7me_\xcbn
;

907
	g\xa1d
::
\xa1r\x9ag

\xc7me
(
\xc7me_\xb1r
,
\xc7me_\xcbn
);

908
	g\x92\x8c\x9bs_
.
em\xb6a\xfb_back
(
d\x9c_\x92\x8c\x9bs
[
i
].
d_\x9aum
,
\xa1d
::
move
(
\xc7me
));

914 [[
nodis\xf\xe4d
]]
bo\xde

v\x\xabid\xa9e
(
U\xa3rI\xc1\x94\xe7\xfb
 &
ui
, cڡ
P\xa9hT\xbfck\x94
 &
\xb7th
,

915
\x9aode_\xc4

ex\xb3\xf9ed_\xb7\xbb\xc1
) const {

916
bo\xde

	gv\x\xabid
 =
\x8cue
;

917
bo\xde

	ghas_d\xd9
 =
\xe7l\xa3
;

918
bo\xde

	ghas_d\xd9_d\xd9
 =
\xe7l\xa3
;

920 cڡ\x87ut\xd8&
	g\x92\x8cy
 :
\x92\x8c\x9bs_
) {

921 i\xe0(!
\x92\x8cy
.
is_v\x\xabid_\xc7me
()) {

922
ui
.
\xb4\x9at_\x94r\xdc
("Inv\xaeid d\x9ce\xf9\xdcy\x83\xc1ry\x82ame: '" +
\x92\x8cy
.
\xc7me
 + "'",
\xb7th
);

923
	gv\x\xabid
 =
\xe7l\xa3
;

927 i\xe0(
	g\x92\x8cy
.
is_d\xd9
()) {

928 i\xe0(
	ghas_d\xd9
) {

929
	gui
.
\xb4\x9at_\x94r\xdc
("Du\xb6i\xff\x8b '.'\x83\xc1ry",
\xb7th
);

930
	gv\x\xabid
 =
\xe7l\xa3
;

932
	ghas_d\xd9
 =
\x8cue
;

933 i\xe0(
	g\x92\x8cy
.
	g\x9aode_numb\x94
 !\xf0
\xb7th
.
g\x91_cu\xbc\x92t_\x9aode
()) {

934
ui
.
\xb4\x9at_\x94r\xdc
("'.'\x83\xc1ry\x85o\x9at\xa0t\xd8wr\xdag inode",
\xb7th
);

935
	gv\x\xabid
 =
\xe7l\xa3
;

938 } i\xe0(
	g\x92\x8cy
.
is_d\xd9_d\xd9
()) {

939 i\xe0(
	ghas_d\xd9_d\xd9
) {

940
	gui
.
\xb4\x9at_\x94r\xdc
("Du\xb6i\xff\x8b '..'\x83\xc1ry",
\xb7th
);

941
	gv\x\xabid
 =
\xe7l\xa3
;

943
	ghas_d\xd9_d\xd9
 =
\x8cue
;

944 i\xe0(
	g\x92\x8cy
.
	g\x9aode_numb\x94
 !\xf0
ex\xb3\xf9ed_\xb7\xbb\xc1
) {

945
ui
.
\xb4\x9at_\x94r\xdc
("'..'\x83\xc1ry\x85o\x9at\xa0t\xd8wr\xdag inode",
\xb7th
);

946
	gv\x\xabid
 =
\xe7l\xa3
;

952 i\xe0(!
	ghas_d\xd9
) {

953
	gui
.
\xb4\x9at_\x94r\xdc
("Miss\x9ag '.'\x83\xc1ry",
\xb7th
);

954
	gv\x\xabid
 =
\xe7l\xa3
;

957 i\xe0(!
	ghas_d\xd9_d\xd9
) {

958
	gui
.
\xb4\x9at_\x94r\xdc
("Miss\x9ag '..'\x83\xc1ry",
\xb7th
);

959
	gv\x\xabid
 =
\xe7l\xa3
;

962 
	gv\x\xabid
;

972 [[
nodis\xf\xe4d
]] cڡ
	g\xa1d
::
ve\xf9\xdc
<
E\xc1ry
> &
g\x91_\x92\x8c\x9bs
(\xe8cڡ
n\xdbx\xfb\xb1
 { 
\x92\x8c\x9bs_
; }

978 \xfeas\xa0
	cF\x9\x93sy\xa1emCheck\x94
 {

979
	g\xb4iv\xa9e
:

980
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk_
;

981
Su\xb3rBlock

	gsu\xb3rblock_
;

982
B\x99m\xad

	g\x9aode_b\x99m\xad_
;

983
B\x99m\xad

	gz\xd\xab_b\x99m\xad_
;

984
	g\xa1d
::
ve\xf9\xdc
<
\xa1d
::
u\x9\xa916_t
>
\x9aode_l\x9ak_cou\xc1s_
;

985
	g\xa1d
::
ve\xf9\xdc
<
bo\xde
>
z\xd\xab_u\xa7ge_
;

986
F\x9\x93sy\xa1emS\x8\xe1i\xa1ics

	g\xa1\xa9i\xa1ics_
;

987
U\xa3rI\xc1\x94\xe7\xfb

	gui_
;

989
	gpublic
:

990
ex\xb6ic\x99

F\x9\x93sy\xa1emCheck\x94
(
diskio
::
DiskI\xc1\x94\xe7\xfb
 &
disk
,
FsckMode

mode
)

991 :
disk_
(
disk
),
\x9aode_b\x99m\xad_
(1),
z\xd\xab_b\x99m\xad_
(1),
ui_
(
mode
) {}

997 [[
nodis\xf\xe4d
]]
bo\xde

check_f\x9\x93sy\xa1em
() {

998
	g\x8cy
 {

999
	gui_
.
\xb4\x9at_mes\xa7ge
("MINIX Filesystem Checker v2.0\n");

1000
	gui_
.
\xb4\x9at_mes\xa7ge
("==============================\n\n");

1003
pha\xa31_check_su\xb3rblock
();

1006
pha\xa32_\x9a\x99\x9\xe6ize_\xa1ru\xf9u\xbbs
();

1009
pha\xa33_check_\x9aodes
();

1012
pha\xa34_check_d\x9\xfb\xf9ܛs
();

1015
pha\xa35_check_b\x99m\xads
();

1018
pha\xa36_v\x94ify_l\x9ak_cou\xc1s
();

1021
pha\xa37_\x\xe3\x97nup_\x\xafd_summ\xacy
();

1023 
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
 =\xf00 ||
\xa1\xa9i\xa1ics_
.
\x94r\xdcs_fixed
 > 0;

1025 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

1026
ui_
.
\xb4\x9at_\x94r\xdc
("F\xa9\xae\x83\xbc\xdc dur\x9ag f\x9eesy\xa1em check: " +
\xa1d
::
\xa1r\x9ag
(
e
.
wh\xa9
()),

1027
P\xa9hT\xbfck\x94
{});

1028 
	g\xe7l\xa3
;

1032
	g\xb4iv\xa9e
:

1033 
pha\xa31_check_su\xb3rblock
() {

1034
ui_
.
\xb4\x9at_mes\xa7ge
("Phase 1: Checking superblock...\n");

1036
	gsu\xb3rblock_
.
l\xdfd_\xe4om_disk
(
disk_
);

1037
	gsu\xb3rblock_
.
v\x\xabid\xa9e
();

1038
	gsu\xb3rblock_
.
check_c\xdasi\xa1\x92cy
(
ui_
);

1040 i\xe0(
	gui_
.
g\x91_mode
(\xe8!\xf0
FsckMode
::
CHECK_ONLY
) {

1041
su\xb3rblock_
.
\xb4\x9at_\x9afo
(
ui_
);

1045 
pha\xa32_\x9a\x99\x9\xe6ize_\xa1ru\xf9u\xbbs
() {

1046
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 2: Initializing data structures...\n");

1049
	g\x9aode_b\x99m\xad_
 =
B\x99m\xad
(
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
());

1050
	gz\xd\xab_b\x99m\xad_
 =
B\x99m\xad
(
su\xb3rblock_
.
g\x91_z\xd\xab_cou\xc1
());

1053
	g\x9aode_b\x99m\xad_
.
l\xdfd_\xe4om_disk
(
disk_
,
diskio
::
Se\xf9\xdcAdd\xbbss
(
su\xb3rblock_
.
g\x91_im\xad_\xa1\xa\xf9
()),

1054
su\xb3rblock_
.
g\x91_im\xad_blocks
());

1055
	gz\xd\xab_b\x99m\xad_
.
l\xdfd_\xe4om_disk
(
disk_
,
diskio
::
Se\xf9\xdcAdd\xbbss
(
su\xb3rblock_
.
g\x91_zm\xad_\xa1\xa\xf9
()),

1056
su\xb3rblock_
.
g\x91_zm\xad_blocks
());

1059
	g\x9aode_l\x9ak_cou\xc1s_
.
assign
(
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
() + 1, 0);

1060
	gz\xd\xab_u\xa7ge_
.
assign
(
su\xb3rblock_
.
g\x91_z\xd\xab_cou\xc1
(),
\xe7l\xa3
);

1063 
z\xd\xab_\xc4

	gz\xd\xab
 = 0; zڐ<
	gsu\xb3rblock_
.
g\x91_f\x9c\xa1_d\xa9a_z\xd\xab
(); ++zone) {

1064
	gz\xd\xab_u\xa7ge_
[
z\xd\xab
] =
\x8cue
;

1068 
pha\xa33_check_\x9aodes
() {

1069
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 3: Checking inodes...\n");

1071
P\xa9hT\xbfck\x94

	g\xb7th
;

1073 
\x9aode_\xc4

	g\x9ao
 = 1; in\xd8<\xf0
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
(); ++ino) {

1074
Inode

\x9aode
(
\x9ao
);

1075
	g\x9aode
.
l\xdfd_\xe4om_disk
(
disk_
,
su\xb3rblock_
);

1077 i\xe0(
	g\x9aode
.
is_\xe4\x93
()) {

1078
	g\xa1\xa9i\xa1ics_
.
	g\xe4\x93_\x9aodes
++;

1083 i\xe0(!
	g\x9aode_b\x99m\xad_
.
is_\xa3t
(
B\x99Numb\x94
(
\x9ao
))) {

1084 i\xe0(
	gui_
.
ask_\xbb\xb7\x9c
("Inod\x90" +
\xa1d
::
to_\xa1r\x9ag
(
\x9ao
) +

1086
\x9aode_b\x99m\xad_
.
\xa3t_b\x99
(
B\x99Numb\x94
(
\x9ao
));

1087
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
++;

1089
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1093 i\xe0(!
	g\x9aode
.
v\x\xabid\xa9e
(
su\xb3rblock_
,
ui_
,
\xb7th
)) {

1094
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1095 i\xe0(
	gui_
.
ask_\xbb\xb7\x9c
("Inod\x90" +
\xa1d
::
to_\xa1r\x9ag
(
\x9ao
) + " has\x83rrors. Clear it")) {

1096
\x9aode
.
\xfe\x97r
();

1097
	g\x9aode
.
\xa7ve_to_disk
(
disk_
,
su\xb3rblock_
);

1098
	g\x9aode_b\x99m\xad_
.
\xfe\x97r_b\x99
(
B\x99Numb\x94
(
\x9ao
));

1099
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
++;

1105 
	g\x9aode
.
g\x91_ty\xb3
()) {

1106 
	gInodeTy\xb3
::
REGULAR_FILE
:

1107
\xa1\xa9i\xa1ics_
.
\xbbgu\xcfr_f\x9ees
++;

1109 
	gInodeTy\xb3
::
DIRECTORY
:

1110
\xa1\xa9i\xa1ics_
.
d\x9\xfb\xf9ܛs
++;

1112 
	gInodeTy\xb3
::
BLOCK_SPECIAL
:

1113
\xa1\xa9i\xa1ics_
.
block_\xa5ec\x9\xe6
++;

1115 
	gInodeTy\xb3
::
CHAR_SPECIAL
:

1116
\xa1\xa9i\xa1ics_
.
ch\xac_\xa5ec\x9\xe6
++;

1118 
	gInodeTy\xb3
::
BAD_INODE
:

1119
\xa1\xa9i\xa1ics_
.
bad_\x9aodes
++;

1126 aut\xd8
	gz\xd\xabs
 =
\x9aode
.
g\x91_\x\xabl_z\xd\xabs
(
disk_
,
su\xb3rblock_
);

1127 cڡ\x87ut\xd8
	gz\xd\xab
 :
z\xd\xabs
) {

1128 i\xe0(
z\xd\xab
 >\xf0
su\xb3rblock_
.
g\x91_z\xd\xab_cou\xc1
()) {

1129
ui_
.
\xb4\x9at_\x94r\xdc
("Zڐ" +
\xa1d
::
to_\xa1r\x9ag
(
z\xd\xab
\xe8+ " ou\x88o\xe0\xbfnge",
\xb7th
);

1130
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1134 i\xe0(
	gz\xd\xab_u\xa7ge_
[
z\xd\xab
]) {

1135
	gui_
.
\xb4\x9at_\x94r\xdc
("Zڐ" +
\xa1d
::
to_\xa1r\x9ag
(
z\xd\xab
\xe8+ " muɝly c\xcfimed",
\xb7th
);

1136
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1138
	gz\xd\xab_u\xa7ge_
[
z\xd\xab
] =
\x8cue
;

1144 
pha\xa34_check_d\x9\xfb\xf9ܛs
() {

1145
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 4: Checking directories...\n");

1148
check_d\x9\xfb\xf9\xdcy_\xbbcursive
(
ROOT_INODE
, ROOT_INODE,
P\xa9hT\xbfck\x94
{});

1151 
check_d\x9\xfb\xf9\xdcy_\xbbcursive
(
\x9aode_\xc4

d\x9c_\x9ao
, inode_\xc4
\xb7\xbb\xc1_\x9ao
,
P\xa9hT\xbfck\x94

\xb7th
) {

1152 i\xe0(
	gd\x9c_\x9ao
 =\xf0
\xb7\xbb\xc1_\x9ao
 &&
d\x9c_\x9ao
 !\xf0
ROOT_INODE
) {

1153
ui_
.
\xb4\x9at_\x94r\xdc
("D\x9ce\xf9\xdcy i\xa0\x99\xa0ow\xc0\xb7\xbb\xc1",
\xb7th
);

1154
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1157
Inode

d\x9c_\x9aode
(
d\x9c_\x9ao
);

1158
	gd\x9c_\x9aode
.
l\xdfd_\xe4om_disk
(
disk_
,
su\xb3rblock_
);

1160 i\xe0(!
	gd\x9c_\x9aode
.
is_d\x9\xfb\xf9\xdcy
()) {

1161
	gui_
.
\xb4\x9at_\x94r\xdc
(

1162 "Ex\xb3\xf9ed d\x9ce\xf9\xdcy, found " +
\x9aode_ty\xb3_to_\xa1r\x9ag
(
d\x9c_\x9aode
.
g\x91_ty\xb3
()),
\xb7th
);

1163
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1168 i\xe0(
	gd\x9c_\x9ao
 <\xf0
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
()) {

1169
\x9aode_l\x9ak_cou\xc1s_
[
d\x9c_\x9ao
]++;

1172
D\x9\xfb\xf9\xdcyE\xc1ry

	gd\x9c_\x92\x8c\x9bs
;

1173
	gd\x9c_\x92\x8c\x9bs
.
l\xdfd_\xe4om_\x9aode
(
disk_
,
su\xb3rblock_
,
d\x9c_\x9aode
);

1176 i\xe0(!
	gd\x9c_\x92\x8c\x9bs
.
v\x\xabid\xa9e
(
ui_
,
\xb7th
,
\xb7\xbb\xc1_\x9ao
)) {

1177
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1181 cڡ\x87ut\xd8&
	g\x92\x8cy
 :
d\x9c_\x92\x8c\x9bs
.
g\x91_\x92\x8c\x9bs
()) {

1182 i\xe0(
\x92\x8cy
.
is_d\xd9
(\xe8||\x83\xc1ry.
is_d\xd9_d\xd9
()) {

1186 i\xe0(
	g\x92\x8cy
.
	g\x9aode_numb\x94
 >
	gsu\xb3rblock_
.
g\x91_\x9aode_cou\xc1
()) {

1187
	gui_
.
\xb4\x9at_\x94r\xdc
("D\x9ce\xf9\xdcy\x83\xc1ry '" +
\x92\x8cy
.
\xc7me
 + "'\x85oints\x81o invalid inode " +

1188
\xa1d
::
to_\xa1r\x9ag
(
\x92\x8cy
.
\x9aode_numb\x94
),

1189
\xb7th
);

1190
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1195
	g\x9aode_l\x9ak_cou\xc1s_
[
\x92\x8cy
.
\x9aode_numb\x94
]++;

1198
Inode

ch\x9ed_\x9aode
(
\x92\x8cy
.
\x9aode_numb\x94
);

1199
	gch\x9ed_\x9aode
.
l\xdfd_\xe4om_disk
(
disk_
,
su\xb3rblock_
);

1201 i\xe0(
	gch\x9ed_\x9aode
.
is_d\x9\xfb\xf9\xdcy
()) {

1202
	g\xb7th
.
\x92\x8br_d\x9ce\xf9\xdcy
(
\x92\x8cy
.
\xc7me
,\x83\xc1ry.
\x9aode_numb\x94
);

1203
check_d\x9\xfb\xf9\xdcy_\xbbcursive
(
\x92\x8cy
.
\x9aode_numb\x94
,
d\x9c_\x9ao
,
\xb7th
);

1204
	g\xb7th
.
ex\x99_d\x9\xfb\xf9\xdcy
();

1209 
pha\xa35_check_b\x99m\xads
() {

1210
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 5: Checking bitmaps...\n");

1213
B\x99m\xad

ex\xb3\xf9ed_\x9aode_b\x99m\xad
(
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
());

1214
B\x99m\xad

ex\xb3\xf9ed_z\xd\xab_b\x99m\xad
(
su\xb3rblock_
.
g\x91_z\xd\xab_cou\xc1
());

1217 
\x9aode_\xc4

	g\x9ao
 = 1; in\xd8<\xf0
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
(); ++ino) {

1218 i\xe0(
	g\x9aode_l\x9ak_cou\xc1s_
[
\x9ao
] > 0) {

1219
	gex\xb3\xf9ed_\x9aode_b\x99m\xad
.
\xa3t_b\x99
(
B\x99Numb\x94
(
\x9ao
));

1224 
z\xd\xab_\xc4

	gz\xd\xab
 = 0; zڐ<
	gsu\xb3rblock_
.
g\x91_z\xd\xab_cou\xc1
(); ++zone) {

1225 i\xe0(
	gz\xd\xab_u\xa7ge_
[
z\xd\xab
]) {

1226
	gex\xb3\xf9ed_z\xd\xab_b\x99m\xad
.
\xa3t_b\x99
(
B\x99Numb\x94
(
z\xd\xab
));

1231 aut\xd8
	g\x9aode_dif\xe3\xbbn\xfbs
 =
\x9aode_b\x99m\xad_
.
f\x9ad_dif\xe3\xbbn\xfbs
(
ex\xb3\xf9ed_\x9aode_b\x99m\xad
);

1232 i\xe0(!
	g\x9aode_dif\xe3\xbbn\xfbs
.
em\xb1y
()) {

1233
	gui_
.
\xb4\x9at_\x94r\xdc
("Inod\x90b\x99m\xad ha\xa0" +
\xa1d
::
to_\xa1r\x9ag
(
\x9aode_dif\xe3\xbbn\xfbs
.
size
()) +

1235
P\xa9hT\xbfck\x94
{});

1236
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1238 i\xe0(
	gui_
.
ask_\xbb\xb7\x9c
("Fix inode bitmap")) {

1239
	g\x9aode_b\x99m\xad_
 =
\xa1d
::
move
(
ex\xb3\xf9ed_\x9aode_b\x99m\xad
);

1240
	g\x9aode_b\x99m\xad_
.
\xa7ve_to_disk
(
disk_
,

1241
diskio
::
Se\xf9\xdcAdd\xbbss
(
su\xb3rblock_
.
g\x91_im\xad_\xa1\xa\xf9
()),

1242
su\xb3rblock_
.
g\x91_im\xad_blocks
());

1243
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
++;

1248 aut\xd8
	gz\xd\xab_dif\xe3\xbbn\xfbs
 =
z\xd\xab_b\x99m\xad_
.
f\x9ad_dif\xe3\xbbn\xfbs
(
ex\xb3\xf9ed_z\xd\xab_b\x99m\xad
);

1249 i\xe0(!
	gz\xd\xab_dif\xe3\xbbn\xfbs
.
em\xb1y
()) {

1250
	gui_
.
\xb4\x9at_\x94r\xdc
("Zڐb\x99m\xad ha\xa0" +
\xa1d
::
to_\xa1r\x9ag
(
z\xd\xab_dif\xe3\xbbn\xfbs
.
size
()) +

1252
P\xa9hT\xbfck\x94
{});

1253
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1255 i\xe0(
	gui_
.
ask_\xbb\xb7\x9c
("Fix zone bitmap")) {

1256
	gz\xd\xab_b\x99m\xad_
 =
\xa1d
::
move
(
ex\xb3\xf9ed_z\xd\xab_b\x99m\xad
);

1257
	gz\xd\xab_b\x99m\xad_
.
\xa7ve_to_disk
(
disk_
,

1258
diskio
::
Se\xf9\xdcAdd\xbbss
(
su\xb3rblock_
.
g\x91_zm\xad_\xa1\xa\xf9
()),

1259
su\xb3rblock_
.
g\x91_zm\xad_blocks
());

1260
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
++;

1265 
pha\xa36_v\x94ify_l\x9ak_cou\xc1s
() {

1266
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 6: Verifying\x86ink counts...\n");

1268 
\x9aode_\xc4

	g\x9ao
 = 1; in\xd8<\xf0
su\xb3rblock_
.
g\x91_\x9aode_cou\xc1
(); ++ino) {

1269 i\xe0(
	g\x9aode_l\x9ak_cou\xc1s_
[
\x9ao
] == 0) {

1273
Inode

\x9aode
(
\x9ao
);

1274
	g\x9aode
.
l\xdfd_\xe4om_disk
(
disk_
,
su\xb3rblock_
);

1276 cڡ\x87ut\xd8
	ga\xf9u\x\xab_l\x9aks
 =
\x9aode
.
g\x91_ƚks
();

1277 cڡ\x87ut\xd8
	gcou\xc1ed_l\x9aks
 =
\x9aode_l\x9ak_cou\xc1s_
[
\x9ao
];

1279 i\xe0(
	ga\xf9u\x\xab_l\x9aks
 !\xf0
cou\xc1ed_l\x9aks
) {

1280
ui_
.
\xb4\x9at_\x94r\xdc
("Inod\x90" +
\xa1d
::
to_\xa1r\x9ag
(
\x9ao
) + " has " +

1281
\xa1d
::
to_\xa1r\x9ag
(
a\xf9u\x\xab_l\x9aks
) + "\x86inks, counted " +

1282
\xa1d
::
to_\xa1r\x9ag
(
cou\xc1ed_l\x9aks
),

1283
P\xa9hT\xbfck\x94
{});

1284
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
++;

1286 i\xe0(
	gui_
.
ask_\xbb\xb7\x9c
("Fix\x86ink count")) {

1287
	g\x9aode
.
\xa3t_ƚks
(
cou\xc1ed_l\x9aks
);

1288
	g\x9aode
.
\xa7ve_to_disk
(
disk_
,
su\xb3rblock_
);

1289
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
++;

1295 
pha\xa37_\x\xe3\x97nup_\x\xafd_summ\xacy
() {

1296
	gui_
.
\xb4\x9at_mes\xa7ge
("Phase 7: Cleanup\x87nd summary...\n");

1299 i\xe0(
	gui_
.
ch\x\xafges_made
()) {

1300
	gui_
.
\xb4\x9at_mes\xa7ge
("Saving changes\x81o disk...\n");

1301
	gsu\xb3rblock_
.
\xa7ve_to_disk
(
disk_
);

1302
	gdisk_
.
sync
();

1306
\xb4\x9at_summ\xacy
();

1309 
\xb4\x9at_summ\xacy
() {

1310
	gui_
.
\xb4\x9at_mes\xa7ge
("\nFilesystem Check Summary:\n");

1311
	gui_
.
\xb4\x9at_mes\xa7ge
("========================\n");

1312
	gui_
.
\xb4\x9at_mes\xa7ge
("Reguϸf\x9ees: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
\xbbgu\xcfr_f\x9ees
) + "\n");

1313
	gui_
.
\xb4\x9at_mes\xa7ge
("D\x9ce\xf9ܛs: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
d\x9\xfb\xf9ܛs
) + "\n");

1314
	gui_
.
\xb4\x9at_mes\xa7ge
("Block s\xb3c\x9fl: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
block_\xa5ec\x9\xe6
) + "\n");

1315
	gui_
.
\xb4\x9at_mes\xa7ge
("Ch\xac s\xb3c\x9fl: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
ch\xac_\xa5ec\x9\xe6
) + "\n");

1316
	gui_
.
\xb4\x9at_mes\xa7ge
("Bad inodes: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
bad_\x9aodes
) + "\n");

1317
	gui_
.
\xb4\x9at_mes\xa7ge
("F\xbb\x90\x9aodes: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
\xe4\x93_\x9aodes
) + "\n");

1318
	gui_
.
\xb4\x9at_mes\xa7ge
("F\xbb\x90z\xdaes: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
\xe4\x93_z\xdaes
) + "\n");

1319
	gui_
.
\xb4\x9at_mes\xa7ge
("\nE\xbcܠfound: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
\x94r\xdcs_found
) + "\n");

1320
	gui_
.
\xb4\x9at_mes\xa7ge
("E\xbcܠfixed: " +
\xa1d
::
to_\xa1r\x9ag
(
\xa1\xa9i\xa1ics_
.
\x94r\xdcs_fixed
) + "\n");

1322 i\xe0(
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_found
 == 0) {

1323
ui_
.
\xb4\x9at_mes\xa7ge
("\nFilesystem is clean.\n");

1324 } i\xe0(
	g\xa1\xa9i\xa1ics_
.
	g\x94r\xdcs_fixed
 > 0) {

1325
	gui_
.
\xb4\x9at_mes\xa7ge
("\nFilesystem was\x84epaired.\n");

1327
	gui_
.
\xb4\x9at_mes\xa7ge
("\nFilesystem has\x83rrors\x81hat were\x82ot fixed.\n");

1331 [[
nodis\xf\xe4d
]]
	g\xa1d
::
\xa1r\x9ag

\x9aode_ty\xb3_to_\xa1r\x9ag
(
InodeTy\xb3

ty\xb3
) const {

1332 
ty\xb3
) {

1333 
InodeTy\xb3
::
REGULAR_FILE
:

1335 
	gInodeTy\xb3
::
DIRECTORY
:

1337 
	gInodeTy\xb3
::
BLOCK_SPECIAL
:

1339 
	gInodeTy\xb3
::
CHAR_SPECIAL
:

1341 
	gInodeTy\xb3
::
BAD_INODE
:

1343 
	gInodeTy\xb3
::
FREE_INODE
:

1354 \xfeas\xa0
	cFsckA\xb5li\xf\xe1i\xda
 {

1355
	g\xb4iv\xa9e
:

1356
FsckMode

mode_
{FsckMode::
CHECK_ONLY
};

1357
	g\xa1d
::
\xa1r\x9ag

devi\xfb_\xb7th_
;

1358
bo\xde

	gv\x94bo\xa3_
{
	g\xe7l\xa3
};

1360
	gpublic
:

1361 
run
(
\xacgc
, *
\xacgv
[]) {

1362
	g\x8cy
 {

1363
\xb7r\xa3_\xacgum\x92ts
(
\xacgc
,
\xacgv
);

1365 i\xe0(
	gdevi\xfb_\xb7th_
.
em\xb1y
()) {

1366
\xb4\x9at_u\xa7ge
(
\xacgv
[0]);

1371
	gdiskio
::
DiskI\xc1\x94\xe7\xfb

disk
(
devi\xfb_\xb7th_
,
mode_
 =\xf0
FsckMode
::
CHECK_ONLY
);

1374
F\x9\x93sy\xa1emCheck\x94

check\x94
(
disk
,
mode_
);

1375
bo\xde

	gsuc\xfbss
 =
check\x94
.
check_f\x9\x93sy\xa1em
();

1377 
	gsuc\xfbss
 ? 0 : 1;

1379 }
\xfftch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

1380
\xa1d
::
\xfb\xbc
 << "E\xbc\xdc: " <<
e
.
wh\xa9
(\xe8<< std::
\x92dl
;

1385
	g\xb4iv\xa9e
:

1386 
\xb7r\xa3_\xacgum\x92ts
(
\xacgc
, *
\xacgv
[]) {

1387 
	gi
 = 1; i <
	g\xacgc
; ++i) {

1388
	g\xa1d
::
\xa1r\x9ag

\xacg
 =
\xacgv
[
i
];

1390 i\xe0(
	g\xacg
 == "-a") {

1391
mode_
 =
FsckMode
::
AUTOMATIC
;

1392 } i\xe0(
	g\xacg
 == "-i") {

1393
mode_
 =
FsckMode
::
INTERACTIVE
;

1394 } i\xe0(
	g\xacg
 == "-l") {

1395
mode_
 =
FsckMode
::
LIST_ONLY
;

1396 } i\xe0(
	g\xacg
 == "-v") {

1397
v\x94bo\xa3_
 =
\x8cue
;

1398 } i\xe0(
	g\xacg
 =\xf0"-h" ||
\xacg
 == "--help") {

1399
\xb4\x9at_u\xa7ge
(
\xacgv
[0]);

1400
	g\xa1d
::
ex\x99
(0);

1401 } i\xe0(
	g\xacg
[0] == '-') {

1402
throw

\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Unknow\xc0\xddti\xda: " +
\xacg
);

1404 i\xe0(
	gdevi\xfb_\xb7th_
.
em\xb1y
()) {

1405
	gdevi\xfb_\xb7th_
 =
\xacg
;

1407
throw

	g\xa1d
::
\x9av\xaeid_\xacgum\x92t
("Multiple device\x85aths specified");

1413 
\xb4\x9at_u\xa7ge
(cڡ *
\xb4og\xbfm_\xc7me
) {

1414
	g\xa1d
::
cout
 << "U\xa7ge: " <<
\xb4og\xbfm_\xc7me
 << " [options] device\n\n";

1415
	g\xa1d
::
cout
 << "Options:\n";

1416
	g\xa1d
::
cout
 << " -a Automatic\x84epair mode (answer 'yes'\x81o\x87ll questions)\n";

1417
	g\xa1d
::
cout
 << " -i Interactive\x84epair mode (ask before\x83ach\x84epair)\n";

1418
	g\xa1d
::
cout
 << " -l List filesystem contents only\n";

1419
	g\xa1d
::
cout
 << " -v Verbose output\n";

1420
	g\xa1d
::
cout
 << " -h, --help Show\x81his help message\n\n";

1421
	g\xa1d
::
cout
 << "Examples:\n";

1422
	g\xa1d
::
cout
 << " " <<
\xb4og\xbfm_\xc7me
 << " /dev/fd0 # Check filesystem (read-only)\n";

1423
	g\xa1d
::
cout
 << " " <<
\xb4og\xbfm_\xc7me
 << " -a /dev/fd0 # Automatic\x84epair\n";

1424
	g\xa1d
::
cout
 << " " <<
\xb4og\xbfm_\xc7me
 << " -i /dev/fd0 # Interactive\x84epair\n";

1440 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

1441
\x8cy
 {

1442
m\x9aix
::
fsck
::
FsckA\xb5li\xf\xe1i\xda

\xadp
;

1443 
\xadp
.
	`run
(
\xacgc
,
\xacgv
);

1444 }
	`\xf\xe1ch
 (cڡ
\xa1d
::
ex\xfb\xb1i\xda
 &
e
) {

1445
\xa1d
::
\xfb\xbc
 << "F\xa9\xae\x83\xbc\xdc: " <<
e
.
	`wh\xa9
(\xe8<< std::
\x92dl
;

1447 }
	`\xf\xe1ch
 (...) {

1448
\xa1d
::
\xfb\xbc
 << "Unknow\xc0\xe7\x8fȔr\xdc occu\xbced" << std::
\x92dl
;

1451
	}
}

	@tools/getcore.cpp

1
	$ma\x9a
()

3 
fd
,
fd1
,
n
;

4 
buf
[512],
buf1
[1536];

6
fd
 =
	`ݒ
("/dev/fd0", 0);

7
	`\xbbad
(
fd
,
buf1
,3*512);

8
fd1
 =
	`\xfc\x97t
("core.0", 0777);

9
	`wr\x99e
(
fd1
,
buf1
, 3*512);

10
	`\x\xe3o\xa3
(
fd1
);

11
fd1
 =
	`\xfc\x97t
("core", 0777);

13
n
 =
	`\xbbad
(
fd
,
buf
, 512);

14
	`wr\x99e
(
fd1
,
buf
,
n
);

15 } 
n
 > 0);

16
	}
}

	@tools/init.cpp

7 
	~"../h/sig\xc7l.h\xb5
"

9 
	#PIDSLOTS
 10

	)

10 
	#STACKSIZE
 256

	)

11 
	#DIGIT
 8

	)

13 
	g\xc7me
[] = {"/dev/tty?"};

14 
	gpid
[
PIDSLOTS
];

15 
	gpid\xf9
;

16 
\x94\xbao
;

18 
	g\xa1ack
[
STACKSIZE
];

19 *
	g\xa1ack\xb1
 = &
\xa1ack
[
STACKSIZE
];

21
	$ma\x9a
() {

22 
l\x9\xab
[10];

23 
rc
,
\x89y
,
k
,
\xa1\xa9us
,
\x89y\xc4
,
\xf9
,
i
;

26
	`sync
();

27 i\xe0(
	`f\xdck
()) {

29
	`wa\x99
(&
k
);

32 i\xe0(
	`ݒ
("/etc/rc", 0) < 0)

33
	`ex\x99
(-1);

34
	`ݒ
("/dev/tty0", 1);

35
	`ݒ
("/dev/tty0", 1);

36
	`exe\x\xe7
("/bin/sh");

37
	`ex\x99
(-2);

41 i\xe0((
\x89y
 =
	`ݒ
("/etc/ttys", 0)) == 0) {

43 (
\xf9
 =
	`g\x91l\x9\xab
(
l\x9\xab
)) > 1) {

44 i\xe0(
\xf9
 != 4)

46 i\xe0(
l\x9\xab
[0] != '1')

48
\x89y\xc4
 =
l\x9\xab
[2] - '0';

49 i\xe0(
\x89y\xc4
 < 0 ||\x81ty\xc4 >\xf0
PIDSLOTS
)

51
	`\xa1\xa\xf9up
(
\x89y\xc4
);

54
\x89y
 =
	`ݒ
("/dev/tty0", 1);

55
	`wr\x99e
(
\x89y
, "Init can't open /etc/ttys\n", 26);

59
	`\x\xe3o\xa3
(
\x89y
);

66 
i
 = 1; i <\xf0
NR_SIGS
; i++)

67
	`sig\xc7l
(
i
,
SIG_IGN
);

70
k
 =
	`wa\x99
(&
\xa1\xa9us
);

71
pid\xf9
--;

74 
i
 = 0; i <
PIDSLOTS
; i++)

75 i\xe0(
pid
[
i
] =\xf0
k
)

76
	`\xa1\xa\xf9up
(
i
);

78
	}
}

80
	$\xa1\xa\xf9up
(
l\x9a\x92r
) linenr;

84 
k
;

86 i\xe0((
k
 =
	`f\xdck
()) != 0) {

88
pid
[
l\x9a\x92r
] =
k
;

89
pid\xf9
++;

92
	`\x\xe3o\xa3
(0);

93
\xc7me
[
DIGIT
] = '0' +
l\x9a\x92r
;

94 i\xe0(
	`ݒ
(
\xc7me
, 0) != 0)

95
	`ex\x99
(-3);

96 i\xe0(
	`ݒ
(
\xc7me
, 1) != 1)

97
	`ex\x99
(-3);

98 i\xe0(
	`ݒ
(
\xc7me
, 1) != 2)

99
	`ex\x99
(-3);

100
	`exe\x\xe7
("/usr/bin/login");

101
	`exe\x\xe7
("/bin/login");

102
	`exe\x\xe7
("/bin/sh");

103
	`exe\x\xe7
("/usr/bin/sh");

106
	}
}

108 
	$g\x91l\x9\xab
(
buf
)

109 *
buf
;

113 *
p
;

115
p
 =
buf
;

117 i\xe0(
	`\xbbad
(0,
p
, 1) <= 0)

119 i\xe0(*
p
 == '\n') {

120
p
++;

121 *
p
 = 0;

122  (
p
 -
buf
);

124
p
++;

127
	}
}

	@tools/mkfs.cpp

15 
	~"../fs/cڡ.h\xb5
"

16 
	~"../h/cڡ.h\xb5
"

17 
	~"../h/ty\xb3.h\xb5
"

18 #unde\xe0
EXTERN


19 
	#EXTERN


	)

20 
	~"../fs/su\xb3r.h\xb5
"

21 
	~"../fs/ty\xb3.h\xb5
"

23 #ifde\xe0
DOS


24 
	~"/lib/c86/\xa1dio.h
"

25 
	#COMPILERFLAG


	)

28 #ifde\xe0
UNIX


29 
	~<\xa1dio.h
>

30 
	~<sys/\xa1\xa9.h
>

31 
	~<sys/ty\xb3s.h
>

32 
	#COMPILERFLAG


	)

35 #i\xe2de\xe0
COMPILERFLAG


36 
	~"\xa1\xa9.h\xb5
"

37 
	~"\xa1dio.h\xb5
"

40 #i\xe2de\xe0
DOS


41 #i\xe2de\xe0
UNIX


42 
	#UNIX


	)

46 #ifde\xe0
UNIX


47 #unde\xe0
\xb4\x9atf


50 
	#INODE_MAP
 2

	)

51 
	#ZONE_MAP
 3

	)

52 
	#MAX_TOKENS
 10

	)

53 
	#LINE_LEN
 200

	)

54 
	#BIN
 2

	)

55 
	#BINGRP
 2

	)

56 
	#BIT_MAP_SHIFT
 13

	)

57 
	#N_BLOCKS
 32000

	)

59 #ifde\xe0
DOS


60 
	#BREAD
 4

	)

61 
	#BWRITE
 5

	)

63 
	#BREAD
 0

	)

64 
	#BWRITE
 1

	)

67 
	g\xc3xt_z\xd\xab
,
	g\xc3xt_\x9aode
,
	gz\xd\xab_size
,
	gz\xd\xab_shi\xe1
 = 0,
	gzoff
,
	g\xc4blocks
,
	g\x9aode_off\xa3t
,
	gĚodes
,

68
	gl\xf9
 = 1,
	gdisk
,
	gfd
,
	g\xb4\x9\xa9
 = 0,
	gf\x9\x93
 = 0,
	gov\x94ride
 = 0,

69
	gsim\xb6e
 = 0;

71 
	gcu\xbc\x92t_time
;

72 
	gz\x94o
[
BLOCK_SIZE
], *
	gϡp
;

73 
	gum\xad
[(
N_BLOCKS
 + 8) / 8];

75
FILE
 *
	g\xb4\xd9o
;

76 
l\xa3ek
();

77 *
	gsize_fmt
 = "%6D";

78 *
	gldfmt
 = "%6ld";

79 *
	gmode_fmt
 = "%6o";

80 *
	gldmode
 = "%06o";

81 
	ggw\xa\xfa\x9ag
[] = {65, 46, 83, 46, 84, 97, 110, 101, 110, 98, 97, 117, 109, 10};

90 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

91 
i
,
blocks
,
z\xd\xabs
,
\x9aodes
,
mode
,
u\xa4id
,
g\xbdid
,
badu\xa7ge
 = 0;

92 *
tok\x92
[
MAX_TOKENS
],
buf
[
BLOCK_SIZE
];

93 
\x8b\xa1b
[2];

94
FILE
 *
	`fݒ
();

95 
	`time
(),
ls
;

96 
\xa1\xa9

\xa1\xa9buf
;

100
cu\xbc\x92t_time
 =
	`time
(0L);

101 i\xe0(
\xacgc
 != 3 &&\x87rgc != 4)

102
badu\xa7ge
 = 1;

103 i\xe0(
	`\xa1\xa9
(
\xacgv
[
\xacgc
 - 1], &
\xa1\xa9buf
) == 0) {

104 i\xe0((
\xa1\xa9buf
.
\xa1_mode
 &
S_IFMT
\xe8!\xf0
S_IFREG
)

105
badu\xa7ge
 = 1;

107 i\xe0(
badu\xa7ge
) {

108
	`wr\x99e
(2, "Usage: mkfs [-L] special\x85roto\n", 31);

111 --
\xacgc
) {

112 
\xacgv
[
\xacgc
][0]) {

114 *++
\xacgv
[
\xacgc
])

115 *
\xacgv
[
\xacgc
]) {

117
\xb4\x9at
 = 1;

120
\xb4\x9at
 = 1;

121
size_fmt
 =
ldfmt
;

122
mode_fmt
 =
ldmode
;

126
ov\x94ride
 = 1;

129
	`\xb4\x9\xa9f
("Bad sw\x99ch %c, ign\xdced.\n", *
\xacgv
[
\xacgc
]);

136
\xb4\xd9o
 =
	`fݒ
(
\xacgv
[
\xacgc
], "r");

137 i\xe0(
\xb4\xd9o
 !\xf0
NULL
) {

139
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

142
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

143
blocks
 =
	`\xa9oi
(
tok\x92
[0]);

144 i\xe0(
blocks
 >
N_BLOCKS
)

145
	`\xb3x\x99
("Block count\x81oo\x86arge");

146
\x9aodes
 =
	`\xa9oi
(
tok\x92
[1]);

149
	`g\x91l\x9\xab
(
buf
,
tok\x92
);

150
mode
 =
	`mode_c\xda
(
tok\x92
[0]);

151
u\xa4id
 =
	`\xa9oi
(
tok\x92
[1]);

152
g\xbdid
 =
	`\xa9oi
(
tok\x92
[2]);

157
blocks
 =
	`\xa9oi
(
\xacgv
[
\xacgc
]);

158 i\xe0(
blocks
 < 4)

159
	`\xb3x\x99
("Can't open\x85rototype file");

162
\x9aodes
 = (
blocks
 / 3) + 8;

163
mode
 = 040777;

164
u\xa4id
 =
BIN
;

165
g\xbdid
 =
BINGRP
;

166
sim\xb6e
 = 1;

170
\xacgc
--;

171
	`\xa5ec\x9\xe6
(
\xacgv
[
\xacgc
]);

173
\xc4blocks
 =
blocks
;

174
Ěodes
 =
\x9aodes
;

178 #ifde\xe0
UNIX


180
ls
 =
	`l\xa3ek
(
fd
, (()
blocks
 - 1L\xe8*
BLOCK_SIZE
, 0);

181
\x8b\xa1b
[0] = 0x3245;

182
\x8b\xa1b
[1] = 0x11FF;

183 i\xe0(
	`wr\x99e
(
fd
,
\x8b\xa1b
,
BLOCK_SIZE
) != BLOCK_SIZE)

184
	`\xb3x\x99
("File system is\x81oo big for minor device");

185
	`l\xa3ek
(
fd
, (()
blocks
 - 1L\xe8*
BLOCK_SIZE
, 0);

186
\x8b\xa1b
[0] = 0;

187
\x8b\xa1b
[1] = 0;

188
i
 =
	`\xbbad
(
fd
,
\x8b\xa1b
,
BLOCK_SIZE
);

189 i\xe0(
i
 !\xf0
BLOCK_SIZE
 ||
\x8b\xa1b
[0] != 0x3245 ||\x81estb[1] != 0x11FF)

190
	`\xb3x\x99
("File system is\x81oo big for minor device");

191
	`l\xa3ek
(
fd
, 0L, 0);

196
	`\xffche_\x9a\x99
();

197
	`put_block
(0,
z\x94o
);

199
z\xd\xab_shi\xe1
 = 0;

200
z\xd\xabs
 =
blocks
 >>
z\xd\xab_shi\xe1
;

202
	`su\xb3r
(
z\xd\xabs
,
\x9aodes
);

204
i
 =
	`\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
);

205
	`ro\xd9d\x9c
(
i
);

206 i\xe0(
sim\xb6e
 == 0)

207
	`\x97t_d\x9c
(
i
);

209 i\xe0(
\xb4\x9at
)

210
	`\xb4\x9\xa9_fs
();

211
	`\xe6ush
();

214
	}
}

220
	$su\xb3r
(
z\xd\xabs
,
\x9aodes
) zones, inodes;

223 
i
,
\x9aodeblks
,
\x9a\x99blks
,
\x9a\x99z\xdaes
,
\xc4z\xdaes
;

224 
zo
;

225 
su\xb3r_block
 *
sup
;

226 
buf
[
BLOCK_SIZE
], *
\xfd
;

228
sup
 = (
su\xb3r_block
 *)
buf
;

230
sup
->
s_n\x9aodes
 =
\x9aodes
;

231
sup
->
s_nz\xd\xabs
 =
z\xd\xabs
;

232
sup
->
s_im\xad_blocks
 = (
\x9aodes
 + (1 <<
BIT_MAP_SHIFT
) - 1) >> BIT_MAP_SHIFT;

233
sup
->
s_zm\xad_blocks
 = (
z\xd\xabs
 + (1 <<
BIT_MAP_SHIFT
) - 1) >> BIT_MAP_SHIFT;

234
\x9aode_off\xa3t
 =
sup
->
s_im\xad_blocks
 + sup->
s_zm\xad_blocks
 + 2;

235
\x9aodeblks
 = (
\x9aodes
 +
INODES_PER_BLOCK
 - 1) / INODES_PER_BLOCK;

236
\x9a\x99blks
 =
\x9aode_off\xa3t
 +
\x9aodeblks
;

237
\x9a\x99z\xdaes
 = (
\x9a\x99blks
 + (1 <<
z\xd\xab_shi\xe1
) - 1) >> zone_shift;

238
\xc4z\xdaes
 =
\xc4blocks
 >>
z\xd\xab_shi\xe1
;

239
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
 = (
\x9a\x99blks
 + (1 <<
z\xd\xab_shi\xe1
) - 1) >> zone_shift;

240
zoff
 =
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
 - 1;

241
sup
->
s_log_z\xd\xab_size
 =
z\xd\xab_shi\xe1
;

242
sup
->
s_magic
 =
SUPER_MAGIC
;

243
zo
 = 7L + ()
NR_INDIRECTS
 + ()NR_INDIRECTS * NR_INDIRECTS;

244
sup
->
s_max_size
 =
zo
 *
BLOCK_SIZE
;

245
z\xd\xab_size
 = 1 <<
z\xd\xab_shi\xe1
;

247 
\xfd
 =
buf
 + (*
sup
); c\xb0< &buf[
BLOCK_SIZE
]; cp++)

248 *
\xfd
 = 0;

249
	`put_block
(1,
buf
);

252 
i
 = 2; i <
\x9a\x99blks
; i++)

253
	`put_block
(
i
,
z\x94o
);

255
\xc3xt_z\xdae
 =
sup
->
s_f\x9c\xa1d\xa9az\xd\xab
;

256
\xc3xt_\x9aode
 = 1;

257
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
, 0, 1);

258
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
, 0, 1);

261
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
,
\xc4z\xdaes
 -
\x9a\x99z\xdaes
 + 1, 8 *
BLOCK_SIZE
 - (nrzones - initzones + 1));

262
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
,
\x9aodes
 + 1, 8 *
BLOCK_SIZE
 - inodes - 1);

263
	}
}

269
	$ro\xd9d\x9c
(
\x9aode
) inode;

271 
z
;

273
z
 =
	`\x\xabloc_z\xd\xab
();

274
	`add_z\xd\xab
(
\x9aode
,
z
, 32L,
cu\xbc\x92t_time
);

275
	`\x92\x8br_d\x9c
(
\x9aode
, ".", inode);

276
	`\x92\x8br_d\x9c
(
\x9aode
, "..", inode);

277
	`\x9a\xfc_l\x9ak
(
\x9aode
);

278
	`\x9a\xfc_l\x9ak
(
\x9aode
);

279
	}
}

285
	$\x97t_d\x9c
(
\xb7\xbb\xc1
) parent;

288 *
tok\x92
[
MAX_TOKENS
], *
p
;

289 
l\x9\xab
[
LINE_LEN
];

290 
mode
,
n
,
u\xa4id
,
g\xbdid
,
z
,
maj\xdc
,
m\x9a\xdc
,
f
;

291 
size
;

294
	`g\x91l\x9\xab
(
l\x9\xab
,
tok\x92
);

295
p
 =
tok\x92
[0];

296 i\xe0(*
p
 == '$')

298
p
 =
tok\x92
[1];

299
mode
 =
	`mode_c\xda
(
p
);

300
u\xa4id
 =
	`\xa9oi
(
tok\x92
[2]);

301
g\xbdid
 =
	`\xa9oi
(
tok\x92
[3]);

302 i\xe0(
g\xbdid
 & 0200)

303
	`wr\x99e
(2,
gw\xa\xfa\x9ag
, 14);

304
n
 =
	`\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
);

307
	`\x92\x8br_d\x9c
(
\xb7\xbb\xc1
,
tok\x92
[0],
n
);

308
	`\x9a\xfc_size
(
\xb7\xbb\xc1
, 16L);

311
	`\x9a\xfc_l\x9ak
(
n
);

312 i\xe0(*
p
 == 'd') {

314
z
 =
	`\x\xabloc_z\xd\xab
();

315
	`add_z\xd\xab
(
n
,
z
, 32L,
cu\xbc\x92t_time
);

316
	`\x92\x8br_d\x9c
(
n
, ".",\x82);

317
	`\x92\x8br_d\x9c
(
n
, "..",
\xb7\xbb\xc1
);

318
	`\x9a\xfc_l\x9ak
(
\xb7\xbb\xc1
);

319
	`\x9a\xfc_l\x9ak
(
n
);

320
	`\x97t_d\x9c
(
n
);

321 } i\xe0(*
p
 == 'b' || *p == 'c') {

323
maj\xdc
 =
	`\xa9oi
(
tok\x92
[4]);

324
m\x9a\xdc
 =
	`\xa9oi
(
tok\x92
[5]);

325
size
 =
	`\xa9oi
(
tok\x92
[6]);

326
size
 =
BLOCK_SIZE
 * size;

327
	`add_z\xd\xab
(
n
, (
maj\xdc
 << 8\xe8|
m\x9a\xdc
,
size
,
cu\xbc\x92t_time
);

330 i\xe0((
f
 =
	`ݒ
(
tok\x92
[4],
BREAD
)) < 0) {

331
	`wr\x99e
(2, "Can't open file ", 16);

332
	`wr\x99e
(2,
tok\x92
[4],
	`\xa1\xbe\x92
(token[4]));

333
	`wr\x99e
(2, "\n", 1);

335
	`\x97t_f\x9\x93
(
n
,
f
);

338
	}
}

345
	$\x97t_f\x9\x93
(
\x9aode
,
f
) inode, f;

347 
z
,
\xf9
,
i
,
j
,
k
;

348 
buf
[
BLOCK_SIZE
];

349 
	`f\x9\x93_time
();

352 
i
 = 0,
j
 = 0; i <
z\xd\xab_size
; i++, j +\xf0
\xf9
) {

353 
k
 = 0; k <
BLOCK_SIZE
; k++)

354
buf
[
k
] = 0;

355 i\xe0((
\xf9
 =
	`\xbbad
(
f
,
buf
,
BLOCK_SIZE
)) > 0) {

356 i\xe0(
i
 == 0)

357
z
 =
	`\x\xabloc_z\xd\xab
();

358
	`put_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
i
,
buf
);

361 i\xe0(
\xf9
)

362
	`add_z\xd\xab
(
\x9aode
,
z
, ()
j
,
	`f\x9\x93_time
(
f
));

363 } 
\xf9
 =\xf0
BLOCK_SIZE
);

364
	`\x\xe3o\xa3
(
f
);

365
	}
}

371
	$\x92\x8br_d\x9c
(
\xb7\xbb\xc1
,
\xc7me
,
ch\x9ed
) parent, child;

372 *
\xc7me
;

376 
i
,
j
,
k
,
l
,
b
,
z
,
off
;

377 *
p1
, *
p2
;

379 
\x9aumb
;

380 
\xc7me
[14];

381 }
d\x9c_\x92\x8cy
[
NR_DIR_ENTRIES
];

383
d_\x9aode

\x9ao
[
INODES_PER_BLOCK
];

385
b
 = ((
\xb7\xbb\xc1
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

386
off
 = (
\xb7\xbb\xc1
 - 1\xe8%
INODES_PER_BLOCK
;

387
	`g\x91_block
(
b
,
\x9ao
);

389 
k
 = 0; k <
NR_DZONE_NUM
; k++) {

390
z
 =
\x9ao
[
off
].
i_z\xd\xab
[
k
];

391 i\xe0(
z
 == 0) {

392
z
 =
	`\x\xabloc_z\xd\xab
();

393
\x9ao
[
off
].
i_z\xd\xab
[
k
] =
z
;

395 
l
 = 0;\x86 <
z\xd\xab_size
;\x86++) {

396
	`g\x91_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
l
,
d\x9c_\x92\x8cy
);

397 
i
 = 0; i <
NR_DIR_ENTRIES
; i++) {

398 i\xe0(
d\x9c_\x92\x8cy
[
i
].
\x9aumb
 == 0) {

399
d\x9c_\x92\x8cy
[
i
].
\x9aumb
 =
ch\x9ed
;

400
p1
 =
\xc7me
;

401
p2
 =
d\x9c_\x92\x8cy
[
i
].
\xc7me
;

402
j
 = 14;

403 
j
--) {

404 *
p2
++ = *
p1
;

405 i\xe0(*
p1
 != 0)

406
p1
++;

408
	`put_block
((
z
 <<
z\xd\xab_shi\xe1
\xe8+
l
,
d\x9c_\x92\x8cy
);

409
	`put_block
(
b
,
\x9ao
);

416
	`\xb4\x9\xa9f
("D\x9ce\xf9\xdcy-\x9aod\x90%d bey\xdad d\x9ce\xf9 blocks. Could\x82ك\xc1\x94 %s\n",
\xb7\xbb\xc1
,
\xc7me
);

417
	`\xb3x\x99
("Halt");

418
	}
}

420
	$add_z\xd\xab
(
n
,
z
,
by\x8bs
,
cur_time
) n, z;

421 
by\x8bs
,
cur_time
;

425 
b
,
off
,
blk
[
INTS_PER_BLOCK
],
\x9ad\x9c
,
i
;

426
d_\x9aode
 *
p
;

427
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

429
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

430
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

431
	`g\x91_block
(
b
,
\x9aode
);

432
p
 = &
\x9aode
[
off
];

433
p
->
i_size
 +\xf0
by\x8bs
;

434
p
->
i_modtime
 =
cur_time
;

435 
i
 = 0; i <
NR_DZONE_NUM
; i++)

436 i\xe0(
p
->
i_z\xd\xab
[
i
] == 0) {

437
p
->
i_z\xd\xab
[
i
] =
z
;

438
	`put_block
(
b
,
\x9aode
);

441
	`put_block
(
b
,
\x9aode
);

444 i\xe0(
p
->
i_z\xd\xab
[
NR_DZONE_NUM
] == 0)

445
p
->
i_z\xd\xab
[
NR_DZONE_NUM
] =
	`\x\xabloc_z\xd\xab
();

446
\x9ad\x9c
 =
p
->
i_z\xd\xab
[
NR_DZONE_NUM
];

447
	`put_block
(
b
,
\x9aode
);

448
b
 =
\x9ad\x9c
 <<
z\xd\xab_shi\xe1
;

449
	`g\x91_block
(
b
,
blk
);

450 
i
 = 0; i <
INTS_PER_BLOCK
; i++)

451 i\xe0(
blk
[
i
] == 0) {

452
blk
[
i
] =
z
;

453
	`put_block
(
b
,
blk
);

456
	`\xb3x\x99
("File has grown beyond single indirect");

457
	}
}

459
	$\x9a\xfc_l\x9ak
(
n
) n;

462 
b
,
off
;

463
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

465
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

466
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

467
	`g\x91_block
(
b
,
\x9aode
);

468
\x9aode
[
off
].
i_ƚks
++;

469
	`put_block
(
b
,
\x9aode
);

470
	}
}

472
	$\x9a\xfc_size
(
n
,
cou\xc1
) n;

473 
cou\xc1
;

476 
b
,
off
;

477
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

479
b
 = ((
n
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

480
off
 = (
n
 - 1\xe8%
INODES_PER_BLOCK
;

481
	`g\x91_block
(
b
,
\x9aode
);

482
\x9aode
[
off
].
i_size
 +\xf0
cou\xc1
;

483
	`put_block
(
b
,
\x9aode
);

484
	}
}

490 
	$\x\xabloc_\x9aode
(
mode
,
u\xa4id
,
g\xbdid
)

491 
mode
,
u\xa4id
,
g\xbdid
;

493 
num
,
b
,
off
;

494
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

496
num
 =
\xc3xt_\x9aode
++;

497 i\xe0(
num
 >\xf0
Ěodes
)

498
	`\xb3x\x99
("File system does\x82ot have\x83nough inodes");

499
b
 = ((
num
 - 1\xe8/
INODES_PER_BLOCK
\xe8+
\x9aode_off\xa3t
;

500
off
 = (
num
 - 1\xe8%
INODES_PER_BLOCK
;

501
	`g\x91_block
(
b
,
\x9aode
);

502
\x9aode
[
off
].
i_mode
 =
mode
;

503
\x9aode
[
off
].
i_uid
 =
u\xa4id
;

504
\x9aode
[
off
].
i_gid
 =
g\xbdid
;

505
	`put_block
(
b
,
\x9aode
);

508
	`\x9a\xa3\xb9_b\x99
(
INODE_MAP
,
num
, 1);

509  (
num
);

510
	}
}

512 
	$\x\xabloc_z\xd\xab
() {

515 
b
,
z
,
i
;

517
z
 =
\xc3xt_z\xdae
++;

518
b
 =
z
 <<
z\xd\xab_shi\xe1
;

520 i\xe0((
b
 +
z\xd\xab_size
\xe8>
\xc4blocks
)

521
	`\xb3x\x99
("File system\x82ot big\x83nough for\x87ll\x81he files");

522 
i
 = 0; i <
z\xd\xab_size
; i++)

523
	`put_block
(
b
 +
i
,
z\x94o
);

524
	`\x9a\xa3\xb9_b\x99
(
ZONE_MAP
,
z
 -
zoff
, 1);

525  (
z
);

526
	}
}

528
	$\x9a\xa3\xb9_b\x99
(
block
,
b\x99
,
cou\xc1
) block, bit, count;

531 
w
,
s
,
i
;

532 
buf
[
BLOCK_SIZE
];

534
	`g\x91_block
(
block
,
buf
);

535 
i
 =
b\x99
; i < b\x99 +
cou\xc1
; i++) {

536
w
 =
i
 / 8;

537
s
 =
i
 % 8;

538
buf
[
w
] |\xf0(1 <<
s
);

540
	`put_block
(
block
,
buf
);

541
	}
}

547 
	$mode_c\xda
(
p
)

548 *
p
;

551 
o1
,
o2
,
o3
,
mode
;

552 
c1
,
c2
,
c3
;

554
c1
 = *
p
++;

555
c2
 = *
p
++;

556
c3
 = *
p
++;

557
o1
 = *
p
++ - '0';

558
o2
 = *
p
++ - '0';

559
o3
 = *
p
++ - '0';

560
mode
 = (
o1
 << 6\xe8| (
o2
 << 3\xe8|
o3
;

561 i\xe0(
c1
 == 'd')

562
mode
 +\xf0
I_DIRECTORY
;

563 i\xe0(
c1
 == 'b')

564
mode
 +\xf0
I_BLOCK_SPECIAL
;

565 i\xe0(
c1
 == 'c')

566
mode
 +\xf0
I_CHAR_SPECIAL
;

567 i\xe0(
c1
 == '-')

568
mode
 +\xf0
I_REGULAR
;

569 i\xe0(
c2
 == 'u')

570
mode
 +\xf0
I_SET_UID_BIT
;

571 i\xe0(
c3
 == 'g')

572
mode
 +\xf0
I_SET_GID_BIT
;

573  (
mode
);

574
	}
}

576
	$g\x91l\x9\xab
(
l\x9\xab
,
\xb7r\xa3
\xe8*\xb7r\xa3[
MAX_TOKENS
];

577 
l\x9\xab
[
LINE_LEN
];

580 
k
;

581 
c
, *
p
;

583 
k
 = 0; k <
MAX_TOKEN
; k++)

584
\xb7r\xa3
[
k
] = 0;

585 
k
 = 0; k <
LINE_LEN
; k++)

586
l\x9\xab
[
k
] = 0;

587
k
 = 0;

588
\xb7r\xa3
[0] = 0;

589
p
 =
l\x9\xab
;

591 *
p
 =
	`fg\x91c
(
\xb4\xd9o
);

592 i\xe0(*
p
 == '\n')

593
l\xf9
++;

594 i\xe0(*
p
 <= 0)

595
	`\xb3x\x99
("Unexpected\x83nd-of-file\n");

596 i\xe0(*
p
 == ' ' || *p == '\t')

597 *
p
 = 0;

598 i\xe0(*
p
 == '\n') {

599 *
p
++ = 0;

600 *
p
 = '\n';

603
p
++;

606
p
 =
l\x9\xab
;

607
ϡp
 =
l\x9\xab
;

609
c
 = *
p
++;

610 i\xe0(
c
 == '\n')

612 i\xe0(
c
 == 0)

614
\xb7r\xa3
[
k
++] =
p
 - 1;

616
c
 = *
p
++;

617 } 
c
 != 0 && c != '\n');

619
	}
}

625 
	$f\x9\x93_time
(
f
)

626 
f
;

628 #ifde\xe0
UNIX


629 
\xa1\xa9

\xa1\xa9buf
;

630
	`f\xa1\xa9
(
f
, &
\xa1\xa9buf
);

631  (
\xa1\xa9buf
.
\xa1_mtime
);

635
	}
}

637
	$\xb3x\x99
(
s
) *s;

639 *
s0
;

641
s0
 =
s
;

642 *
s0
 != 0)

643
s0
++;

644
	`wr\x99e
(2, "Error: ", 7);

645
	`wr\x99e
(2,
s
,
s0
 - s);

646
	`wr\x99e
(2, "\n", 1);

647
	`\xb4\x9\xa9f
("L\x9a\x90%d be\x9ag\x85ro\xfbs\xa3d wh\x92\x83\xbc\xdc d\x91e\xf9ed.\n",
l\xf9
);

648
	`\xe6ush
();

649
	`ex\x99
(2);

650
	}
}

652
	$c\xddy
(
\xe4om
,
to
,
cou\xc1
) *from, *to;

653 
cou\xc1
;

655 
cou\xc1
--)

656 *
to
++ = *
\xe4om
++;

657
	}
}

659
	$\xb4\x9\xa9_fs
() {

661 
i
,
j
,
k
;

662
d_\x9aode

\x9aode
[
INODES_PER_BLOCK
];

663 
ibuf
[
INTS_PER_BLOCK
],
b
;

665 
\x9aum
;

666 
\xc7me
[14];

667 }
d\x9c
[
NR_DIR_ENTRIES
];

669
	`g\x91_block
(1,
ibuf
);

670
	`\xb4\x9\xa9f
("\nSuperblock: ");

671 
i
 = 0; i < 8; i++)

672
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

673
	`g\x91_block
(2,
ibuf
);

674
	`\xb4\x9\xa9f
("\nInode map: ");

675 
i
 = 0; i < 9; i++)

676
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

677
	`g\x91_block
(3,
ibuf
);

678
	`\xb4\x9\xa9f
("\nZone map: ");

679 
i
 = 0; i < 9; i++)

680
	`\xb4\x9\xa9f
("%06\xd8",
ibuf
[
i
]);

681
	`\xb4\x9\xa9f
("\n");

682 
b
 = 4; b < 8; b++) {

683
	`g\x91_block
(
b
,
\x9aode
);

684 
i
 = 0; i <
INODES_PER_BLOCK
; i++) {

685
k
 =
INODES_PER_BLOCK
 * (
b
 - 4\xe8+
i
 + 1;

686 i\xe0(
k
 >
Ěodes
)

688 i\xe0(
\x9aode
[
i
].
i_mode
 != 0) {

689
	`\xb4\x9\xa9f
("Inod\x90%2d: mode=",
k
,
\x9aode
[
i
].
i_mode
);

690
	`\xb4\x9\xa9f
(
mode_fmt
,
\x9aode
[
i
].
i_mode
);

691
	`\xb4\x9\xa9f
(" uid=%2d gid=%2d size=",
\x9aode
[
i
].
i_uid
, inode[i].
i_gid
);

692
	`\xb4\x9\xa9f
(
size_fmt
,
\x9aode
[
i
].
i_size
);

693
	`\xb4\x9\xa9f
(" z\xdae[0]=%d\n",
\x9aode
[
i
].
i_z\xd\xab
[0]);

696 i\xe0((
\x9aode
[
i
].
i_mode
 &
I_TYPE
\xe8=\xf0
I_DIRECTORY
) {

698
	`g\x91_block
(
\x9aode
[
i
].
i_z\xd\xab
[0],
d\x9c
);

699 
j
 = 0; j <
NR_DIR_ENTRIES
; j++)

700 i\xe0(
d\x9c
[
j
].
\x9aum
)

701
	`\xb4\x9\xa9f
("\tInod\x90%2d: %s\n",
d\x9c
[
j
].
\x9aum
, d\x9c[j].
\xc7me
);

706
	`\xb4\x9\xa9f
("%d inode\xa0u\xa3d. %d z\xdae\xa0u\xa3d.\n",
\xc3xt_\x9aode
 - 1,
\xc3xt_z\xdae
);

707
	}
}

709 
	$\xbbad_\x\xafd_\xa3t
(
n
)

710 
n
;

716 
w
,
s
,
mask
,
r
;

718
w
 =
n
 / 8;

719
s
 =
n
 % 8;

720
mask
 = 1 <<
s
;

721
r
 = (
um\xad
[
w
] &
mask
 ? 1 : 0);

722
um\xad
[
w
] |\xf0
mask
;

723  (
r
);

724
	}
}

730 #ifde\xe0
DOS


746 
	#PH_SECTSIZE
 512

	)

748 *
	gd\x94\xb9ab
[14] = {"no\x83rror",

763 
	#CACHE_SIZE
 20

	)

765 
	s\xffche
 {

766 
	mblockbuf
[
BLOCK_SIZE
];

767 
	mblocknum
;

768 
	md\x9\xf9y
;

769 
	mu\xa3\x\xe7t
;

770 }
	g\xffche
[
CACHE_SIZE
];

772
	$\xa5ec\x9\xe6
(
\xa1r\x9ag
) *string;

775 i\xe0(
\xa1r\x9ag
[1] == ':' && string[2] == 0) {

777
disk
 = (
\xa1r\x9ag
[0] & ~32) - 'A';

778 i\xe0(
disk
 > 1 && !
ov\x94ride
)

779
	`\xb3x\x99
("Bad drive specifier for special");

781
f\x9\x93
 = 1;

782 i\xe0((
fd
 =
	`\xfc\x97t
(
\xa1r\x9ag
,
BWRITE
)) == 0)

783
	`\xb3x\x99
("Can't open special file");

785
	}
}

787
	$g\x91_block
(
n
,
buf
) n;

788 
buf
[
BLOCK_SIZE
];

791 
\xffche
 *
bp
, *
\xe5
;

794 i\xe0(
	`\xbbad_\x\xafd_\xa3t
(
n
) == 0) {

795
	`c\xddy
(
z\x94o
,
buf
,
BLOCK_SIZE
);

800
\xe5
 = 0;

801 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++) {

802 i\xe0(
bp
->
blocknum
 =\xf0
n
) {

803
	`c\xddy
(
bp
,
buf
,
BLOCK_SIZE
);

804
bp
->
u\xa3\x\xe7t
++;

808 i\xe0(
bp
->
d\x9\xf9y
 == 0)

809 i\xe0(
\xe5
) {

810 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

811
\xe5
 =
bp
;

813
\xe5
 =
bp
;

817 i\xe0(!
\xe5
) {

819 
bp
 =
\xffche
,
\xe5
 = cache; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

820 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

821
\xe5
 =
bp
;

822
	`mx_wr\x99e
(
\xe5
->
blocknum
, fp);

825
	`mx_\xbbad
(
n
,
\xe5
);

826
\xe5
->
d\x9\xf9y
 = 0;

827
\xe5
->
u\xa3\x\xe7t
 = 0;

828
\xe5
->
blocknum
 =
n
;

829
	`c\xddy
(
\xe5
,
buf
,
BLOCK_SIZE
);

830
	}
}

832
	$put_block
(
n
,
buf
) n;

833 
buf
[
BLOCK_SIZE
];

836 
\xffche
 *
\xe5
, *
bp
;

838
	`\xbbad_\x\xafd_\xa3t
(
n
);

841
\xe5
 = 0;

842 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++) {

843 i\xe0(
bp
->
blocknum
 =\xf0
n
) {

844
	`c\xddy
(
buf
,
bp
,
BLOCK_SIZE
);

845
bp
->
d\x9\xf9y
 = 1;

849 i\xe0(
bp
->
d\x9\xf9y
 == 0)

850 i\xe0(
\xe5
) {

851 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

852
\xe5
 =
bp
;

854
\xe5
 =
bp
;

858 i\xe0(!
\xe5
) {

860 
bp
 =
\xffche
,
\xe5
 = cache; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

861 i\xe0(
\xe5
->
u\xa3\x\xe7t
 >
bp
->usecnt)

862
\xe5
 =
bp
;

863
	`mx_wr\x99e
(
\xe5
->
blocknum
, fp);

866
\xe5
->
d\x9\xf9y
 = 1;

867
\xe5
->
u\xa3\x\xe7t
 = 1;

868
\xe5
->
blocknum
 =
n
;

869
	`c\xddy
(
buf
,
\xe5
,
BLOCK_SIZE
);

870
	}
}

872
	$\xffche_\x9a\x99
() {

873 
\xffche
 *
bp
;

874 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

875
bp
->
blocknum
 = -1;

876
	}
}

878
	$\xe6ush
() {

880 
\xffche
 *
bp
;

882 
bp
 =
\xffche
; b\xb0< &\xffche[
CACHE_SIZE
]; bp++)

883 i\xe0(
bp
->
d\x9\xf9y
) {

884
	`mx_wr\x99e
(
bp
->
blocknum
, bp);

885
bp
->
d\x9\xf9y
 = 0;

887
	}
}

893 
	#MAX_RETRIES
 5

	)

895
	$mx_\xbbad
(
block\xc4
,
buf
) blocknr;

896 
buf
[
BLOCK_SIZE
];

900 (*
bp
)[
PH_SECTSIZE
];

901 
\xa3\xf9num
,
\xbb\x8c\x9bs
,
\x94r
;

903 i\xe0(
f\x9\x93
) {

904
	`l\xa3ek
(
fd
, ()
block\xc4
 *
BLOCK_SIZE
, 0);

905 i\xe0(
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE)

906
	`\xb3x\x99
("mx_read:\x83rror\x84eading file");

908
\xa3\xf9num
 =
block\xc4
 * (
BLOCK_SIZE
 /
PH_SECTSIZE
);

909 
bp
 =
buf
; b\xb0< &buf[
BLOCK_SIZE
]; bp++) {

910
\xbb\x8c\x9bs
 =
MAX_RETRIES
;

912
\x94r
 =
	`ab\xa4\x97d
(
disk
,
\xa3\xf9num
,
bp
);

913 
\x94r
 && --
\xbb\x8c\x9bs
);

915 i\xe0(
\xbb\x8c\x9bs
) {

916
\xa3\xf9num
++;

918
	`dex\x99
("mx_\xbbad",
\xa3\xf9num
,
\x94r
);

922
	}
}

924
	$mx_wr\x99e
(
block\xc4
,
buf
) blocknr;

925 
buf
[
BLOCK_SIZE
];

928 (*
bp
)[
PH_SECTSIZE
];

929 
\xbb\x8c\x9bs
,
\xa3\xf9num
,
\x94r
;

931 i\xe0(
f\x9\x93
) {

932
	`l\xa3ek
(
fd
,
block\xc4
 *
BLOCK_SIZE
, 0);

933 i\xe0(
	`wr\x99e
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE) {

934
	`\xb3x\x99
("mx_write:\x83rror writing file");

937
\xa3\xf9num
 =
block\xc4
 * (
BLOCK_SIZE
 /
PH_SECTSIZE
);

938 
bp
 =
buf
; b\xb0< &buf[
BLOCK_SIZE
]; bp++) {

939
\xbb\x8c\x9bs
 =
MAX_RETRIES
;

941
\x94r
 =
	`abswr\x99e
(
disk
,
\xa3\xf9num
,
bp
);

942 } 
\x94r
 && --
\xbb\x8c\x9bs
);

944 i\xe0(
\xbb\x8c\x9bs
) {

945
\xa3\xf9num
++;

947
	`dex\x99
("mx_wr\x99e",
\xa3\xf9num
,
\x94r
);

951
	}
}

953
	$dex\x99
(
s
,
\xa3\xf9num
,
\x94r
) sectnum,\x83rr;

954 *
s
;

956
	`\xb4\x9\xa9f
("E\xbc\xdc: %s, se\xf9\xdc: %d, code: %d, m\x97n\x9ag: %s\n",
s
,
\xa3\xf9num
,
\x94r
,
d\x94\xb9ab
[err]);

957
	`ex\x99
(2);

958
	}
}

965 #ifde\xe0
UNIX


967
	$\xa5ec\x9\xe6
(
\xa1r\x9ag
) *string;

969
fd
 =
	`\xfc\x97t
(
\xa1r\x9ag
, 0777);

970
	`\x\xe3o\xa3
(
fd
);

971
fd
 =
	`ݒ
(
\xa1r\x9ag
, 2);

972 i\xe0(
fd
 < 0)

973
	`\xb3x\x99
("Can't open special file");

974
	}
}

976
	$g\x91_block
(
n
,
buf
) n;

977 
buf
[
BLOCK_SIZE
];

981 
k
;

984 i\xe0(
	`\xbbad_\x\xafd_\xa3t
(
n
) == 0) {

985
	`c\xddy
(
z\x94o
,
buf
,
BLOCK_SIZE
);

989
	`l\xa3ek
(
fd
, ()
n
 *
BLOCK_SIZE
, 0);

990
k
 =
	`\xbbad
(
fd
,
buf
,
BLOCK_SIZE
);

991 i\xe0(
k
 !\xf0
BLOCK_SIZE
) {

992
	`\xb3x\x99
("get_block couldn't\x84ead");

994
	}
}

996
	$put_block
(
n
,
buf
) n;

997 
buf
[
BLOCK_SIZE
];

1001
	`\xbbad_\x\xafd_\xa3t
(
n
);

1003 i\xe0(
	`l\xa3ek
(
fd
, ()
n
 *
BLOCK_SIZE
, 0) < 0L) {

1004
	`\xb3x\x99
("put_block couldn't seek");

1006 i\xe0(
	`wr\x99e
(
fd
,
buf
,
BLOCK_SIZE
) != BLOCK_SIZE) {

1007
	`\xb3x\x99
("put_block couldn't write");

1009
	}
}

1013
	$\xe6ush
(\xe8{ ;
	}
}

1015
	$\xffche_\x9a\x99
(\xe8{ ;
	}
}

	@tools/r.cpp

4 
	~<f\x\xe7\x8e.h
>

5 
	~<\xa1dio.h
>

6 
	~<\xa1dlib.h
>

7 
	~<uni\xa1d.h
>

9 
	gaddr
;

10 
	gsv\x\xab
;

11 
	gc
;

13 
hex\x9a
();

14 
hex
(
x
);

15 
w\xbe
(
fd
, 
add\xbbss
);

17 
	$ma\x9a
(
\xacgc
, *
\xacgv
[]) {

18 
fd
,
\xf9
;

20 i\xe0(
\xacgc
 == 2)

21
fd
 =
	`ݒ
(
\xacgv
[1], 0);

23
fd
 =
	`ݒ
("core.88", 0);

24 i\xe0(
fd
 < 0) {

25
	`\xb3\xbc\xdc
("can't open core file");

26
	`ex\x99
();

29
addr
 =
	`hex\x9a
();

30
addr
 =\x87ddr & ~0xF;

31
\xf9
 = 0;

32 i\xe0(
c
 == ',')

33
\xf9
 =
	`hex\x9a
();

35
	`w\xbe
(
fd
,
addr
);

36
addr
 += 16;

37 } --
\xf9
 > 0);

39
	}
}

40 
	$hex\x9a
() {

42 
n
 = 0;

43 
dig\x99s
 = 0;

46
c
 =
	`g\x91ch\xac
();

47 i\xe0(
dig\x99s
 =\xf00 &&
c
 == '\n')

48  (
addr
);

49 i\xe0(
dig\x99s
 =\xf00 &&
c
 == -1)

50
	`ex\x99
();

51
dig\x99s
++;

52 i\xe0(
c
 >= '0' && c <= '9') {

53
n
 = (\xc0<< 4\xe8+ (
c
 - '0');

56 i\xe0(
c
 >= 'a' && c <= 'f') {

57
n
 = (\xc0<< 4\xe8+ (10 +
c
 - 'a');

60 i\xe0(
c
 >= 'A' && c <= 'F') {

61
n
 = (\xc0<< 4\xe8+ (10 +
c
 - 'A');

64  (
n
);

66
	}
}

67 
	$hex
(
x
) {

69 
i
,
k
;

70 
c1
;

72 
i
 = 0; i < 4; i++) {

73
k
 = (
x
 >> (12 - 4 *
i
)) & 017;

74
c1
 = (
k
 <= 9 ? k + 060 : k - 10 + 'A');

75
	`\xb4\x9\xa9f
("%c",
c1
);

77
	`\xb4\x9\xa9f
(" ");

78
	}
}

80 
	$w\xbe
(
fd
, 
add\xbbss
) {

81 
i
;

82
	`\xb4\x9\xa9f
("%5lx: ",
add\xbbss
);

83 i\xe0(
	`l\xa3ek
(
fd
,
add\xbbss
, 0) !=\x87ddress) {

84
	`\xb3\xbc\xdc
("Can't seek");

85
	`ex\x99
();

87 
i
 = 0; i < 8; i++) {

88
	`\xbbad
(
fd
, &
sv\x\xab
, 2);

89
	`hex
(
sv\x\xab
);

91
	`\xb4\x9\xa9f
("\n");

92
	}
}

	@vmm.cpp

1 
	~"vmm.h
"

2 
	~"pmm.h
"

3 
	~"c\xdas\xd\x93.h
"

4 
	~<\xa1ddef.h
>

5 
	~<\xa1d\x9\xa9.h
>

8 
pde_t
*
	gk\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
 =
NULL
;

9 
u\x9a\x8d\x8c_t

	gk\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
 = 0;

19 
	$vmm_\x9a\x99
(
u\x9a\x8d\x8c_t

k\x94\xc3l_phys_\xa1\xa\xf9
, u\x9a\x8d\x8c_\x88
k\x94\xc3l_phys_\x92d
,

20
u\x9a\x8d\x8c_t

k\x94\xc3l_v\x9\xf9_\xa1\xa\xf9
, uintptr_t ) {

22
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
 =
	`pmm_\x\xabloc_\xb7ge
();

23 i\xe0(
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
 == 0) {

24
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM E\xbc\xdc: Fa\x9eed\x81خlo\xff\x8b\x85ag\x90f܅ag\x90d\x9ce\xf9\xdcy!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

37
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
 = (
pde_t
*)
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
;

41 
i
 = 0; i <
PAGE_DIR_ENTRIES
; ++i) {

42
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
[
i
] = 0;

47
u\x9a\x8d\x8c_t

phys_\xa1\xa\xf9_\x\xabig\xc3d
 =
	`\x\xabign_down
(
k\x94\xc3l_phys_\xa1\xa\xf9
,
PAGE_SIZE_4KB
);

48
u\x9a\x8d\x8c_t

phys_\x92d_\x\xabig\xc3d
 =
	`\x\xabign_up
(
k\x94\xc3l_phys_\x92d
,
PAGE_SIZE_4KB
);

49
u\x9a\x8d\x8c_t

v\x9\xf9_\xa1\xa\xf9_\x\xabig\xc3d
 =
	`\x\xabign_down
(
k\x94\xc3l_v\x9\xf9_\xa1\xa\xf9
,
PAGE_SIZE_4KB
);

52
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM: M\xadp\x9ag K\x94\xc3\xc8\xe4om Phy\xa00x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
phys_\xa1\xa\xf9_\x\xabig\xc3d
, DEFAULT_COLOR);

53
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("\x81\xd8V\x9c\x880x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
v\x9\xf9_\xa1\xa\xf9_\x\xabig\xc3d
, DEFAULT_COLOR);

54
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(" (Size: ",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_dec
((
phys_\x92d_\x\xabig\xc3d
 -
phys_\xa1\xa\xf9_\x\xabig\xc3d
)/(1024), DEFAULT_COLOR); console_write_string(" KB)\n", DEFAULT_COLOR);

56 
u\x9a\x8d\x8c_t

\xb7ddr
 =
phys_\xa1\xa\xf9_\x\xabig\xc3d
,
vaddr
 =
v\x9\xf9_\xa1\xa\xf9_\x\xabig\xc3d
;

57
\xb7ddr
 <
phys_\x92d_\x\xabig\xc3d
;

58
\xb7ddr
 +\xf0
PAGE_SIZE_4KB
,
vaddr
 += PAGE_SIZE_4KB) {

59 i\xe0(!
	`vmm_m\xad_\xb7ge
(
vaddr
,
\xb7ddr
,
PTE_PRESENT
 |
PTE_READ_WRITE
)) {

60
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM E\xbc\xdc: Fa\x9eed\x81\xd8m\xad k\x94\xc3ȷg\x90VA:0x",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

61
	`c\xdas\xd\x93_wr\x99e_hex
(
vaddr
,
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

62
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
(" PA:0x",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

63
	`c\xdas\xd\x93_wr\x99e_hex
(
\xb7ddr
,
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

64
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n',
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

76
u\x9a\x8d\x8c_t

vga_phys_addr
 = 0xB8000;

77
u\x9a\x8d\x8c_t

vga_v\x9\xf9_addr
 = 0xB8000;

82 i\xe0(!
	`vmm_m\xad_\xb7ge
(
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
, k\x94\xc3l_\xb7ge_d\x9ce\xf9\xdcy_phys,
PTE_PRESENT
 |
PTE_READ_WRITE
)) {

83
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM E\xbc\xdc: Fa\x9eed\x81\xd8m\xad\x85ag\x90d\x9ce\xf9\xdcy it\xa3lf!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

88
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM: M\xadp\x9ag VGA buf\xe3\xb8Phy\xa00xB8000\x81\xd8V\x9c\x880x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
vga_v\x9\xf9_addr
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

89 i\xe0(!
	`vmm_m\xad_\xb7ge
(
vga_v\x9\xf9_addr
,
vga_phys_addr
,
PTE_PRESENT
 |
PTE_READ_WRITE
)) {

90
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM E\xbc\xdc: Fa\x9eed\x81\xd8m\xad VGA buf\xe3r!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

101
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM In\x99\x9flized. Pag\x90D\x9ce\xf9\xdcy @ Phy\xa00x",
DEFAULT_COLOR
);
	`c\xdas\xd\x93_wr\x99e_hex
(
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
, DEFAULT_COLOR);
	`c\xdas\xd\x93_wr\x99e_ch\xac
('\n', DEFAULT_COLOR);

102
	}
}

104
\xb1e_t
*
	$vmm_g\x91_\xb1e
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
,
bo\xde

\xfc\x97\x8b_if_miss\x9ag
) {

105 i\xe0(!
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
\xe8
NULL
;

107
u\x9a\x8d\x8c_t

\xb7ge_d\x9c_\x9adex
 = (
v\x9\xf9u\x\xab_addr
 >> 22);

108
u\x9a\x8d\x8c_t

\xb7ge_\x8fb\xcb_\x9adex
 = (
v\x9\xf9u\x\xab_addr
 >> 12) & 0x3FF;

110
pde_t

pde
 =
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
[
\xb7ge_d\x9c_\x9adex
];

112 i\xe0(!(
pde
 &
PTE_PRESENT
)) {

113 i\xe0(
\xfc\x97\x8b_if_miss\x9ag
) {

114
u\x9a\x8d\x8c_t

\xc3w_\xb7ge_\x8fb\xcb_phys
 =
	`pmm_\x\xabloc_\xb7ge
();

115 i\xe0(
\xc3w_\xb7ge_\x8fb\xcb_phys
 == 0) {

116
	`c\xdas\xd\x93_wr\x99e_\xa1r\x9ag
("VMM: Fa\x9eed\x81خlo\xff\x8b\x85ag\x90f܅ag\x90\x8fb\xcb!\n",
	`vga_\x92\x8cy_c\xde\xdc
(
VGA_COLOR_RED
,
VGA_COLOR_BLACK
));

117 
NULL
;

120
\xb1e_t
*
\xc3w_\xb7ge_\x8fb\xcb_v\x9ct
 = (\xb1e_t*)
\xc3w_\xb7ge_\x8fb\xcb_phys
;

128 
i
 = 0; i <
PAGE_TABLE_ENTRIES
; ++i) {

129
\xc3w_\xb7ge_\x8fb\xcb_v\x9ct
[
i
] = 0;

132
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
[
\xb7ge_d\x9c_\x9adex
] =
\xc3w_\xb7ge_\x8fb\xcb_phys
 |
PTE_PRESENT
 |
PTE_READ_WRITE
 |
PTE_USER
;

133
pde
 =
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy
[
\xb7ge_d\x9c_\x9adex
];

135 
NULL
;

144
\xb1e_t
*
\xb7ge_\x8fb\xcb_v\x9ct
 = (\xb1e_t*)
	`\xb1e_g\x91_addr
(
pde
);

145  &
\xb7ge_\x8fb\xcb_v\x9ct
[
\xb7ge_\x8fb\xcb_\x9adex
];

146
	}
}

148
bo\xde

	$vmm_m\xad_\xb7ge
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
, u\x9a\x8d\x8c_\x88
physi\xf\xe6_addr
,
u\x9\xa932_t

\xe6ags
) {

150
v\x9\xf9u\x\xab_addr
 =
	`\x\xabign_down
(v\x9ctu\xae_addr,
PAGE_SIZE_4KB
);

151
physi\xf\xe6_addr
 =
	`\x\xabign_down
\xd5hysi\xffl_addr,
PAGE_SIZE_4KB
);

153
\xb1e_t
*
\xb1e
 =
	`vmm_g\x91_\xb1e
(
v\x9\xf9u\x\xab_addr
,
\x8cue
 );

154 i\xe0(!
\xb1e
) {

155 
\xe7l\xa3
;

158 i\xe0(*
\xb1e
 &
PTE_PRESENT
) {

164 *
\xb1e
 =
physi\xf\xe6_addr
 |
\xe6ags
;

165 
\x8cue
;

166
	}
}

168 
	$vmm_unm\xad_\xb7ge
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
) {

169
\xb1e_t
*
\xb1e
 =
	`vmm_g\x91_\xb1e
(
v\x9\xf9u\x\xab_addr
,
\xe7l\xa3
 );

170 i\xe0(
\xb1e
 && (*\xb1\x90&
PTE_PRESENT
)) {

173 *
\xb1e
 = 0;

179
	}
}

181 
	$vmm_l\xdfd_\xb7ge_d\x9\xfb\xf9\xdcy
(
u\x9a\x8d\x8c_t

\xb7ge_d\x9c_phys_addr
) {

182
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
 =
\xb7ge_d\x9c_phys_addr
;

183
asm
 vީ\x9ee("mov %0, %%\xfc3" :: "r"(
\xb7ge_d\x9c_phys_addr
) : "memory");

184
	}
}

186 
	$vmm_\x92ab\xcb_\xb7g\x9ag
() {

187
asm
 volatile(

193
	}
}

195
u\x9a\x8d\x8c_t

	$vmm_g\x91_\xb7ge_d\x9\xfb\xf9\xdcy_physi\xf\xe6_addr
() {

196 
k\x94\xc3l_\xb7ge_d\x9\xfb\xf9\xdcy_phys
;

197
	}
}

	@vmm.h

1 #i\xe2de\xe0
VMM_H


2 
	#VMM_H


	)

4 
	~<\xa1d\x9\xa9.h
>

5 
	~<\xa1ddef.h
>

8 
	#PTE_PRESENT
 0x01

9 
	#PTE_READ_WRITE
 0x02

10 
	#PTE_USER
 0x04

11 
	#PTE_WRITE_THROUGH
 0x08

12 
	#PTE_CACHE_DISABLE
 0x10

13 
	#PTE_ACCESSED
 0x20

14 
	#PTE_DIRTY
 0x40

15 
	#PTE_PAT
 0x80

16 
	#PTE_GLOBAL
 0x100

17

	)

18 
	#PDE_PAGE_SIZE
 0x80

19

	)

22 
u\x9\xa932_t

	t\xb1e_t
;

25 
u\x9\xa932_t

	tpde_t
;

29 
	#PAGE_TABLE_ENTRIES
 1024

	)

30 
	#PAGE_DIR_ENTRIES
 1024

	)

32 
	#PAGE_SIZE_4KB
 0x1000

	)

33 
	#PAGE_SIZE_4MB
 0x400000

	)

39 
	#KERNEL_VIRTUAL_BASE
 0x00000000

	)

42 
\x9al\x9ae

u\x9a\x8d\x8c_t

	$\xb1e_g\x91_addr
(
\xb1e_t

\x92\x8cy
) {

43 
\x92\x8cy
 & ~0xFFF;

44
	}
}

47 
\x9al\x9ae
 
	$\xb1e_\xa3t_addr
(
\xb1e_t
*
\x92\x8cy
,
u\x9a\x8d\x8c_t

addr
) {

48 *
\x92\x8cy
 = (*\x92\x8cy & 0xFFF\xe8| (
addr
 & ~0xFFF);

49
	}
}

52 
\x9al\x9ae
 
	$\xb1e_\xa3t_\xe6ags
(
\xb1e_t
*
\x92\x8cy
,
u\x9\xa932_t

\xe6ags
) {

53 *
\x92\x8cy
 |\xf0
\xe6ags
;

54
	}
}

60 
vmm_\x9a\x99
(
u\x9a\x8d\x8c_t

k\x94\xc3l_phys_\xa1\xa\xf9
, u\x9a\x8d\x8c_\x88
k\x94\xc3l_phys_\x92d
,

61
u\x9a\x8d\x8c_t

k\x94\xc3l_v\x9\xf9_\xa1\xa\xf9
, u\x9a\x8d\x8c_\x88
k\x94\xc3l_v\x9\xf9_\x92d
);

64
bo\xde

vmm_m\xad_\xb7ge
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
, u\x9a\x8d\x8c_\x88
physi\xf\xe6_addr
,
u\x9\xa932_t

\xe6ags
);

67 
vmm_unm\xad_\xb7ge
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
);

71
\xb1e_t
*
vmm_g\x91_\xb1e
(
u\x9a\x8d\x8c_t

v\x9\xf9u\x\xab_addr
,
bo\xde

\xfc\x97\x8b
);

74 
vmm_l\xdfd_\xb7ge_d\x9\xfb\xf9\xdcy
(
u\x9a\x8d\x8c_t

\xb7ge_d\x9c_phys_addr
);

77 
vmm_\x92ab\xcb_\xb7g\x9ag
();

80
u\x9a\x8d\x8c_t

vmm_g\x91_\xb7ge_d\x9\xfb\xf9\xdcy_physi\xf\xe6_addr
();

83 
\x9al\x9ae

u\x9a\x8d\x8c_t

	$\x\xabign_down
(
u\x9a\x8d\x8c_t

addr
,
size_t

\xaeignm\x92t
) {

84 
addr
 & ~(
\xaeignm\x92t
 - 1);

85
	}
}

88 
\x9al\x9ae

u\x9a\x8d\x8c_t

	$\x\xabign_up
(
u\x9a\x8d\x8c_t

addr
,
size_t

\xaeignm\x92t
) {

89  (
addr
 +
\xaeignm\x92t
 - 1) & ~(alignment - 1);

90
	}
}

	@
1
.
0
455
8552
boot.S
commands/ar.cpp
commands/basename.cpp
commands/cal.cpp
commands/cat.cpp
commands/cc.cpp
commands/chmem.cpp
commands/chmod.cpp
commands/chown.cpp
commands/clr.cpp
commands/cmp.cpp
commands/comm.cpp
commands/cp.cpp
commands/date.cpp
commands/dd.cpp
commands/df.cpp
commands/dosread.cpp
commands/echo.cpp
commands/getlf.cpp
commands/grep.cpp
commands/gres.cpp
commands/head.cpp
commands/kill.cpp
commands/libpack.cpp
commands/libupack.cpp
commands/ln.cpp
commands/login.cpp
commands/lpr.cpp
commands/ls.cpp
commands/make.cpp
commands/mined.hpp
commands/mined1.cpp
commands/mined2.cpp
commands/mkdir.cpp
commands/mkfs.cpp
commands/mknod.cpp
commands/mount.cpp
commands/mv.cpp
commands/od.cpp
commands/passwd.cpp
commands/pr.cpp
commands/pwd.cpp
commands/rev.cpp
commands/rm.cpp
commands/rmdir.cpp
commands/roff.cpp
commands/sh1.cpp
commands/sh2.cpp
commands/sh3.cpp
commands/sh4.cpp
commands/sh5.cpp
commands/shar.cpp
commands/size.cpp
commands/sleep.cpp
commands/sort.cpp
commands/split.cpp
commands/stty.cpp
commands/su.cpp
commands/sum.cpp
commands/svcctl.cpp
commands/svcctl.hpp
commands/sync.cpp
commands/tail.cpp
commands/tar.cpp
commands/tee.cpp
commands/time.cpp
commands/touch.cpp
commands/tr.cpp
commands/umount.cpp
commands/uniq.cpp
commands/update.cpp
commands/wc.cpp
commands/x.cpp
common/math/octonion.cpp
common/math/octonion.hpp
common/math/quaternion.cpp
common/math/quaternion.hpp
common/math/sedenion.cpp
common/math/sedenion.hpp
console.cpp
console.h
crypto/kyber.cpp
crypto/kyber.hpp
crypto/kyber_impl/api.h
crypto/kyber_impl/cbd.c
crypto/kyber_impl/cbd.h
crypto/kyber_impl/fips202.c
crypto/kyber_impl/fips202.h
crypto/kyber_impl/indcpa.c
crypto/kyber_impl/indcpa.h
crypto/kyber_impl/kem.c
crypto/kyber_impl/kem.h
crypto/kyber_impl/ntt.c
crypto/kyber_impl/ntt.h
crypto/kyber_impl/params.h
crypto/kyber_impl/poly.c
crypto/kyber_impl/poly.h
crypto/kyber_impl/polyvec.c
crypto/kyber_impl/polyvec.h
crypto/kyber_impl/randombytes.c
crypto/kyber_impl/randombytes.h
crypto/kyber_impl/reduce.c
crypto/kyber_impl/reduce.h
crypto/kyber_impl/symmetric-shake.c
crypto/kyber_impl/symmetric.h
crypto/kyber_impl/verify.c
crypto/kyber_impl/verify.h
crypto/pqcrypto_shared.cpp
fs/buf.hpp
fs/cache.cpp
fs/compat.cpp
fs/compat.hpp
fs/const.hpp
fs/dev.hpp
fs/device.cpp
fs/extent.hpp
fs/file.hpp
fs/filedes.cpp
fs/fproc.hpp
fs/glo.hpp
fs/inode.cpp
fs/inode.hpp
fs/link.cpp
fs/main.cpp
fs/misc.cpp
fs/mount.cpp
fs/open.cpp
fs/param.hpp
fs/path.cpp
fs/pipe.cpp
fs/protect.cpp
fs/putc.cpp
fs/read.cpp
fs/stadir.cpp
fs/super.cpp
fs/super.hpp
fs/table.cpp
fs/time.cpp
fs/type.hpp
fs/utility.cpp
fs/write.cpp
h/callnr.hpp
h/com.hpp
h/const.hpp
h/error.hpp
h/signal.h
h/signal.hpp
h/stat.hpp
h/type.hpp
include/blocksiz.hpp
include/constant_time.hpp
include/ctype.hpp
include/defs.hpp
include/errno.hpp
include/grp.hpp
include/lib.hpp
include/mined.hpp
include/minix/fs/buffer.hpp
include/minix/fs/const.hpp
include/minix/fs/inode.hpp
include/minix/fs_error.hpp
include/minix/io/file_operations.hpp
include/minix/io/file_stream.hpp
include/minix/io/memory_stream.hpp
include/minix/io/standard_streams.hpp
include/minix/io/stdio_compat.hpp
include/minix/io/stream.hpp
include/number_parse.hpp
include/paging.hpp
include/pqcrypto.hpp
include/psd/vm/semantic_memory.hpp
include/pwd.hpp
include/regexp.hpp
include/setjmp.hpp
include/sgtty.hpp
include/sh.hpp
include/shared/number_to_ascii.hpp
include/shared/signal_constants.hpp
include/shared/stat_struct.hpp
include/signal.hpp
include/stat.hpp
include/stdio.hpp
include/vm.hpp
include/xinim/core_types.hpp
kernel.cpp
kernel/at_wini.cpp
kernel/clock.cpp
kernel/const.hpp
kernel/dmp.cpp
kernel/fano_octonion.hpp
kernel/floppy.cpp
kernel/glo.hpp
kernel/idt64.cpp
kernel/klib64.cpp
kernel/klib88.cpp
kernel/lattice_ipc.cpp
kernel/lattice_ipc.hpp
kernel/main.cpp
kernel/memory.cpp
kernel/mpx64.cpp
kernel/mpx88.cpp
kernel/net_driver.cpp
kernel/net_driver.hpp
kernel/octonion.hpp
kernel/octonion_math.hpp
kernel/paging.cpp
kernel/pqcrypto.cpp
kernel/pqcrypto.hpp
kernel/printer.cpp
kernel/proc.cpp
kernel/proc.hpp
kernel/quaternion_spinlock.hpp
kernel/schedule.cpp
kernel/schedule.hpp
kernel/sedenion.hpp
kernel/service.cpp
kernel/service.hpp
kernel/syscall.cpp
kernel/system.cpp
kernel/table.cpp
kernel/tty.cpp
kernel/type.hpp
kernel/wait_graph.cpp
kernel/wait_graph.hpp
kernel/wini.cpp
kernel/wormhole.cpp
kernel/wormhole.hpp
kernel/xt_wini.cpp
lib/abort.cpp
lib/abs.cpp
lib/access.cpp
lib/alarm.cpp
lib/atoi.cpp
lib/atol.cpp
lib/bcopy.cpp
lib/brk.cpp
lib/brk2.cpp
lib/brksize.cpp
lib/c86/prologue.hpp
lib/call.cpp
lib/catchsig.cpp
lib/chdir.cpp
lib/chmod.cpp
lib/chown.cpp
lib/chroot.cpp
lib/cleanup.cpp
lib/close.cpp
lib/creat.cpp
lib/crt0.cpp
lib/crtso.cpp
lib/crypt.cpp
lib/csv.cpp
lib/ctype.cpp
lib/doprintf.cpp
lib/doscanf.cpp
lib/dup.cpp
lib/dup2.cpp
lib/end.cpp
lib/exec.cpp
lib/exit.cpp
lib/fclose.cpp
lib/fflush.cpp
lib/fgets.cpp
lib/fopen.cpp
lib/fork.cpp
lib/fprintf.cpp
lib/fputs.cpp
lib/fread.cpp
lib/freopen.cpp
lib/fseek.cpp
lib/fstat.cpp
lib/ftell.cpp
lib/fwrite.cpp
lib/getc.cpp
lib/getegid.cpp
lib/getenv.cpp
lib/geteuid.cpp
lib/getgid.cpp
lib/getgrent.cpp
lib/getpass.cpp
lib/getpid.cpp
lib/getpwent.cpp
lib/gets.cpp
lib/getuid.cpp
lib/getutil.cpp
lib/head.cpp
lib/index.cpp
lib/io/src/file_operations.cpp
lib/io/src/file_stream.cpp
lib/io/src/memory_stream.cpp
lib/io/src/standard_streams.cpp
lib/io/src/stdio_compat.cpp
lib/ioctl.cpp
lib/isatty.cpp
lib/itoa.cpp
lib/kill.cpp
lib/link.cpp
lib/lseek.cpp
lib/malloc.cpp
lib/message.cpp
lib/minix/crtso.cpp
lib/minix/end.cpp
lib/minix/head.cpp
lib/minix/setjmp.cpp
lib/mknod.cpp
lib/mktemp.cpp
lib/mount.cpp
lib/open.cpp
lib/pause.cpp
lib/perror.cpp
lib/pipe.cpp
lib/printdat.cpp
lib/printk.cpp
lib/prints.cpp
lib/putc.cpp
lib/rand.cpp
lib/read.cpp
lib/regexp.cpp
lib/regsub.cpp
lib/rindex.cpp
lib/safe_alloc.cpp
lib/scanf.cpp
lib/sendrec.cpp
lib/setbuf.cpp
lib/setgid.cpp
lib/setjmp.cpp
lib/setuid.cpp
lib/signal.cpp
lib/sleep.cpp
lib/sprintf.cpp
lib/stat.cpp
lib/stb.cpp
lib/stderr.cpp
lib/stime.cpp
lib/strcat.cpp
lib/strcmp.cpp
lib/strcpy.cpp
lib/strlen.cpp
lib/strncat.cpp
lib/strncmp.cpp
lib/strncpy.cpp
lib/sync.cpp
lib/syscall_x86_64.cpp
lib/syslib.cpp
lib/time.cpp
lib/times.cpp
lib/umask.cpp
lib/umount.cpp
lib/ungetc.cpp
lib/unlink.cpp
lib/utime.cpp
lib/wait.cpp
lib/write.cpp
mm/alloc.cpp
mm/alloc.hpp
mm/break.cpp
mm/const.hpp
mm/exec.cpp
mm/forkexit.cpp
mm/getset.cpp
mm/glo.hpp
mm/main.cpp
mm/mproc.hpp
mm/paging.cpp
mm/param.hpp
mm/putc.cpp
mm/signal.cpp
mm/table.cpp
mm/token.hpp
mm/type.hpp
mm/utility.cpp
mm/vm.cpp
multiboot.h
pmm.cpp
pmm.h
test/t10a.cpp
test/t11a.cpp
test/t11b.cpp
test/t15a.cpp
test/t16a.cpp
test/t16b.cpp
test/test0.cpp
test/test1.cpp
test/test10.cpp
test/test11.cpp
test/test12.cpp
test/test2.cpp
test/test3.cpp
test/test4.cpp
test/test5.cpp
test/test6.cpp
test/test7.cpp
test/test8.cpp
test/test9.cpp
tests/crypto/test_constant_time_equal.cpp
tests/crypto/test_kyber.cpp
tests/crypto/test_shared_secret_failure.cpp
tests/randombytes_stub.c
tests/sodium.h
tests/sodium_stub.cpp
tests/task_stubs.cpp
tests/test_fastpath.cpp
tests/test_fastpath_cache_performance.cpp
tests/test_fastpath_fallback.cpp
tests/test_fastpath_preconditions.cpp
tests/test_hypercomplex.cpp
tests/test_lattice.cpp
tests/test_lattice_blocking.cpp
tests/test_lattice_ipc.cpp
tests/test_lattice_ipv6.cpp
tests/test_lattice_network.cpp
tests/test_lattice_network_encrypted.cpp
tests/test_lattice_send_error.cpp
tests/test_lattice_send_recv.cpp
tests/test_lib.cpp
tests/test_memory_stream.cpp
tests/test_net_driver.cpp
tests/test_net_driver_concurrency.cpp
tests/test_net_driver_drop_newest.cpp
tests/test_net_driver_id.cpp
tests/test_net_driver_ipv6.cpp
tests/test_net_driver_loopback.cpp
tests/test_net_driver_overflow.cpp
tests/test_net_driver_persistent_id.cpp
tests/test_net_driver_reconnect.cpp
tests/test_net_driver_socket_failure.cpp
tests/test_net_driver_tcp.cpp
tests/test_net_driver_unpriv_id.cpp
tests/test_net_two_node.cpp
tests/test_poll_network.cpp
tests/test_scheduler.cpp
tests/test_scheduler_deadlock.cpp
tests/test_scheduler_edge.cpp
tests/test_semantic_region.cpp
tests/test_service_contract.cpp
tests/test_service_manager_dag.cpp
tests/test_service_manager_updates.cpp
tests/test_service_serialization.cpp
tests/test_stream_foundation.cpp
tests/test_streams.cpp
tests/test_svcctl.cpp
tests/test_syscall.cpp
tests/test_wait_graph.cpp
tools/bootblok1.cpp
tools/build.cpp
tools/c86/dos2out.cpp
tools/diskio.cpp
tools/diskio.hpp
tools/fsck.cpp
tools/getcore.cpp
tools/init.cpp
tools/mkfs.cpp
tools/r.cpp
vmm.cpp
vmm.h
