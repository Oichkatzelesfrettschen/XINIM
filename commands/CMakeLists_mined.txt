# Modern MINED Editor CMake Configuration
# This CMakeLists.txt builds the modernized C++23 version of the MINED editor

cmake_minimum_required(VERSION 3.22)

# Set C++23 standard requirement
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Modern MINED Editor Project
project(ModernMined
    VERSION 2.0.0
    DESCRIPTION "Modernized MINED Text Editor using C++23"
    LANGUAGES CXX
)

# Compiler-specific flags for C++23 features
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "12.0")
        message(FATAL_ERROR "GCC version 12.0 or higher is required for C++23 support")
    endif()
    target_compile_options(modern_mined_lib PRIVATE 
        -fcoroutines 
        -fconcepts 
        -fmodules-ts
        -std=c++23
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "16.0")
        message(FATAL_ERROR "Clang version 16.0 or higher is required for C++23 support")
    endif()
    target_compile_options(modern_mined_lib PRIVATE 
        -fcoroutines-ts 
        -fconcepts-ts
        -std=c++2b
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "19.34")
        message(FATAL_ERROR "MSVC version 19.34 or higher is required for C++23 support")
    endif()
    target_compile_options(modern_mined_lib PRIVATE 
        /std:c++latest
        /await:strict
    )
endif()

# Build type configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG -fsanitize=address -fsanitize=undefined")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=x86-64-v1 -mtune=generic")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG")

# Enable SIMD optimizations
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-mavx2" COMPILER_SUPPORTS_AVX2)
if(COMPILER_SUPPORTS_AVX2)
    add_compile_definitions(HAVE_AVX2)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
endif()

# Source files for the modern MINED library
set(MODERN_MINED_SOURCES
    modern_mined.hpp
    modern_mined_impl.cpp
    modern_mined_editor.hpp
    modern_mined_editor.cpp
)

# Create the modern MINED library
add_library(modern_mined_lib STATIC ${MODERN_MINED_SOURCES})

# Include directories
target_include_directories(modern_mined_lib PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/../include
)

# Required libraries
find_package(Threads REQUIRED)

# Link libraries
target_link_libraries(modern_mined_lib 
    PUBLIC 
        Threads::Threads
)

# Platform-specific libraries
if(UNIX AND NOT APPLE)
    target_link_libraries(modern_mined_lib PUBLIC rt)
endif()

# Main executable
add_executable(modern_mined modern_mined_main.cpp)
target_link_libraries(modern_mined modern_mined_lib)

# Demo executable
add_executable(modern_mined_demo modern_mined_demo.cpp)
target_link_libraries(modern_mined_demo modern_mined_lib)

# Installation
install(TARGETS modern_mined modern_mined_demo
    RUNTIME DESTINATION bin
)

install(FILES modern_mined.hpp modern_mined_editor.hpp
    DESTINATION include/mined
)

install(TARGETS modern_mined_lib
    ARCHIVE DESTINATION lib
)

# Testing (if enabled)
option(BUILD_TESTS "Build test suite" ON)
if(BUILD_TESTS)
    enable_testing()
    
    # Simple test using the demo
    add_test(NAME modern_mined_demo_test
        COMMAND modern_mined_demo
    )
    
    # Basic functionality test
    add_test(NAME modern_mined_help_test
        COMMAND modern_mined --help
    )
endif()

# Documentation (if Doxygen is available)
find_package(Doxygen QUIET)
if(DOXYGEN_FOUND)
    set(DOXYGEN_INPUT ${CMAKE_CURRENT_SOURCE_DIR})
    set(DOXYGEN_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs)
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../docs/Doxyfile.in 
                   ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    
    add_custom_target(docs
        COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM
    )
endif()

# Summary
message(STATUS "")
message(STATUS "========================================")
message(STATUS "Modern MINED Editor Configuration")
message(STATUS "========================================")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: C++${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "AVX2 Support: ${COMPILER_SUPPORTS_AVX2}")
message(STATUS "Build tests: ${BUILD_TESTS}")
message(STATUS "Doxygen found: ${DOXYGEN_FOUND}")
message(STATUS "========================================")
message(STATUS "")
